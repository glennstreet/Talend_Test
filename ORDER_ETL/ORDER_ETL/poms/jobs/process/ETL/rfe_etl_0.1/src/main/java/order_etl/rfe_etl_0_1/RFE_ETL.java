// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package order_etl.rfe_etl_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")
/**
 * Job: RFE_ETL Purpose: <br>
 * Description: Extract data from RightFind Enterprise (RFE) source tables and load them into staging tables, including dimension and fact tables. <br>
 * @author user@talend.com
 * @version 7.1.1.20181026_1147
 * @status 
 */
public class RFE_ETL implements TalendJob {

	protected static void logIgnoredError(String message, Throwable cause) {
		System.err.println(message);
		if (cause != null) {
			cause.printStackTrace();
		}

	}

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private Object[] multiThreadLockWrite = new Object[0];

	private final static String defaultCharset = java.nio.charset.Charset
			.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

			if (data_warehouse_order_rfe_host != null) {

				this.setProperty("data_warehouse_order_rfe_host",
						data_warehouse_order_rfe_host.toString());

			}

			if (data_warehouse_order_rfe_port != null) {

				this.setProperty("data_warehouse_order_rfe_port",
						data_warehouse_order_rfe_port.toString());

			}

			if (data_warehouse_order_rfe_database != null) {

				this.setProperty("data_warehouse_order_rfe_database",
						data_warehouse_order_rfe_database.toString());

			}

			if (data_warehouse_order_rfe_schema != null) {

				this.setProperty("data_warehouse_order_rfe_schema",
						data_warehouse_order_rfe_schema.toString());

			}

			if (data_warehouse_order_rfe_username != null) {

				this.setProperty("data_warehouse_order_rfe_username",
						data_warehouse_order_rfe_username.toString());

			}

			if (data_warehouse_order_rfe_password != null) {

				this.setProperty("data_warehouse_order_rfe_password",
						data_warehouse_order_rfe_password.toString());

			}

			if (data_warehouse_order_dwos_host != null) {

				this.setProperty("data_warehouse_order_dwos_host",
						data_warehouse_order_dwos_host.toString());

			}

			if (data_warehouse_order_dwos_port != null) {

				this.setProperty("data_warehouse_order_dwos_port",
						data_warehouse_order_dwos_port.toString());

			}

			if (data_warehouse_order_dwos_database != null) {

				this.setProperty("data_warehouse_order_dwos_database",
						data_warehouse_order_dwos_database.toString());

			}

			if (data_warehouse_order_dwos_schema != null) {

				this.setProperty("data_warehouse_order_dwos_schema",
						data_warehouse_order_dwos_schema.toString());

			}

			if (data_warehouse_order_dwos_username != null) {

				this.setProperty("data_warehouse_order_dwos_username",
						data_warehouse_order_dwos_username.toString());

			}

			if (data_warehouse_order_dwos_password != null) {

				this.setProperty("data_warehouse_order_dwos_password",
						data_warehouse_order_dwos_password.toString());

			}

		}

		public String data_warehouse_order_rfe_host;

		public String getData_warehouse_order_rfe_host() {
			return this.data_warehouse_order_rfe_host;
		}

		public String data_warehouse_order_rfe_port;

		public String getData_warehouse_order_rfe_port() {
			return this.data_warehouse_order_rfe_port;
		}

		public String data_warehouse_order_rfe_database;

		public String getData_warehouse_order_rfe_database() {
			return this.data_warehouse_order_rfe_database;
		}

		public String data_warehouse_order_rfe_schema;

		public String getData_warehouse_order_rfe_schema() {
			return this.data_warehouse_order_rfe_schema;
		}

		public String data_warehouse_order_rfe_username;

		public String getData_warehouse_order_rfe_username() {
			return this.data_warehouse_order_rfe_username;
		}

		public String data_warehouse_order_rfe_password;

		public String getData_warehouse_order_rfe_password() {
			return this.data_warehouse_order_rfe_password;
		}

		public String data_warehouse_order_dwos_host;

		public String getData_warehouse_order_dwos_host() {
			return this.data_warehouse_order_dwos_host;
		}

		public String data_warehouse_order_dwos_port;

		public String getData_warehouse_order_dwos_port() {
			return this.data_warehouse_order_dwos_port;
		}

		public String data_warehouse_order_dwos_database;

		public String getData_warehouse_order_dwos_database() {
			return this.data_warehouse_order_dwos_database;
		}

		public String data_warehouse_order_dwos_schema;

		public String getData_warehouse_order_dwos_schema() {
			return this.data_warehouse_order_dwos_schema;
		}

		public String data_warehouse_order_dwos_username;

		public String getData_warehouse_order_dwos_username() {
			return this.data_warehouse_order_dwos_username;
		}

		public String data_warehouse_order_dwos_password;

		public String getData_warehouse_order_dwos_password() {
			return this.data_warehouse_order_dwos_password;
		}
	}

	private ContextProperties context = new ContextProperties();

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "RFE_ETL";
	private final String projectName = "ORDER_ETL";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = java.util.Collections
			.synchronizedMap(new java.util.HashMap<String, Object>());

	private final java.util.Map<String, Long> start_Hash = java.util.Collections
			.synchronizedMap(new java.util.HashMap<String, Long>());
	private final java.util.Map<String, Long> end_Hash = java.util.Collections
			.synchronizedMap(new java.util.HashMap<String, Long>());
	private final java.util.Map<String, Boolean> ok_Hash = java.util.Collections
			.synchronizedMap(new java.util.HashMap<String, Boolean>());
	public final java.util.List<String[]> globalBuffer = java.util.Collections
			.synchronizedList(new java.util.ArrayList<String[]>());

	private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(
			java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources
				.entrySet()) {
			talendDataSources.put(
					dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry
							.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap
				.put(KEY_DB_DATASOURCES_RAW,
						new java.util.HashMap<String, javax.sql.DataSource>(
								dataSources));
	}

	LogCatcherUtils tLogCatcher_1 = new LogCatcherUtils();
	LogCatcherUtils talendLogs_LOGS = new LogCatcherUtils();
	StatCatcherUtils tStatCatcher_1 = new StatCatcherUtils(
			"_buvWgDVWEemy1IzxD79lIA", "0.1");
	StatCatcherUtils talendStats_STATS = new StatCatcherUtils(
			"_buvWgDVWEemy1IzxD79lIA", "0.1");

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
			new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent,
				final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null
						&& currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE",
							getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE",
						getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent
						+ " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					RFE_ETL.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass()
							.getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(RFE_ETL.this, new Object[] { e,
									currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
						tLogCatcher_1.addMessage("Java Exception",
								currentComponent, 6, e.getClass().getName()
										+ ":" + e.getMessage(), 1);
						talendLogs_LOGS.addMessage("Java Exception",
								currentComponent, 6, e.getClass().getName()
										+ ":" + e.getMessage(), 1);
						try {
							tLogCatcher_1Process(globalMap);
						} finally {
							talendLogs_LOGSProcess(globalMap);
						}
					}
				} catch (TalendException e) {
					// do nothing

				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tFileInputProperties_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		talendStats_STATS.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		talendStats_STATSProcess(globalMap);

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tFileInputProperties_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tContextLoad_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		talendStats_STATS.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		talendStats_STATSProcess(globalMap);

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tFileInputProperties_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tDBConnection_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tDBConnection_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		talendStats_STATS.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		talendStats_STATSProcess(globalMap);

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		talendStats_STATS.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		talendStats_STATSProcess(globalMap);

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		talendStats_STATS.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		talendStats_STATSProcess(globalMap);

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		talendStats_STATS.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		talendStats_STATSProcess(globalMap);

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		talendStats_STATS.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		talendStats_STATSProcess(globalMap);

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		talendStats_STATS.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		talendStats_STATSProcess(globalMap);

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		talendStats_STATS.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		talendStats_STATSProcess(globalMap);

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		talendStats_STATS.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		talendStats_STATSProcess(globalMap);

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_7_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		talendStats_STATS.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		talendStats_STATSProcess(globalMap);

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tDBInput_7_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_7_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		talendStats_STATS.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		talendStats_STATSProcess(globalMap);

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tDBInput_7_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_8_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		talendStats_STATS.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		talendStats_STATSProcess(globalMap);

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tDBInput_8_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_8_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		talendStats_STATS.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		talendStats_STATSProcess(globalMap);

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tDBInput_8_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_9_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		talendStats_STATS.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		talendStats_STATSProcess(globalMap);

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tDBInput_9_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_9_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		talendStats_STATS.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		talendStats_STATSProcess(globalMap);

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tDBInput_9_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_5_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		talendStats_STATS.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		talendStats_STATSProcess(globalMap);

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_5_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		talendStats_STATS.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		talendStats_STATSProcess(globalMap);

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_6_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		talendStats_STATS.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		talendStats_STATSProcess(globalMap);

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tDBInput_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_6_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		talendStats_STATS.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		talendStats_STATSProcess(globalMap);

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tDBInput_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogCatcher_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tStatCatcher_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tStatCatcher_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tStatCatcher_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void talendStats_STATS_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		talendStats_FILE_error(exception, errorComponent, globalMap);

	}

	public void talendStats_FILE_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		talendStats_STATS_onSubJobError(exception, errorComponent, globalMap);
	}

	public void talendLogs_LOGS_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		talendLogs_FILE_error(exception, errorComponent, globalMap);

	}

	public void talendLogs_FILE_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		talendLogs_LOGS_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputProperties_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBConnection_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_4_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_2_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_3_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_7_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_8_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_9_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_5_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_6_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tLogCatcher_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tStatCatcher_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void talendStats_STATS_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void talendLogs_LOGS_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public static class row17Struct implements
			routines.system.IPersistableRow<row17Struct> {
		final static byte[] commonByteArrayLock_ORDER_ETL_RFE_ETL = new byte[0];
		static byte[] commonByteArray_ORDER_ETL_RFE_ETL = new byte[0];

		public String key;

		public String getKey() {
			return this.key;
		}

		public String value;

		public String getValue() {
			return this.value;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ORDER_ETL_RFE_ETL.length) {
					if (length < 1024
							&& commonByteArray_ORDER_ETL_RFE_ETL.length == 0) {
						commonByteArray_ORDER_ETL_RFE_ETL = new byte[1024];
					} else {
						commonByteArray_ORDER_ETL_RFE_ETL = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ORDER_ETL_RFE_ETL, 0, length);
				strReturn = new String(commonByteArray_ORDER_ETL_RFE_ETL, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ORDER_ETL_RFE_ETL) {

				try {

					int length = 0;

					this.key = readString(dis);

					this.value = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.key, dos);

				// String

				writeString(this.value, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("key=" + key);
			sb.append(",value=" + value);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row17Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputProperties_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputProperties_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row17Struct row17 = new row17Struct();

				/**
				 * [tContextLoad_1 begin ] start
				 */

				ok_Hash.put("tContextLoad_1", false);
				start_Hash.put("tContextLoad_1", System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tContextLoad_1");
				tStatCatcher_1Process(globalMap);

				talendStats_STATS.addMessage("begin", "tContextLoad_1");
				talendStats_STATSProcess(globalMap);

				currentComponent = "tContextLoad_1";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row17" + iterateId, 0,
								0);

					}
				}

				int tos_count_tContextLoad_1 = 0;

				java.util.List<String> assignList_tContextLoad_1 = new java.util.ArrayList<String>();
				java.util.List<String> newPropertyList_tContextLoad_1 = new java.util.ArrayList<String>();
				java.util.List<String> noAssignList_tContextLoad_1 = new java.util.ArrayList<String>();
				int nb_line_tContextLoad_1 = 0;

				/**
				 * [tContextLoad_1 begin ] stop
				 */

				/**
				 * [tFileInputProperties_1 begin ] start
				 */

				ok_Hash.put("tFileInputProperties_1", false);
				start_Hash.put("tFileInputProperties_1",
						System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tFileInputProperties_1");
				tStatCatcher_1Process(globalMap);

				talendStats_STATS.addMessage("begin", "tFileInputProperties_1");
				talendStats_STATSProcess(globalMap);

				currentComponent = "tFileInputProperties_1";

				int tos_count_tFileInputProperties_1 = 0;

				java.io.File file_tFileInputProperties_1 = new java.io.File(
						"/r01/rup-config/rup-env.properties");
				int nb_line_tFileInputProperties_1 = 0;
				java.util.Properties properties_tFileInputProperties_1 = new java.util.Properties();
				java.io.FileInputStream fis_tFileInputProperties_1 = new java.io.FileInputStream(
						file_tFileInputProperties_1);
				try {
					properties_tFileInputProperties_1
							.load(fis_tFileInputProperties_1);
					java.util.Enumeration enumeration_tFileInputProperties_1 = properties_tFileInputProperties_1
							.propertyNames();
					while (enumeration_tFileInputProperties_1.hasMoreElements()) {
						nb_line_tFileInputProperties_1++;
						row17.key = (String) enumeration_tFileInputProperties_1
								.nextElement();
						row17.value = (String) properties_tFileInputProperties_1
								.getProperty(row17.key);

						/**
						 * [tFileInputProperties_1 begin ] stop
						 */

						/**
						 * [tFileInputProperties_1 main ] start
						 */

						currentComponent = "tFileInputProperties_1";

						tos_count_tFileInputProperties_1++;

						/**
						 * [tFileInputProperties_1 main ] stop
						 */

						/**
						 * [tFileInputProperties_1 process_data_begin ] start
						 */

						currentComponent = "tFileInputProperties_1";

						/**
						 * [tFileInputProperties_1 process_data_begin ] stop
						 */

						/**
						 * [tContextLoad_1 main ] start
						 */

						currentComponent = "tContextLoad_1";

						// row17
						// row17

						if (execStat) {
							runStat.updateStatOnConnection("row17" + iterateId,
									1, 1);
						}

						// ////////////////////////
						String tmp_key_tContextLoad_1 = null;
						String key_tContextLoad_1 = null;
						if (row17.key != null) {
							tmp_key_tContextLoad_1 = row17.key.trim();
							if ((tmp_key_tContextLoad_1.startsWith("#") || tmp_key_tContextLoad_1
									.startsWith("!"))) {
								tmp_key_tContextLoad_1 = null;
							} else {
								row17.key = tmp_key_tContextLoad_1;
							}
						}
						if (row17.key != null) {
							key_tContextLoad_1 = row17.key;
						}
						String value_tContextLoad_1 = null;
						if (row17.value != null) {
							value_tContextLoad_1 = row17.value;
						}

						String currentValue_tContextLoad_1 = value_tContextLoad_1;

						if (tmp_key_tContextLoad_1 != null) {
							try {
								if (key_tContextLoad_1 != null
										&& "data_warehouse_order_rfe_host"
												.equals(key_tContextLoad_1)) {
									context.data_warehouse_order_rfe_host = value_tContextLoad_1;
								}

								if (key_tContextLoad_1 != null
										&& "data_warehouse_order_rfe_port"
												.equals(key_tContextLoad_1)) {
									context.data_warehouse_order_rfe_port = value_tContextLoad_1;
								}

								if (key_tContextLoad_1 != null
										&& "data_warehouse_order_rfe_database"
												.equals(key_tContextLoad_1)) {
									context.data_warehouse_order_rfe_database = value_tContextLoad_1;
								}

								if (key_tContextLoad_1 != null
										&& "data_warehouse_order_rfe_schema"
												.equals(key_tContextLoad_1)) {
									context.data_warehouse_order_rfe_schema = value_tContextLoad_1;
								}

								if (key_tContextLoad_1 != null
										&& "data_warehouse_order_rfe_username"
												.equals(key_tContextLoad_1)) {
									context.data_warehouse_order_rfe_username = value_tContextLoad_1;
								}

								if (key_tContextLoad_1 != null
										&& "data_warehouse_order_rfe_password"
												.equals(key_tContextLoad_1)) {
									context.data_warehouse_order_rfe_password = value_tContextLoad_1;
								}

								if (key_tContextLoad_1 != null
										&& "data_warehouse_order_dwos_host"
												.equals(key_tContextLoad_1)) {
									context.data_warehouse_order_dwos_host = value_tContextLoad_1;
								}

								if (key_tContextLoad_1 != null
										&& "data_warehouse_order_dwos_port"
												.equals(key_tContextLoad_1)) {
									context.data_warehouse_order_dwos_port = value_tContextLoad_1;
								}

								if (key_tContextLoad_1 != null
										&& "data_warehouse_order_dwos_database"
												.equals(key_tContextLoad_1)) {
									context.data_warehouse_order_dwos_database = value_tContextLoad_1;
								}

								if (key_tContextLoad_1 != null
										&& "data_warehouse_order_dwos_schema"
												.equals(key_tContextLoad_1)) {
									context.data_warehouse_order_dwos_schema = value_tContextLoad_1;
								}

								if (key_tContextLoad_1 != null
										&& "data_warehouse_order_dwos_username"
												.equals(key_tContextLoad_1)) {
									context.data_warehouse_order_dwos_username = value_tContextLoad_1;
								}

								if (key_tContextLoad_1 != null
										&& "data_warehouse_order_dwos_password"
												.equals(key_tContextLoad_1)) {
									context.data_warehouse_order_dwos_password = value_tContextLoad_1;
								}

								if (context.getProperty(key_tContextLoad_1) != null) {
									assignList_tContextLoad_1
											.add(key_tContextLoad_1);
								} else {
									newPropertyList_tContextLoad_1
											.add(key_tContextLoad_1);
								}
								if (value_tContextLoad_1 == null) {
									context.setProperty(key_tContextLoad_1, "");
								} else {
									context.setProperty(key_tContextLoad_1,
											value_tContextLoad_1);
								}
							} catch (java.lang.Exception e) {
								System.err
										.println("Setting a value for the key \""
												+ key_tContextLoad_1
												+ "\" has failed. Error message: "
												+ e.getMessage());
							}
							nb_line_tContextLoad_1++;
						}
						// ////////////////////////

						tos_count_tContextLoad_1++;

						/**
						 * [tContextLoad_1 main ] stop
						 */

						/**
						 * [tContextLoad_1 process_data_begin ] start
						 */

						currentComponent = "tContextLoad_1";

						/**
						 * [tContextLoad_1 process_data_begin ] stop
						 */

						/**
						 * [tContextLoad_1 process_data_end ] start
						 */

						currentComponent = "tContextLoad_1";

						/**
						 * [tContextLoad_1 process_data_end ] stop
						 */

						/**
						 * [tFileInputProperties_1 process_data_end ] start
						 */

						currentComponent = "tFileInputProperties_1";

						/**
						 * [tFileInputProperties_1 process_data_end ] stop
						 */

						/**
						 * [tFileInputProperties_1 end ] start
						 */

						currentComponent = "tFileInputProperties_1";

					}
				} finally {
					if (fis_tFileInputProperties_1 != null) {
						fis_tFileInputProperties_1.close();
					}
				}
				globalMap.put("tFileInputProperties_1_NB_LINE",
						nb_line_tFileInputProperties_1);

				ok_Hash.put("tFileInputProperties_1", true);
				end_Hash.put("tFileInputProperties_1",
						System.currentTimeMillis());

				tStatCatcher_1.addMessage(
						"end",
						"tFileInputProperties_1",
						end_Hash.get("tFileInputProperties_1")
								- start_Hash.get("tFileInputProperties_1"));
				tStatCatcher_1Process(globalMap);
				talendStats_STATS.addMessage(
						"end",
						"tFileInputProperties_1",
						end_Hash.get("tFileInputProperties_1")
								- start_Hash.get("tFileInputProperties_1"));
				talendStats_STATSProcess(globalMap);

				/**
				 * [tFileInputProperties_1 end ] stop
				 */

				/**
				 * [tContextLoad_1 end ] start
				 */

				currentComponent = "tContextLoad_1";

				java.util.Enumeration<?> enu_tContextLoad_1 = context
						.propertyNames();
				while (enu_tContextLoad_1.hasMoreElements()) {
					String key_tContextLoad_1 = (String) enu_tContextLoad_1
							.nextElement();
					if (!assignList_tContextLoad_1.contains(key_tContextLoad_1)
							&& !newPropertyList_tContextLoad_1
									.contains(key_tContextLoad_1)) {
						noAssignList_tContextLoad_1.add(key_tContextLoad_1);
					}
				}

				String newPropertyStr_tContextLoad_1 = newPropertyList_tContextLoad_1
						.toString();
				String newProperty_tContextLoad_1 = newPropertyStr_tContextLoad_1
						.substring(1,
								newPropertyStr_tContextLoad_1.length() - 1);

				String noAssignStr_tContextLoad_1 = noAssignList_tContextLoad_1
						.toString();
				String noAssign_tContextLoad_1 = noAssignStr_tContextLoad_1
						.substring(1, noAssignStr_tContextLoad_1.length() - 1);

				globalMap.put("tContextLoad_1_KEY_NOT_INCONTEXT",
						newProperty_tContextLoad_1);
				globalMap.put("tContextLoad_1_KEY_NOT_LOADED",
						noAssign_tContextLoad_1);

				globalMap.put("tContextLoad_1_NB_LINE", nb_line_tContextLoad_1);

				List<String> parametersToEncrypt_tContextLoad_1 = new java.util.ArrayList<String>();

				resumeUtil.addLog("NODE", "NODE:tContextLoad_1", "", Thread
						.currentThread().getId() + "", "", "", "", "",
						resumeUtil.convertToJsonText(context,
								parametersToEncrypt_tContextLoad_1));

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row17" + iterateId, 2,
								0);
					}
				}

				ok_Hash.put("tContextLoad_1", true);
				end_Hash.put("tContextLoad_1", System.currentTimeMillis());

				tStatCatcher_1.addMessage(
						"end",
						"tContextLoad_1",
						end_Hash.get("tContextLoad_1")
								- start_Hash.get("tContextLoad_1"));
				tStatCatcher_1Process(globalMap);
				talendStats_STATS.addMessage(
						"end",
						"tContextLoad_1",
						end_Hash.get("tContextLoad_1")
								- start_Hash.get("tContextLoad_1"));
				talendStats_STATSProcess(globalMap);
				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tDBConnection_1Process(globalMap);

				/**
				 * [tContextLoad_1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputProperties_1 finally ] start
				 */

				currentComponent = "tFileInputProperties_1";

				/**
				 * [tFileInputProperties_1 finally ] stop
				 */

				/**
				 * [tContextLoad_1 finally ] start
				 */

				currentComponent = "tContextLoad_1";

				/**
				 * [tContextLoad_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputProperties_1_SUBPROCESS_STATE", 1);
	}

	public void tDBConnection_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tDBConnection_1 begin ] start
				 */

				ok_Hash.put("tDBConnection_1", false);
				start_Hash.put("tDBConnection_1", System.currentTimeMillis());

				currentComponent = "tDBConnection_1";

				int tos_count_tDBConnection_1 = 0;

				String url_tDBConnection_1 = "jdbc:jtds:sqlserver://"
						+ context.data_warehouse_order_rfe_host;
				String port_tDBConnection_1 = context.data_warehouse_order_rfe_port;
				String dbname_tDBConnection_1 = context.data_warehouse_order_rfe_database;
				if (!"".equals(port_tDBConnection_1)) {
					url_tDBConnection_1 += ":"
							+ context.data_warehouse_order_rfe_port;
				}
				if (!"".equals(dbname_tDBConnection_1)) {

					url_tDBConnection_1 += "//"
							+ context.data_warehouse_order_rfe_database;
				}
				url_tDBConnection_1 += ";appName="
						+ projectName
						+ ";"
						+ "domain=domain9.1;useNTLMv2=true;useCursors=true;useUnicode=true;characterEncoding=utf8";
				String dbUser_tDBConnection_1 = context.data_warehouse_order_rfe_username;

				final String decryptedPassword_tDBConnection_1 = context.data_warehouse_order_rfe_password;
				String dbPwd_tDBConnection_1 = decryptedPassword_tDBConnection_1;

				java.sql.Connection conn_tDBConnection_1 = null;

				String driverClass_tDBConnection_1 = "net.sourceforge.jtds.jdbc.Driver";
				java.lang.Class.forName(driverClass_tDBConnection_1);

				conn_tDBConnection_1 = java.sql.DriverManager.getConnection(
						url_tDBConnection_1, dbUser_tDBConnection_1,
						dbPwd_tDBConnection_1);

				globalMap.put("conn_tDBConnection_1", conn_tDBConnection_1);
				if (null != conn_tDBConnection_1) {

					conn_tDBConnection_1.setAutoCommit(false);
				}

				globalMap.put("dbschema_tDBConnection_1",
						context.data_warehouse_order_rfe_schema);

				globalMap.put("db_tDBConnection_1",
						context.data_warehouse_order_rfe_database);

				globalMap.put("conn_tDBConnection_1", conn_tDBConnection_1);

				globalMap.put("shareIdentitySetting_tDBConnection_1", false);

				/**
				 * [tDBConnection_1 begin ] stop
				 */

				/**
				 * [tDBConnection_1 main ] start
				 */

				currentComponent = "tDBConnection_1";

				tos_count_tDBConnection_1++;

				/**
				 * [tDBConnection_1 main ] stop
				 */

				/**
				 * [tDBConnection_1 process_data_begin ] start
				 */

				currentComponent = "tDBConnection_1";

				/**
				 * [tDBConnection_1 process_data_begin ] stop
				 */

				/**
				 * [tDBConnection_1 process_data_end ] start
				 */

				currentComponent = "tDBConnection_1";

				/**
				 * [tDBConnection_1 process_data_end ] stop
				 */

				/**
				 * [tDBConnection_1 end ] start
				 */

				currentComponent = "tDBConnection_1";

				ok_Hash.put("tDBConnection_1", true);
				end_Hash.put("tDBConnection_1", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk2", 0, "ok");
				}
				tDBInput_1Process(globalMap);
				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk3", 0, "ok");
				}
				tDBInput_4Process(globalMap);
				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk4", 0, "ok");
				}
				tDBInput_2Process(globalMap);
				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk10", 0, "ok");
				}
				tDBInput_3Process(globalMap);
				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk11", 0, "ok");
				}
				tDBInput_5Process(globalMap);

				/**
				 * [tDBConnection_1 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBConnection_1 finally ] start
				 */

				currentComponent = "tDBConnection_1";

				/**
				 * [tDBConnection_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 1);
	}

	public static class row1Struct implements
			routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_ORDER_ETL_RFE_ETL = new byte[0];
		static byte[] commonByteArray_ORDER_ETL_RFE_ETL = new byte[0];

		public int UserId;

		public int getUserId() {
			return this.UserId;
		}

		public int ClientId;

		public int getClientId() {
			return this.ClientId;
		}

		public String Email;

		public String getEmail() {
			return this.Email;
		}

		public String Password;

		public String getPassword() {
			return this.Password;
		}

		public String FriendlyName;

		public String getFriendlyName() {
			return this.FriendlyName;
		}

		public int DepartmentId;

		public int getDepartmentId() {
			return this.DepartmentId;
		}

		public int LocationId;

		public int getLocationId() {
			return this.LocationId;
		}

		public int ContactId;

		public int getContactId() {
			return this.ContactId;
		}

		public String PasswordSalt;

		public String getPasswordSalt() {
			return this.PasswordSalt;
		}

		public String PasswordQuestion;

		public String getPasswordQuestion() {
			return this.PasswordQuestion;
		}

		public String PasswordAnswer;

		public String getPasswordAnswer() {
			return this.PasswordAnswer;
		}

		public String AnswerSalt;

		public String getAnswerSalt() {
			return this.AnswerSalt;
		}

		public short Status;

		public short getStatus() {
			return this.Status;
		}

		public short IsLockedOut;

		public short getIsLockedOut() {
			return this.IsLockedOut;
		}

		public java.util.Date LastLoginTime;

		public java.util.Date getLastLoginTime() {
			return this.LastLoginTime;
		}

		public java.util.Date LastPasswordChangeTime;

		public java.util.Date getLastPasswordChangeTime() {
			return this.LastPasswordChangeTime;
		}

		public java.util.Date LastLockoutTime;

		public java.util.Date getLastLockoutTime() {
			return this.LastLockoutTime;
		}

		public java.util.Date LastActivityTime;

		public java.util.Date getLastActivityTime() {
			return this.LastActivityTime;
		}

		public int FpaCount;

		public int getFpaCount() {
			return this.FpaCount;
		}

		public java.util.Date FpaWindowStart;

		public java.util.Date getFpaWindowStart() {
			return this.FpaWindowStart;
		}

		public int FpaAnswerCount;

		public int getFpaAnswerCount() {
			return this.FpaAnswerCount;
		}

		public java.util.Date FpaAnswerWindowStart;

		public java.util.Date getFpaAnswerWindowStart() {
			return this.FpaAnswerWindowStart;
		}

		public String Comments;

		public String getComments() {
			return this.Comments;
		}

		public java.util.Date CreateTime;

		public java.util.Date getCreateTime() {
			return this.CreateTime;
		}

		public Object PriceLimit;

		public Object getPriceLimit() {
			return this.PriceLimit;
		}

		public short TimeZone;

		public short getTimeZone() {
			return this.TimeZone;
		}

		public int Culture;

		public int getCulture() {
			return this.Culture;
		}

		public java.util.Date LastUpdate;

		public java.util.Date getLastUpdate() {
			return this.LastUpdate;
		}

		public String CostCenterDefault;

		public String getCostCenterDefault() {
			return this.CostCenterDefault;
		}

		public String CustomId;

		public String getCustomId() {
			return this.CustomId;
		}

		public String BillRefDefault;

		public String getBillRefDefault() {
			return this.BillRefDefault;
		}

		public String PODefault;

		public String getPODefault() {
			return this.PODefault;
		}

		public String CustOrderDefault;

		public String getCustOrderDefault() {
			return this.CustOrderDefault;
		}

		public int ImpersonationGroup;

		public int getImpersonationGroup() {
			return this.ImpersonationGroup;
		}

		public short LinkoutHandling;

		public short getLinkoutHandling() {
			return this.LinkoutHandling;
		}

		public String ILLId;

		public String getILLId() {
			return this.ILLId;
		}

		public int BillingMethod;

		public int getBillingMethod() {
			return this.BillingMethod;
		}

		public int Language;

		public int getLanguage() {
			return this.Language;
		}

		public int SpecTreatment;

		public int getSpecTreatment() {
			return this.SpecTreatment;
		}

		public String JobTitle;

		public String getJobTitle() {
			return this.JobTitle;
		}

		public long ExternalId;

		public long getExternalId() {
			return this.ExternalId;
		}

		public String CustomIdScope;

		public String getCustomIdScope() {
			return this.CustomIdScope;
		}

		public int Sector;

		public int getSector() {
			return this.Sector;
		}

		public Object CurrentCreditAmount;

		public Object getCurrentCreditAmount() {
			return this.CurrentCreditAmount;
		}

		public Object LastCreditAmount;

		public Object getLastCreditAmount() {
			return this.LastCreditAmount;
		}

		public java.util.Date LastCreditDate;

		public java.util.Date getLastCreditDate() {
			return this.LastCreditDate;
		}

		public int MobileProviderId;

		public int getMobileProviderId() {
			return this.MobileProviderId;
		}

		public String AltPassword;

		public String getAltPassword() {
			return this.AltPassword;
		}

		public String BravoUsername;

		public String getBravoUsername() {
			return this.BravoUsername;
		}

		public String BravoPassword;

		public String getBravoPassword() {
			return this.BravoPassword;
		}

		public java.util.Date CreditAvailableDate;

		public java.util.Date getCreditAvailableDate() {
			return this.CreditAvailableDate;
		}

		public int DefaultUsageId;

		public int getDefaultUsageId() {
			return this.DefaultUsageId;
		}

		public String ExtTokenKey;

		public String getExtTokenKey() {
			return this.ExtTokenKey;
		}

		public java.util.Date SubjectAreaAutoUpdateDate;

		public java.util.Date getSubjectAreaAutoUpdateDate() {
			return this.SubjectAreaAutoUpdateDate;
		}

		public String ReqCCOverrides;

		public String getReqCCOverrides() {
			return this.ReqCCOverrides;
		}

		public short PriceQuoteHandling;

		public short getPriceQuoteHandling() {
			return this.PriceQuoteHandling;
		}

		public Object PriceQuoteIncreases;

		public Object getPriceQuoteIncreases() {
			return this.PriceQuoteIncreases;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ORDER_ETL_RFE_ETL.length) {
					if (length < 1024
							&& commonByteArray_ORDER_ETL_RFE_ETL.length == 0) {
						commonByteArray_ORDER_ETL_RFE_ETL = new byte[1024];
					} else {
						commonByteArray_ORDER_ETL_RFE_ETL = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ORDER_ETL_RFE_ETL, 0, length);
				strReturn = new String(commonByteArray_ORDER_ETL_RFE_ETL, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ORDER_ETL_RFE_ETL) {

				try {

					int length = 0;

					this.UserId = dis.readInt();

					this.ClientId = dis.readInt();

					this.Email = readString(dis);

					this.Password = readString(dis);

					this.FriendlyName = readString(dis);

					this.DepartmentId = dis.readInt();

					this.LocationId = dis.readInt();

					this.ContactId = dis.readInt();

					this.PasswordSalt = readString(dis);

					this.PasswordQuestion = readString(dis);

					this.PasswordAnswer = readString(dis);

					this.AnswerSalt = readString(dis);

					this.Status = dis.readShort();

					this.IsLockedOut = dis.readShort();

					this.LastLoginTime = readDate(dis);

					this.LastPasswordChangeTime = readDate(dis);

					this.LastLockoutTime = readDate(dis);

					this.LastActivityTime = readDate(dis);

					this.FpaCount = dis.readInt();

					this.FpaWindowStart = readDate(dis);

					this.FpaAnswerCount = dis.readInt();

					this.FpaAnswerWindowStart = readDate(dis);

					this.Comments = readString(dis);

					this.CreateTime = readDate(dis);

					this.PriceLimit = (Object) dis.readObject();

					this.TimeZone = dis.readShort();

					this.Culture = dis.readInt();

					this.LastUpdate = readDate(dis);

					this.CostCenterDefault = readString(dis);

					this.CustomId = readString(dis);

					this.BillRefDefault = readString(dis);

					this.PODefault = readString(dis);

					this.CustOrderDefault = readString(dis);

					this.ImpersonationGroup = dis.readInt();

					this.LinkoutHandling = dis.readShort();

					this.ILLId = readString(dis);

					this.BillingMethod = dis.readInt();

					this.Language = dis.readInt();

					this.SpecTreatment = dis.readInt();

					this.JobTitle = readString(dis);

					this.ExternalId = dis.readLong();

					this.CustomIdScope = readString(dis);

					this.Sector = dis.readInt();

					this.CurrentCreditAmount = (Object) dis.readObject();

					this.LastCreditAmount = (Object) dis.readObject();

					this.LastCreditDate = readDate(dis);

					this.MobileProviderId = dis.readInt();

					this.AltPassword = readString(dis);

					this.BravoUsername = readString(dis);

					this.BravoPassword = readString(dis);

					this.CreditAvailableDate = readDate(dis);

					this.DefaultUsageId = dis.readInt();

					this.ExtTokenKey = readString(dis);

					this.SubjectAreaAutoUpdateDate = readDate(dis);

					this.ReqCCOverrides = readString(dis);

					this.PriceQuoteHandling = dis.readShort();

					this.PriceQuoteIncreases = (Object) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.UserId);

				// int

				dos.writeInt(this.ClientId);

				// String

				writeString(this.Email, dos);

				// String

				writeString(this.Password, dos);

				// String

				writeString(this.FriendlyName, dos);

				// int

				dos.writeInt(this.DepartmentId);

				// int

				dos.writeInt(this.LocationId);

				// int

				dos.writeInt(this.ContactId);

				// String

				writeString(this.PasswordSalt, dos);

				// String

				writeString(this.PasswordQuestion, dos);

				// String

				writeString(this.PasswordAnswer, dos);

				// String

				writeString(this.AnswerSalt, dos);

				// short

				dos.writeShort(this.Status);

				// short

				dos.writeShort(this.IsLockedOut);

				// java.util.Date

				writeDate(this.LastLoginTime, dos);

				// java.util.Date

				writeDate(this.LastPasswordChangeTime, dos);

				// java.util.Date

				writeDate(this.LastLockoutTime, dos);

				// java.util.Date

				writeDate(this.LastActivityTime, dos);

				// int

				dos.writeInt(this.FpaCount);

				// java.util.Date

				writeDate(this.FpaWindowStart, dos);

				// int

				dos.writeInt(this.FpaAnswerCount);

				// java.util.Date

				writeDate(this.FpaAnswerWindowStart, dos);

				// String

				writeString(this.Comments, dos);

				// java.util.Date

				writeDate(this.CreateTime, dos);

				// Object

				dos.writeObject(this.PriceLimit);

				// short

				dos.writeShort(this.TimeZone);

				// int

				dos.writeInt(this.Culture);

				// java.util.Date

				writeDate(this.LastUpdate, dos);

				// String

				writeString(this.CostCenterDefault, dos);

				// String

				writeString(this.CustomId, dos);

				// String

				writeString(this.BillRefDefault, dos);

				// String

				writeString(this.PODefault, dos);

				// String

				writeString(this.CustOrderDefault, dos);

				// int

				dos.writeInt(this.ImpersonationGroup);

				// short

				dos.writeShort(this.LinkoutHandling);

				// String

				writeString(this.ILLId, dos);

				// int

				dos.writeInt(this.BillingMethod);

				// int

				dos.writeInt(this.Language);

				// int

				dos.writeInt(this.SpecTreatment);

				// String

				writeString(this.JobTitle, dos);

				// long

				dos.writeLong(this.ExternalId);

				// String

				writeString(this.CustomIdScope, dos);

				// int

				dos.writeInt(this.Sector);

				// Object

				dos.writeObject(this.CurrentCreditAmount);

				// Object

				dos.writeObject(this.LastCreditAmount);

				// java.util.Date

				writeDate(this.LastCreditDate, dos);

				// int

				dos.writeInt(this.MobileProviderId);

				// String

				writeString(this.AltPassword, dos);

				// String

				writeString(this.BravoUsername, dos);

				// String

				writeString(this.BravoPassword, dos);

				// java.util.Date

				writeDate(this.CreditAvailableDate, dos);

				// int

				dos.writeInt(this.DefaultUsageId);

				// String

				writeString(this.ExtTokenKey, dos);

				// java.util.Date

				writeDate(this.SubjectAreaAutoUpdateDate, dos);

				// String

				writeString(this.ReqCCOverrides, dos);

				// short

				dos.writeShort(this.PriceQuoteHandling);

				// Object

				dos.writeObject(this.PriceQuoteIncreases);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("UserId=" + String.valueOf(UserId));
			sb.append(",ClientId=" + String.valueOf(ClientId));
			sb.append(",Email=" + Email);
			sb.append(",Password=" + Password);
			sb.append(",FriendlyName=" + FriendlyName);
			sb.append(",DepartmentId=" + String.valueOf(DepartmentId));
			sb.append(",LocationId=" + String.valueOf(LocationId));
			sb.append(",ContactId=" + String.valueOf(ContactId));
			sb.append(",PasswordSalt=" + PasswordSalt);
			sb.append(",PasswordQuestion=" + PasswordQuestion);
			sb.append(",PasswordAnswer=" + PasswordAnswer);
			sb.append(",AnswerSalt=" + AnswerSalt);
			sb.append(",Status=" + String.valueOf(Status));
			sb.append(",IsLockedOut=" + String.valueOf(IsLockedOut));
			sb.append(",LastLoginTime=" + String.valueOf(LastLoginTime));
			sb.append(",LastPasswordChangeTime="
					+ String.valueOf(LastPasswordChangeTime));
			sb.append(",LastLockoutTime=" + String.valueOf(LastLockoutTime));
			sb.append(",LastActivityTime=" + String.valueOf(LastActivityTime));
			sb.append(",FpaCount=" + String.valueOf(FpaCount));
			sb.append(",FpaWindowStart=" + String.valueOf(FpaWindowStart));
			sb.append(",FpaAnswerCount=" + String.valueOf(FpaAnswerCount));
			sb.append(",FpaAnswerWindowStart="
					+ String.valueOf(FpaAnswerWindowStart));
			sb.append(",Comments=" + Comments);
			sb.append(",CreateTime=" + String.valueOf(CreateTime));
			sb.append(",PriceLimit=" + String.valueOf(PriceLimit));
			sb.append(",TimeZone=" + String.valueOf(TimeZone));
			sb.append(",Culture=" + String.valueOf(Culture));
			sb.append(",LastUpdate=" + String.valueOf(LastUpdate));
			sb.append(",CostCenterDefault=" + CostCenterDefault);
			sb.append(",CustomId=" + CustomId);
			sb.append(",BillRefDefault=" + BillRefDefault);
			sb.append(",PODefault=" + PODefault);
			sb.append(",CustOrderDefault=" + CustOrderDefault);
			sb.append(",ImpersonationGroup="
					+ String.valueOf(ImpersonationGroup));
			sb.append(",LinkoutHandling=" + String.valueOf(LinkoutHandling));
			sb.append(",ILLId=" + ILLId);
			sb.append(",BillingMethod=" + String.valueOf(BillingMethod));
			sb.append(",Language=" + String.valueOf(Language));
			sb.append(",SpecTreatment=" + String.valueOf(SpecTreatment));
			sb.append(",JobTitle=" + JobTitle);
			sb.append(",ExternalId=" + String.valueOf(ExternalId));
			sb.append(",CustomIdScope=" + CustomIdScope);
			sb.append(",Sector=" + String.valueOf(Sector));
			sb.append(",CurrentCreditAmount="
					+ String.valueOf(CurrentCreditAmount));
			sb.append(",LastCreditAmount=" + String.valueOf(LastCreditAmount));
			sb.append(",LastCreditDate=" + String.valueOf(LastCreditDate));
			sb.append(",MobileProviderId=" + String.valueOf(MobileProviderId));
			sb.append(",AltPassword=" + AltPassword);
			sb.append(",BravoUsername=" + BravoUsername);
			sb.append(",BravoPassword=" + BravoPassword);
			sb.append(",CreditAvailableDate="
					+ String.valueOf(CreditAvailableDate));
			sb.append(",DefaultUsageId=" + String.valueOf(DefaultUsageId));
			sb.append(",ExtTokenKey=" + ExtTokenKey);
			sb.append(",SubjectAreaAutoUpdateDate="
					+ String.valueOf(SubjectAreaAutoUpdateDate));
			sb.append(",ReqCCOverrides=" + ReqCCOverrides);
			sb.append(",PriceQuoteHandling="
					+ String.valueOf(PriceQuoteHandling));
			sb.append(",PriceQuoteIncreases="
					+ String.valueOf(PriceQuoteIncreases));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row1Struct row1 = new row1Struct();

				/**
				 * [tDBOutput_1 begin ] start
				 */

				ok_Hash.put("tDBOutput_1", false);
				start_Hash.put("tDBOutput_1", System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tDBOutput_1");
				tStatCatcher_1Process(globalMap);

				talendStats_STATS.addMessage("begin", "tDBOutput_1");
				talendStats_STATSProcess(globalMap);

				currentComponent = "tDBOutput_1";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row1" + iterateId, 0, 0);

					}
				}

				int tos_count_tDBOutput_1 = 0;

				String dbschema_tDBOutput_1 = null;
				dbschema_tDBOutput_1 = context.data_warehouse_order_dwos_schema;

				String tableName_tDBOutput_1 = null;
				if (dbschema_tDBOutput_1 == null
						|| dbschema_tDBOutput_1.trim().length() == 0) {
					tableName_tDBOutput_1 = "dwo_rfe_appuser";
				} else {
					tableName_tDBOutput_1 = dbschema_tDBOutput_1 + "\".\""
							+ "dwo_rfe_appuser";
				}

				int nb_line_tDBOutput_1 = 0;
				int nb_line_update_tDBOutput_1 = 0;
				int nb_line_inserted_tDBOutput_1 = 0;
				int nb_line_deleted_tDBOutput_1 = 0;
				int nb_line_rejected_tDBOutput_1 = 0;

				int deletedCount_tDBOutput_1 = 0;
				int updatedCount_tDBOutput_1 = 0;
				int insertedCount_tDBOutput_1 = 0;
				int rejectedCount_tDBOutput_1 = 0;

				boolean whetherReject_tDBOutput_1 = false;

				java.sql.Connection conn_tDBOutput_1 = null;
				String dbUser_tDBOutput_1 = null;

				java.lang.Class.forName("org.postgresql.Driver");
				String url_tDBOutput_1 = "jdbc:postgresql://"
						+ context.data_warehouse_order_dwos_host + ":"
						+ context.data_warehouse_order_dwos_port + "/"
						+ context.data_warehouse_order_dwos_database;
				dbUser_tDBOutput_1 = context.data_warehouse_order_dwos_username;

				final String decryptedPassword_tDBOutput_1 = context.data_warehouse_order_dwos_password;

				String dbPwd_tDBOutput_1 = decryptedPassword_tDBOutput_1;

				conn_tDBOutput_1 = java.sql.DriverManager.getConnection(
						url_tDBOutput_1, dbUser_tDBOutput_1, dbPwd_tDBOutput_1);

				resourceMap.put("conn_tDBOutput_1", conn_tDBOutput_1);
				conn_tDBOutput_1.setAutoCommit(false);
				int commitEvery_tDBOutput_1 = 1000;
				int commitCounter_tDBOutput_1 = 0;

				int batchSize_tDBOutput_1 = 1000;
				int batchSizeCounter_tDBOutput_1 = 0;

				int count_tDBOutput_1 = 0;
				int rsTruncCountNumber_tDBOutput_1 = 0;
				try (java.sql.Statement stmtTruncCount_tDBOutput_1 = conn_tDBOutput_1
						.createStatement()) {
					try (java.sql.ResultSet rsTruncCount_tDBOutput_1 = stmtTruncCount_tDBOutput_1
							.executeQuery("SELECT COUNT(1) FROM \""
									+ tableName_tDBOutput_1 + "\"")) {
						if (rsTruncCount_tDBOutput_1.next()) {
							rsTruncCountNumber_tDBOutput_1 = rsTruncCount_tDBOutput_1
									.getInt(1);
						}
					}
				}
				try (java.sql.Statement stmtTrunc_tDBOutput_1 = conn_tDBOutput_1
						.createStatement()) {
					stmtTrunc_tDBOutput_1.executeUpdate("TRUNCATE TABLE \""
							+ tableName_tDBOutput_1 + "\"");
					deletedCount_tDBOutput_1 += rsTruncCountNumber_tDBOutput_1;
				}
				String insert_tDBOutput_1 = "INSERT INTO \""
						+ tableName_tDBOutput_1
						+ "\" (\"userid\",\"clientid\",\"email\",\"password\",\"friendlyname\",\"departmentid\",\"locationid\",\"contactid\",\"passwordsalt\",\"passwordquestion\",\"passwordanswer\",\"answersalt\",\"status\",\"islockedout\",\"lastlogintime\",\"lastpasswordchangetime\",\"lastlockouttime\",\"lastactivitytime\",\"fpacount\",\"fpawindowstart\",\"fpaanswercount\",\"fpaanswerwindowstart\",\"comments\",\"createtime\",\"pricelimit\",\"timezone\",\"culture\",\"lastupdate\",\"costcenterdefault\",\"customid\",\"billrefdefault\",\"podefault\",\"custorderdefault\",\"impersonationgroup\",\"linkouthandling\",\"illid\",\"billingmethod\",\"language\",\"spectreatment\",\"jobtitle\",\"externalid\",\"customidscope\",\"sector\",\"currentcreditamount\",\"lastcreditamount\",\"lastcreditdate\",\"mobileproviderid\",\"altpassword\",\"bravousername\",\"bravopassword\",\"creditavailabledate\",\"defaultusageid\",\"exttokenkey\",\"subjectareaautoupdatedate\",\"reqccoverrides\",\"pricequotehandling\",\"pricequoteincreases\") VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

				java.sql.PreparedStatement pstmt_tDBOutput_1 = conn_tDBOutput_1
						.prepareStatement(insert_tDBOutput_1);
				resourceMap.put("pstmt_tDBOutput_1", pstmt_tDBOutput_1);

				/**
				 * [tDBOutput_1 begin ] stop
				 */

				/**
				 * [tDBInput_1 begin ] start
				 */

				ok_Hash.put("tDBInput_1", false);
				start_Hash.put("tDBInput_1", System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tDBInput_1");
				tStatCatcher_1Process(globalMap);

				talendStats_STATS.addMessage("begin", "tDBInput_1");
				talendStats_STATSProcess(globalMap);

				currentComponent = "tDBInput_1";

				int tos_count_tDBInput_1 = 0;

				org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_1 = org.talend.designer.components.util.mssql.MSSqlUtilFactory
						.getMSSqlGenerateTimestampUtil();

				java.util.List<String> talendToDBList_tDBInput_1 = new java.util.ArrayList();
				String[] talendToDBArray_tDBInput_1 = new String[] { "FLOAT",
						"NUMERIC", "NUMERIC IDENTITY", "DECIMAL",
						"DECIMAL IDENTITY", "REAL" };
				java.util.Collections.addAll(talendToDBList_tDBInput_1,
						talendToDBArray_tDBInput_1);
				int nb_line_tDBInput_1 = 0;
				java.sql.Connection conn_tDBInput_1 = null;
				conn_tDBInput_1 = (java.sql.Connection) globalMap
						.get("conn_tDBConnection_1");
				String dbschema_tDBInput_1 = (String) globalMap
						.get("dbschema_tDBConnection_1");

				java.sql.Statement stmt_tDBInput_1 = conn_tDBInput_1
						.createStatement();

				String dbquery_tDBInput_1 = "SELECT * FROM AppUser";

				globalMap.put("tDBInput_1_QUERY", dbquery_tDBInput_1);
				java.sql.ResultSet rs_tDBInput_1 = null;

				try {
					rs_tDBInput_1 = stmt_tDBInput_1
							.executeQuery(dbquery_tDBInput_1);
					java.sql.ResultSetMetaData rsmd_tDBInput_1 = rs_tDBInput_1
							.getMetaData();
					int colQtyInRs_tDBInput_1 = rsmd_tDBInput_1
							.getColumnCount();

					String tmpContent_tDBInput_1 = null;

					while (rs_tDBInput_1.next()) {
						nb_line_tDBInput_1++;

						if (colQtyInRs_tDBInput_1 < 1) {
							row1.UserId = 0;
						} else {

							if (rs_tDBInput_1.getObject(1) != null) {
								row1.UserId = rs_tDBInput_1.getInt(1);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 2) {
							row1.ClientId = 0;
						} else {

							if (rs_tDBInput_1.getObject(2) != null) {
								row1.ClientId = rs_tDBInput_1.getInt(2);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 3) {
							row1.Email = null;
						} else {

							tmpContent_tDBInput_1 = rs_tDBInput_1.getString(3);
							if (tmpContent_tDBInput_1 != null) {
								if (talendToDBList_tDBInput_1
										.contains(rsmd_tDBInput_1
												.getColumnTypeName(3)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row1.Email = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_1);
								} else {
									row1.Email = tmpContent_tDBInput_1;
								}
							} else {
								row1.Email = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 4) {
							row1.Password = null;
						} else {

							tmpContent_tDBInput_1 = rs_tDBInput_1.getString(4);
							if (tmpContent_tDBInput_1 != null) {
								if (talendToDBList_tDBInput_1
										.contains(rsmd_tDBInput_1
												.getColumnTypeName(4)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row1.Password = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_1);
								} else {
									row1.Password = tmpContent_tDBInput_1;
								}
							} else {
								row1.Password = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 5) {
							row1.FriendlyName = null;
						} else {

							tmpContent_tDBInput_1 = rs_tDBInput_1.getString(5);
							if (tmpContent_tDBInput_1 != null) {
								if (talendToDBList_tDBInput_1
										.contains(rsmd_tDBInput_1
												.getColumnTypeName(5)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row1.FriendlyName = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_1);
								} else {
									row1.FriendlyName = tmpContent_tDBInput_1;
								}
							} else {
								row1.FriendlyName = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 6) {
							row1.DepartmentId = 0;
						} else {

							if (rs_tDBInput_1.getObject(6) != null) {
								row1.DepartmentId = rs_tDBInput_1.getInt(6);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 7) {
							row1.LocationId = 0;
						} else {

							if (rs_tDBInput_1.getObject(7) != null) {
								row1.LocationId = rs_tDBInput_1.getInt(7);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 8) {
							row1.ContactId = 0;
						} else {

							if (rs_tDBInput_1.getObject(8) != null) {
								row1.ContactId = rs_tDBInput_1.getInt(8);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 9) {
							row1.PasswordSalt = null;
						} else {

							tmpContent_tDBInput_1 = rs_tDBInput_1.getString(9);
							if (tmpContent_tDBInput_1 != null) {
								if (talendToDBList_tDBInput_1
										.contains(rsmd_tDBInput_1
												.getColumnTypeName(9)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row1.PasswordSalt = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_1);
								} else {
									row1.PasswordSalt = tmpContent_tDBInput_1;
								}
							} else {
								row1.PasswordSalt = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 10) {
							row1.PasswordQuestion = null;
						} else {

							tmpContent_tDBInput_1 = rs_tDBInput_1.getString(10);
							if (tmpContent_tDBInput_1 != null) {
								if (talendToDBList_tDBInput_1
										.contains(rsmd_tDBInput_1
												.getColumnTypeName(10)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row1.PasswordQuestion = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_1);
								} else {
									row1.PasswordQuestion = tmpContent_tDBInput_1;
								}
							} else {
								row1.PasswordQuestion = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 11) {
							row1.PasswordAnswer = null;
						} else {

							tmpContent_tDBInput_1 = rs_tDBInput_1.getString(11);
							if (tmpContent_tDBInput_1 != null) {
								if (talendToDBList_tDBInput_1
										.contains(rsmd_tDBInput_1
												.getColumnTypeName(11)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row1.PasswordAnswer = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_1);
								} else {
									row1.PasswordAnswer = tmpContent_tDBInput_1;
								}
							} else {
								row1.PasswordAnswer = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 12) {
							row1.AnswerSalt = null;
						} else {

							tmpContent_tDBInput_1 = rs_tDBInput_1.getString(12);
							if (tmpContent_tDBInput_1 != null) {
								if (talendToDBList_tDBInput_1
										.contains(rsmd_tDBInput_1
												.getColumnTypeName(12)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row1.AnswerSalt = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_1);
								} else {
									row1.AnswerSalt = tmpContent_tDBInput_1;
								}
							} else {
								row1.AnswerSalt = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 13) {
							row1.Status = 0;
						} else {

							if (rs_tDBInput_1.getObject(13) != null) {
								row1.Status = rs_tDBInput_1.getShort(13);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 14) {
							row1.IsLockedOut = 0;
						} else {

							if (rs_tDBInput_1.getObject(14) != null) {
								row1.IsLockedOut = rs_tDBInput_1.getShort(14);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 15) {
							row1.LastLoginTime = null;
						} else {

							row1.LastLoginTime = mssqlGTU_tDBInput_1.getDate(
									rsmd_tDBInput_1, rs_tDBInput_1, 15);

						}
						if (colQtyInRs_tDBInput_1 < 16) {
							row1.LastPasswordChangeTime = null;
						} else {

							row1.LastPasswordChangeTime = mssqlGTU_tDBInput_1
									.getDate(rsmd_tDBInput_1, rs_tDBInput_1, 16);

						}
						if (colQtyInRs_tDBInput_1 < 17) {
							row1.LastLockoutTime = null;
						} else {

							row1.LastLockoutTime = mssqlGTU_tDBInput_1.getDate(
									rsmd_tDBInput_1, rs_tDBInput_1, 17);

						}
						if (colQtyInRs_tDBInput_1 < 18) {
							row1.LastActivityTime = null;
						} else {

							row1.LastActivityTime = mssqlGTU_tDBInput_1
									.getDate(rsmd_tDBInput_1, rs_tDBInput_1, 18);

						}
						if (colQtyInRs_tDBInput_1 < 19) {
							row1.FpaCount = 0;
						} else {

							if (rs_tDBInput_1.getObject(19) != null) {
								row1.FpaCount = rs_tDBInput_1.getInt(19);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 20) {
							row1.FpaWindowStart = null;
						} else {

							row1.FpaWindowStart = mssqlGTU_tDBInput_1.getDate(
									rsmd_tDBInput_1, rs_tDBInput_1, 20);

						}
						if (colQtyInRs_tDBInput_1 < 21) {
							row1.FpaAnswerCount = 0;
						} else {

							if (rs_tDBInput_1.getObject(21) != null) {
								row1.FpaAnswerCount = rs_tDBInput_1.getInt(21);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 22) {
							row1.FpaAnswerWindowStart = null;
						} else {

							row1.FpaAnswerWindowStart = mssqlGTU_tDBInput_1
									.getDate(rsmd_tDBInput_1, rs_tDBInput_1, 22);

						}
						if (colQtyInRs_tDBInput_1 < 23) {
							row1.Comments = null;
						} else {

							tmpContent_tDBInput_1 = rs_tDBInput_1.getString(23);
							if (tmpContent_tDBInput_1 != null) {
								if (talendToDBList_tDBInput_1
										.contains(rsmd_tDBInput_1
												.getColumnTypeName(23)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row1.Comments = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_1);
								} else {
									row1.Comments = tmpContent_tDBInput_1;
								}
							} else {
								row1.Comments = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 24) {
							row1.CreateTime = null;
						} else {

							row1.CreateTime = mssqlGTU_tDBInput_1.getDate(
									rsmd_tDBInput_1, rs_tDBInput_1, 24);

						}
						if (colQtyInRs_tDBInput_1 < 25) {
							row1.PriceLimit = null;
						} else {

							if (rs_tDBInput_1.getObject(25) != null) {
								row1.PriceLimit = rs_tDBInput_1.getObject(25);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 26) {
							row1.TimeZone = 0;
						} else {

							if (rs_tDBInput_1.getObject(26) != null) {
								row1.TimeZone = rs_tDBInput_1.getShort(26);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 27) {
							row1.Culture = 0;
						} else {

							if (rs_tDBInput_1.getObject(27) != null) {
								row1.Culture = rs_tDBInput_1.getInt(27);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 28) {
							row1.LastUpdate = null;
						} else {

							row1.LastUpdate = mssqlGTU_tDBInput_1.getDate(
									rsmd_tDBInput_1, rs_tDBInput_1, 28);

						}
						if (colQtyInRs_tDBInput_1 < 29) {
							row1.CostCenterDefault = null;
						} else {

							tmpContent_tDBInput_1 = rs_tDBInput_1.getString(29);
							if (tmpContent_tDBInput_1 != null) {
								if (talendToDBList_tDBInput_1
										.contains(rsmd_tDBInput_1
												.getColumnTypeName(29)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row1.CostCenterDefault = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_1);
								} else {
									row1.CostCenterDefault = tmpContent_tDBInput_1;
								}
							} else {
								row1.CostCenterDefault = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 30) {
							row1.CustomId = null;
						} else {

							tmpContent_tDBInput_1 = rs_tDBInput_1.getString(30);
							if (tmpContent_tDBInput_1 != null) {
								if (talendToDBList_tDBInput_1
										.contains(rsmd_tDBInput_1
												.getColumnTypeName(30)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row1.CustomId = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_1);
								} else {
									row1.CustomId = tmpContent_tDBInput_1;
								}
							} else {
								row1.CustomId = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 31) {
							row1.BillRefDefault = null;
						} else {

							tmpContent_tDBInput_1 = rs_tDBInput_1.getString(31);
							if (tmpContent_tDBInput_1 != null) {
								if (talendToDBList_tDBInput_1
										.contains(rsmd_tDBInput_1
												.getColumnTypeName(31)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row1.BillRefDefault = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_1);
								} else {
									row1.BillRefDefault = tmpContent_tDBInput_1;
								}
							} else {
								row1.BillRefDefault = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 32) {
							row1.PODefault = null;
						} else {

							tmpContent_tDBInput_1 = rs_tDBInput_1.getString(32);
							if (tmpContent_tDBInput_1 != null) {
								if (talendToDBList_tDBInput_1
										.contains(rsmd_tDBInput_1
												.getColumnTypeName(32)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row1.PODefault = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_1);
								} else {
									row1.PODefault = tmpContent_tDBInput_1;
								}
							} else {
								row1.PODefault = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 33) {
							row1.CustOrderDefault = null;
						} else {

							tmpContent_tDBInput_1 = rs_tDBInput_1.getString(33);
							if (tmpContent_tDBInput_1 != null) {
								if (talendToDBList_tDBInput_1
										.contains(rsmd_tDBInput_1
												.getColumnTypeName(33)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row1.CustOrderDefault = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_1);
								} else {
									row1.CustOrderDefault = tmpContent_tDBInput_1;
								}
							} else {
								row1.CustOrderDefault = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 34) {
							row1.ImpersonationGroup = 0;
						} else {

							if (rs_tDBInput_1.getObject(34) != null) {
								row1.ImpersonationGroup = rs_tDBInput_1
										.getInt(34);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 35) {
							row1.LinkoutHandling = 0;
						} else {

							if (rs_tDBInput_1.getObject(35) != null) {
								row1.LinkoutHandling = rs_tDBInput_1
										.getShort(35);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 36) {
							row1.ILLId = null;
						} else {

							tmpContent_tDBInput_1 = rs_tDBInput_1.getString(36);
							if (tmpContent_tDBInput_1 != null) {
								if (talendToDBList_tDBInput_1
										.contains(rsmd_tDBInput_1
												.getColumnTypeName(36)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row1.ILLId = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_1);
								} else {
									row1.ILLId = tmpContent_tDBInput_1;
								}
							} else {
								row1.ILLId = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 37) {
							row1.BillingMethod = 0;
						} else {

							if (rs_tDBInput_1.getObject(37) != null) {
								row1.BillingMethod = rs_tDBInput_1.getInt(37);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 38) {
							row1.Language = 0;
						} else {

							if (rs_tDBInput_1.getObject(38) != null) {
								row1.Language = rs_tDBInput_1.getInt(38);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 39) {
							row1.SpecTreatment = 0;
						} else {

							if (rs_tDBInput_1.getObject(39) != null) {
								row1.SpecTreatment = rs_tDBInput_1.getInt(39);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 40) {
							row1.JobTitle = null;
						} else {

							tmpContent_tDBInput_1 = rs_tDBInput_1.getString(40);
							if (tmpContent_tDBInput_1 != null) {
								if (talendToDBList_tDBInput_1
										.contains(rsmd_tDBInput_1
												.getColumnTypeName(40)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row1.JobTitle = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_1);
								} else {
									row1.JobTitle = tmpContent_tDBInput_1;
								}
							} else {
								row1.JobTitle = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 41) {
							row1.ExternalId = 0;
						} else {

							if (rs_tDBInput_1.getObject(41) != null) {
								row1.ExternalId = rs_tDBInput_1.getLong(41);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 42) {
							row1.CustomIdScope = null;
						} else {

							tmpContent_tDBInput_1 = rs_tDBInput_1.getString(42);
							if (tmpContent_tDBInput_1 != null) {
								if (talendToDBList_tDBInput_1
										.contains(rsmd_tDBInput_1
												.getColumnTypeName(42)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row1.CustomIdScope = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_1);
								} else {
									row1.CustomIdScope = tmpContent_tDBInput_1;
								}
							} else {
								row1.CustomIdScope = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 43) {
							row1.Sector = 0;
						} else {

							if (rs_tDBInput_1.getObject(43) != null) {
								row1.Sector = rs_tDBInput_1.getInt(43);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 44) {
							row1.CurrentCreditAmount = null;
						} else {

							if (rs_tDBInput_1.getObject(44) != null) {
								row1.CurrentCreditAmount = rs_tDBInput_1
										.getObject(44);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 45) {
							row1.LastCreditAmount = null;
						} else {

							if (rs_tDBInput_1.getObject(45) != null) {
								row1.LastCreditAmount = rs_tDBInput_1
										.getObject(45);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 46) {
							row1.LastCreditDate = null;
						} else {

							row1.LastCreditDate = mssqlGTU_tDBInput_1.getDate(
									rsmd_tDBInput_1, rs_tDBInput_1, 46);

						}
						if (colQtyInRs_tDBInput_1 < 47) {
							row1.MobileProviderId = 0;
						} else {

							if (rs_tDBInput_1.getObject(47) != null) {
								row1.MobileProviderId = rs_tDBInput_1
										.getInt(47);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 48) {
							row1.AltPassword = null;
						} else {

							tmpContent_tDBInput_1 = rs_tDBInput_1.getString(48);
							if (tmpContent_tDBInput_1 != null) {
								if (talendToDBList_tDBInput_1
										.contains(rsmd_tDBInput_1
												.getColumnTypeName(48)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row1.AltPassword = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_1);
								} else {
									row1.AltPassword = tmpContent_tDBInput_1;
								}
							} else {
								row1.AltPassword = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 49) {
							row1.BravoUsername = null;
						} else {

							tmpContent_tDBInput_1 = rs_tDBInput_1.getString(49);
							if (tmpContent_tDBInput_1 != null) {
								if (talendToDBList_tDBInput_1
										.contains(rsmd_tDBInput_1
												.getColumnTypeName(49)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row1.BravoUsername = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_1);
								} else {
									row1.BravoUsername = tmpContent_tDBInput_1;
								}
							} else {
								row1.BravoUsername = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 50) {
							row1.BravoPassword = null;
						} else {

							tmpContent_tDBInput_1 = rs_tDBInput_1.getString(50);
							if (tmpContent_tDBInput_1 != null) {
								if (talendToDBList_tDBInput_1
										.contains(rsmd_tDBInput_1
												.getColumnTypeName(50)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row1.BravoPassword = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_1);
								} else {
									row1.BravoPassword = tmpContent_tDBInput_1;
								}
							} else {
								row1.BravoPassword = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 51) {
							row1.CreditAvailableDate = null;
						} else {

							row1.CreditAvailableDate = mssqlGTU_tDBInput_1
									.getDate(rsmd_tDBInput_1, rs_tDBInput_1, 51);

						}
						if (colQtyInRs_tDBInput_1 < 52) {
							row1.DefaultUsageId = 0;
						} else {

							if (rs_tDBInput_1.getObject(52) != null) {
								row1.DefaultUsageId = rs_tDBInput_1.getInt(52);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 53) {
							row1.ExtTokenKey = null;
						} else {

							tmpContent_tDBInput_1 = rs_tDBInput_1.getString(53);
							if (tmpContent_tDBInput_1 != null) {
								if (talendToDBList_tDBInput_1
										.contains(rsmd_tDBInput_1
												.getColumnTypeName(53)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row1.ExtTokenKey = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_1);
								} else {
									row1.ExtTokenKey = tmpContent_tDBInput_1;
								}
							} else {
								row1.ExtTokenKey = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 54) {
							row1.SubjectAreaAutoUpdateDate = null;
						} else {

							row1.SubjectAreaAutoUpdateDate = mssqlGTU_tDBInput_1
									.getDate(rsmd_tDBInput_1, rs_tDBInput_1, 54);

						}
						if (colQtyInRs_tDBInput_1 < 55) {
							row1.ReqCCOverrides = null;
						} else {

							tmpContent_tDBInput_1 = rs_tDBInput_1.getString(55);
							if (tmpContent_tDBInput_1 != null) {
								if (talendToDBList_tDBInput_1
										.contains(rsmd_tDBInput_1
												.getColumnTypeName(55)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row1.ReqCCOverrides = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_1);
								} else {
									row1.ReqCCOverrides = tmpContent_tDBInput_1;
								}
							} else {
								row1.ReqCCOverrides = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 56) {
							row1.PriceQuoteHandling = 0;
						} else {

							if (rs_tDBInput_1.getObject(56) != null) {
								row1.PriceQuoteHandling = rs_tDBInput_1
										.getShort(56);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 57) {
							row1.PriceQuoteIncreases = null;
						} else {

							if (rs_tDBInput_1.getObject(57) != null) {
								row1.PriceQuoteIncreases = rs_tDBInput_1
										.getObject(57);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}

						/**
						 * [tDBInput_1 begin ] stop
						 */

						/**
						 * [tDBInput_1 main ] start
						 */

						currentComponent = "tDBInput_1";

						tos_count_tDBInput_1++;

						/**
						 * [tDBInput_1 main ] stop
						 */

						/**
						 * [tDBInput_1 process_data_begin ] start
						 */

						currentComponent = "tDBInput_1";

						/**
						 * [tDBInput_1 process_data_begin ] stop
						 */

						/**
						 * [tDBOutput_1 main ] start
						 */

						currentComponent = "tDBOutput_1";

						// row1
						// row1

						if (execStat) {
							runStat.updateStatOnConnection("row1" + iterateId,
									1, 1);
						}

						whetherReject_tDBOutput_1 = false;
						pstmt_tDBOutput_1.setInt(1, row1.UserId);

						pstmt_tDBOutput_1.setInt(2, row1.ClientId);

						if (row1.Email == null) {
							pstmt_tDBOutput_1
									.setNull(3, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(3, row1.Email);
						}

						if (row1.Password == null) {
							pstmt_tDBOutput_1
									.setNull(4, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(4, row1.Password);
						}

						if (row1.FriendlyName == null) {
							pstmt_tDBOutput_1
									.setNull(5, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(5, row1.FriendlyName);
						}

						pstmt_tDBOutput_1.setInt(6, row1.DepartmentId);

						pstmt_tDBOutput_1.setInt(7, row1.LocationId);

						pstmt_tDBOutput_1.setInt(8, row1.ContactId);

						if (row1.PasswordSalt == null) {
							pstmt_tDBOutput_1
									.setNull(9, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(9, row1.PasswordSalt);
						}

						if (row1.PasswordQuestion == null) {
							pstmt_tDBOutput_1.setNull(10,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(10,
									row1.PasswordQuestion);
						}

						if (row1.PasswordAnswer == null) {
							pstmt_tDBOutput_1.setNull(11,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1
									.setString(11, row1.PasswordAnswer);
						}

						if (row1.AnswerSalt == null) {
							pstmt_tDBOutput_1.setNull(12,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(12, row1.AnswerSalt);
						}

						pstmt_tDBOutput_1.setShort(13, row1.Status);

						pstmt_tDBOutput_1.setShort(14, row1.IsLockedOut);

						if (row1.LastLoginTime != null) {
							pstmt_tDBOutput_1.setTimestamp(
									15,
									new java.sql.Timestamp(row1.LastLoginTime
											.getTime()));
						} else {
							pstmt_tDBOutput_1.setNull(15,
									java.sql.Types.TIMESTAMP);
						}

						if (row1.LastPasswordChangeTime != null) {
							pstmt_tDBOutput_1.setTimestamp(
									16,
									new java.sql.Timestamp(
											row1.LastPasswordChangeTime
													.getTime()));
						} else {
							pstmt_tDBOutput_1.setNull(16,
									java.sql.Types.TIMESTAMP);
						}

						if (row1.LastLockoutTime != null) {
							pstmt_tDBOutput_1.setTimestamp(
									17,
									new java.sql.Timestamp(row1.LastLockoutTime
											.getTime()));
						} else {
							pstmt_tDBOutput_1.setNull(17,
									java.sql.Types.TIMESTAMP);
						}

						if (row1.LastActivityTime != null) {
							pstmt_tDBOutput_1.setTimestamp(18,
									new java.sql.Timestamp(
											row1.LastActivityTime.getTime()));
						} else {
							pstmt_tDBOutput_1.setNull(18,
									java.sql.Types.TIMESTAMP);
						}

						pstmt_tDBOutput_1.setInt(19, row1.FpaCount);

						if (row1.FpaWindowStart != null) {
							pstmt_tDBOutput_1.setTimestamp(
									20,
									new java.sql.Timestamp(row1.FpaWindowStart
											.getTime()));
						} else {
							pstmt_tDBOutput_1.setNull(20,
									java.sql.Types.TIMESTAMP);
						}

						pstmt_tDBOutput_1.setInt(21, row1.FpaAnswerCount);

						if (row1.FpaAnswerWindowStart != null) {
							pstmt_tDBOutput_1
									.setTimestamp(
											22,
											new java.sql.Timestamp(
													row1.FpaAnswerWindowStart
															.getTime()));
						} else {
							pstmt_tDBOutput_1.setNull(22,
									java.sql.Types.TIMESTAMP);
						}

						if (row1.Comments == null) {
							pstmt_tDBOutput_1.setNull(23,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(23, row1.Comments);
						}

						if (row1.CreateTime != null) {
							pstmt_tDBOutput_1.setTimestamp(
									24,
									new java.sql.Timestamp(row1.CreateTime
											.getTime()));
						} else {
							pstmt_tDBOutput_1.setNull(24,
									java.sql.Types.TIMESTAMP);
						}

						if (row1.PriceLimit == null) {
							pstmt_tDBOutput_1.setNull(25, java.sql.Types.OTHER);
						} else {
							pstmt_tDBOutput_1.setObject(25, row1.PriceLimit);
						}

						pstmt_tDBOutput_1.setShort(26, row1.TimeZone);

						pstmt_tDBOutput_1.setInt(27, row1.Culture);

						if (row1.LastUpdate != null) {
							pstmt_tDBOutput_1.setTimestamp(
									28,
									new java.sql.Timestamp(row1.LastUpdate
											.getTime()));
						} else {
							pstmt_tDBOutput_1.setNull(28,
									java.sql.Types.TIMESTAMP);
						}

						if (row1.CostCenterDefault == null) {
							pstmt_tDBOutput_1.setNull(29,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(29,
									row1.CostCenterDefault);
						}

						if (row1.CustomId == null) {
							pstmt_tDBOutput_1.setNull(30,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(30, row1.CustomId);
						}

						if (row1.BillRefDefault == null) {
							pstmt_tDBOutput_1.setNull(31,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1
									.setString(31, row1.BillRefDefault);
						}

						if (row1.PODefault == null) {
							pstmt_tDBOutput_1.setNull(32,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(32, row1.PODefault);
						}

						if (row1.CustOrderDefault == null) {
							pstmt_tDBOutput_1.setNull(33,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(33,
									row1.CustOrderDefault);
						}

						pstmt_tDBOutput_1.setInt(34, row1.ImpersonationGroup);

						pstmt_tDBOutput_1.setShort(35, row1.LinkoutHandling);

						if (row1.ILLId == null) {
							pstmt_tDBOutput_1.setNull(36,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(36, row1.ILLId);
						}

						pstmt_tDBOutput_1.setInt(37, row1.BillingMethod);

						pstmt_tDBOutput_1.setInt(38, row1.Language);

						pstmt_tDBOutput_1.setInt(39, row1.SpecTreatment);

						if (row1.JobTitle == null) {
							pstmt_tDBOutput_1.setNull(40,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(40, row1.JobTitle);
						}

						pstmt_tDBOutput_1.setLong(41, row1.ExternalId);

						if (row1.CustomIdScope == null) {
							pstmt_tDBOutput_1.setNull(42,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(42, row1.CustomIdScope);
						}

						pstmt_tDBOutput_1.setInt(43, row1.Sector);

						if (row1.CurrentCreditAmount == null) {
							pstmt_tDBOutput_1.setNull(44, java.sql.Types.OTHER);
						} else {
							pstmt_tDBOutput_1.setObject(44,
									row1.CurrentCreditAmount);
						}

						if (row1.LastCreditAmount == null) {
							pstmt_tDBOutput_1.setNull(45, java.sql.Types.OTHER);
						} else {
							pstmt_tDBOutput_1.setObject(45,
									row1.LastCreditAmount);
						}

						if (row1.LastCreditDate != null) {
							pstmt_tDBOutput_1.setTimestamp(
									46,
									new java.sql.Timestamp(row1.LastCreditDate
											.getTime()));
						} else {
							pstmt_tDBOutput_1.setNull(46,
									java.sql.Types.TIMESTAMP);
						}

						pstmt_tDBOutput_1.setInt(47, row1.MobileProviderId);

						if (row1.AltPassword == null) {
							pstmt_tDBOutput_1.setNull(48,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(48, row1.AltPassword);
						}

						if (row1.BravoUsername == null) {
							pstmt_tDBOutput_1.setNull(49,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(49, row1.BravoUsername);
						}

						if (row1.BravoPassword == null) {
							pstmt_tDBOutput_1.setNull(50,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(50, row1.BravoPassword);
						}

						if (row1.CreditAvailableDate != null) {
							pstmt_tDBOutput_1
									.setTimestamp(51, new java.sql.Timestamp(
											row1.CreditAvailableDate.getTime()));
						} else {
							pstmt_tDBOutput_1.setNull(51,
									java.sql.Types.TIMESTAMP);
						}

						pstmt_tDBOutput_1.setInt(52, row1.DefaultUsageId);

						if (row1.ExtTokenKey == null) {
							pstmt_tDBOutput_1.setNull(53,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(53, row1.ExtTokenKey);
						}

						if (row1.SubjectAreaAutoUpdateDate != null) {
							pstmt_tDBOutput_1.setTimestamp(
									54,
									new java.sql.Timestamp(
											row1.SubjectAreaAutoUpdateDate
													.getTime()));
						} else {
							pstmt_tDBOutput_1.setNull(54,
									java.sql.Types.TIMESTAMP);
						}

						if (row1.ReqCCOverrides == null) {
							pstmt_tDBOutput_1.setNull(55,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1
									.setString(55, row1.ReqCCOverrides);
						}

						pstmt_tDBOutput_1.setShort(56, row1.PriceQuoteHandling);

						if (row1.PriceQuoteIncreases == null) {
							pstmt_tDBOutput_1.setNull(57, java.sql.Types.OTHER);
						} else {
							pstmt_tDBOutput_1.setObject(57,
									row1.PriceQuoteIncreases);
						}

						pstmt_tDBOutput_1.addBatch();
						nb_line_tDBOutput_1++;

						batchSizeCounter_tDBOutput_1++;

						if ((batchSize_tDBOutput_1 > 0)
								&& (batchSize_tDBOutput_1 <= batchSizeCounter_tDBOutput_1)) {
							try {
								int countSum_tDBOutput_1 = 0;

								for (int countEach_tDBOutput_1 : pstmt_tDBOutput_1
										.executeBatch()) {
									countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0
											: countEach_tDBOutput_1);
								}

								insertedCount_tDBOutput_1 += countSum_tDBOutput_1;

								batchSizeCounter_tDBOutput_1 = 0;
							} catch (java.sql.BatchUpdateException e_tDBOutput_1) {
								java.sql.SQLException ne_tDBOutput_1 = e_tDBOutput_1
										.getNextException(), sqle_tDBOutput_1 = null;
								String errormessage_tDBOutput_1;
								if (ne_tDBOutput_1 != null) {
									// build new exception to provide the
									// original cause
									sqle_tDBOutput_1 = new java.sql.SQLException(
											e_tDBOutput_1.getMessage()
													+ "\ncaused by: "
													+ ne_tDBOutput_1
															.getMessage(),
											ne_tDBOutput_1.getSQLState(),
											ne_tDBOutput_1.getErrorCode(),
											ne_tDBOutput_1);
									errormessage_tDBOutput_1 = sqle_tDBOutput_1
											.getMessage();
								} else {
									errormessage_tDBOutput_1 = e_tDBOutput_1
											.getMessage();
								}

								int countSum_tDBOutput_1 = 0;
								for (int countEach_tDBOutput_1 : e_tDBOutput_1
										.getUpdateCounts()) {
									countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0
											: countEach_tDBOutput_1);
								}

								insertedCount_tDBOutput_1 += countSum_tDBOutput_1;

								System.err.println(errormessage_tDBOutput_1);

							}
						}

						commitCounter_tDBOutput_1++;
						if (commitEvery_tDBOutput_1 <= commitCounter_tDBOutput_1) {
							if ((batchSize_tDBOutput_1 > 0)
									&& (batchSizeCounter_tDBOutput_1 > 0)) {
								try {
									int countSum_tDBOutput_1 = 0;

									for (int countEach_tDBOutput_1 : pstmt_tDBOutput_1
											.executeBatch()) {
										countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0
												: countEach_tDBOutput_1);
									}

									insertedCount_tDBOutput_1 += countSum_tDBOutput_1;

									batchSizeCounter_tDBOutput_1 = 0;
								} catch (java.sql.BatchUpdateException e_tDBOutput_1) {
									java.sql.SQLException ne_tDBOutput_1 = e_tDBOutput_1
											.getNextException(), sqle_tDBOutput_1 = null;
									String errormessage_tDBOutput_1;
									if (ne_tDBOutput_1 != null) {
										// build new exception to provide the
										// original cause
										sqle_tDBOutput_1 = new java.sql.SQLException(
												e_tDBOutput_1.getMessage()
														+ "\ncaused by: "
														+ ne_tDBOutput_1
																.getMessage(),
												ne_tDBOutput_1.getSQLState(),
												ne_tDBOutput_1.getErrorCode(),
												ne_tDBOutput_1);
										errormessage_tDBOutput_1 = sqle_tDBOutput_1
												.getMessage();
									} else {
										errormessage_tDBOutput_1 = e_tDBOutput_1
												.getMessage();
									}

									int countSum_tDBOutput_1 = 0;
									for (int countEach_tDBOutput_1 : e_tDBOutput_1
											.getUpdateCounts()) {
										countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0
												: countEach_tDBOutput_1);
									}

									insertedCount_tDBOutput_1 += countSum_tDBOutput_1;

									System.err
											.println(errormessage_tDBOutput_1);

								}
							}
							conn_tDBOutput_1.commit();

							commitCounter_tDBOutput_1 = 0;
						}

						tos_count_tDBOutput_1++;

						/**
						 * [tDBOutput_1 main ] stop
						 */

						/**
						 * [tDBOutput_1 process_data_begin ] start
						 */

						currentComponent = "tDBOutput_1";

						/**
						 * [tDBOutput_1 process_data_begin ] stop
						 */

						/**
						 * [tDBOutput_1 process_data_end ] start
						 */

						currentComponent = "tDBOutput_1";

						/**
						 * [tDBOutput_1 process_data_end ] stop
						 */

						/**
						 * [tDBInput_1 process_data_end ] start
						 */

						currentComponent = "tDBInput_1";

						/**
						 * [tDBInput_1 process_data_end ] stop
						 */

						/**
						 * [tDBInput_1 end ] start
						 */

						currentComponent = "tDBInput_1";

					}
				} finally {
					if (rs_tDBInput_1 != null) {
						rs_tDBInput_1.close();
					}
					if (stmt_tDBInput_1 != null) {
						stmt_tDBInput_1.close();
					}
				}
				globalMap.put("tDBInput_1_NB_LINE", nb_line_tDBInput_1);

				ok_Hash.put("tDBInput_1", true);
				end_Hash.put("tDBInput_1", System.currentTimeMillis());

				tStatCatcher_1.addMessage(
						"end",
						"tDBInput_1",
						end_Hash.get("tDBInput_1")
								- start_Hash.get("tDBInput_1"));
				tStatCatcher_1Process(globalMap);
				talendStats_STATS.addMessage(
						"end",
						"tDBInput_1",
						end_Hash.get("tDBInput_1")
								- start_Hash.get("tDBInput_1"));
				talendStats_STATSProcess(globalMap);

				/**
				 * [tDBInput_1 end ] stop
				 */

				/**
				 * [tDBOutput_1 end ] start
				 */

				currentComponent = "tDBOutput_1";

				try {
					int countSum_tDBOutput_1 = 0;
					if (pstmt_tDBOutput_1 != null
							&& batchSizeCounter_tDBOutput_1 > 0) {

						for (int countEach_tDBOutput_1 : pstmt_tDBOutput_1
								.executeBatch()) {
							countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0
									: countEach_tDBOutput_1);
						}

					}

					insertedCount_tDBOutput_1 += countSum_tDBOutput_1;

				} catch (java.sql.BatchUpdateException e_tDBOutput_1) {
					java.sql.SQLException ne_tDBOutput_1 = e_tDBOutput_1
							.getNextException(), sqle_tDBOutput_1 = null;
					String errormessage_tDBOutput_1;
					if (ne_tDBOutput_1 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_1 = new java.sql.SQLException(
								e_tDBOutput_1.getMessage() + "\ncaused by: "
										+ ne_tDBOutput_1.getMessage(),
								ne_tDBOutput_1.getSQLState(),
								ne_tDBOutput_1.getErrorCode(), ne_tDBOutput_1);
						errormessage_tDBOutput_1 = sqle_tDBOutput_1
								.getMessage();
					} else {
						errormessage_tDBOutput_1 = e_tDBOutput_1.getMessage();
					}

					int countSum_tDBOutput_1 = 0;
					for (int countEach_tDBOutput_1 : e_tDBOutput_1
							.getUpdateCounts()) {
						countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0
								: countEach_tDBOutput_1);
					}

					insertedCount_tDBOutput_1 += countSum_tDBOutput_1;

					System.err.println(errormessage_tDBOutput_1);

				}

				if (pstmt_tDBOutput_1 != null) {

					pstmt_tDBOutput_1.close();
					resourceMap.remove("pstmt_tDBOutput_1");
				}
				resourceMap.put("statementClosed_tDBOutput_1", true);

				conn_tDBOutput_1.commit();

				conn_tDBOutput_1.close();

				resourceMap.put("finish_tDBOutput_1", true);

				nb_line_deleted_tDBOutput_1 = nb_line_deleted_tDBOutput_1
						+ deletedCount_tDBOutput_1;
				nb_line_update_tDBOutput_1 = nb_line_update_tDBOutput_1
						+ updatedCount_tDBOutput_1;
				nb_line_inserted_tDBOutput_1 = nb_line_inserted_tDBOutput_1
						+ insertedCount_tDBOutput_1;
				nb_line_rejected_tDBOutput_1 = nb_line_rejected_tDBOutput_1
						+ rejectedCount_tDBOutput_1;

				globalMap.put("tDBOutput_1_NB_LINE", nb_line_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_UPDATED",
						nb_line_update_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_INSERTED",
						nb_line_inserted_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_DELETED",
						nb_line_deleted_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_REJECTED",
						nb_line_rejected_tDBOutput_1);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row1" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tDBOutput_1", true);
				end_Hash.put("tDBOutput_1", System.currentTimeMillis());

				tStatCatcher_1.addMessage(
						"end",
						"tDBOutput_1",
						end_Hash.get("tDBOutput_1")
								- start_Hash.get("tDBOutput_1"));
				tStatCatcher_1Process(globalMap);
				talendStats_STATS.addMessage(
						"end",
						"tDBOutput_1",
						end_Hash.get("tDBOutput_1")
								- start_Hash.get("tDBOutput_1"));
				talendStats_STATSProcess(globalMap);

				/**
				 * [tDBOutput_1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_1 finally ] start
				 */

				currentComponent = "tDBInput_1";

				/**
				 * [tDBInput_1 finally ] stop
				 */

				/**
				 * [tDBOutput_1 finally ] start
				 */

				currentComponent = "tDBOutput_1";

				try {
					if (resourceMap.get("statementClosed_tDBOutput_1") == null) {
						java.sql.PreparedStatement pstmtToClose_tDBOutput_1 = null;
						if ((pstmtToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmt_tDBOutput_1")) != null) {
							pstmtToClose_tDBOutput_1.close();
						}
					}
				} finally {
					if (resourceMap.get("finish_tDBOutput_1") == null) {
						java.sql.Connection ctn_tDBOutput_1 = null;
						if ((ctn_tDBOutput_1 = (java.sql.Connection) resourceMap
								.get("conn_tDBOutput_1")) != null) {
							try {
								ctn_tDBOutput_1.close();
							} catch (java.sql.SQLException sqlEx_tDBOutput_1) {
								String errorMessage_tDBOutput_1 = "failed to close the connection in tDBOutput_1 :"
										+ sqlEx_tDBOutput_1.getMessage();
								System.err.println(errorMessage_tDBOutput_1);
							}
						}
					}
				}

				/**
				 * [tDBOutput_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 1);
	}

	public static class row4Struct implements
			routines.system.IPersistableRow<row4Struct> {
		final static byte[] commonByteArrayLock_ORDER_ETL_RFE_ETL = new byte[0];
		static byte[] commonByteArray_ORDER_ETL_RFE_ETL = new byte[0];

		public int ClientId;

		public int getClientId() {
			return this.ClientId;
		}

		public String ClientName;

		public String getClientName() {
			return this.ClientName;
		}

		public String Description;

		public String getDescription() {
			return this.Description;
		}

		public int BaseAdminViewId;

		public int getBaseAdminViewId() {
			return this.BaseAdminViewId;
		}

		public int BaseUserViewId;

		public int getBaseUserViewId() {
			return this.BaseUserViewId;
		}

		public String ThemeName;

		public String getThemeName() {
			return this.ThemeName;
		}

		public int ContactId;

		public int getContactId() {
			return this.ContactId;
		}

		public String Notes;

		public String getNotes() {
			return this.Notes;
		}

		public String DivisionText;

		public String getDivisionText() {
			return this.DivisionText;
		}

		public String DepartmentText;

		public String getDepartmentText() {
			return this.DepartmentText;
		}

		public String LocationText;

		public String getLocationText() {
			return this.LocationText;
		}

		public String BillRefText;

		public String getBillRefText() {
			return this.BillRefText;
		}

		public String CostCenterText;

		public String getCostCenterText() {
			return this.CostCenterText;
		}

		public String BillRefDefault;

		public String getBillRefDefault() {
			return this.BillRefDefault;
		}

		public String CostCenterDefault;

		public String getCostCenterDefault() {
			return this.CostCenterDefault;
		}

		public String BillRefValidation;

		public String getBillRefValidation() {
			return this.BillRefValidation;
		}

		public String CostCenterValidation;

		public String getCostCenterValidation() {
			return this.CostCenterValidation;
		}

		public short BillRefOptions;

		public short getBillRefOptions() {
			return this.BillRefOptions;
		}

		public short CostCenterOptions;

		public short getCostCenterOptions() {
			return this.CostCenterOptions;
		}

		public int DivisionDefault;

		public int getDivisionDefault() {
			return this.DivisionDefault;
		}

		public int BillingContactId;

		public int getBillingContactId() {
			return this.BillingContactId;
		}

		public Object Discount;

		public Object getDiscount() {
			return this.Discount;
		}

		public short PasswordMinReqLength;

		public short getPasswordMinReqLength() {
			return this.PasswordMinReqLength;
		}

		public boolean PasswordReqQAndA;

		public boolean getPasswordReqQAndA() {
			return this.PasswordReqQAndA;
		}

		public short PasswordMinNonAlphaNum;

		public short getPasswordMinNonAlphaNum() {
			return this.PasswordMinNonAlphaNum;
		}

		public short PasswordChangeInterval;

		public short getPasswordChangeInterval() {
			return this.PasswordChangeInterval;
		}

		public boolean PasswordReqInitChange;

		public boolean getPasswordReqInitChange() {
			return this.PasswordReqInitChange;
		}

		public boolean ShowPricing;

		public boolean getShowPricing() {
			return this.ShowPricing;
		}

		public boolean AdvRefReview;

		public boolean getAdvRefReview() {
			return this.AdvRefReview;
		}

		public int DefaultClassId;

		public int getDefaultClassId() {
			return this.DefaultClassId;
		}

		public int BillingMethod;

		public int getBillingMethod() {
			return this.BillingMethod;
		}

		public Object PriceLimit;

		public Object getPriceLimit() {
			return this.PriceLimit;
		}

		public String SSOReferringUrls;

		public String getSSOReferringUrls() {
			return this.SSOReferringUrls;
		}

		public String ProductCode;

		public String getProductCode() {
			return this.ProductCode;
		}

		public int Culture;

		public int getCulture() {
			return this.Culture;
		}

		public long DefaultSpecInstruct;

		public long getDefaultSpecInstruct() {
			return this.DefaultSpecInstruct;
		}

		public String POText;

		public String getPOText() {
			return this.POText;
		}

		public String PODefault;

		public String getPODefault() {
			return this.PODefault;
		}

		public String POValidation;

		public String getPOValidation() {
			return this.POValidation;
		}

		public short POOptions;

		public short getPOOptions() {
			return this.POOptions;
		}

		public String CustOrderText;

		public String getCustOrderText() {
			return this.CustOrderText;
		}

		public String CustOrderDefault;

		public String getCustOrderDefault() {
			return this.CustOrderDefault;
		}

		public String CustOrderValidation;

		public String getCustOrderValidation() {
			return this.CustOrderValidation;
		}

		public short CustOrderOptions;

		public short getCustOrderOptions() {
			return this.CustOrderOptions;
		}

		public String ReplyToEmail;

		public String getReplyToEmail() {
			return this.ReplyToEmail;
		}

		public int SelfRegUserViewId;

		public int getSelfRegUserViewId() {
			return this.SelfRegUserViewId;
		}

		public int SelfRegUserGroupId;

		public int getSelfRegUserGroupId() {
			return this.SelfRegUserGroupId;
		}

		public String TaxIdNum;

		public String getTaxIdNum() {
			return this.TaxIdNum;
		}

		public String ExtProperties;

		public String getExtProperties() {
			return this.ExtProperties;
		}

		public int ClientGroupId;

		public int getClientGroupId() {
			return this.ClientGroupId;
		}

		public String LogoffUrl;

		public String getLogoffUrl() {
			return this.LogoffUrl;
		}

		public short Partner;

		public short getPartner() {
			return this.Partner;
		}

		public String PartnerClientId;

		public String getPartnerClientId() {
			return this.PartnerClientId;
		}

		public String LogoLink;

		public String getLogoLink() {
			return this.LogoLink;
		}

		public short DRMMethodInt;

		public short getDRMMethodInt() {
			return this.DRMMethodInt;
		}

		public short DRMMethodExt;

		public short getDRMMethodExt() {
			return this.DRMMethodExt;
		}

		public int Language;

		public int getLanguage() {
			return this.Language;
		}

		public int Industry;

		public int getIndustry() {
			return this.Industry;
		}

		public String ReferredBy;

		public String getReferredBy() {
			return this.ReferredBy;
		}

		public int SpecTreatment;

		public int getSpecTreatment() {
			return this.SpecTreatment;
		}

		public String FriendlyNameText;

		public String getFriendlyNameText() {
			return this.FriendlyNameText;
		}

		public String SelfRegDomains;

		public String getSelfRegDomains() {
			return this.SelfRegDomains;
		}

		public java.util.Date CreateTime;

		public java.util.Date getCreateTime() {
			return this.CreateTime;
		}

		public java.util.Date LastUpdate;

		public java.util.Date getLastUpdate() {
			return this.LastUpdate;
		}

		public int Sector;

		public int getSector() {
			return this.Sector;
		}

		public int PersonalLibColId;

		public int getPersonalLibColId() {
			return this.PersonalLibColId;
		}

		public int DefaultRepoLibId;

		public int getDefaultRepoLibId() {
			return this.DefaultRepoLibId;
		}

		public int SharedLibUseId;

		public int getSharedLibUseId() {
			return this.SharedLibUseId;
		}

		public short BestCheapestInt;

		public short getBestCheapestInt() {
			return this.BestCheapestInt;
		}

		public short BestCheapestNonInt;

		public short getBestCheapestNonInt() {
			return this.BestCheapestNonInt;
		}

		public String SessionResets;

		public String getSessionResets() {
			return this.SessionResets;
		}

		public int DefaultUsageId;

		public int getDefaultUsageId() {
			return this.DefaultUsageId;
		}

		public short PriceLimitHandling;

		public short getPriceLimitHandling() {
			return this.PriceLimitHandling;
		}

		public int OrgAttribs;

		public int getOrgAttribs() {
			return this.OrgAttribs;
		}

		public String DRMKey;

		public String getDRMKey() {
			return this.DRMKey;
		}

		public short LinkoutHandling;

		public short getLinkoutHandling() {
			return this.LinkoutHandling;
		}

		public short ReuseLastNumPasswords;

		public short getReuseLastNumPasswords() {
			return this.ReuseLastNumPasswords;
		}

		public short ReuseLastDaysPasswords;

		public short getReuseLastDaysPasswords() {
			return this.ReuseLastDaysPasswords;
		}

		public String ProxySerialNumber;

		public String getProxySerialNumber() {
			return this.ProxySerialNumber;
		}

		public String OrderNote;

		public String getOrderNote() {
			return this.OrderNote;
		}

		public short FeedSource;

		public short getFeedSource() {
			return this.FeedSource;
		}

		public String CCEmail;

		public String getCCEmail() {
			return this.CCEmail;
		}

		public String EZProxyUrl;

		public String getEZProxyUrl() {
			return this.EZProxyUrl;
		}

		public String ReqCCOverrides;

		public String getReqCCOverrides() {
			return this.ReqCCOverrides;
		}

		public String MarketingEmail;

		public String getMarketingEmail() {
			return this.MarketingEmail;
		}

		public short Status;

		public short getStatus() {
			return this.Status;
		}

		public String LogoLinkRight;

		public String getLogoLinkRight() {
			return this.LogoLinkRight;
		}

		public String CustomOrderLink;

		public String getCustomOrderLink() {
			return this.CustomOrderLink;
		}

		public int ClientOptions;

		public int getClientOptions() {
			return this.ClientOptions;
		}

		public Object ClientPrmGuid;

		public Object getClientPrmGuid() {
			return this.ClientPrmGuid;
		}

		public String ClientNameAI;

		public String getClientNameAI() {
			return this.ClientNameAI;
		}

		public short PriceQuoteHandling;

		public short getPriceQuoteHandling() {
			return this.PriceQuoteHandling;
		}

		public Object PriceQuoteIncreases;

		public Object getPriceQuoteIncreases() {
			return this.PriceQuoteIncreases;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ORDER_ETL_RFE_ETL.length) {
					if (length < 1024
							&& commonByteArray_ORDER_ETL_RFE_ETL.length == 0) {
						commonByteArray_ORDER_ETL_RFE_ETL = new byte[1024];
					} else {
						commonByteArray_ORDER_ETL_RFE_ETL = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ORDER_ETL_RFE_ETL, 0, length);
				strReturn = new String(commonByteArray_ORDER_ETL_RFE_ETL, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ORDER_ETL_RFE_ETL) {

				try {

					int length = 0;

					this.ClientId = dis.readInt();

					this.ClientName = readString(dis);

					this.Description = readString(dis);

					this.BaseAdminViewId = dis.readInt();

					this.BaseUserViewId = dis.readInt();

					this.ThemeName = readString(dis);

					this.ContactId = dis.readInt();

					this.Notes = readString(dis);

					this.DivisionText = readString(dis);

					this.DepartmentText = readString(dis);

					this.LocationText = readString(dis);

					this.BillRefText = readString(dis);

					this.CostCenterText = readString(dis);

					this.BillRefDefault = readString(dis);

					this.CostCenterDefault = readString(dis);

					this.BillRefValidation = readString(dis);

					this.CostCenterValidation = readString(dis);

					this.BillRefOptions = dis.readShort();

					this.CostCenterOptions = dis.readShort();

					this.DivisionDefault = dis.readInt();

					this.BillingContactId = dis.readInt();

					this.Discount = (Object) dis.readObject();

					this.PasswordMinReqLength = dis.readShort();

					this.PasswordReqQAndA = dis.readBoolean();

					this.PasswordMinNonAlphaNum = dis.readShort();

					this.PasswordChangeInterval = dis.readShort();

					this.PasswordReqInitChange = dis.readBoolean();

					this.ShowPricing = dis.readBoolean();

					this.AdvRefReview = dis.readBoolean();

					this.DefaultClassId = dis.readInt();

					this.BillingMethod = dis.readInt();

					this.PriceLimit = (Object) dis.readObject();

					this.SSOReferringUrls = readString(dis);

					this.ProductCode = readString(dis);

					this.Culture = dis.readInt();

					this.DefaultSpecInstruct = dis.readLong();

					this.POText = readString(dis);

					this.PODefault = readString(dis);

					this.POValidation = readString(dis);

					this.POOptions = dis.readShort();

					this.CustOrderText = readString(dis);

					this.CustOrderDefault = readString(dis);

					this.CustOrderValidation = readString(dis);

					this.CustOrderOptions = dis.readShort();

					this.ReplyToEmail = readString(dis);

					this.SelfRegUserViewId = dis.readInt();

					this.SelfRegUserGroupId = dis.readInt();

					this.TaxIdNum = readString(dis);

					this.ExtProperties = readString(dis);

					this.ClientGroupId = dis.readInt();

					this.LogoffUrl = readString(dis);

					this.Partner = dis.readShort();

					this.PartnerClientId = readString(dis);

					this.LogoLink = readString(dis);

					this.DRMMethodInt = dis.readShort();

					this.DRMMethodExt = dis.readShort();

					this.Language = dis.readInt();

					this.Industry = dis.readInt();

					this.ReferredBy = readString(dis);

					this.SpecTreatment = dis.readInt();

					this.FriendlyNameText = readString(dis);

					this.SelfRegDomains = readString(dis);

					this.CreateTime = readDate(dis);

					this.LastUpdate = readDate(dis);

					this.Sector = dis.readInt();

					this.PersonalLibColId = dis.readInt();

					this.DefaultRepoLibId = dis.readInt();

					this.SharedLibUseId = dis.readInt();

					this.BestCheapestInt = dis.readShort();

					this.BestCheapestNonInt = dis.readShort();

					this.SessionResets = readString(dis);

					this.DefaultUsageId = dis.readInt();

					this.PriceLimitHandling = dis.readShort();

					this.OrgAttribs = dis.readInt();

					this.DRMKey = readString(dis);

					this.LinkoutHandling = dis.readShort();

					this.ReuseLastNumPasswords = dis.readShort();

					this.ReuseLastDaysPasswords = dis.readShort();

					this.ProxySerialNumber = readString(dis);

					this.OrderNote = readString(dis);

					this.FeedSource = dis.readShort();

					this.CCEmail = readString(dis);

					this.EZProxyUrl = readString(dis);

					this.ReqCCOverrides = readString(dis);

					this.MarketingEmail = readString(dis);

					this.Status = dis.readShort();

					this.LogoLinkRight = readString(dis);

					this.CustomOrderLink = readString(dis);

					this.ClientOptions = dis.readInt();

					this.ClientPrmGuid = (Object) dis.readObject();

					this.ClientNameAI = readString(dis);

					this.PriceQuoteHandling = dis.readShort();

					this.PriceQuoteIncreases = (Object) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.ClientId);

				// String

				writeString(this.ClientName, dos);

				// String

				writeString(this.Description, dos);

				// int

				dos.writeInt(this.BaseAdminViewId);

				// int

				dos.writeInt(this.BaseUserViewId);

				// String

				writeString(this.ThemeName, dos);

				// int

				dos.writeInt(this.ContactId);

				// String

				writeString(this.Notes, dos);

				// String

				writeString(this.DivisionText, dos);

				// String

				writeString(this.DepartmentText, dos);

				// String

				writeString(this.LocationText, dos);

				// String

				writeString(this.BillRefText, dos);

				// String

				writeString(this.CostCenterText, dos);

				// String

				writeString(this.BillRefDefault, dos);

				// String

				writeString(this.CostCenterDefault, dos);

				// String

				writeString(this.BillRefValidation, dos);

				// String

				writeString(this.CostCenterValidation, dos);

				// short

				dos.writeShort(this.BillRefOptions);

				// short

				dos.writeShort(this.CostCenterOptions);

				// int

				dos.writeInt(this.DivisionDefault);

				// int

				dos.writeInt(this.BillingContactId);

				// Object

				dos.writeObject(this.Discount);

				// short

				dos.writeShort(this.PasswordMinReqLength);

				// boolean

				dos.writeBoolean(this.PasswordReqQAndA);

				// short

				dos.writeShort(this.PasswordMinNonAlphaNum);

				// short

				dos.writeShort(this.PasswordChangeInterval);

				// boolean

				dos.writeBoolean(this.PasswordReqInitChange);

				// boolean

				dos.writeBoolean(this.ShowPricing);

				// boolean

				dos.writeBoolean(this.AdvRefReview);

				// int

				dos.writeInt(this.DefaultClassId);

				// int

				dos.writeInt(this.BillingMethod);

				// Object

				dos.writeObject(this.PriceLimit);

				// String

				writeString(this.SSOReferringUrls, dos);

				// String

				writeString(this.ProductCode, dos);

				// int

				dos.writeInt(this.Culture);

				// long

				dos.writeLong(this.DefaultSpecInstruct);

				// String

				writeString(this.POText, dos);

				// String

				writeString(this.PODefault, dos);

				// String

				writeString(this.POValidation, dos);

				// short

				dos.writeShort(this.POOptions);

				// String

				writeString(this.CustOrderText, dos);

				// String

				writeString(this.CustOrderDefault, dos);

				// String

				writeString(this.CustOrderValidation, dos);

				// short

				dos.writeShort(this.CustOrderOptions);

				// String

				writeString(this.ReplyToEmail, dos);

				// int

				dos.writeInt(this.SelfRegUserViewId);

				// int

				dos.writeInt(this.SelfRegUserGroupId);

				// String

				writeString(this.TaxIdNum, dos);

				// String

				writeString(this.ExtProperties, dos);

				// int

				dos.writeInt(this.ClientGroupId);

				// String

				writeString(this.LogoffUrl, dos);

				// short

				dos.writeShort(this.Partner);

				// String

				writeString(this.PartnerClientId, dos);

				// String

				writeString(this.LogoLink, dos);

				// short

				dos.writeShort(this.DRMMethodInt);

				// short

				dos.writeShort(this.DRMMethodExt);

				// int

				dos.writeInt(this.Language);

				// int

				dos.writeInt(this.Industry);

				// String

				writeString(this.ReferredBy, dos);

				// int

				dos.writeInt(this.SpecTreatment);

				// String

				writeString(this.FriendlyNameText, dos);

				// String

				writeString(this.SelfRegDomains, dos);

				// java.util.Date

				writeDate(this.CreateTime, dos);

				// java.util.Date

				writeDate(this.LastUpdate, dos);

				// int

				dos.writeInt(this.Sector);

				// int

				dos.writeInt(this.PersonalLibColId);

				// int

				dos.writeInt(this.DefaultRepoLibId);

				// int

				dos.writeInt(this.SharedLibUseId);

				// short

				dos.writeShort(this.BestCheapestInt);

				// short

				dos.writeShort(this.BestCheapestNonInt);

				// String

				writeString(this.SessionResets, dos);

				// int

				dos.writeInt(this.DefaultUsageId);

				// short

				dos.writeShort(this.PriceLimitHandling);

				// int

				dos.writeInt(this.OrgAttribs);

				// String

				writeString(this.DRMKey, dos);

				// short

				dos.writeShort(this.LinkoutHandling);

				// short

				dos.writeShort(this.ReuseLastNumPasswords);

				// short

				dos.writeShort(this.ReuseLastDaysPasswords);

				// String

				writeString(this.ProxySerialNumber, dos);

				// String

				writeString(this.OrderNote, dos);

				// short

				dos.writeShort(this.FeedSource);

				// String

				writeString(this.CCEmail, dos);

				// String

				writeString(this.EZProxyUrl, dos);

				// String

				writeString(this.ReqCCOverrides, dos);

				// String

				writeString(this.MarketingEmail, dos);

				// short

				dos.writeShort(this.Status);

				// String

				writeString(this.LogoLinkRight, dos);

				// String

				writeString(this.CustomOrderLink, dos);

				// int

				dos.writeInt(this.ClientOptions);

				// Object

				dos.writeObject(this.ClientPrmGuid);

				// String

				writeString(this.ClientNameAI, dos);

				// short

				dos.writeShort(this.PriceQuoteHandling);

				// Object

				dos.writeObject(this.PriceQuoteIncreases);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ClientId=" + String.valueOf(ClientId));
			sb.append(",ClientName=" + ClientName);
			sb.append(",Description=" + Description);
			sb.append(",BaseAdminViewId=" + String.valueOf(BaseAdminViewId));
			sb.append(",BaseUserViewId=" + String.valueOf(BaseUserViewId));
			sb.append(",ThemeName=" + ThemeName);
			sb.append(",ContactId=" + String.valueOf(ContactId));
			sb.append(",Notes=" + Notes);
			sb.append(",DivisionText=" + DivisionText);
			sb.append(",DepartmentText=" + DepartmentText);
			sb.append(",LocationText=" + LocationText);
			sb.append(",BillRefText=" + BillRefText);
			sb.append(",CostCenterText=" + CostCenterText);
			sb.append(",BillRefDefault=" + BillRefDefault);
			sb.append(",CostCenterDefault=" + CostCenterDefault);
			sb.append(",BillRefValidation=" + BillRefValidation);
			sb.append(",CostCenterValidation=" + CostCenterValidation);
			sb.append(",BillRefOptions=" + String.valueOf(BillRefOptions));
			sb.append(",CostCenterOptions=" + String.valueOf(CostCenterOptions));
			sb.append(",DivisionDefault=" + String.valueOf(DivisionDefault));
			sb.append(",BillingContactId=" + String.valueOf(BillingContactId));
			sb.append(",Discount=" + String.valueOf(Discount));
			sb.append(",PasswordMinReqLength="
					+ String.valueOf(PasswordMinReqLength));
			sb.append(",PasswordReqQAndA=" + String.valueOf(PasswordReqQAndA));
			sb.append(",PasswordMinNonAlphaNum="
					+ String.valueOf(PasswordMinNonAlphaNum));
			sb.append(",PasswordChangeInterval="
					+ String.valueOf(PasswordChangeInterval));
			sb.append(",PasswordReqInitChange="
					+ String.valueOf(PasswordReqInitChange));
			sb.append(",ShowPricing=" + String.valueOf(ShowPricing));
			sb.append(",AdvRefReview=" + String.valueOf(AdvRefReview));
			sb.append(",DefaultClassId=" + String.valueOf(DefaultClassId));
			sb.append(",BillingMethod=" + String.valueOf(BillingMethod));
			sb.append(",PriceLimit=" + String.valueOf(PriceLimit));
			sb.append(",SSOReferringUrls=" + SSOReferringUrls);
			sb.append(",ProductCode=" + ProductCode);
			sb.append(",Culture=" + String.valueOf(Culture));
			sb.append(",DefaultSpecInstruct="
					+ String.valueOf(DefaultSpecInstruct));
			sb.append(",POText=" + POText);
			sb.append(",PODefault=" + PODefault);
			sb.append(",POValidation=" + POValidation);
			sb.append(",POOptions=" + String.valueOf(POOptions));
			sb.append(",CustOrderText=" + CustOrderText);
			sb.append(",CustOrderDefault=" + CustOrderDefault);
			sb.append(",CustOrderValidation=" + CustOrderValidation);
			sb.append(",CustOrderOptions=" + String.valueOf(CustOrderOptions));
			sb.append(",ReplyToEmail=" + ReplyToEmail);
			sb.append(",SelfRegUserViewId=" + String.valueOf(SelfRegUserViewId));
			sb.append(",SelfRegUserGroupId="
					+ String.valueOf(SelfRegUserGroupId));
			sb.append(",TaxIdNum=" + TaxIdNum);
			sb.append(",ExtProperties=" + ExtProperties);
			sb.append(",ClientGroupId=" + String.valueOf(ClientGroupId));
			sb.append(",LogoffUrl=" + LogoffUrl);
			sb.append(",Partner=" + String.valueOf(Partner));
			sb.append(",PartnerClientId=" + PartnerClientId);
			sb.append(",LogoLink=" + LogoLink);
			sb.append(",DRMMethodInt=" + String.valueOf(DRMMethodInt));
			sb.append(",DRMMethodExt=" + String.valueOf(DRMMethodExt));
			sb.append(",Language=" + String.valueOf(Language));
			sb.append(",Industry=" + String.valueOf(Industry));
			sb.append(",ReferredBy=" + ReferredBy);
			sb.append(",SpecTreatment=" + String.valueOf(SpecTreatment));
			sb.append(",FriendlyNameText=" + FriendlyNameText);
			sb.append(",SelfRegDomains=" + SelfRegDomains);
			sb.append(",CreateTime=" + String.valueOf(CreateTime));
			sb.append(",LastUpdate=" + String.valueOf(LastUpdate));
			sb.append(",Sector=" + String.valueOf(Sector));
			sb.append(",PersonalLibColId=" + String.valueOf(PersonalLibColId));
			sb.append(",DefaultRepoLibId=" + String.valueOf(DefaultRepoLibId));
			sb.append(",SharedLibUseId=" + String.valueOf(SharedLibUseId));
			sb.append(",BestCheapestInt=" + String.valueOf(BestCheapestInt));
			sb.append(",BestCheapestNonInt="
					+ String.valueOf(BestCheapestNonInt));
			sb.append(",SessionResets=" + SessionResets);
			sb.append(",DefaultUsageId=" + String.valueOf(DefaultUsageId));
			sb.append(",PriceLimitHandling="
					+ String.valueOf(PriceLimitHandling));
			sb.append(",OrgAttribs=" + String.valueOf(OrgAttribs));
			sb.append(",DRMKey=" + DRMKey);
			sb.append(",LinkoutHandling=" + String.valueOf(LinkoutHandling));
			sb.append(",ReuseLastNumPasswords="
					+ String.valueOf(ReuseLastNumPasswords));
			sb.append(",ReuseLastDaysPasswords="
					+ String.valueOf(ReuseLastDaysPasswords));
			sb.append(",ProxySerialNumber=" + ProxySerialNumber);
			sb.append(",OrderNote=" + OrderNote);
			sb.append(",FeedSource=" + String.valueOf(FeedSource));
			sb.append(",CCEmail=" + CCEmail);
			sb.append(",EZProxyUrl=" + EZProxyUrl);
			sb.append(",ReqCCOverrides=" + ReqCCOverrides);
			sb.append(",MarketingEmail=" + MarketingEmail);
			sb.append(",Status=" + String.valueOf(Status));
			sb.append(",LogoLinkRight=" + LogoLinkRight);
			sb.append(",CustomOrderLink=" + CustomOrderLink);
			sb.append(",ClientOptions=" + String.valueOf(ClientOptions));
			sb.append(",ClientPrmGuid=" + String.valueOf(ClientPrmGuid));
			sb.append(",ClientNameAI=" + ClientNameAI);
			sb.append(",PriceQuoteHandling="
					+ String.valueOf(PriceQuoteHandling));
			sb.append(",PriceQuoteIncreases="
					+ String.valueOf(PriceQuoteIncreases));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row4Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_4Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDBInput_4_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row4Struct row4 = new row4Struct();

				/**
				 * [tDBOutput_4 begin ] start
				 */

				ok_Hash.put("tDBOutput_4", false);
				start_Hash.put("tDBOutput_4", System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tDBOutput_4");
				tStatCatcher_1Process(globalMap);

				talendStats_STATS.addMessage("begin", "tDBOutput_4");
				talendStats_STATSProcess(globalMap);

				currentComponent = "tDBOutput_4";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row4" + iterateId, 0, 0);

					}
				}

				int tos_count_tDBOutput_4 = 0;

				String dbschema_tDBOutput_4 = null;
				dbschema_tDBOutput_4 = context.data_warehouse_order_dwos_schema;

				String tableName_tDBOutput_4 = null;
				if (dbschema_tDBOutput_4 == null
						|| dbschema_tDBOutput_4.trim().length() == 0) {
					tableName_tDBOutput_4 = "dwo_rfe_client";
				} else {
					tableName_tDBOutput_4 = dbschema_tDBOutput_4 + "\".\""
							+ "dwo_rfe_client";
				}

				int nb_line_tDBOutput_4 = 0;
				int nb_line_update_tDBOutput_4 = 0;
				int nb_line_inserted_tDBOutput_4 = 0;
				int nb_line_deleted_tDBOutput_4 = 0;
				int nb_line_rejected_tDBOutput_4 = 0;

				int deletedCount_tDBOutput_4 = 0;
				int updatedCount_tDBOutput_4 = 0;
				int insertedCount_tDBOutput_4 = 0;
				int rejectedCount_tDBOutput_4 = 0;

				boolean whetherReject_tDBOutput_4 = false;

				java.sql.Connection conn_tDBOutput_4 = null;
				String dbUser_tDBOutput_4 = null;

				java.lang.Class.forName("org.postgresql.Driver");
				String url_tDBOutput_4 = "jdbc:postgresql://"
						+ context.data_warehouse_order_dwos_host + ":"
						+ context.data_warehouse_order_dwos_port + "/"
						+ context.data_warehouse_order_dwos_database;
				dbUser_tDBOutput_4 = context.data_warehouse_order_dwos_username;

				final String decryptedPassword_tDBOutput_4 = context.data_warehouse_order_dwos_password;

				String dbPwd_tDBOutput_4 = decryptedPassword_tDBOutput_4;

				conn_tDBOutput_4 = java.sql.DriverManager.getConnection(
						url_tDBOutput_4, dbUser_tDBOutput_4, dbPwd_tDBOutput_4);

				resourceMap.put("conn_tDBOutput_4", conn_tDBOutput_4);
				conn_tDBOutput_4.setAutoCommit(false);
				int commitEvery_tDBOutput_4 = 10000;
				int commitCounter_tDBOutput_4 = 0;

				int batchSize_tDBOutput_4 = 10000;
				int batchSizeCounter_tDBOutput_4 = 0;

				int count_tDBOutput_4 = 0;
				int rsTruncCountNumber_tDBOutput_4 = 0;
				try (java.sql.Statement stmtTruncCount_tDBOutput_4 = conn_tDBOutput_4
						.createStatement()) {
					try (java.sql.ResultSet rsTruncCount_tDBOutput_4 = stmtTruncCount_tDBOutput_4
							.executeQuery("SELECT COUNT(1) FROM \""
									+ tableName_tDBOutput_4 + "\"")) {
						if (rsTruncCount_tDBOutput_4.next()) {
							rsTruncCountNumber_tDBOutput_4 = rsTruncCount_tDBOutput_4
									.getInt(1);
						}
					}
				}
				try (java.sql.Statement stmtTrunc_tDBOutput_4 = conn_tDBOutput_4
						.createStatement()) {
					stmtTrunc_tDBOutput_4.executeUpdate("TRUNCATE TABLE \""
							+ tableName_tDBOutput_4 + "\"");
					deletedCount_tDBOutput_4 += rsTruncCountNumber_tDBOutput_4;
				}
				String insert_tDBOutput_4 = "INSERT INTO \""
						+ tableName_tDBOutput_4
						+ "\" (\"clientid\",\"clientname\",\"description\",\"baseadminviewid\",\"baseuserviewid\",\"themename\",\"contactid\",\"notes\",\"divisiontext\",\"departmenttext\",\"locationtext\",\"billreftext\",\"costcentertext\",\"billrefdefault\",\"costcenterdefault\",\"billrefvalidation\",\"costcentervalidation\",\"billrefoptions\",\"costcenteroptions\",\"divisiondefault\",\"billingcontactid\",\"discount\",\"passwordminreqlength\",\"passwordreqqanda\",\"passwordminnonalphanum\",\"passwordchangeinterval\",\"passwordreqinitchange\",\"showpricing\",\"advrefreview\",\"defaultclassid\",\"billingmethod\",\"pricelimit\",\"ssoreferringurls\",\"productcode\",\"culture\",\"defaultspecinstruct\",\"potext\",\"podefault\",\"povalidation\",\"pooptions\",\"custordertext\",\"custorderdefault\",\"custordervalidation\",\"custorderoptions\",\"replytoemail\",\"selfreguserviewid\",\"selfregusergroupid\",\"taxidnum\",\"extproperties\",\"clientgroupid\",\"logoffurl\",\"partner\",\"partnerclientid\",\"logolink\",\"drmmethodint\",\"drmmethodext\",\"language\",\"industry\",\"referredby\",\"spectreatment\",\"friendlynametext\",\"selfregdomains\",\"createtime\",\"lastupdate\",\"sector\",\"personallibcolid\",\"defaultrepolibid\",\"sharedlibuseid\",\"bestcheapestint\",\"bestcheapestnonint\",\"sessionresets\",\"defaultusageid\",\"pricelimithandling\",\"orgattribs\",\"drmkey\",\"linkouthandling\",\"reuselastnumpasswords\",\"reuselastdayspasswords\",\"proxyserialnumber\",\"ordernote\",\"feedsource\",\"ccemail\",\"ezproxyurl\",\"reqccoverrides\",\"marketingemail\",\"status\",\"logolinkright\",\"customorderlink\",\"clientoptions\",\"clientprmguid\",\"clientnameai\",\"pricequotehandling\",\"pricequoteincreases\") VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

				java.sql.PreparedStatement pstmt_tDBOutput_4 = conn_tDBOutput_4
						.prepareStatement(insert_tDBOutput_4);
				resourceMap.put("pstmt_tDBOutput_4", pstmt_tDBOutput_4);

				/**
				 * [tDBOutput_4 begin ] stop
				 */

				/**
				 * [tDBInput_4 begin ] start
				 */

				ok_Hash.put("tDBInput_4", false);
				start_Hash.put("tDBInput_4", System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tDBInput_4");
				tStatCatcher_1Process(globalMap);

				talendStats_STATS.addMessage("begin", "tDBInput_4");
				talendStats_STATSProcess(globalMap);

				currentComponent = "tDBInput_4";

				int tos_count_tDBInput_4 = 0;

				org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_4 = org.talend.designer.components.util.mssql.MSSqlUtilFactory
						.getMSSqlGenerateTimestampUtil();

				java.util.List<String> talendToDBList_tDBInput_4 = new java.util.ArrayList();
				String[] talendToDBArray_tDBInput_4 = new String[] { "FLOAT",
						"NUMERIC", "NUMERIC IDENTITY", "DECIMAL",
						"DECIMAL IDENTITY", "REAL" };
				java.util.Collections.addAll(talendToDBList_tDBInput_4,
						talendToDBArray_tDBInput_4);
				int nb_line_tDBInput_4 = 0;
				java.sql.Connection conn_tDBInput_4 = null;
				conn_tDBInput_4 = (java.sql.Connection) globalMap
						.get("conn_tDBConnection_1");
				String dbschema_tDBInput_4 = (String) globalMap
						.get("dbschema_tDBConnection_1");

				java.sql.Statement stmt_tDBInput_4 = conn_tDBInput_4
						.createStatement();

				String dbquery_tDBInput_4 = "SELECT * FROM Client";

				globalMap.put("tDBInput_4_QUERY", dbquery_tDBInput_4);
				java.sql.ResultSet rs_tDBInput_4 = null;

				try {
					rs_tDBInput_4 = stmt_tDBInput_4
							.executeQuery(dbquery_tDBInput_4);
					java.sql.ResultSetMetaData rsmd_tDBInput_4 = rs_tDBInput_4
							.getMetaData();
					int colQtyInRs_tDBInput_4 = rsmd_tDBInput_4
							.getColumnCount();

					String tmpContent_tDBInput_4 = null;

					while (rs_tDBInput_4.next()) {
						nb_line_tDBInput_4++;

						if (colQtyInRs_tDBInput_4 < 1) {
							row4.ClientId = 0;
						} else {

							if (rs_tDBInput_4.getObject(1) != null) {
								row4.ClientId = rs_tDBInput_4.getInt(1);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_4 < 2) {
							row4.ClientName = null;
						} else {

							tmpContent_tDBInput_4 = rs_tDBInput_4.getString(2);
							if (tmpContent_tDBInput_4 != null) {
								if (talendToDBList_tDBInput_4
										.contains(rsmd_tDBInput_4
												.getColumnTypeName(2)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row4.ClientName = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_4);
								} else {
									row4.ClientName = tmpContent_tDBInput_4;
								}
							} else {
								row4.ClientName = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 3) {
							row4.Description = null;
						} else {

							tmpContent_tDBInput_4 = rs_tDBInput_4.getString(3);
							if (tmpContent_tDBInput_4 != null) {
								if (talendToDBList_tDBInput_4
										.contains(rsmd_tDBInput_4
												.getColumnTypeName(3)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row4.Description = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_4);
								} else {
									row4.Description = tmpContent_tDBInput_4;
								}
							} else {
								row4.Description = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 4) {
							row4.BaseAdminViewId = 0;
						} else {

							if (rs_tDBInput_4.getObject(4) != null) {
								row4.BaseAdminViewId = rs_tDBInput_4.getInt(4);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_4 < 5) {
							row4.BaseUserViewId = 0;
						} else {

							if (rs_tDBInput_4.getObject(5) != null) {
								row4.BaseUserViewId = rs_tDBInput_4.getInt(5);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_4 < 6) {
							row4.ThemeName = null;
						} else {

							tmpContent_tDBInput_4 = rs_tDBInput_4.getString(6);
							if (tmpContent_tDBInput_4 != null) {
								if (talendToDBList_tDBInput_4
										.contains(rsmd_tDBInput_4
												.getColumnTypeName(6)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row4.ThemeName = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_4);
								} else {
									row4.ThemeName = tmpContent_tDBInput_4;
								}
							} else {
								row4.ThemeName = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 7) {
							row4.ContactId = 0;
						} else {

							if (rs_tDBInput_4.getObject(7) != null) {
								row4.ContactId = rs_tDBInput_4.getInt(7);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_4 < 8) {
							row4.Notes = null;
						} else {

							tmpContent_tDBInput_4 = rs_tDBInput_4.getString(8);
							if (tmpContent_tDBInput_4 != null) {
								if (talendToDBList_tDBInput_4
										.contains(rsmd_tDBInput_4
												.getColumnTypeName(8)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row4.Notes = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_4);
								} else {
									row4.Notes = tmpContent_tDBInput_4;
								}
							} else {
								row4.Notes = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 9) {
							row4.DivisionText = null;
						} else {

							tmpContent_tDBInput_4 = rs_tDBInput_4.getString(9);
							if (tmpContent_tDBInput_4 != null) {
								if (talendToDBList_tDBInput_4
										.contains(rsmd_tDBInput_4
												.getColumnTypeName(9)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row4.DivisionText = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_4);
								} else {
									row4.DivisionText = tmpContent_tDBInput_4;
								}
							} else {
								row4.DivisionText = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 10) {
							row4.DepartmentText = null;
						} else {

							tmpContent_tDBInput_4 = rs_tDBInput_4.getString(10);
							if (tmpContent_tDBInput_4 != null) {
								if (talendToDBList_tDBInput_4
										.contains(rsmd_tDBInput_4
												.getColumnTypeName(10)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row4.DepartmentText = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_4);
								} else {
									row4.DepartmentText = tmpContent_tDBInput_4;
								}
							} else {
								row4.DepartmentText = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 11) {
							row4.LocationText = null;
						} else {

							tmpContent_tDBInput_4 = rs_tDBInput_4.getString(11);
							if (tmpContent_tDBInput_4 != null) {
								if (talendToDBList_tDBInput_4
										.contains(rsmd_tDBInput_4
												.getColumnTypeName(11)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row4.LocationText = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_4);
								} else {
									row4.LocationText = tmpContent_tDBInput_4;
								}
							} else {
								row4.LocationText = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 12) {
							row4.BillRefText = null;
						} else {

							tmpContent_tDBInput_4 = rs_tDBInput_4.getString(12);
							if (tmpContent_tDBInput_4 != null) {
								if (talendToDBList_tDBInput_4
										.contains(rsmd_tDBInput_4
												.getColumnTypeName(12)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row4.BillRefText = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_4);
								} else {
									row4.BillRefText = tmpContent_tDBInput_4;
								}
							} else {
								row4.BillRefText = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 13) {
							row4.CostCenterText = null;
						} else {

							tmpContent_tDBInput_4 = rs_tDBInput_4.getString(13);
							if (tmpContent_tDBInput_4 != null) {
								if (talendToDBList_tDBInput_4
										.contains(rsmd_tDBInput_4
												.getColumnTypeName(13)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row4.CostCenterText = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_4);
								} else {
									row4.CostCenterText = tmpContent_tDBInput_4;
								}
							} else {
								row4.CostCenterText = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 14) {
							row4.BillRefDefault = null;
						} else {

							tmpContent_tDBInput_4 = rs_tDBInput_4.getString(14);
							if (tmpContent_tDBInput_4 != null) {
								if (talendToDBList_tDBInput_4
										.contains(rsmd_tDBInput_4
												.getColumnTypeName(14)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row4.BillRefDefault = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_4);
								} else {
									row4.BillRefDefault = tmpContent_tDBInput_4;
								}
							} else {
								row4.BillRefDefault = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 15) {
							row4.CostCenterDefault = null;
						} else {

							tmpContent_tDBInput_4 = rs_tDBInput_4.getString(15);
							if (tmpContent_tDBInput_4 != null) {
								if (talendToDBList_tDBInput_4
										.contains(rsmd_tDBInput_4
												.getColumnTypeName(15)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row4.CostCenterDefault = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_4);
								} else {
									row4.CostCenterDefault = tmpContent_tDBInput_4;
								}
							} else {
								row4.CostCenterDefault = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 16) {
							row4.BillRefValidation = null;
						} else {

							tmpContent_tDBInput_4 = rs_tDBInput_4.getString(16);
							if (tmpContent_tDBInput_4 != null) {
								if (talendToDBList_tDBInput_4
										.contains(rsmd_tDBInput_4
												.getColumnTypeName(16)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row4.BillRefValidation = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_4);
								} else {
									row4.BillRefValidation = tmpContent_tDBInput_4;
								}
							} else {
								row4.BillRefValidation = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 17) {
							row4.CostCenterValidation = null;
						} else {

							tmpContent_tDBInput_4 = rs_tDBInput_4.getString(17);
							if (tmpContent_tDBInput_4 != null) {
								if (talendToDBList_tDBInput_4
										.contains(rsmd_tDBInput_4
												.getColumnTypeName(17)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row4.CostCenterValidation = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_4);
								} else {
									row4.CostCenterValidation = tmpContent_tDBInput_4;
								}
							} else {
								row4.CostCenterValidation = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 18) {
							row4.BillRefOptions = 0;
						} else {

							if (rs_tDBInput_4.getObject(18) != null) {
								row4.BillRefOptions = rs_tDBInput_4
										.getShort(18);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_4 < 19) {
							row4.CostCenterOptions = 0;
						} else {

							if (rs_tDBInput_4.getObject(19) != null) {
								row4.CostCenterOptions = rs_tDBInput_4
										.getShort(19);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_4 < 20) {
							row4.DivisionDefault = 0;
						} else {

							if (rs_tDBInput_4.getObject(20) != null) {
								row4.DivisionDefault = rs_tDBInput_4.getInt(20);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_4 < 21) {
							row4.BillingContactId = 0;
						} else {

							if (rs_tDBInput_4.getObject(21) != null) {
								row4.BillingContactId = rs_tDBInput_4
										.getInt(21);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_4 < 22) {
							row4.Discount = null;
						} else {

							if (rs_tDBInput_4.getObject(22) != null) {
								row4.Discount = rs_tDBInput_4.getObject(22);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_4 < 23) {
							row4.PasswordMinReqLength = 0;
						} else {

							if (rs_tDBInput_4.getObject(23) != null) {
								row4.PasswordMinReqLength = rs_tDBInput_4
										.getShort(23);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_4 < 24) {
							row4.PasswordReqQAndA = false;
						} else {

							if (rs_tDBInput_4.getObject(24) != null) {
								row4.PasswordReqQAndA = rs_tDBInput_4
										.getBoolean(24);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_4 < 25) {
							row4.PasswordMinNonAlphaNum = 0;
						} else {

							if (rs_tDBInput_4.getObject(25) != null) {
								row4.PasswordMinNonAlphaNum = rs_tDBInput_4
										.getShort(25);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_4 < 26) {
							row4.PasswordChangeInterval = 0;
						} else {

							if (rs_tDBInput_4.getObject(26) != null) {
								row4.PasswordChangeInterval = rs_tDBInput_4
										.getShort(26);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_4 < 27) {
							row4.PasswordReqInitChange = false;
						} else {

							if (rs_tDBInput_4.getObject(27) != null) {
								row4.PasswordReqInitChange = rs_tDBInput_4
										.getBoolean(27);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_4 < 28) {
							row4.ShowPricing = false;
						} else {

							if (rs_tDBInput_4.getObject(28) != null) {
								row4.ShowPricing = rs_tDBInput_4.getBoolean(28);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_4 < 29) {
							row4.AdvRefReview = false;
						} else {

							if (rs_tDBInput_4.getObject(29) != null) {
								row4.AdvRefReview = rs_tDBInput_4
										.getBoolean(29);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_4 < 30) {
							row4.DefaultClassId = 0;
						} else {

							if (rs_tDBInput_4.getObject(30) != null) {
								row4.DefaultClassId = rs_tDBInput_4.getInt(30);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_4 < 31) {
							row4.BillingMethod = 0;
						} else {

							if (rs_tDBInput_4.getObject(31) != null) {
								row4.BillingMethod = rs_tDBInput_4.getInt(31);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_4 < 32) {
							row4.PriceLimit = null;
						} else {

							if (rs_tDBInput_4.getObject(32) != null) {
								row4.PriceLimit = rs_tDBInput_4.getObject(32);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_4 < 33) {
							row4.SSOReferringUrls = null;
						} else {

							tmpContent_tDBInput_4 = rs_tDBInput_4.getString(33);
							if (tmpContent_tDBInput_4 != null) {
								if (talendToDBList_tDBInput_4
										.contains(rsmd_tDBInput_4
												.getColumnTypeName(33)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row4.SSOReferringUrls = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_4);
								} else {
									row4.SSOReferringUrls = tmpContent_tDBInput_4;
								}
							} else {
								row4.SSOReferringUrls = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 34) {
							row4.ProductCode = null;
						} else {

							tmpContent_tDBInput_4 = rs_tDBInput_4.getString(34);
							if (tmpContent_tDBInput_4 != null) {
								if (talendToDBList_tDBInput_4
										.contains(rsmd_tDBInput_4
												.getColumnTypeName(34)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row4.ProductCode = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_4);
								} else {
									row4.ProductCode = tmpContent_tDBInput_4;
								}
							} else {
								row4.ProductCode = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 35) {
							row4.Culture = 0;
						} else {

							if (rs_tDBInput_4.getObject(35) != null) {
								row4.Culture = rs_tDBInput_4.getInt(35);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_4 < 36) {
							row4.DefaultSpecInstruct = 0;
						} else {

							if (rs_tDBInput_4.getObject(36) != null) {
								row4.DefaultSpecInstruct = rs_tDBInput_4
										.getLong(36);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_4 < 37) {
							row4.POText = null;
						} else {

							tmpContent_tDBInput_4 = rs_tDBInput_4.getString(37);
							if (tmpContent_tDBInput_4 != null) {
								if (talendToDBList_tDBInput_4
										.contains(rsmd_tDBInput_4
												.getColumnTypeName(37)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row4.POText = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_4);
								} else {
									row4.POText = tmpContent_tDBInput_4;
								}
							} else {
								row4.POText = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 38) {
							row4.PODefault = null;
						} else {

							tmpContent_tDBInput_4 = rs_tDBInput_4.getString(38);
							if (tmpContent_tDBInput_4 != null) {
								if (talendToDBList_tDBInput_4
										.contains(rsmd_tDBInput_4
												.getColumnTypeName(38)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row4.PODefault = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_4);
								} else {
									row4.PODefault = tmpContent_tDBInput_4;
								}
							} else {
								row4.PODefault = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 39) {
							row4.POValidation = null;
						} else {

							tmpContent_tDBInput_4 = rs_tDBInput_4.getString(39);
							if (tmpContent_tDBInput_4 != null) {
								if (talendToDBList_tDBInput_4
										.contains(rsmd_tDBInput_4
												.getColumnTypeName(39)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row4.POValidation = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_4);
								} else {
									row4.POValidation = tmpContent_tDBInput_4;
								}
							} else {
								row4.POValidation = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 40) {
							row4.POOptions = 0;
						} else {

							if (rs_tDBInput_4.getObject(40) != null) {
								row4.POOptions = rs_tDBInput_4.getShort(40);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_4 < 41) {
							row4.CustOrderText = null;
						} else {

							tmpContent_tDBInput_4 = rs_tDBInput_4.getString(41);
							if (tmpContent_tDBInput_4 != null) {
								if (talendToDBList_tDBInput_4
										.contains(rsmd_tDBInput_4
												.getColumnTypeName(41)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row4.CustOrderText = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_4);
								} else {
									row4.CustOrderText = tmpContent_tDBInput_4;
								}
							} else {
								row4.CustOrderText = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 42) {
							row4.CustOrderDefault = null;
						} else {

							tmpContent_tDBInput_4 = rs_tDBInput_4.getString(42);
							if (tmpContent_tDBInput_4 != null) {
								if (talendToDBList_tDBInput_4
										.contains(rsmd_tDBInput_4
												.getColumnTypeName(42)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row4.CustOrderDefault = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_4);
								} else {
									row4.CustOrderDefault = tmpContent_tDBInput_4;
								}
							} else {
								row4.CustOrderDefault = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 43) {
							row4.CustOrderValidation = null;
						} else {

							tmpContent_tDBInput_4 = rs_tDBInput_4.getString(43);
							if (tmpContent_tDBInput_4 != null) {
								if (talendToDBList_tDBInput_4
										.contains(rsmd_tDBInput_4
												.getColumnTypeName(43)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row4.CustOrderValidation = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_4);
								} else {
									row4.CustOrderValidation = tmpContent_tDBInput_4;
								}
							} else {
								row4.CustOrderValidation = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 44) {
							row4.CustOrderOptions = 0;
						} else {

							if (rs_tDBInput_4.getObject(44) != null) {
								row4.CustOrderOptions = rs_tDBInput_4
										.getShort(44);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_4 < 45) {
							row4.ReplyToEmail = null;
						} else {

							tmpContent_tDBInput_4 = rs_tDBInput_4.getString(45);
							if (tmpContent_tDBInput_4 != null) {
								if (talendToDBList_tDBInput_4
										.contains(rsmd_tDBInput_4
												.getColumnTypeName(45)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row4.ReplyToEmail = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_4);
								} else {
									row4.ReplyToEmail = tmpContent_tDBInput_4;
								}
							} else {
								row4.ReplyToEmail = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 46) {
							row4.SelfRegUserViewId = 0;
						} else {

							if (rs_tDBInput_4.getObject(46) != null) {
								row4.SelfRegUserViewId = rs_tDBInput_4
										.getInt(46);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_4 < 47) {
							row4.SelfRegUserGroupId = 0;
						} else {

							if (rs_tDBInput_4.getObject(47) != null) {
								row4.SelfRegUserGroupId = rs_tDBInput_4
										.getInt(47);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_4 < 48) {
							row4.TaxIdNum = null;
						} else {

							tmpContent_tDBInput_4 = rs_tDBInput_4.getString(48);
							if (tmpContent_tDBInput_4 != null) {
								if (talendToDBList_tDBInput_4
										.contains(rsmd_tDBInput_4
												.getColumnTypeName(48)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row4.TaxIdNum = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_4);
								} else {
									row4.TaxIdNum = tmpContent_tDBInput_4;
								}
							} else {
								row4.TaxIdNum = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 49) {
							row4.ExtProperties = null;
						} else {

							tmpContent_tDBInput_4 = rs_tDBInput_4.getString(49);
							if (tmpContent_tDBInput_4 != null) {
								if (talendToDBList_tDBInput_4
										.contains(rsmd_tDBInput_4
												.getColumnTypeName(49)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row4.ExtProperties = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_4);
								} else {
									row4.ExtProperties = tmpContent_tDBInput_4;
								}
							} else {
								row4.ExtProperties = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 50) {
							row4.ClientGroupId = 0;
						} else {

							if (rs_tDBInput_4.getObject(50) != null) {
								row4.ClientGroupId = rs_tDBInput_4.getInt(50);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_4 < 51) {
							row4.LogoffUrl = null;
						} else {

							tmpContent_tDBInput_4 = rs_tDBInput_4.getString(51);
							if (tmpContent_tDBInput_4 != null) {
								if (talendToDBList_tDBInput_4
										.contains(rsmd_tDBInput_4
												.getColumnTypeName(51)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row4.LogoffUrl = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_4);
								} else {
									row4.LogoffUrl = tmpContent_tDBInput_4;
								}
							} else {
								row4.LogoffUrl = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 52) {
							row4.Partner = 0;
						} else {

							if (rs_tDBInput_4.getObject(52) != null) {
								row4.Partner = rs_tDBInput_4.getShort(52);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_4 < 53) {
							row4.PartnerClientId = null;
						} else {

							tmpContent_tDBInput_4 = rs_tDBInput_4.getString(53);
							if (tmpContent_tDBInput_4 != null) {
								if (talendToDBList_tDBInput_4
										.contains(rsmd_tDBInput_4
												.getColumnTypeName(53)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row4.PartnerClientId = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_4);
								} else {
									row4.PartnerClientId = tmpContent_tDBInput_4;
								}
							} else {
								row4.PartnerClientId = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 54) {
							row4.LogoLink = null;
						} else {

							tmpContent_tDBInput_4 = rs_tDBInput_4.getString(54);
							if (tmpContent_tDBInput_4 != null) {
								if (talendToDBList_tDBInput_4
										.contains(rsmd_tDBInput_4
												.getColumnTypeName(54)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row4.LogoLink = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_4);
								} else {
									row4.LogoLink = tmpContent_tDBInput_4;
								}
							} else {
								row4.LogoLink = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 55) {
							row4.DRMMethodInt = 0;
						} else {

							if (rs_tDBInput_4.getObject(55) != null) {
								row4.DRMMethodInt = rs_tDBInput_4.getShort(55);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_4 < 56) {
							row4.DRMMethodExt = 0;
						} else {

							if (rs_tDBInput_4.getObject(56) != null) {
								row4.DRMMethodExt = rs_tDBInput_4.getShort(56);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_4 < 57) {
							row4.Language = 0;
						} else {

							if (rs_tDBInput_4.getObject(57) != null) {
								row4.Language = rs_tDBInput_4.getInt(57);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_4 < 58) {
							row4.Industry = 0;
						} else {

							if (rs_tDBInput_4.getObject(58) != null) {
								row4.Industry = rs_tDBInput_4.getInt(58);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_4 < 59) {
							row4.ReferredBy = null;
						} else {

							tmpContent_tDBInput_4 = rs_tDBInput_4.getString(59);
							if (tmpContent_tDBInput_4 != null) {
								if (talendToDBList_tDBInput_4
										.contains(rsmd_tDBInput_4
												.getColumnTypeName(59)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row4.ReferredBy = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_4);
								} else {
									row4.ReferredBy = tmpContent_tDBInput_4;
								}
							} else {
								row4.ReferredBy = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 60) {
							row4.SpecTreatment = 0;
						} else {

							if (rs_tDBInput_4.getObject(60) != null) {
								row4.SpecTreatment = rs_tDBInput_4.getInt(60);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_4 < 61) {
							row4.FriendlyNameText = null;
						} else {

							tmpContent_tDBInput_4 = rs_tDBInput_4.getString(61);
							if (tmpContent_tDBInput_4 != null) {
								if (talendToDBList_tDBInput_4
										.contains(rsmd_tDBInput_4
												.getColumnTypeName(61)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row4.FriendlyNameText = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_4);
								} else {
									row4.FriendlyNameText = tmpContent_tDBInput_4;
								}
							} else {
								row4.FriendlyNameText = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 62) {
							row4.SelfRegDomains = null;
						} else {

							tmpContent_tDBInput_4 = rs_tDBInput_4.getString(62);
							if (tmpContent_tDBInput_4 != null) {
								if (talendToDBList_tDBInput_4
										.contains(rsmd_tDBInput_4
												.getColumnTypeName(62)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row4.SelfRegDomains = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_4);
								} else {
									row4.SelfRegDomains = tmpContent_tDBInput_4;
								}
							} else {
								row4.SelfRegDomains = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 63) {
							row4.CreateTime = null;
						} else {

							row4.CreateTime = mssqlGTU_tDBInput_4.getDate(
									rsmd_tDBInput_4, rs_tDBInput_4, 63);

						}
						if (colQtyInRs_tDBInput_4 < 64) {
							row4.LastUpdate = null;
						} else {

							row4.LastUpdate = mssqlGTU_tDBInput_4.getDate(
									rsmd_tDBInput_4, rs_tDBInput_4, 64);

						}
						if (colQtyInRs_tDBInput_4 < 65) {
							row4.Sector = 0;
						} else {

							if (rs_tDBInput_4.getObject(65) != null) {
								row4.Sector = rs_tDBInput_4.getInt(65);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_4 < 66) {
							row4.PersonalLibColId = 0;
						} else {

							if (rs_tDBInput_4.getObject(66) != null) {
								row4.PersonalLibColId = rs_tDBInput_4
										.getInt(66);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_4 < 67) {
							row4.DefaultRepoLibId = 0;
						} else {

							if (rs_tDBInput_4.getObject(67) != null) {
								row4.DefaultRepoLibId = rs_tDBInput_4
										.getInt(67);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_4 < 68) {
							row4.SharedLibUseId = 0;
						} else {

							if (rs_tDBInput_4.getObject(68) != null) {
								row4.SharedLibUseId = rs_tDBInput_4.getInt(68);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_4 < 69) {
							row4.BestCheapestInt = 0;
						} else {

							if (rs_tDBInput_4.getObject(69) != null) {
								row4.BestCheapestInt = rs_tDBInput_4
										.getShort(69);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_4 < 70) {
							row4.BestCheapestNonInt = 0;
						} else {

							if (rs_tDBInput_4.getObject(70) != null) {
								row4.BestCheapestNonInt = rs_tDBInput_4
										.getShort(70);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_4 < 71) {
							row4.SessionResets = null;
						} else {

							tmpContent_tDBInput_4 = rs_tDBInput_4.getString(71);
							if (tmpContent_tDBInput_4 != null) {
								if (talendToDBList_tDBInput_4
										.contains(rsmd_tDBInput_4
												.getColumnTypeName(71)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row4.SessionResets = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_4);
								} else {
									row4.SessionResets = tmpContent_tDBInput_4;
								}
							} else {
								row4.SessionResets = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 72) {
							row4.DefaultUsageId = 0;
						} else {

							if (rs_tDBInput_4.getObject(72) != null) {
								row4.DefaultUsageId = rs_tDBInput_4.getInt(72);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_4 < 73) {
							row4.PriceLimitHandling = 0;
						} else {

							if (rs_tDBInput_4.getObject(73) != null) {
								row4.PriceLimitHandling = rs_tDBInput_4
										.getShort(73);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_4 < 74) {
							row4.OrgAttribs = 0;
						} else {

							if (rs_tDBInput_4.getObject(74) != null) {
								row4.OrgAttribs = rs_tDBInput_4.getInt(74);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_4 < 75) {
							row4.DRMKey = null;
						} else {

							tmpContent_tDBInput_4 = rs_tDBInput_4.getString(75);
							if (tmpContent_tDBInput_4 != null) {
								if (talendToDBList_tDBInput_4
										.contains(rsmd_tDBInput_4
												.getColumnTypeName(75)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row4.DRMKey = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_4);
								} else {
									row4.DRMKey = tmpContent_tDBInput_4;
								}
							} else {
								row4.DRMKey = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 76) {
							row4.LinkoutHandling = 0;
						} else {

							if (rs_tDBInput_4.getObject(76) != null) {
								row4.LinkoutHandling = rs_tDBInput_4
										.getShort(76);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_4 < 77) {
							row4.ReuseLastNumPasswords = 0;
						} else {

							if (rs_tDBInput_4.getObject(77) != null) {
								row4.ReuseLastNumPasswords = rs_tDBInput_4
										.getShort(77);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_4 < 78) {
							row4.ReuseLastDaysPasswords = 0;
						} else {

							if (rs_tDBInput_4.getObject(78) != null) {
								row4.ReuseLastDaysPasswords = rs_tDBInput_4
										.getShort(78);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_4 < 79) {
							row4.ProxySerialNumber = null;
						} else {

							tmpContent_tDBInput_4 = rs_tDBInput_4.getString(79);
							if (tmpContent_tDBInput_4 != null) {
								if (talendToDBList_tDBInput_4
										.contains(rsmd_tDBInput_4
												.getColumnTypeName(79)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row4.ProxySerialNumber = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_4);
								} else {
									row4.ProxySerialNumber = tmpContent_tDBInput_4;
								}
							} else {
								row4.ProxySerialNumber = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 80) {
							row4.OrderNote = null;
						} else {

							tmpContent_tDBInput_4 = rs_tDBInput_4.getString(80);
							if (tmpContent_tDBInput_4 != null) {
								if (talendToDBList_tDBInput_4
										.contains(rsmd_tDBInput_4
												.getColumnTypeName(80)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row4.OrderNote = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_4);
								} else {
									row4.OrderNote = tmpContent_tDBInput_4;
								}
							} else {
								row4.OrderNote = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 81) {
							row4.FeedSource = 0;
						} else {

							if (rs_tDBInput_4.getObject(81) != null) {
								row4.FeedSource = rs_tDBInput_4.getShort(81);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_4 < 82) {
							row4.CCEmail = null;
						} else {

							tmpContent_tDBInput_4 = rs_tDBInput_4.getString(82);
							if (tmpContent_tDBInput_4 != null) {
								if (talendToDBList_tDBInput_4
										.contains(rsmd_tDBInput_4
												.getColumnTypeName(82)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row4.CCEmail = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_4);
								} else {
									row4.CCEmail = tmpContent_tDBInput_4;
								}
							} else {
								row4.CCEmail = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 83) {
							row4.EZProxyUrl = null;
						} else {

							tmpContent_tDBInput_4 = rs_tDBInput_4.getString(83);
							if (tmpContent_tDBInput_4 != null) {
								if (talendToDBList_tDBInput_4
										.contains(rsmd_tDBInput_4
												.getColumnTypeName(83)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row4.EZProxyUrl = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_4);
								} else {
									row4.EZProxyUrl = tmpContent_tDBInput_4;
								}
							} else {
								row4.EZProxyUrl = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 84) {
							row4.ReqCCOverrides = null;
						} else {

							tmpContent_tDBInput_4 = rs_tDBInput_4.getString(84);
							if (tmpContent_tDBInput_4 != null) {
								if (talendToDBList_tDBInput_4
										.contains(rsmd_tDBInput_4
												.getColumnTypeName(84)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row4.ReqCCOverrides = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_4);
								} else {
									row4.ReqCCOverrides = tmpContent_tDBInput_4;
								}
							} else {
								row4.ReqCCOverrides = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 85) {
							row4.MarketingEmail = null;
						} else {

							tmpContent_tDBInput_4 = rs_tDBInput_4.getString(85);
							if (tmpContent_tDBInput_4 != null) {
								if (talendToDBList_tDBInput_4
										.contains(rsmd_tDBInput_4
												.getColumnTypeName(85)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row4.MarketingEmail = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_4);
								} else {
									row4.MarketingEmail = tmpContent_tDBInput_4;
								}
							} else {
								row4.MarketingEmail = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 86) {
							row4.Status = 0;
						} else {

							if (rs_tDBInput_4.getObject(86) != null) {
								row4.Status = rs_tDBInput_4.getShort(86);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_4 < 87) {
							row4.LogoLinkRight = null;
						} else {

							tmpContent_tDBInput_4 = rs_tDBInput_4.getString(87);
							if (tmpContent_tDBInput_4 != null) {
								if (talendToDBList_tDBInput_4
										.contains(rsmd_tDBInput_4
												.getColumnTypeName(87)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row4.LogoLinkRight = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_4);
								} else {
									row4.LogoLinkRight = tmpContent_tDBInput_4;
								}
							} else {
								row4.LogoLinkRight = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 88) {
							row4.CustomOrderLink = null;
						} else {

							tmpContent_tDBInput_4 = rs_tDBInput_4.getString(88);
							if (tmpContent_tDBInput_4 != null) {
								if (talendToDBList_tDBInput_4
										.contains(rsmd_tDBInput_4
												.getColumnTypeName(88)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row4.CustomOrderLink = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_4);
								} else {
									row4.CustomOrderLink = tmpContent_tDBInput_4;
								}
							} else {
								row4.CustomOrderLink = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 89) {
							row4.ClientOptions = 0;
						} else {

							if (rs_tDBInput_4.getObject(89) != null) {
								row4.ClientOptions = rs_tDBInput_4.getInt(89);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_4 < 90) {
							row4.ClientPrmGuid = null;
						} else {

							if (rs_tDBInput_4.getObject(90) != null) {
								row4.ClientPrmGuid = rs_tDBInput_4
										.getObject(90);
							} else {
								row4.ClientPrmGuid = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 91) {
							row4.ClientNameAI = null;
						} else {

							tmpContent_tDBInput_4 = rs_tDBInput_4.getString(91);
							if (tmpContent_tDBInput_4 != null) {
								if (talendToDBList_tDBInput_4
										.contains(rsmd_tDBInput_4
												.getColumnTypeName(91)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row4.ClientNameAI = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_4);
								} else {
									row4.ClientNameAI = tmpContent_tDBInput_4;
								}
							} else {
								row4.ClientNameAI = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 92) {
							row4.PriceQuoteHandling = 0;
						} else {

							if (rs_tDBInput_4.getObject(92) != null) {
								row4.PriceQuoteHandling = rs_tDBInput_4
										.getShort(92);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_4 < 93) {
							row4.PriceQuoteIncreases = null;
						} else {

							if (rs_tDBInput_4.getObject(93) != null) {
								row4.PriceQuoteIncreases = rs_tDBInput_4
										.getObject(93);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}

						/**
						 * [tDBInput_4 begin ] stop
						 */

						/**
						 * [tDBInput_4 main ] start
						 */

						currentComponent = "tDBInput_4";

						tos_count_tDBInput_4++;

						/**
						 * [tDBInput_4 main ] stop
						 */

						/**
						 * [tDBInput_4 process_data_begin ] start
						 */

						currentComponent = "tDBInput_4";

						/**
						 * [tDBInput_4 process_data_begin ] stop
						 */

						/**
						 * [tDBOutput_4 main ] start
						 */

						currentComponent = "tDBOutput_4";

						// row4
						// row4

						if (execStat) {
							runStat.updateStatOnConnection("row4" + iterateId,
									1, 1);
						}

						whetherReject_tDBOutput_4 = false;
						pstmt_tDBOutput_4.setInt(1, row4.ClientId);

						if (row4.ClientName == null) {
							pstmt_tDBOutput_4
									.setNull(2, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_4.setString(2, row4.ClientName);
						}

						if (row4.Description == null) {
							pstmt_tDBOutput_4
									.setNull(3, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_4.setString(3, row4.Description);
						}

						pstmt_tDBOutput_4.setInt(4, row4.BaseAdminViewId);

						pstmt_tDBOutput_4.setInt(5, row4.BaseUserViewId);

						if (row4.ThemeName == null) {
							pstmt_tDBOutput_4
									.setNull(6, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_4.setString(6, row4.ThemeName);
						}

						pstmt_tDBOutput_4.setInt(7, row4.ContactId);

						if (row4.Notes == null) {
							pstmt_tDBOutput_4
									.setNull(8, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_4.setString(8, row4.Notes);
						}

						if (row4.DivisionText == null) {
							pstmt_tDBOutput_4
									.setNull(9, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_4.setString(9, row4.DivisionText);
						}

						if (row4.DepartmentText == null) {
							pstmt_tDBOutput_4.setNull(10,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_4
									.setString(10, row4.DepartmentText);
						}

						if (row4.LocationText == null) {
							pstmt_tDBOutput_4.setNull(11,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_4.setString(11, row4.LocationText);
						}

						if (row4.BillRefText == null) {
							pstmt_tDBOutput_4.setNull(12,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_4.setString(12, row4.BillRefText);
						}

						if (row4.CostCenterText == null) {
							pstmt_tDBOutput_4.setNull(13,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_4
									.setString(13, row4.CostCenterText);
						}

						if (row4.BillRefDefault == null) {
							pstmt_tDBOutput_4.setNull(14,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_4
									.setString(14, row4.BillRefDefault);
						}

						if (row4.CostCenterDefault == null) {
							pstmt_tDBOutput_4.setNull(15,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_4.setString(15,
									row4.CostCenterDefault);
						}

						if (row4.BillRefValidation == null) {
							pstmt_tDBOutput_4.setNull(16,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_4.setString(16,
									row4.BillRefValidation);
						}

						if (row4.CostCenterValidation == null) {
							pstmt_tDBOutput_4.setNull(17,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_4.setString(17,
									row4.CostCenterValidation);
						}

						pstmt_tDBOutput_4.setShort(18, row4.BillRefOptions);

						pstmt_tDBOutput_4.setShort(19, row4.CostCenterOptions);

						pstmt_tDBOutput_4.setInt(20, row4.DivisionDefault);

						pstmt_tDBOutput_4.setInt(21, row4.BillingContactId);

						if (row4.Discount == null) {
							pstmt_tDBOutput_4.setNull(22, java.sql.Types.OTHER);
						} else {
							pstmt_tDBOutput_4.setObject(22, row4.Discount);
						}

						pstmt_tDBOutput_4.setShort(23,
								row4.PasswordMinReqLength);

						pstmt_tDBOutput_4.setBoolean(24, row4.PasswordReqQAndA);

						pstmt_tDBOutput_4.setShort(25,
								row4.PasswordMinNonAlphaNum);

						pstmt_tDBOutput_4.setShort(26,
								row4.PasswordChangeInterval);

						pstmt_tDBOutput_4.setBoolean(27,
								row4.PasswordReqInitChange);

						pstmt_tDBOutput_4.setBoolean(28, row4.ShowPricing);

						pstmt_tDBOutput_4.setBoolean(29, row4.AdvRefReview);

						pstmt_tDBOutput_4.setInt(30, row4.DefaultClassId);

						pstmt_tDBOutput_4.setInt(31, row4.BillingMethod);

						if (row4.PriceLimit == null) {
							pstmt_tDBOutput_4.setNull(32, java.sql.Types.OTHER);
						} else {
							pstmt_tDBOutput_4.setObject(32, row4.PriceLimit);
						}

						if (row4.SSOReferringUrls == null) {
							pstmt_tDBOutput_4.setNull(33,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_4.setString(33,
									row4.SSOReferringUrls);
						}

						if (row4.ProductCode == null) {
							pstmt_tDBOutput_4.setNull(34,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_4.setString(34, row4.ProductCode);
						}

						pstmt_tDBOutput_4.setInt(35, row4.Culture);

						pstmt_tDBOutput_4.setLong(36, row4.DefaultSpecInstruct);

						if (row4.POText == null) {
							pstmt_tDBOutput_4.setNull(37,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_4.setString(37, row4.POText);
						}

						if (row4.PODefault == null) {
							pstmt_tDBOutput_4.setNull(38,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_4.setString(38, row4.PODefault);
						}

						if (row4.POValidation == null) {
							pstmt_tDBOutput_4.setNull(39,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_4.setString(39, row4.POValidation);
						}

						pstmt_tDBOutput_4.setShort(40, row4.POOptions);

						if (row4.CustOrderText == null) {
							pstmt_tDBOutput_4.setNull(41,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_4.setString(41, row4.CustOrderText);
						}

						if (row4.CustOrderDefault == null) {
							pstmt_tDBOutput_4.setNull(42,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_4.setString(42,
									row4.CustOrderDefault);
						}

						if (row4.CustOrderValidation == null) {
							pstmt_tDBOutput_4.setNull(43,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_4.setString(43,
									row4.CustOrderValidation);
						}

						pstmt_tDBOutput_4.setShort(44, row4.CustOrderOptions);

						if (row4.ReplyToEmail == null) {
							pstmt_tDBOutput_4.setNull(45,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_4.setString(45, row4.ReplyToEmail);
						}

						pstmt_tDBOutput_4.setInt(46, row4.SelfRegUserViewId);

						pstmt_tDBOutput_4.setInt(47, row4.SelfRegUserGroupId);

						if (row4.TaxIdNum == null) {
							pstmt_tDBOutput_4.setNull(48,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_4.setString(48, row4.TaxIdNum);
						}

						if (row4.ExtProperties == null) {
							pstmt_tDBOutput_4.setNull(49,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_4.setString(49, row4.ExtProperties);
						}

						pstmt_tDBOutput_4.setInt(50, row4.ClientGroupId);

						if (row4.LogoffUrl == null) {
							pstmt_tDBOutput_4.setNull(51,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_4.setString(51, row4.LogoffUrl);
						}

						pstmt_tDBOutput_4.setShort(52, row4.Partner);

						if (row4.PartnerClientId == null) {
							pstmt_tDBOutput_4.setNull(53,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_4.setString(53,
									row4.PartnerClientId);
						}

						if (row4.LogoLink == null) {
							pstmt_tDBOutput_4.setNull(54,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_4.setString(54, row4.LogoLink);
						}

						pstmt_tDBOutput_4.setShort(55, row4.DRMMethodInt);

						pstmt_tDBOutput_4.setShort(56, row4.DRMMethodExt);

						pstmt_tDBOutput_4.setInt(57, row4.Language);

						pstmt_tDBOutput_4.setInt(58, row4.Industry);

						if (row4.ReferredBy == null) {
							pstmt_tDBOutput_4.setNull(59,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_4.setString(59, row4.ReferredBy);
						}

						pstmt_tDBOutput_4.setInt(60, row4.SpecTreatment);

						if (row4.FriendlyNameText == null) {
							pstmt_tDBOutput_4.setNull(61,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_4.setString(61,
									row4.FriendlyNameText);
						}

						if (row4.SelfRegDomains == null) {
							pstmt_tDBOutput_4.setNull(62,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_4
									.setString(62, row4.SelfRegDomains);
						}

						if (row4.CreateTime != null) {
							pstmt_tDBOutput_4.setTimestamp(
									63,
									new java.sql.Timestamp(row4.CreateTime
											.getTime()));
						} else {
							pstmt_tDBOutput_4.setNull(63,
									java.sql.Types.TIMESTAMP);
						}

						if (row4.LastUpdate != null) {
							pstmt_tDBOutput_4.setTimestamp(
									64,
									new java.sql.Timestamp(row4.LastUpdate
											.getTime()));
						} else {
							pstmt_tDBOutput_4.setNull(64,
									java.sql.Types.TIMESTAMP);
						}

						pstmt_tDBOutput_4.setInt(65, row4.Sector);

						pstmt_tDBOutput_4.setInt(66, row4.PersonalLibColId);

						pstmt_tDBOutput_4.setInt(67, row4.DefaultRepoLibId);

						pstmt_tDBOutput_4.setInt(68, row4.SharedLibUseId);

						pstmt_tDBOutput_4.setShort(69, row4.BestCheapestInt);

						pstmt_tDBOutput_4.setShort(70, row4.BestCheapestNonInt);

						if (row4.SessionResets == null) {
							pstmt_tDBOutput_4.setNull(71,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_4.setString(71, row4.SessionResets);
						}

						pstmt_tDBOutput_4.setInt(72, row4.DefaultUsageId);

						pstmt_tDBOutput_4.setShort(73, row4.PriceLimitHandling);

						pstmt_tDBOutput_4.setInt(74, row4.OrgAttribs);

						if (row4.DRMKey == null) {
							pstmt_tDBOutput_4.setNull(75,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_4.setString(75, row4.DRMKey);
						}

						pstmt_tDBOutput_4.setShort(76, row4.LinkoutHandling);

						pstmt_tDBOutput_4.setShort(77,
								row4.ReuseLastNumPasswords);

						pstmt_tDBOutput_4.setShort(78,
								row4.ReuseLastDaysPasswords);

						if (row4.ProxySerialNumber == null) {
							pstmt_tDBOutput_4.setNull(79,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_4.setString(79,
									row4.ProxySerialNumber);
						}

						if (row4.OrderNote == null) {
							pstmt_tDBOutput_4.setNull(80,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_4.setString(80, row4.OrderNote);
						}

						pstmt_tDBOutput_4.setShort(81, row4.FeedSource);

						if (row4.CCEmail == null) {
							pstmt_tDBOutput_4.setNull(82,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_4.setString(82, row4.CCEmail);
						}

						if (row4.EZProxyUrl == null) {
							pstmt_tDBOutput_4.setNull(83,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_4.setString(83, row4.EZProxyUrl);
						}

						if (row4.ReqCCOverrides == null) {
							pstmt_tDBOutput_4.setNull(84,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_4
									.setString(84, row4.ReqCCOverrides);
						}

						if (row4.MarketingEmail == null) {
							pstmt_tDBOutput_4.setNull(85,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_4
									.setString(85, row4.MarketingEmail);
						}

						pstmt_tDBOutput_4.setShort(86, row4.Status);

						if (row4.LogoLinkRight == null) {
							pstmt_tDBOutput_4.setNull(87,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_4.setString(87, row4.LogoLinkRight);
						}

						if (row4.CustomOrderLink == null) {
							pstmt_tDBOutput_4.setNull(88,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_4.setString(88,
									row4.CustomOrderLink);
						}

						pstmt_tDBOutput_4.setInt(89, row4.ClientOptions);

						if (row4.ClientPrmGuid == null) {
							pstmt_tDBOutput_4.setNull(90, java.sql.Types.OTHER);
						} else {
							pstmt_tDBOutput_4.setObject(90, row4.ClientPrmGuid);
						}

						if (row4.ClientNameAI == null) {
							pstmt_tDBOutput_4.setNull(91,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_4.setString(91, row4.ClientNameAI);
						}

						pstmt_tDBOutput_4.setShort(92, row4.PriceQuoteHandling);

						if (row4.PriceQuoteIncreases == null) {
							pstmt_tDBOutput_4.setNull(93, java.sql.Types.OTHER);
						} else {
							pstmt_tDBOutput_4.setObject(93,
									row4.PriceQuoteIncreases);
						}

						pstmt_tDBOutput_4.addBatch();
						nb_line_tDBOutput_4++;

						batchSizeCounter_tDBOutput_4++;

						if ((batchSize_tDBOutput_4 > 0)
								&& (batchSize_tDBOutput_4 <= batchSizeCounter_tDBOutput_4)) {
							try {
								int countSum_tDBOutput_4 = 0;

								for (int countEach_tDBOutput_4 : pstmt_tDBOutput_4
										.executeBatch()) {
									countSum_tDBOutput_4 += (countEach_tDBOutput_4 < 0 ? 0
											: countEach_tDBOutput_4);
								}

								insertedCount_tDBOutput_4 += countSum_tDBOutput_4;

								batchSizeCounter_tDBOutput_4 = 0;
							} catch (java.sql.BatchUpdateException e_tDBOutput_4) {
								java.sql.SQLException ne_tDBOutput_4 = e_tDBOutput_4
										.getNextException(), sqle_tDBOutput_4 = null;
								String errormessage_tDBOutput_4;
								if (ne_tDBOutput_4 != null) {
									// build new exception to provide the
									// original cause
									sqle_tDBOutput_4 = new java.sql.SQLException(
											e_tDBOutput_4.getMessage()
													+ "\ncaused by: "
													+ ne_tDBOutput_4
															.getMessage(),
											ne_tDBOutput_4.getSQLState(),
											ne_tDBOutput_4.getErrorCode(),
											ne_tDBOutput_4);
									errormessage_tDBOutput_4 = sqle_tDBOutput_4
											.getMessage();
								} else {
									errormessage_tDBOutput_4 = e_tDBOutput_4
											.getMessage();
								}

								if (ne_tDBOutput_4 != null) {
									throw (sqle_tDBOutput_4);
								} else {
									throw (e_tDBOutput_4);
								}

							}
						}

						commitCounter_tDBOutput_4++;
						if (commitEvery_tDBOutput_4 <= commitCounter_tDBOutput_4) {
							if ((batchSize_tDBOutput_4 > 0)
									&& (batchSizeCounter_tDBOutput_4 > 0)) {
								try {
									int countSum_tDBOutput_4 = 0;

									for (int countEach_tDBOutput_4 : pstmt_tDBOutput_4
											.executeBatch()) {
										countSum_tDBOutput_4 += (countEach_tDBOutput_4 < 0 ? 0
												: countEach_tDBOutput_4);
									}

									insertedCount_tDBOutput_4 += countSum_tDBOutput_4;

									batchSizeCounter_tDBOutput_4 = 0;
								} catch (java.sql.BatchUpdateException e_tDBOutput_4) {
									java.sql.SQLException ne_tDBOutput_4 = e_tDBOutput_4
											.getNextException(), sqle_tDBOutput_4 = null;
									String errormessage_tDBOutput_4;
									if (ne_tDBOutput_4 != null) {
										// build new exception to provide the
										// original cause
										sqle_tDBOutput_4 = new java.sql.SQLException(
												e_tDBOutput_4.getMessage()
														+ "\ncaused by: "
														+ ne_tDBOutput_4
																.getMessage(),
												ne_tDBOutput_4.getSQLState(),
												ne_tDBOutput_4.getErrorCode(),
												ne_tDBOutput_4);
										errormessage_tDBOutput_4 = sqle_tDBOutput_4
												.getMessage();
									} else {
										errormessage_tDBOutput_4 = e_tDBOutput_4
												.getMessage();
									}

									if (ne_tDBOutput_4 != null) {
										throw (sqle_tDBOutput_4);
									} else {
										throw (e_tDBOutput_4);
									}

								}
							}
							conn_tDBOutput_4.commit();

							commitCounter_tDBOutput_4 = 0;
						}

						tos_count_tDBOutput_4++;

						/**
						 * [tDBOutput_4 main ] stop
						 */

						/**
						 * [tDBOutput_4 process_data_begin ] start
						 */

						currentComponent = "tDBOutput_4";

						/**
						 * [tDBOutput_4 process_data_begin ] stop
						 */

						/**
						 * [tDBOutput_4 process_data_end ] start
						 */

						currentComponent = "tDBOutput_4";

						/**
						 * [tDBOutput_4 process_data_end ] stop
						 */

						/**
						 * [tDBInput_4 process_data_end ] start
						 */

						currentComponent = "tDBInput_4";

						/**
						 * [tDBInput_4 process_data_end ] stop
						 */

						/**
						 * [tDBInput_4 end ] start
						 */

						currentComponent = "tDBInput_4";

					}
				} finally {
					if (rs_tDBInput_4 != null) {
						rs_tDBInput_4.close();
					}
					if (stmt_tDBInput_4 != null) {
						stmt_tDBInput_4.close();
					}
				}
				globalMap.put("tDBInput_4_NB_LINE", nb_line_tDBInput_4);

				ok_Hash.put("tDBInput_4", true);
				end_Hash.put("tDBInput_4", System.currentTimeMillis());

				tStatCatcher_1.addMessage(
						"end",
						"tDBInput_4",
						end_Hash.get("tDBInput_4")
								- start_Hash.get("tDBInput_4"));
				tStatCatcher_1Process(globalMap);
				talendStats_STATS.addMessage(
						"end",
						"tDBInput_4",
						end_Hash.get("tDBInput_4")
								- start_Hash.get("tDBInput_4"));
				talendStats_STATSProcess(globalMap);

				/**
				 * [tDBInput_4 end ] stop
				 */

				/**
				 * [tDBOutput_4 end ] start
				 */

				currentComponent = "tDBOutput_4";

				try {
					int countSum_tDBOutput_4 = 0;
					if (pstmt_tDBOutput_4 != null
							&& batchSizeCounter_tDBOutput_4 > 0) {

						for (int countEach_tDBOutput_4 : pstmt_tDBOutput_4
								.executeBatch()) {
							countSum_tDBOutput_4 += (countEach_tDBOutput_4 < 0 ? 0
									: countEach_tDBOutput_4);
						}

					}

					insertedCount_tDBOutput_4 += countSum_tDBOutput_4;

				} catch (java.sql.BatchUpdateException e_tDBOutput_4) {
					java.sql.SQLException ne_tDBOutput_4 = e_tDBOutput_4
							.getNextException(), sqle_tDBOutput_4 = null;
					String errormessage_tDBOutput_4;
					if (ne_tDBOutput_4 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_4 = new java.sql.SQLException(
								e_tDBOutput_4.getMessage() + "\ncaused by: "
										+ ne_tDBOutput_4.getMessage(),
								ne_tDBOutput_4.getSQLState(),
								ne_tDBOutput_4.getErrorCode(), ne_tDBOutput_4);
						errormessage_tDBOutput_4 = sqle_tDBOutput_4
								.getMessage();
					} else {
						errormessage_tDBOutput_4 = e_tDBOutput_4.getMessage();
					}

					if (ne_tDBOutput_4 != null) {
						throw (sqle_tDBOutput_4);
					} else {
						throw (e_tDBOutput_4);
					}

				}

				if (pstmt_tDBOutput_4 != null) {

					pstmt_tDBOutput_4.close();
					resourceMap.remove("pstmt_tDBOutput_4");
				}
				resourceMap.put("statementClosed_tDBOutput_4", true);

				conn_tDBOutput_4.commit();

				conn_tDBOutput_4.close();

				resourceMap.put("finish_tDBOutput_4", true);

				nb_line_deleted_tDBOutput_4 = nb_line_deleted_tDBOutput_4
						+ deletedCount_tDBOutput_4;
				nb_line_update_tDBOutput_4 = nb_line_update_tDBOutput_4
						+ updatedCount_tDBOutput_4;
				nb_line_inserted_tDBOutput_4 = nb_line_inserted_tDBOutput_4
						+ insertedCount_tDBOutput_4;
				nb_line_rejected_tDBOutput_4 = nb_line_rejected_tDBOutput_4
						+ rejectedCount_tDBOutput_4;

				globalMap.put("tDBOutput_4_NB_LINE", nb_line_tDBOutput_4);
				globalMap.put("tDBOutput_4_NB_LINE_UPDATED",
						nb_line_update_tDBOutput_4);
				globalMap.put("tDBOutput_4_NB_LINE_INSERTED",
						nb_line_inserted_tDBOutput_4);
				globalMap.put("tDBOutput_4_NB_LINE_DELETED",
						nb_line_deleted_tDBOutput_4);
				globalMap.put("tDBOutput_4_NB_LINE_REJECTED",
						nb_line_rejected_tDBOutput_4);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row4" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tDBOutput_4", true);
				end_Hash.put("tDBOutput_4", System.currentTimeMillis());

				tStatCatcher_1.addMessage(
						"end",
						"tDBOutput_4",
						end_Hash.get("tDBOutput_4")
								- start_Hash.get("tDBOutput_4"));
				tStatCatcher_1Process(globalMap);
				talendStats_STATS.addMessage(
						"end",
						"tDBOutput_4",
						end_Hash.get("tDBOutput_4")
								- start_Hash.get("tDBOutput_4"));
				talendStats_STATSProcess(globalMap);

				/**
				 * [tDBOutput_4 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_4 finally ] start
				 */

				currentComponent = "tDBInput_4";

				/**
				 * [tDBInput_4 finally ] stop
				 */

				/**
				 * [tDBOutput_4 finally ] start
				 */

				currentComponent = "tDBOutput_4";

				try {
					if (resourceMap.get("statementClosed_tDBOutput_4") == null) {
						java.sql.PreparedStatement pstmtToClose_tDBOutput_4 = null;
						if ((pstmtToClose_tDBOutput_4 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmt_tDBOutput_4")) != null) {
							pstmtToClose_tDBOutput_4.close();
						}
					}
				} finally {
					if (resourceMap.get("finish_tDBOutput_4") == null) {
						java.sql.Connection ctn_tDBOutput_4 = null;
						if ((ctn_tDBOutput_4 = (java.sql.Connection) resourceMap
								.get("conn_tDBOutput_4")) != null) {
							try {
								ctn_tDBOutput_4.close();
							} catch (java.sql.SQLException sqlEx_tDBOutput_4) {
								String errorMessage_tDBOutput_4 = "failed to close the connection in tDBOutput_4 :"
										+ sqlEx_tDBOutput_4.getMessage();
								System.err.println(errorMessage_tDBOutput_4);
							}
						}
					}
				}

				/**
				 * [tDBOutput_4 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_4_SUBPROCESS_STATE", 1);
	}

	public static class row2Struct implements
			routines.system.IPersistableRow<row2Struct> {
		final static byte[] commonByteArrayLock_ORDER_ETL_RFE_ETL = new byte[0];
		static byte[] commonByteArray_ORDER_ETL_RFE_ETL = new byte[0];

		public int OrderItemId;

		public int getOrderItemId() {
			return this.OrderItemId;
		}

		public short Type;

		public short getType() {
			return this.Type;
		}

		public short ItemType;

		public short getItemType() {
			return this.ItemType;
		}

		public short Status;

		public short getStatus() {
			return this.Status;
		}

		public short CopyrightStatus;

		public short getCopyrightStatus() {
			return this.CopyrightStatus;
		}

		public short CloseReason;

		public short getCloseReason() {
			return this.CloseReason;
		}

		public java.util.Date CreatedTime;

		public java.util.Date getCreatedTime() {
			return this.CreatedTime;
		}

		public String CreatedByEmail;

		public String getCreatedByEmail() {
			return this.CreatedByEmail;
		}

		public String CreatedByName;

		public String getCreatedByName() {
			return this.CreatedByName;
		}

		public String Usage;

		public String getUsage() {
			return this.Usage;
		}

		public String UserEmail;

		public String getUserEmail() {
			return this.UserEmail;
		}

		public String UserName;

		public String getUserName() {
			return this.UserName;
		}

		public short PageCount;

		public short getPageCount() {
			return this.PageCount;
		}

		public short DeliveryUrgency;

		public short getDeliveryUrgency() {
			return this.DeliveryUrgency;
		}

		public java.util.Date NeededByDate;

		public java.util.Date getNeededByDate() {
			return this.NeededByDate;
		}

		public java.util.Date PromisedDate;

		public java.util.Date getPromisedDate() {
			return this.PromisedDate;
		}

		public Object FeeTransaction;

		public Object getFeeTransaction() {
			return this.FeeTransaction;
		}

		public Object FeeCR;

		public Object getFeeCR() {
			return this.FeeCR;
		}

		public Object FeeCRServices;

		public Object getFeeCRServices() {
			return this.FeeCRServices;
		}

		public Object FeeFF;

		public Object getFeeFF() {
			return this.FeeFF;
		}

		public Object FeeAdvRef;

		public Object getFeeAdvRef() {
			return this.FeeAdvRef;
		}

		public Object FeeSH;

		public Object getFeeSH() {
			return this.FeeSH;
		}

		public Object FeeOther;

		public Object getFeeOther() {
			return this.FeeOther;
		}

		public Object FeeTax;

		public Object getFeeTax() {
			return this.FeeTax;
		}

		public Object FeeTotal;

		public Object getFeeTotal() {
			return this.FeeTotal;
		}

		public String Link;

		public String getLink() {
			return this.Link;
		}

		public java.util.Date LinkExpiration;

		public java.util.Date getLinkExpiration() {
			return this.LinkExpiration;
		}

		public String CostCenter;

		public String getCostCenter() {
			return this.CostCenter;
		}

		public String BillRef;

		public String getBillRef() {
			return this.BillRef;
		}

		public String PubDescription;

		public String getPubDescription() {
			return this.PubDescription;
		}

		public String UsageStatement;

		public String getUsageStatement() {
			return this.UsageStatement;
		}

		public int ClientId;

		public int getClientId() {
			return this.ClientId;
		}

		public String ClientName;

		public String getClientName() {
			return this.ClientName;
		}

		public short DeliveryMethod;

		public short getDeliveryMethod() {
			return this.DeliveryMethod;
		}

		public String SpecialInstruct;

		public String getSpecialInstruct() {
			return this.SpecialInstruct;
		}

		public String CustSpecialInstruct;

		public String getCustSpecialInstruct() {
			return this.CustSpecialInstruct;
		}

		public Object FeeAlternate;

		public Object getFeeAlternate() {
			return this.FeeAlternate;
		}

		public String DeliveryAddr;

		public String getDeliveryAddr() {
			return this.DeliveryAddr;
		}

		public String DeliveryCity;

		public String getDeliveryCity() {
			return this.DeliveryCity;
		}

		public String DeliveryState;

		public String getDeliveryState() {
			return this.DeliveryState;
		}

		public String DeliveryCountry;

		public String getDeliveryCountry() {
			return this.DeliveryCountry;
		}

		public String DeliveryZip;

		public String getDeliveryZip() {
			return this.DeliveryZip;
		}

		public String DeliveryTracking;

		public String getDeliveryTracking() {
			return this.DeliveryTracking;
		}

		public java.util.Date DeliveryTime;

		public java.util.Date getDeliveryTime() {
			return this.DeliveryTime;
		}

		public String RightsGranted;

		public String getRightsGranted() {
			return this.RightsGranted;
		}

		public short AllowedViewsOrig;

		public short getAllowedViewsOrig() {
			return this.AllowedViewsOrig;
		}

		public short AllowedViewsLeft;

		public short getAllowedViewsLeft() {
			return this.AllowedViewsLeft;
		}

		public short AllowedPrintsOrig;

		public short getAllowedPrintsOrig() {
			return this.AllowedPrintsOrig;
		}

		public short AllowedPrintsLeft;

		public short getAllowedPrintsLeft() {
			return this.AllowedPrintsLeft;
		}

		public String CRTerms;

		public String getCRTerms() {
			return this.CRTerms;
		}

		public String PO;

		public String getPO() {
			return this.PO;
		}

		public String CustOrderNum;

		public String getCustOrderNum() {
			return this.CustOrderNum;
		}

		public Object PriceLimit;

		public Object getPriceLimit() {
			return this.PriceLimit;
		}

		public String Title;

		public String getTitle() {
			return this.Title;
		}

		public String Authors;

		public String getAuthors() {
			return this.Authors;
		}

		public String Issue;

		public String getIssue() {
			return this.Issue;
		}

		public String Volume;

		public String getVolume() {
			return this.Volume;
		}

		public String Pages;

		public String getPages() {
			return this.Pages;
		}

		public String Publication;

		public String getPublication() {
			return this.Publication;
		}

		public String PubDate;

		public String getPubDate() {
			return this.PubDate;
		}

		public String StdNum;

		public String getStdNum() {
			return this.StdNum;
		}

		public String FormattedStdNum;

		public String getFormattedStdNum() {
			return this.FormattedStdNum;
		}

		public String Publisher;

		public String getPublisher() {
			return this.Publisher;
		}

		public String DOI;

		public String getDOI() {
			return this.DOI;
		}

		public String UCustomId;

		public String getUCustomId() {
			return this.UCustomId;
		}

		public String CCustomId;

		public String getCCustomId() {
			return this.CCustomId;
		}

		public String ucLastName;

		public String getUcLastName() {
			return this.ucLastName;
		}

		public String ucFirstName;

		public String getUcFirstName() {
			return this.ucFirstName;
		}

		public String ccLastName;

		public String getCcLastName() {
			return this.ccLastName;
		}

		public String ccFirstName;

		public String getCcFirstName() {
			return this.ccFirstName;
		}

		public int FFCollectionId;

		public int getFFCollectionId() {
			return this.FFCollectionId;
		}

		public int CRCollectionId;

		public int getCRCollectionId() {
			return this.CRCollectionId;
		}

		public int CRAltProvId;

		public int getCRAltProvId() {
			return this.CRAltProvId;
		}

		public String FFCollectionName;

		public String getFFCollectionName() {
			return this.FFCollectionName;
		}

		public String ClientFFCollectionName;

		public String getClientFFCollectionName() {
			return this.ClientFFCollectionName;
		}

		public String CRCollectionName;

		public String getCRCollectionName() {
			return this.CRCollectionName;
		}

		public Boolean InternalFill;

		public Boolean getInternalFill() {
			return this.InternalFill;
		}

		public String DivisionName;

		public String getDivisionName() {
			return this.DivisionName;
		}

		public String DepartmentName;

		public String getDepartmentName() {
			return this.DepartmentName;
		}

		public String LocationName;

		public String getLocationName() {
			return this.LocationName;
		}

		public String OrigCitText;

		public String getOrigCitText() {
			return this.OrigCitText;
		}

		public short TurnaroundMinutes;

		public short getTurnaroundMinutes() {
			return this.TurnaroundMinutes;
		}

		public short WorkMinutes;

		public short getWorkMinutes() {
			return this.WorkMinutes;
		}

		public java.util.Date ReferenceTime;

		public java.util.Date getReferenceTime() {
			return this.ReferenceTime;
		}

		public short UseCopies;

		public short getUseCopies() {
			return this.UseCopies;
		}

		public String Source;

		public String getSource() {
			return this.Source;
		}

		public String PMID;

		public String getPMID() {
			return this.PMID;
		}

		public Object PayCR;

		public Object getPayCR() {
			return this.PayCR;
		}

		public int ClientGroupId;

		public int getClientGroupId() {
			return this.ClientGroupId;
		}

		public Boolean DRMApplied;

		public Boolean getDRMApplied() {
			return this.DRMApplied;
		}

		public int InvoiceId;

		public int getInvoiceId() {
			return this.InvoiceId;
		}

		public Object GST_HST;

		public Object getGST_HST() {
			return this.GST_HST;
		}

		public Object PST;

		public Object getPST() {
			return this.PST;
		}

		public short PartnerId;

		public short getPartnerId() {
			return this.PartnerId;
		}

		public String PartnerClientId;

		public String getPartnerClientId() {
			return this.PartnerClientId;
		}

		public int AssignedToId;

		public int getAssignedToId() {
			return this.AssignedToId;
		}

		public String AssignedToEmail;

		public String getAssignedToEmail() {
			return this.AssignedToEmail;
		}

		public Boolean IsTestOrder;

		public Boolean getIsTestOrder() {
			return this.IsTestOrder;
		}

		public Integer WorkStatus;

		public Integer getWorkStatus() {
			return this.WorkStatus;
		}

		public Integer SuspendedReason;

		public Integer getSuspendedReason() {
			return this.SuspendedReason;
		}

		public java.util.Date WorkAssignedTime;

		public java.util.Date getWorkAssignedTime() {
			return this.WorkAssignedTime;
		}

		public java.util.Date WorkCreatedTime;

		public java.util.Date getWorkCreatedTime() {
			return this.WorkCreatedTime;
		}

		public Boolean CRVerificationRequired;

		public Boolean getCRVerificationRequired() {
			return this.CRVerificationRequired;
		}

		public Boolean CRVerificationVerified;

		public Boolean getCRVerificationVerified() {
			return this.CRVerificationVerified;
		}

		public Boolean CRVerificationNotFound;

		public Boolean getCRVerificationNotFound() {
			return this.CRVerificationNotFound;
		}

		public Boolean CRVerificationDenied;

		public Boolean getCRVerificationDenied() {
			return this.CRVerificationDenied;
		}

		public int ContentId;

		public int getContentId() {
			return this.ContentId;
		}

		public int PartOfContentId;

		public int getPartOfContentId() {
			return this.PartOfContentId;
		}

		public String PartOfTitle;

		public String getPartOfTitle() {
			return this.PartOfTitle;
		}

		public Integer PublicationId;

		public Integer getPublicationId() {
			return this.PublicationId;
		}

		public Integer ArticleId;

		public Integer getArticleId() {
			return this.ArticleId;
		}

		public short FFMethod;

		public short getFFMethod() {
			return this.FFMethod;
		}

		public java.util.Date LastNotify;

		public java.util.Date getLastNotify() {
			return this.LastNotify;
		}

		public Boolean ReferencingRequired;

		public Boolean getReferencingRequired() {
			return this.ReferencingRequired;
		}

		public String RightsRequired;

		public String getRightsRequired() {
			return this.RightsRequired;
		}

		public short FFSourceType;

		public short getFFSourceType() {
			return this.FFSourceType;
		}

		public Object ClientCosts;

		public Object getClientCosts() {
			return this.ClientCosts;
		}

		public int FFHoldingId;

		public int getFFHoldingId() {
			return this.FFHoldingId;
		}

		public int CRHoldingId;

		public int getCRHoldingId() {
			return this.CRHoldingId;
		}

		public Object TotalPublisherVendorFee;

		public Object getTotalPublisherVendorFee() {
			return this.TotalPublisherVendorFee;
		}

		public Object WireTransferFee;

		public Object getWireTransferFee() {
			return this.WireTransferFee;
		}

		public Object CreditCardCharge;

		public Object getCreditCardCharge() {
			return this.CreditCardCharge;
		}

		public Object ResellerFeeTransaction;

		public Object getResellerFeeTransaction() {
			return this.ResellerFeeTransaction;
		}

		public Object ResellerFeeCR;

		public Object getResellerFeeCR() {
			return this.ResellerFeeCR;
		}

		public Object ResellerFeeCRSErvices;

		public Object getResellerFeeCRSErvices() {
			return this.ResellerFeeCRSErvices;
		}

		public Object ResellerFeeFF;

		public Object getResellerFeeFF() {
			return this.ResellerFeeFF;
		}

		public Object ResellerFeeAdvRef;

		public Object getResellerFeeAdvRef() {
			return this.ResellerFeeAdvRef;
		}

		public Object ResellerFeeSH;

		public Object getResellerFeeSH() {
			return this.ResellerFeeSH;
		}

		public Object ResellerFeeOther;

		public Object getResellerFeeOther() {
			return this.ResellerFeeOther;
		}

		public Object ResellerFeeTax;

		public Object getResellerFeeTax() {
			return this.ResellerFeeTax;
		}

		public Object ResellerFeeTotal;

		public Object getResellerFeeTotal() {
			return this.ResellerFeeTotal;
		}

		public Boolean InDigitalLibrary;

		public Boolean getInDigitalLibrary() {
			return this.InDigitalLibrary;
		}

		public String LinkWithHeader;

		public String getLinkWithHeader() {
			return this.LinkWithHeader;
		}

		public String BritishLibraryId;

		public String getBritishLibraryId() {
			return this.BritishLibraryId;
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ORDER_ETL_RFE_ETL.length) {
					if (length < 1024
							&& commonByteArray_ORDER_ETL_RFE_ETL.length == 0) {
						commonByteArray_ORDER_ETL_RFE_ETL = new byte[1024];
					} else {
						commonByteArray_ORDER_ETL_RFE_ETL = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ORDER_ETL_RFE_ETL, 0, length);
				strReturn = new String(commonByteArray_ORDER_ETL_RFE_ETL, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ORDER_ETL_RFE_ETL) {

				try {

					int length = 0;

					this.OrderItemId = dis.readInt();

					this.Type = dis.readShort();

					this.ItemType = dis.readShort();

					this.Status = dis.readShort();

					this.CopyrightStatus = dis.readShort();

					this.CloseReason = dis.readShort();

					this.CreatedTime = readDate(dis);

					this.CreatedByEmail = readString(dis);

					this.CreatedByName = readString(dis);

					this.Usage = readString(dis);

					this.UserEmail = readString(dis);

					this.UserName = readString(dis);

					this.PageCount = dis.readShort();

					this.DeliveryUrgency = dis.readShort();

					this.NeededByDate = readDate(dis);

					this.PromisedDate = readDate(dis);

					this.FeeTransaction = (Object) dis.readObject();

					this.FeeCR = (Object) dis.readObject();

					this.FeeCRServices = (Object) dis.readObject();

					this.FeeFF = (Object) dis.readObject();

					this.FeeAdvRef = (Object) dis.readObject();

					this.FeeSH = (Object) dis.readObject();

					this.FeeOther = (Object) dis.readObject();

					this.FeeTax = (Object) dis.readObject();

					this.FeeTotal = (Object) dis.readObject();

					this.Link = readString(dis);

					this.LinkExpiration = readDate(dis);

					this.CostCenter = readString(dis);

					this.BillRef = readString(dis);

					this.PubDescription = readString(dis);

					this.UsageStatement = readString(dis);

					this.ClientId = dis.readInt();

					this.ClientName = readString(dis);

					this.DeliveryMethod = dis.readShort();

					this.SpecialInstruct = readString(dis);

					this.CustSpecialInstruct = readString(dis);

					this.FeeAlternate = (Object) dis.readObject();

					this.DeliveryAddr = readString(dis);

					this.DeliveryCity = readString(dis);

					this.DeliveryState = readString(dis);

					this.DeliveryCountry = readString(dis);

					this.DeliveryZip = readString(dis);

					this.DeliveryTracking = readString(dis);

					this.DeliveryTime = readDate(dis);

					this.RightsGranted = readString(dis);

					this.AllowedViewsOrig = dis.readShort();

					this.AllowedViewsLeft = dis.readShort();

					this.AllowedPrintsOrig = dis.readShort();

					this.AllowedPrintsLeft = dis.readShort();

					this.CRTerms = readString(dis);

					this.PO = readString(dis);

					this.CustOrderNum = readString(dis);

					this.PriceLimit = (Object) dis.readObject();

					this.Title = readString(dis);

					this.Authors = readString(dis);

					this.Issue = readString(dis);

					this.Volume = readString(dis);

					this.Pages = readString(dis);

					this.Publication = readString(dis);

					this.PubDate = readString(dis);

					this.StdNum = readString(dis);

					this.FormattedStdNum = readString(dis);

					this.Publisher = readString(dis);

					this.DOI = readString(dis);

					this.UCustomId = readString(dis);

					this.CCustomId = readString(dis);

					this.ucLastName = readString(dis);

					this.ucFirstName = readString(dis);

					this.ccLastName = readString(dis);

					this.ccFirstName = readString(dis);

					this.FFCollectionId = dis.readInt();

					this.CRCollectionId = dis.readInt();

					this.CRAltProvId = dis.readInt();

					this.FFCollectionName = readString(dis);

					this.ClientFFCollectionName = readString(dis);

					this.CRCollectionName = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.InternalFill = null;
					} else {
						this.InternalFill = dis.readBoolean();
					}

					this.DivisionName = readString(dis);

					this.DepartmentName = readString(dis);

					this.LocationName = readString(dis);

					this.OrigCitText = readString(dis);

					this.TurnaroundMinutes = dis.readShort();

					this.WorkMinutes = dis.readShort();

					this.ReferenceTime = readDate(dis);

					this.UseCopies = dis.readShort();

					this.Source = readString(dis);

					this.PMID = readString(dis);

					this.PayCR = (Object) dis.readObject();

					this.ClientGroupId = dis.readInt();

					length = dis.readByte();
					if (length == -1) {
						this.DRMApplied = null;
					} else {
						this.DRMApplied = dis.readBoolean();
					}

					this.InvoiceId = dis.readInt();

					this.GST_HST = (Object) dis.readObject();

					this.PST = (Object) dis.readObject();

					this.PartnerId = dis.readShort();

					this.PartnerClientId = readString(dis);

					this.AssignedToId = dis.readInt();

					this.AssignedToEmail = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.IsTestOrder = null;
					} else {
						this.IsTestOrder = dis.readBoolean();
					}

					this.WorkStatus = readInteger(dis);

					this.SuspendedReason = readInteger(dis);

					this.WorkAssignedTime = readDate(dis);

					this.WorkCreatedTime = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.CRVerificationRequired = null;
					} else {
						this.CRVerificationRequired = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.CRVerificationVerified = null;
					} else {
						this.CRVerificationVerified = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.CRVerificationNotFound = null;
					} else {
						this.CRVerificationNotFound = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.CRVerificationDenied = null;
					} else {
						this.CRVerificationDenied = dis.readBoolean();
					}

					this.ContentId = dis.readInt();

					this.PartOfContentId = dis.readInt();

					this.PartOfTitle = readString(dis);

					this.PublicationId = readInteger(dis);

					this.ArticleId = readInteger(dis);

					this.FFMethod = dis.readShort();

					this.LastNotify = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.ReferencingRequired = null;
					} else {
						this.ReferencingRequired = dis.readBoolean();
					}

					this.RightsRequired = readString(dis);

					this.FFSourceType = dis.readShort();

					this.ClientCosts = (Object) dis.readObject();

					this.FFHoldingId = dis.readInt();

					this.CRHoldingId = dis.readInt();

					this.TotalPublisherVendorFee = (Object) dis.readObject();

					this.WireTransferFee = (Object) dis.readObject();

					this.CreditCardCharge = (Object) dis.readObject();

					this.ResellerFeeTransaction = (Object) dis.readObject();

					this.ResellerFeeCR = (Object) dis.readObject();

					this.ResellerFeeCRSErvices = (Object) dis.readObject();

					this.ResellerFeeFF = (Object) dis.readObject();

					this.ResellerFeeAdvRef = (Object) dis.readObject();

					this.ResellerFeeSH = (Object) dis.readObject();

					this.ResellerFeeOther = (Object) dis.readObject();

					this.ResellerFeeTax = (Object) dis.readObject();

					this.ResellerFeeTotal = (Object) dis.readObject();

					length = dis.readByte();
					if (length == -1) {
						this.InDigitalLibrary = null;
					} else {
						this.InDigitalLibrary = dis.readBoolean();
					}

					this.LinkWithHeader = readString(dis);

					this.BritishLibraryId = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.OrderItemId);

				// short

				dos.writeShort(this.Type);

				// short

				dos.writeShort(this.ItemType);

				// short

				dos.writeShort(this.Status);

				// short

				dos.writeShort(this.CopyrightStatus);

				// short

				dos.writeShort(this.CloseReason);

				// java.util.Date

				writeDate(this.CreatedTime, dos);

				// String

				writeString(this.CreatedByEmail, dos);

				// String

				writeString(this.CreatedByName, dos);

				// String

				writeString(this.Usage, dos);

				// String

				writeString(this.UserEmail, dos);

				// String

				writeString(this.UserName, dos);

				// short

				dos.writeShort(this.PageCount);

				// short

				dos.writeShort(this.DeliveryUrgency);

				// java.util.Date

				writeDate(this.NeededByDate, dos);

				// java.util.Date

				writeDate(this.PromisedDate, dos);

				// Object

				dos.writeObject(this.FeeTransaction);

				// Object

				dos.writeObject(this.FeeCR);

				// Object

				dos.writeObject(this.FeeCRServices);

				// Object

				dos.writeObject(this.FeeFF);

				// Object

				dos.writeObject(this.FeeAdvRef);

				// Object

				dos.writeObject(this.FeeSH);

				// Object

				dos.writeObject(this.FeeOther);

				// Object

				dos.writeObject(this.FeeTax);

				// Object

				dos.writeObject(this.FeeTotal);

				// String

				writeString(this.Link, dos);

				// java.util.Date

				writeDate(this.LinkExpiration, dos);

				// String

				writeString(this.CostCenter, dos);

				// String

				writeString(this.BillRef, dos);

				// String

				writeString(this.PubDescription, dos);

				// String

				writeString(this.UsageStatement, dos);

				// int

				dos.writeInt(this.ClientId);

				// String

				writeString(this.ClientName, dos);

				// short

				dos.writeShort(this.DeliveryMethod);

				// String

				writeString(this.SpecialInstruct, dos);

				// String

				writeString(this.CustSpecialInstruct, dos);

				// Object

				dos.writeObject(this.FeeAlternate);

				// String

				writeString(this.DeliveryAddr, dos);

				// String

				writeString(this.DeliveryCity, dos);

				// String

				writeString(this.DeliveryState, dos);

				// String

				writeString(this.DeliveryCountry, dos);

				// String

				writeString(this.DeliveryZip, dos);

				// String

				writeString(this.DeliveryTracking, dos);

				// java.util.Date

				writeDate(this.DeliveryTime, dos);

				// String

				writeString(this.RightsGranted, dos);

				// short

				dos.writeShort(this.AllowedViewsOrig);

				// short

				dos.writeShort(this.AllowedViewsLeft);

				// short

				dos.writeShort(this.AllowedPrintsOrig);

				// short

				dos.writeShort(this.AllowedPrintsLeft);

				// String

				writeString(this.CRTerms, dos);

				// String

				writeString(this.PO, dos);

				// String

				writeString(this.CustOrderNum, dos);

				// Object

				dos.writeObject(this.PriceLimit);

				// String

				writeString(this.Title, dos);

				// String

				writeString(this.Authors, dos);

				// String

				writeString(this.Issue, dos);

				// String

				writeString(this.Volume, dos);

				// String

				writeString(this.Pages, dos);

				// String

				writeString(this.Publication, dos);

				// String

				writeString(this.PubDate, dos);

				// String

				writeString(this.StdNum, dos);

				// String

				writeString(this.FormattedStdNum, dos);

				// String

				writeString(this.Publisher, dos);

				// String

				writeString(this.DOI, dos);

				// String

				writeString(this.UCustomId, dos);

				// String

				writeString(this.CCustomId, dos);

				// String

				writeString(this.ucLastName, dos);

				// String

				writeString(this.ucFirstName, dos);

				// String

				writeString(this.ccLastName, dos);

				// String

				writeString(this.ccFirstName, dos);

				// int

				dos.writeInt(this.FFCollectionId);

				// int

				dos.writeInt(this.CRCollectionId);

				// int

				dos.writeInt(this.CRAltProvId);

				// String

				writeString(this.FFCollectionName, dos);

				// String

				writeString(this.ClientFFCollectionName, dos);

				// String

				writeString(this.CRCollectionName, dos);

				// Boolean

				if (this.InternalFill == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.InternalFill);
				}

				// String

				writeString(this.DivisionName, dos);

				// String

				writeString(this.DepartmentName, dos);

				// String

				writeString(this.LocationName, dos);

				// String

				writeString(this.OrigCitText, dos);

				// short

				dos.writeShort(this.TurnaroundMinutes);

				// short

				dos.writeShort(this.WorkMinutes);

				// java.util.Date

				writeDate(this.ReferenceTime, dos);

				// short

				dos.writeShort(this.UseCopies);

				// String

				writeString(this.Source, dos);

				// String

				writeString(this.PMID, dos);

				// Object

				dos.writeObject(this.PayCR);

				// int

				dos.writeInt(this.ClientGroupId);

				// Boolean

				if (this.DRMApplied == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.DRMApplied);
				}

				// int

				dos.writeInt(this.InvoiceId);

				// Object

				dos.writeObject(this.GST_HST);

				// Object

				dos.writeObject(this.PST);

				// short

				dos.writeShort(this.PartnerId);

				// String

				writeString(this.PartnerClientId, dos);

				// int

				dos.writeInt(this.AssignedToId);

				// String

				writeString(this.AssignedToEmail, dos);

				// Boolean

				if (this.IsTestOrder == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.IsTestOrder);
				}

				// Integer

				writeInteger(this.WorkStatus, dos);

				// Integer

				writeInteger(this.SuspendedReason, dos);

				// java.util.Date

				writeDate(this.WorkAssignedTime, dos);

				// java.util.Date

				writeDate(this.WorkCreatedTime, dos);

				// Boolean

				if (this.CRVerificationRequired == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.CRVerificationRequired);
				}

				// Boolean

				if (this.CRVerificationVerified == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.CRVerificationVerified);
				}

				// Boolean

				if (this.CRVerificationNotFound == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.CRVerificationNotFound);
				}

				// Boolean

				if (this.CRVerificationDenied == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.CRVerificationDenied);
				}

				// int

				dos.writeInt(this.ContentId);

				// int

				dos.writeInt(this.PartOfContentId);

				// String

				writeString(this.PartOfTitle, dos);

				// Integer

				writeInteger(this.PublicationId, dos);

				// Integer

				writeInteger(this.ArticleId, dos);

				// short

				dos.writeShort(this.FFMethod);

				// java.util.Date

				writeDate(this.LastNotify, dos);

				// Boolean

				if (this.ReferencingRequired == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.ReferencingRequired);
				}

				// String

				writeString(this.RightsRequired, dos);

				// short

				dos.writeShort(this.FFSourceType);

				// Object

				dos.writeObject(this.ClientCosts);

				// int

				dos.writeInt(this.FFHoldingId);

				// int

				dos.writeInt(this.CRHoldingId);

				// Object

				dos.writeObject(this.TotalPublisherVendorFee);

				// Object

				dos.writeObject(this.WireTransferFee);

				// Object

				dos.writeObject(this.CreditCardCharge);

				// Object

				dos.writeObject(this.ResellerFeeTransaction);

				// Object

				dos.writeObject(this.ResellerFeeCR);

				// Object

				dos.writeObject(this.ResellerFeeCRSErvices);

				// Object

				dos.writeObject(this.ResellerFeeFF);

				// Object

				dos.writeObject(this.ResellerFeeAdvRef);

				// Object

				dos.writeObject(this.ResellerFeeSH);

				// Object

				dos.writeObject(this.ResellerFeeOther);

				// Object

				dos.writeObject(this.ResellerFeeTax);

				// Object

				dos.writeObject(this.ResellerFeeTotal);

				// Boolean

				if (this.InDigitalLibrary == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.InDigitalLibrary);
				}

				// String

				writeString(this.LinkWithHeader, dos);

				// String

				writeString(this.BritishLibraryId, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("OrderItemId=" + String.valueOf(OrderItemId));
			sb.append(",Type=" + String.valueOf(Type));
			sb.append(",ItemType=" + String.valueOf(ItemType));
			sb.append(",Status=" + String.valueOf(Status));
			sb.append(",CopyrightStatus=" + String.valueOf(CopyrightStatus));
			sb.append(",CloseReason=" + String.valueOf(CloseReason));
			sb.append(",CreatedTime=" + String.valueOf(CreatedTime));
			sb.append(",CreatedByEmail=" + CreatedByEmail);
			sb.append(",CreatedByName=" + CreatedByName);
			sb.append(",Usage=" + Usage);
			sb.append(",UserEmail=" + UserEmail);
			sb.append(",UserName=" + UserName);
			sb.append(",PageCount=" + String.valueOf(PageCount));
			sb.append(",DeliveryUrgency=" + String.valueOf(DeliveryUrgency));
			sb.append(",NeededByDate=" + String.valueOf(NeededByDate));
			sb.append(",PromisedDate=" + String.valueOf(PromisedDate));
			sb.append(",FeeTransaction=" + String.valueOf(FeeTransaction));
			sb.append(",FeeCR=" + String.valueOf(FeeCR));
			sb.append(",FeeCRServices=" + String.valueOf(FeeCRServices));
			sb.append(",FeeFF=" + String.valueOf(FeeFF));
			sb.append(",FeeAdvRef=" + String.valueOf(FeeAdvRef));
			sb.append(",FeeSH=" + String.valueOf(FeeSH));
			sb.append(",FeeOther=" + String.valueOf(FeeOther));
			sb.append(",FeeTax=" + String.valueOf(FeeTax));
			sb.append(",FeeTotal=" + String.valueOf(FeeTotal));
			sb.append(",Link=" + Link);
			sb.append(",LinkExpiration=" + String.valueOf(LinkExpiration));
			sb.append(",CostCenter=" + CostCenter);
			sb.append(",BillRef=" + BillRef);
			sb.append(",PubDescription=" + PubDescription);
			sb.append(",UsageStatement=" + UsageStatement);
			sb.append(",ClientId=" + String.valueOf(ClientId));
			sb.append(",ClientName=" + ClientName);
			sb.append(",DeliveryMethod=" + String.valueOf(DeliveryMethod));
			sb.append(",SpecialInstruct=" + SpecialInstruct);
			sb.append(",CustSpecialInstruct=" + CustSpecialInstruct);
			sb.append(",FeeAlternate=" + String.valueOf(FeeAlternate));
			sb.append(",DeliveryAddr=" + DeliveryAddr);
			sb.append(",DeliveryCity=" + DeliveryCity);
			sb.append(",DeliveryState=" + DeliveryState);
			sb.append(",DeliveryCountry=" + DeliveryCountry);
			sb.append(",DeliveryZip=" + DeliveryZip);
			sb.append(",DeliveryTracking=" + DeliveryTracking);
			sb.append(",DeliveryTime=" + String.valueOf(DeliveryTime));
			sb.append(",RightsGranted=" + RightsGranted);
			sb.append(",AllowedViewsOrig=" + String.valueOf(AllowedViewsOrig));
			sb.append(",AllowedViewsLeft=" + String.valueOf(AllowedViewsLeft));
			sb.append(",AllowedPrintsOrig=" + String.valueOf(AllowedPrintsOrig));
			sb.append(",AllowedPrintsLeft=" + String.valueOf(AllowedPrintsLeft));
			sb.append(",CRTerms=" + CRTerms);
			sb.append(",PO=" + PO);
			sb.append(",CustOrderNum=" + CustOrderNum);
			sb.append(",PriceLimit=" + String.valueOf(PriceLimit));
			sb.append(",Title=" + Title);
			sb.append(",Authors=" + Authors);
			sb.append(",Issue=" + Issue);
			sb.append(",Volume=" + Volume);
			sb.append(",Pages=" + Pages);
			sb.append(",Publication=" + Publication);
			sb.append(",PubDate=" + PubDate);
			sb.append(",StdNum=" + StdNum);
			sb.append(",FormattedStdNum=" + FormattedStdNum);
			sb.append(",Publisher=" + Publisher);
			sb.append(",DOI=" + DOI);
			sb.append(",UCustomId=" + UCustomId);
			sb.append(",CCustomId=" + CCustomId);
			sb.append(",ucLastName=" + ucLastName);
			sb.append(",ucFirstName=" + ucFirstName);
			sb.append(",ccLastName=" + ccLastName);
			sb.append(",ccFirstName=" + ccFirstName);
			sb.append(",FFCollectionId=" + String.valueOf(FFCollectionId));
			sb.append(",CRCollectionId=" + String.valueOf(CRCollectionId));
			sb.append(",CRAltProvId=" + String.valueOf(CRAltProvId));
			sb.append(",FFCollectionName=" + FFCollectionName);
			sb.append(",ClientFFCollectionName=" + ClientFFCollectionName);
			sb.append(",CRCollectionName=" + CRCollectionName);
			sb.append(",InternalFill=" + String.valueOf(InternalFill));
			sb.append(",DivisionName=" + DivisionName);
			sb.append(",DepartmentName=" + DepartmentName);
			sb.append(",LocationName=" + LocationName);
			sb.append(",OrigCitText=" + OrigCitText);
			sb.append(",TurnaroundMinutes=" + String.valueOf(TurnaroundMinutes));
			sb.append(",WorkMinutes=" + String.valueOf(WorkMinutes));
			sb.append(",ReferenceTime=" + String.valueOf(ReferenceTime));
			sb.append(",UseCopies=" + String.valueOf(UseCopies));
			sb.append(",Source=" + Source);
			sb.append(",PMID=" + PMID);
			sb.append(",PayCR=" + String.valueOf(PayCR));
			sb.append(",ClientGroupId=" + String.valueOf(ClientGroupId));
			sb.append(",DRMApplied=" + String.valueOf(DRMApplied));
			sb.append(",InvoiceId=" + String.valueOf(InvoiceId));
			sb.append(",GST_HST=" + String.valueOf(GST_HST));
			sb.append(",PST=" + String.valueOf(PST));
			sb.append(",PartnerId=" + String.valueOf(PartnerId));
			sb.append(",PartnerClientId=" + PartnerClientId);
			sb.append(",AssignedToId=" + String.valueOf(AssignedToId));
			sb.append(",AssignedToEmail=" + AssignedToEmail);
			sb.append(",IsTestOrder=" + String.valueOf(IsTestOrder));
			sb.append(",WorkStatus=" + String.valueOf(WorkStatus));
			sb.append(",SuspendedReason=" + String.valueOf(SuspendedReason));
			sb.append(",WorkAssignedTime=" + String.valueOf(WorkAssignedTime));
			sb.append(",WorkCreatedTime=" + String.valueOf(WorkCreatedTime));
			sb.append(",CRVerificationRequired="
					+ String.valueOf(CRVerificationRequired));
			sb.append(",CRVerificationVerified="
					+ String.valueOf(CRVerificationVerified));
			sb.append(",CRVerificationNotFound="
					+ String.valueOf(CRVerificationNotFound));
			sb.append(",CRVerificationDenied="
					+ String.valueOf(CRVerificationDenied));
			sb.append(",ContentId=" + String.valueOf(ContentId));
			sb.append(",PartOfContentId=" + String.valueOf(PartOfContentId));
			sb.append(",PartOfTitle=" + PartOfTitle);
			sb.append(",PublicationId=" + String.valueOf(PublicationId));
			sb.append(",ArticleId=" + String.valueOf(ArticleId));
			sb.append(",FFMethod=" + String.valueOf(FFMethod));
			sb.append(",LastNotify=" + String.valueOf(LastNotify));
			sb.append(",ReferencingRequired="
					+ String.valueOf(ReferencingRequired));
			sb.append(",RightsRequired=" + RightsRequired);
			sb.append(",FFSourceType=" + String.valueOf(FFSourceType));
			sb.append(",ClientCosts=" + String.valueOf(ClientCosts));
			sb.append(",FFHoldingId=" + String.valueOf(FFHoldingId));
			sb.append(",CRHoldingId=" + String.valueOf(CRHoldingId));
			sb.append(",TotalPublisherVendorFee="
					+ String.valueOf(TotalPublisherVendorFee));
			sb.append(",WireTransferFee=" + String.valueOf(WireTransferFee));
			sb.append(",CreditCardCharge=" + String.valueOf(CreditCardCharge));
			sb.append(",ResellerFeeTransaction="
					+ String.valueOf(ResellerFeeTransaction));
			sb.append(",ResellerFeeCR=" + String.valueOf(ResellerFeeCR));
			sb.append(",ResellerFeeCRSErvices="
					+ String.valueOf(ResellerFeeCRSErvices));
			sb.append(",ResellerFeeFF=" + String.valueOf(ResellerFeeFF));
			sb.append(",ResellerFeeAdvRef=" + String.valueOf(ResellerFeeAdvRef));
			sb.append(",ResellerFeeSH=" + String.valueOf(ResellerFeeSH));
			sb.append(",ResellerFeeOther=" + String.valueOf(ResellerFeeOther));
			sb.append(",ResellerFeeTax=" + String.valueOf(ResellerFeeTax));
			sb.append(",ResellerFeeTotal=" + String.valueOf(ResellerFeeTotal));
			sb.append(",InDigitalLibrary=" + String.valueOf(InDigitalLibrary));
			sb.append(",LinkWithHeader=" + LinkWithHeader);
			sb.append(",BritishLibraryId=" + BritishLibraryId);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_2Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDBInput_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row2Struct row2 = new row2Struct();

				/**
				 * [tDBOutput_2 begin ] start
				 */

				ok_Hash.put("tDBOutput_2", false);
				start_Hash.put("tDBOutput_2", System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tDBOutput_2");
				tStatCatcher_1Process(globalMap);

				talendStats_STATS.addMessage("begin", "tDBOutput_2");
				talendStats_STATSProcess(globalMap);

				currentComponent = "tDBOutput_2";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row2" + iterateId, 0, 0);

					}
				}

				int tos_count_tDBOutput_2 = 0;

				String dbschema_tDBOutput_2 = null;
				dbschema_tDBOutput_2 = context.data_warehouse_order_dwos_schema;

				String tableName_tDBOutput_2 = null;
				if (dbschema_tDBOutput_2 == null
						|| dbschema_tDBOutput_2.trim().length() == 0) {
					tableName_tDBOutput_2 = "dwo_rfe_exporderitem";
				} else {
					tableName_tDBOutput_2 = dbschema_tDBOutput_2 + "\".\""
							+ "dwo_rfe_exporderitem";
				}

				int nb_line_tDBOutput_2 = 0;
				int nb_line_update_tDBOutput_2 = 0;
				int nb_line_inserted_tDBOutput_2 = 0;
				int nb_line_deleted_tDBOutput_2 = 0;
				int nb_line_rejected_tDBOutput_2 = 0;

				int deletedCount_tDBOutput_2 = 0;
				int updatedCount_tDBOutput_2 = 0;
				int insertedCount_tDBOutput_2 = 0;
				int rejectedCount_tDBOutput_2 = 0;

				boolean whetherReject_tDBOutput_2 = false;

				java.sql.Connection conn_tDBOutput_2 = null;
				String dbUser_tDBOutput_2 = null;

				java.lang.Class.forName("org.postgresql.Driver");
				String url_tDBOutput_2 = "jdbc:postgresql://"
						+ context.data_warehouse_order_dwos_host + ":"
						+ context.data_warehouse_order_dwos_port + "/"
						+ context.data_warehouse_order_dwos_database;
				dbUser_tDBOutput_2 = context.data_warehouse_order_dwos_username;

				final String decryptedPassword_tDBOutput_2 = context.data_warehouse_order_dwos_password;

				String dbPwd_tDBOutput_2 = decryptedPassword_tDBOutput_2;

				conn_tDBOutput_2 = java.sql.DriverManager.getConnection(
						url_tDBOutput_2, dbUser_tDBOutput_2, dbPwd_tDBOutput_2);

				resourceMap.put("conn_tDBOutput_2", conn_tDBOutput_2);
				conn_tDBOutput_2.setAutoCommit(false);
				int commitEvery_tDBOutput_2 = 1000;
				int commitCounter_tDBOutput_2 = 0;

				int batchSize_tDBOutput_2 = 1000;
				int batchSizeCounter_tDBOutput_2 = 0;

				int count_tDBOutput_2 = 0;
				int rsTruncCountNumber_tDBOutput_2 = 0;
				try (java.sql.Statement stmtTruncCount_tDBOutput_2 = conn_tDBOutput_2
						.createStatement()) {
					try (java.sql.ResultSet rsTruncCount_tDBOutput_2 = stmtTruncCount_tDBOutput_2
							.executeQuery("SELECT COUNT(1) FROM \""
									+ tableName_tDBOutput_2 + "\"")) {
						if (rsTruncCount_tDBOutput_2.next()) {
							rsTruncCountNumber_tDBOutput_2 = rsTruncCount_tDBOutput_2
									.getInt(1);
						}
					}
				}
				try (java.sql.Statement stmtTrunc_tDBOutput_2 = conn_tDBOutput_2
						.createStatement()) {
					stmtTrunc_tDBOutput_2.executeUpdate("TRUNCATE TABLE \""
							+ tableName_tDBOutput_2 + "\"");
					deletedCount_tDBOutput_2 += rsTruncCountNumber_tDBOutput_2;
				}
				String insert_tDBOutput_2 = "INSERT INTO \""
						+ tableName_tDBOutput_2
						+ "\" (\"orderitemid\",\"type\",\"itemtype\",\"status\",\"copyrightstatus\",\"closereason\",\"createdtime\",\"createdbyemail\",\"createdbyname\",\"usage\",\"useremail\",\"username\",\"pagecount\",\"deliveryurgency\",\"neededbydate\",\"promiseddate\",\"feetransaction\",\"feecr\",\"feecrservices\",\"feeff\",\"feeadvref\",\"feesh\",\"feeother\",\"feetax\",\"feetotal\",\"link\",\"linkexpiration\",\"costcenter\",\"billref\",\"pubdescription\",\"usagestatement\",\"clientid\",\"clientname\",\"deliverymethod\",\"specialinstruct\",\"custspecialinstruct\",\"feealternate\",\"deliveryaddr\",\"deliverycity\",\"deliverystate\",\"deliverycountry\",\"deliveryzip\",\"deliverytracking\",\"deliverytime\",\"rightsgranted\",\"allowedviewsorig\",\"allowedviewsleft\",\"allowedprintsorig\",\"allowedprintsleft\",\"crterms\",\"po\",\"custordernum\",\"pricelimit\",\"title\",\"authors\",\"issue\",\"volume\",\"pages\",\"publication\",\"pubdate\",\"stdnum\",\"formattedstdnum\",\"publisher\",\"doi\",\"ucustomid\",\"ccustomid\",\"uclastname\",\"ucfirstname\",\"cclastname\",\"ccfirstname\",\"ffcollectionid\",\"crcollectionid\",\"craltprovid\",\"ffcollectionname\",\"clientffcollectionname\",\"crcollectionname\",\"internalfill\",\"divisionname\",\"departmentname\",\"locationname\",\"origcittext\",\"turnaroundminutes\",\"workminutes\",\"referencetime\",\"usecopies\",\"source\",\"pmid\",\"paycr\",\"clientgroupid\",\"drmapplied\",\"invoiceid\",\"gst_hst\",\"pst\",\"partnerid\",\"partnerclientid\",\"assignedtoid\",\"assignedtoemail\",\"istestorder\",\"workstatus\",\"suspendedreason\",\"workassignedtime\",\"workcreatedtime\",\"crverificationrequired\",\"crverificationverified\",\"crverificationnotfound\",\"crverificationdenied\",\"contentid\",\"partofcontentid\",\"partoftitle\",\"publicationid\",\"articleid\",\"ffmethod\",\"lastnotify\",\"referencingrequired\",\"rightsrequired\",\"ffsourcetype\",\"clientcosts\",\"ffholdingid\",\"crholdingid\",\"totalpublishervendorfee\",\"wiretransferfee\",\"creditcardcharge\",\"resellerfeetransaction\",\"resellerfeecr\",\"resellerfeecrservices\",\"resellerfeeff\",\"resellerfeeadvref\",\"resellerfeesh\",\"resellerfeeother\",\"resellerfeetax\",\"resellerfeetotal\",\"indigitallibrary\",\"linkwithheader\",\"britishlibraryid\") VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

				java.sql.PreparedStatement pstmt_tDBOutput_2 = conn_tDBOutput_2
						.prepareStatement(insert_tDBOutput_2);
				resourceMap.put("pstmt_tDBOutput_2", pstmt_tDBOutput_2);

				/**
				 * [tDBOutput_2 begin ] stop
				 */

				/**
				 * [tDBInput_2 begin ] start
				 */

				ok_Hash.put("tDBInput_2", false);
				start_Hash.put("tDBInput_2", System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tDBInput_2");
				tStatCatcher_1Process(globalMap);

				talendStats_STATS.addMessage("begin", "tDBInput_2");
				talendStats_STATSProcess(globalMap);

				currentComponent = "tDBInput_2";

				int tos_count_tDBInput_2 = 0;

				org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_2 = org.talend.designer.components.util.mssql.MSSqlUtilFactory
						.getMSSqlGenerateTimestampUtil();

				java.util.List<String> talendToDBList_tDBInput_2 = new java.util.ArrayList();
				String[] talendToDBArray_tDBInput_2 = new String[] { "FLOAT",
						"NUMERIC", "NUMERIC IDENTITY", "DECIMAL",
						"DECIMAL IDENTITY", "REAL" };
				java.util.Collections.addAll(talendToDBList_tDBInput_2,
						talendToDBArray_tDBInput_2);
				int nb_line_tDBInput_2 = 0;
				java.sql.Connection conn_tDBInput_2 = null;
				conn_tDBInput_2 = (java.sql.Connection) globalMap
						.get("conn_tDBConnection_1");
				String dbschema_tDBInput_2 = (String) globalMap
						.get("dbschema_tDBConnection_1");

				java.sql.Statement stmt_tDBInput_2 = conn_tDBInput_2
						.createStatement();

				String dbquery_tDBInput_2 = "SELECT * FROM ExpOrderItem\nWHERE CreatedTime > '2017-06-30 23:59:59'";

				globalMap.put("tDBInput_2_QUERY", dbquery_tDBInput_2);
				java.sql.ResultSet rs_tDBInput_2 = null;

				try {
					rs_tDBInput_2 = stmt_tDBInput_2
							.executeQuery(dbquery_tDBInput_2);
					java.sql.ResultSetMetaData rsmd_tDBInput_2 = rs_tDBInput_2
							.getMetaData();
					int colQtyInRs_tDBInput_2 = rsmd_tDBInput_2
							.getColumnCount();

					String tmpContent_tDBInput_2 = null;

					while (rs_tDBInput_2.next()) {
						nb_line_tDBInput_2++;

						if (colQtyInRs_tDBInput_2 < 1) {
							row2.OrderItemId = 0;
						} else {

							if (rs_tDBInput_2.getObject(1) != null) {
								row2.OrderItemId = rs_tDBInput_2.getInt(1);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_2 < 2) {
							row2.Type = 0;
						} else {

							if (rs_tDBInput_2.getObject(2) != null) {
								row2.Type = rs_tDBInput_2.getShort(2);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_2 < 3) {
							row2.ItemType = 0;
						} else {

							if (rs_tDBInput_2.getObject(3) != null) {
								row2.ItemType = rs_tDBInput_2.getShort(3);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_2 < 4) {
							row2.Status = 0;
						} else {

							if (rs_tDBInput_2.getObject(4) != null) {
								row2.Status = rs_tDBInput_2.getShort(4);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_2 < 5) {
							row2.CopyrightStatus = 0;
						} else {

							if (rs_tDBInput_2.getObject(5) != null) {
								row2.CopyrightStatus = rs_tDBInput_2
										.getShort(5);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_2 < 6) {
							row2.CloseReason = 0;
						} else {

							if (rs_tDBInput_2.getObject(6) != null) {
								row2.CloseReason = rs_tDBInput_2.getShort(6);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_2 < 7) {
							row2.CreatedTime = null;
						} else {

							row2.CreatedTime = mssqlGTU_tDBInput_2.getDate(
									rsmd_tDBInput_2, rs_tDBInput_2, 7);

						}
						if (colQtyInRs_tDBInput_2 < 8) {
							row2.CreatedByEmail = null;
						} else {

							tmpContent_tDBInput_2 = rs_tDBInput_2.getString(8);
							if (tmpContent_tDBInput_2 != null) {
								if (talendToDBList_tDBInput_2
										.contains(rsmd_tDBInput_2
												.getColumnTypeName(8)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row2.CreatedByEmail = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_2);
								} else {
									row2.CreatedByEmail = tmpContent_tDBInput_2;
								}
							} else {
								row2.CreatedByEmail = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 9) {
							row2.CreatedByName = null;
						} else {

							tmpContent_tDBInput_2 = rs_tDBInput_2.getString(9);
							if (tmpContent_tDBInput_2 != null) {
								if (talendToDBList_tDBInput_2
										.contains(rsmd_tDBInput_2
												.getColumnTypeName(9)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row2.CreatedByName = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_2);
								} else {
									row2.CreatedByName = tmpContent_tDBInput_2;
								}
							} else {
								row2.CreatedByName = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 10) {
							row2.Usage = null;
						} else {

							tmpContent_tDBInput_2 = rs_tDBInput_2.getString(10);
							if (tmpContent_tDBInput_2 != null) {
								if (talendToDBList_tDBInput_2
										.contains(rsmd_tDBInput_2
												.getColumnTypeName(10)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row2.Usage = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_2);
								} else {
									row2.Usage = tmpContent_tDBInput_2;
								}
							} else {
								row2.Usage = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 11) {
							row2.UserEmail = null;
						} else {

							tmpContent_tDBInput_2 = rs_tDBInput_2.getString(11);
							if (tmpContent_tDBInput_2 != null) {
								if (talendToDBList_tDBInput_2
										.contains(rsmd_tDBInput_2
												.getColumnTypeName(11)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row2.UserEmail = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_2);
								} else {
									row2.UserEmail = tmpContent_tDBInput_2;
								}
							} else {
								row2.UserEmail = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 12) {
							row2.UserName = null;
						} else {

							tmpContent_tDBInput_2 = rs_tDBInput_2.getString(12);
							if (tmpContent_tDBInput_2 != null) {
								if (talendToDBList_tDBInput_2
										.contains(rsmd_tDBInput_2
												.getColumnTypeName(12)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row2.UserName = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_2);
								} else {
									row2.UserName = tmpContent_tDBInput_2;
								}
							} else {
								row2.UserName = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 13) {
							row2.PageCount = 0;
						} else {

							if (rs_tDBInput_2.getObject(13) != null) {
								row2.PageCount = rs_tDBInput_2.getShort(13);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_2 < 14) {
							row2.DeliveryUrgency = 0;
						} else {

							if (rs_tDBInput_2.getObject(14) != null) {
								row2.DeliveryUrgency = rs_tDBInput_2
										.getShort(14);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_2 < 15) {
							row2.NeededByDate = null;
						} else {

							row2.NeededByDate = mssqlGTU_tDBInput_2.getDate(
									rsmd_tDBInput_2, rs_tDBInput_2, 15);

						}
						if (colQtyInRs_tDBInput_2 < 16) {
							row2.PromisedDate = null;
						} else {

							row2.PromisedDate = mssqlGTU_tDBInput_2.getDate(
									rsmd_tDBInput_2, rs_tDBInput_2, 16);

						}
						if (colQtyInRs_tDBInput_2 < 17) {
							row2.FeeTransaction = null;
						} else {

							if (rs_tDBInput_2.getObject(17) != null) {
								row2.FeeTransaction = rs_tDBInput_2
										.getObject(17);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_2 < 18) {
							row2.FeeCR = null;
						} else {

							if (rs_tDBInput_2.getObject(18) != null) {
								row2.FeeCR = rs_tDBInput_2.getObject(18);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_2 < 19) {
							row2.FeeCRServices = null;
						} else {

							if (rs_tDBInput_2.getObject(19) != null) {
								row2.FeeCRServices = rs_tDBInput_2
										.getObject(19);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_2 < 20) {
							row2.FeeFF = null;
						} else {

							if (rs_tDBInput_2.getObject(20) != null) {
								row2.FeeFF = rs_tDBInput_2.getObject(20);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_2 < 21) {
							row2.FeeAdvRef = null;
						} else {

							if (rs_tDBInput_2.getObject(21) != null) {
								row2.FeeAdvRef = rs_tDBInput_2.getObject(21);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_2 < 22) {
							row2.FeeSH = null;
						} else {

							if (rs_tDBInput_2.getObject(22) != null) {
								row2.FeeSH = rs_tDBInput_2.getObject(22);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_2 < 23) {
							row2.FeeOther = null;
						} else {

							if (rs_tDBInput_2.getObject(23) != null) {
								row2.FeeOther = rs_tDBInput_2.getObject(23);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_2 < 24) {
							row2.FeeTax = null;
						} else {

							if (rs_tDBInput_2.getObject(24) != null) {
								row2.FeeTax = rs_tDBInput_2.getObject(24);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_2 < 25) {
							row2.FeeTotal = null;
						} else {

							if (rs_tDBInput_2.getObject(25) != null) {
								row2.FeeTotal = rs_tDBInput_2.getObject(25);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_2 < 26) {
							row2.Link = null;
						} else {

							tmpContent_tDBInput_2 = rs_tDBInput_2.getString(26);
							if (tmpContent_tDBInput_2 != null) {
								if (talendToDBList_tDBInput_2
										.contains(rsmd_tDBInput_2
												.getColumnTypeName(26)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row2.Link = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_2);
								} else {
									row2.Link = tmpContent_tDBInput_2;
								}
							} else {
								row2.Link = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 27) {
							row2.LinkExpiration = null;
						} else {

							row2.LinkExpiration = mssqlGTU_tDBInput_2.getDate(
									rsmd_tDBInput_2, rs_tDBInput_2, 27);

						}
						if (colQtyInRs_tDBInput_2 < 28) {
							row2.CostCenter = null;
						} else {

							tmpContent_tDBInput_2 = rs_tDBInput_2.getString(28);
							if (tmpContent_tDBInput_2 != null) {
								if (talendToDBList_tDBInput_2
										.contains(rsmd_tDBInput_2
												.getColumnTypeName(28)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row2.CostCenter = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_2);
								} else {
									row2.CostCenter = tmpContent_tDBInput_2;
								}
							} else {
								row2.CostCenter = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 29) {
							row2.BillRef = null;
						} else {

							tmpContent_tDBInput_2 = rs_tDBInput_2.getString(29);
							if (tmpContent_tDBInput_2 != null) {
								if (talendToDBList_tDBInput_2
										.contains(rsmd_tDBInput_2
												.getColumnTypeName(29)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row2.BillRef = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_2);
								} else {
									row2.BillRef = tmpContent_tDBInput_2;
								}
							} else {
								row2.BillRef = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 30) {
							row2.PubDescription = null;
						} else {

							tmpContent_tDBInput_2 = rs_tDBInput_2.getString(30);
							if (tmpContent_tDBInput_2 != null) {
								if (talendToDBList_tDBInput_2
										.contains(rsmd_tDBInput_2
												.getColumnTypeName(30)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row2.PubDescription = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_2);
								} else {
									row2.PubDescription = tmpContent_tDBInput_2;
								}
							} else {
								row2.PubDescription = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 31) {
							row2.UsageStatement = null;
						} else {

							tmpContent_tDBInput_2 = rs_tDBInput_2.getString(31);
							if (tmpContent_tDBInput_2 != null) {
								if (talendToDBList_tDBInput_2
										.contains(rsmd_tDBInput_2
												.getColumnTypeName(31)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row2.UsageStatement = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_2);
								} else {
									row2.UsageStatement = tmpContent_tDBInput_2;
								}
							} else {
								row2.UsageStatement = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 32) {
							row2.ClientId = 0;
						} else {

							if (rs_tDBInput_2.getObject(32) != null) {
								row2.ClientId = rs_tDBInput_2.getInt(32);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_2 < 33) {
							row2.ClientName = null;
						} else {

							tmpContent_tDBInput_2 = rs_tDBInput_2.getString(33);
							if (tmpContent_tDBInput_2 != null) {
								if (talendToDBList_tDBInput_2
										.contains(rsmd_tDBInput_2
												.getColumnTypeName(33)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row2.ClientName = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_2);
								} else {
									row2.ClientName = tmpContent_tDBInput_2;
								}
							} else {
								row2.ClientName = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 34) {
							row2.DeliveryMethod = 0;
						} else {

							if (rs_tDBInput_2.getObject(34) != null) {
								row2.DeliveryMethod = rs_tDBInput_2
										.getShort(34);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_2 < 35) {
							row2.SpecialInstruct = null;
						} else {

							tmpContent_tDBInput_2 = rs_tDBInput_2.getString(35);
							if (tmpContent_tDBInput_2 != null) {
								if (talendToDBList_tDBInput_2
										.contains(rsmd_tDBInput_2
												.getColumnTypeName(35)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row2.SpecialInstruct = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_2);
								} else {
									row2.SpecialInstruct = tmpContent_tDBInput_2;
								}
							} else {
								row2.SpecialInstruct = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 36) {
							row2.CustSpecialInstruct = null;
						} else {

							tmpContent_tDBInput_2 = rs_tDBInput_2.getString(36);
							if (tmpContent_tDBInput_2 != null) {
								if (talendToDBList_tDBInput_2
										.contains(rsmd_tDBInput_2
												.getColumnTypeName(36)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row2.CustSpecialInstruct = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_2);
								} else {
									row2.CustSpecialInstruct = tmpContent_tDBInput_2;
								}
							} else {
								row2.CustSpecialInstruct = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 37) {
							row2.FeeAlternate = null;
						} else {

							if (rs_tDBInput_2.getObject(37) != null) {
								row2.FeeAlternate = rs_tDBInput_2.getObject(37);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_2 < 38) {
							row2.DeliveryAddr = null;
						} else {

							tmpContent_tDBInput_2 = rs_tDBInput_2.getString(38);
							if (tmpContent_tDBInput_2 != null) {
								if (talendToDBList_tDBInput_2
										.contains(rsmd_tDBInput_2
												.getColumnTypeName(38)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row2.DeliveryAddr = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_2);
								} else {
									row2.DeliveryAddr = tmpContent_tDBInput_2;
								}
							} else {
								row2.DeliveryAddr = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 39) {
							row2.DeliveryCity = null;
						} else {

							tmpContent_tDBInput_2 = rs_tDBInput_2.getString(39);
							if (tmpContent_tDBInput_2 != null) {
								if (talendToDBList_tDBInput_2
										.contains(rsmd_tDBInput_2
												.getColumnTypeName(39)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row2.DeliveryCity = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_2);
								} else {
									row2.DeliveryCity = tmpContent_tDBInput_2;
								}
							} else {
								row2.DeliveryCity = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 40) {
							row2.DeliveryState = null;
						} else {

							tmpContent_tDBInput_2 = rs_tDBInput_2.getString(40);
							if (tmpContent_tDBInput_2 != null) {
								if (talendToDBList_tDBInput_2
										.contains(rsmd_tDBInput_2
												.getColumnTypeName(40)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row2.DeliveryState = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_2);
								} else {
									row2.DeliveryState = tmpContent_tDBInput_2;
								}
							} else {
								row2.DeliveryState = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 41) {
							row2.DeliveryCountry = null;
						} else {

							tmpContent_tDBInput_2 = rs_tDBInput_2.getString(41);
							if (tmpContent_tDBInput_2 != null) {
								if (talendToDBList_tDBInput_2
										.contains(rsmd_tDBInput_2
												.getColumnTypeName(41)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row2.DeliveryCountry = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_2);
								} else {
									row2.DeliveryCountry = tmpContent_tDBInput_2;
								}
							} else {
								row2.DeliveryCountry = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 42) {
							row2.DeliveryZip = null;
						} else {

							tmpContent_tDBInput_2 = rs_tDBInput_2.getString(42);
							if (tmpContent_tDBInput_2 != null) {
								if (talendToDBList_tDBInput_2
										.contains(rsmd_tDBInput_2
												.getColumnTypeName(42)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row2.DeliveryZip = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_2);
								} else {
									row2.DeliveryZip = tmpContent_tDBInput_2;
								}
							} else {
								row2.DeliveryZip = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 43) {
							row2.DeliveryTracking = null;
						} else {

							tmpContent_tDBInput_2 = rs_tDBInput_2.getString(43);
							if (tmpContent_tDBInput_2 != null) {
								if (talendToDBList_tDBInput_2
										.contains(rsmd_tDBInput_2
												.getColumnTypeName(43)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row2.DeliveryTracking = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_2);
								} else {
									row2.DeliveryTracking = tmpContent_tDBInput_2;
								}
							} else {
								row2.DeliveryTracking = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 44) {
							row2.DeliveryTime = null;
						} else {

							row2.DeliveryTime = mssqlGTU_tDBInput_2.getDate(
									rsmd_tDBInput_2, rs_tDBInput_2, 44);

						}
						if (colQtyInRs_tDBInput_2 < 45) {
							row2.RightsGranted = null;
						} else {

							tmpContent_tDBInput_2 = rs_tDBInput_2.getString(45);
							if (tmpContent_tDBInput_2 != null) {
								if (talendToDBList_tDBInput_2
										.contains(rsmd_tDBInput_2
												.getColumnTypeName(45)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row2.RightsGranted = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_2);
								} else {
									row2.RightsGranted = tmpContent_tDBInput_2;
								}
							} else {
								row2.RightsGranted = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 46) {
							row2.AllowedViewsOrig = 0;
						} else {

							if (rs_tDBInput_2.getObject(46) != null) {
								row2.AllowedViewsOrig = rs_tDBInput_2
										.getShort(46);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_2 < 47) {
							row2.AllowedViewsLeft = 0;
						} else {

							if (rs_tDBInput_2.getObject(47) != null) {
								row2.AllowedViewsLeft = rs_tDBInput_2
										.getShort(47);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_2 < 48) {
							row2.AllowedPrintsOrig = 0;
						} else {

							if (rs_tDBInput_2.getObject(48) != null) {
								row2.AllowedPrintsOrig = rs_tDBInput_2
										.getShort(48);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_2 < 49) {
							row2.AllowedPrintsLeft = 0;
						} else {

							if (rs_tDBInput_2.getObject(49) != null) {
								row2.AllowedPrintsLeft = rs_tDBInput_2
										.getShort(49);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_2 < 50) {
							row2.CRTerms = null;
						} else {

							tmpContent_tDBInput_2 = rs_tDBInput_2.getString(50);
							if (tmpContent_tDBInput_2 != null) {
								if (talendToDBList_tDBInput_2
										.contains(rsmd_tDBInput_2
												.getColumnTypeName(50)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row2.CRTerms = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_2);
								} else {
									row2.CRTerms = tmpContent_tDBInput_2;
								}
							} else {
								row2.CRTerms = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 51) {
							row2.PO = null;
						} else {

							tmpContent_tDBInput_2 = rs_tDBInput_2.getString(51);
							if (tmpContent_tDBInput_2 != null) {
								if (talendToDBList_tDBInput_2
										.contains(rsmd_tDBInput_2
												.getColumnTypeName(51)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row2.PO = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_2);
								} else {
									row2.PO = tmpContent_tDBInput_2;
								}
							} else {
								row2.PO = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 52) {
							row2.CustOrderNum = null;
						} else {

							tmpContent_tDBInput_2 = rs_tDBInput_2.getString(52);
							if (tmpContent_tDBInput_2 != null) {
								if (talendToDBList_tDBInput_2
										.contains(rsmd_tDBInput_2
												.getColumnTypeName(52)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row2.CustOrderNum = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_2);
								} else {
									row2.CustOrderNum = tmpContent_tDBInput_2;
								}
							} else {
								row2.CustOrderNum = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 53) {
							row2.PriceLimit = null;
						} else {

							if (rs_tDBInput_2.getObject(53) != null) {
								row2.PriceLimit = rs_tDBInput_2.getObject(53);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_2 < 54) {
							row2.Title = null;
						} else {

							tmpContent_tDBInput_2 = rs_tDBInput_2.getString(54);
							if (tmpContent_tDBInput_2 != null) {
								if (talendToDBList_tDBInput_2
										.contains(rsmd_tDBInput_2
												.getColumnTypeName(54)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row2.Title = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_2);
								} else {
									row2.Title = tmpContent_tDBInput_2;
								}
							} else {
								row2.Title = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 55) {
							row2.Authors = null;
						} else {

							tmpContent_tDBInput_2 = rs_tDBInput_2.getString(55);
							if (tmpContent_tDBInput_2 != null) {
								if (talendToDBList_tDBInput_2
										.contains(rsmd_tDBInput_2
												.getColumnTypeName(55)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row2.Authors = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_2);
								} else {
									row2.Authors = tmpContent_tDBInput_2;
								}
							} else {
								row2.Authors = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 56) {
							row2.Issue = null;
						} else {

							tmpContent_tDBInput_2 = rs_tDBInput_2.getString(56);
							if (tmpContent_tDBInput_2 != null) {
								if (talendToDBList_tDBInput_2
										.contains(rsmd_tDBInput_2
												.getColumnTypeName(56)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row2.Issue = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_2);
								} else {
									row2.Issue = tmpContent_tDBInput_2;
								}
							} else {
								row2.Issue = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 57) {
							row2.Volume = null;
						} else {

							tmpContent_tDBInput_2 = rs_tDBInput_2.getString(57);
							if (tmpContent_tDBInput_2 != null) {
								if (talendToDBList_tDBInput_2
										.contains(rsmd_tDBInput_2
												.getColumnTypeName(57)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row2.Volume = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_2);
								} else {
									row2.Volume = tmpContent_tDBInput_2;
								}
							} else {
								row2.Volume = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 58) {
							row2.Pages = null;
						} else {

							tmpContent_tDBInput_2 = rs_tDBInput_2.getString(58);
							if (tmpContent_tDBInput_2 != null) {
								if (talendToDBList_tDBInput_2
										.contains(rsmd_tDBInput_2
												.getColumnTypeName(58)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row2.Pages = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_2);
								} else {
									row2.Pages = tmpContent_tDBInput_2;
								}
							} else {
								row2.Pages = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 59) {
							row2.Publication = null;
						} else {

							tmpContent_tDBInput_2 = rs_tDBInput_2.getString(59);
							if (tmpContent_tDBInput_2 != null) {
								if (talendToDBList_tDBInput_2
										.contains(rsmd_tDBInput_2
												.getColumnTypeName(59)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row2.Publication = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_2);
								} else {
									row2.Publication = tmpContent_tDBInput_2;
								}
							} else {
								row2.Publication = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 60) {
							row2.PubDate = null;
						} else {

							tmpContent_tDBInput_2 = rs_tDBInput_2.getString(60);
							if (tmpContent_tDBInput_2 != null) {
								if (talendToDBList_tDBInput_2
										.contains(rsmd_tDBInput_2
												.getColumnTypeName(60)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row2.PubDate = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_2);
								} else {
									row2.PubDate = tmpContent_tDBInput_2;
								}
							} else {
								row2.PubDate = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 61) {
							row2.StdNum = null;
						} else {

							tmpContent_tDBInput_2 = rs_tDBInput_2.getString(61);
							if (tmpContent_tDBInput_2 != null) {
								if (talendToDBList_tDBInput_2
										.contains(rsmd_tDBInput_2
												.getColumnTypeName(61)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row2.StdNum = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_2);
								} else {
									row2.StdNum = tmpContent_tDBInput_2;
								}
							} else {
								row2.StdNum = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 62) {
							row2.FormattedStdNum = null;
						} else {

							tmpContent_tDBInput_2 = rs_tDBInput_2.getString(62);
							if (tmpContent_tDBInput_2 != null) {
								if (talendToDBList_tDBInput_2
										.contains(rsmd_tDBInput_2
												.getColumnTypeName(62)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row2.FormattedStdNum = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_2);
								} else {
									row2.FormattedStdNum = tmpContent_tDBInput_2;
								}
							} else {
								row2.FormattedStdNum = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 63) {
							row2.Publisher = null;
						} else {

							tmpContent_tDBInput_2 = rs_tDBInput_2.getString(63);
							if (tmpContent_tDBInput_2 != null) {
								if (talendToDBList_tDBInput_2
										.contains(rsmd_tDBInput_2
												.getColumnTypeName(63)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row2.Publisher = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_2);
								} else {
									row2.Publisher = tmpContent_tDBInput_2;
								}
							} else {
								row2.Publisher = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 64) {
							row2.DOI = null;
						} else {

							tmpContent_tDBInput_2 = rs_tDBInput_2.getString(64);
							if (tmpContent_tDBInput_2 != null) {
								if (talendToDBList_tDBInput_2
										.contains(rsmd_tDBInput_2
												.getColumnTypeName(64)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row2.DOI = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_2);
								} else {
									row2.DOI = tmpContent_tDBInput_2;
								}
							} else {
								row2.DOI = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 65) {
							row2.UCustomId = null;
						} else {

							tmpContent_tDBInput_2 = rs_tDBInput_2.getString(65);
							if (tmpContent_tDBInput_2 != null) {
								if (talendToDBList_tDBInput_2
										.contains(rsmd_tDBInput_2
												.getColumnTypeName(65)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row2.UCustomId = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_2);
								} else {
									row2.UCustomId = tmpContent_tDBInput_2;
								}
							} else {
								row2.UCustomId = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 66) {
							row2.CCustomId = null;
						} else {

							tmpContent_tDBInput_2 = rs_tDBInput_2.getString(66);
							if (tmpContent_tDBInput_2 != null) {
								if (talendToDBList_tDBInput_2
										.contains(rsmd_tDBInput_2
												.getColumnTypeName(66)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row2.CCustomId = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_2);
								} else {
									row2.CCustomId = tmpContent_tDBInput_2;
								}
							} else {
								row2.CCustomId = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 67) {
							row2.ucLastName = null;
						} else {

							tmpContent_tDBInput_2 = rs_tDBInput_2.getString(67);
							if (tmpContent_tDBInput_2 != null) {
								if (talendToDBList_tDBInput_2
										.contains(rsmd_tDBInput_2
												.getColumnTypeName(67)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row2.ucLastName = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_2);
								} else {
									row2.ucLastName = tmpContent_tDBInput_2;
								}
							} else {
								row2.ucLastName = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 68) {
							row2.ucFirstName = null;
						} else {

							tmpContent_tDBInput_2 = rs_tDBInput_2.getString(68);
							if (tmpContent_tDBInput_2 != null) {
								if (talendToDBList_tDBInput_2
										.contains(rsmd_tDBInput_2
												.getColumnTypeName(68)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row2.ucFirstName = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_2);
								} else {
									row2.ucFirstName = tmpContent_tDBInput_2;
								}
							} else {
								row2.ucFirstName = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 69) {
							row2.ccLastName = null;
						} else {

							tmpContent_tDBInput_2 = rs_tDBInput_2.getString(69);
							if (tmpContent_tDBInput_2 != null) {
								if (talendToDBList_tDBInput_2
										.contains(rsmd_tDBInput_2
												.getColumnTypeName(69)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row2.ccLastName = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_2);
								} else {
									row2.ccLastName = tmpContent_tDBInput_2;
								}
							} else {
								row2.ccLastName = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 70) {
							row2.ccFirstName = null;
						} else {

							tmpContent_tDBInput_2 = rs_tDBInput_2.getString(70);
							if (tmpContent_tDBInput_2 != null) {
								if (talendToDBList_tDBInput_2
										.contains(rsmd_tDBInput_2
												.getColumnTypeName(70)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row2.ccFirstName = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_2);
								} else {
									row2.ccFirstName = tmpContent_tDBInput_2;
								}
							} else {
								row2.ccFirstName = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 71) {
							row2.FFCollectionId = 0;
						} else {

							if (rs_tDBInput_2.getObject(71) != null) {
								row2.FFCollectionId = rs_tDBInput_2.getInt(71);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_2 < 72) {
							row2.CRCollectionId = 0;
						} else {

							if (rs_tDBInput_2.getObject(72) != null) {
								row2.CRCollectionId = rs_tDBInput_2.getInt(72);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_2 < 73) {
							row2.CRAltProvId = 0;
						} else {

							if (rs_tDBInput_2.getObject(73) != null) {
								row2.CRAltProvId = rs_tDBInput_2.getInt(73);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_2 < 74) {
							row2.FFCollectionName = null;
						} else {

							tmpContent_tDBInput_2 = rs_tDBInput_2.getString(74);
							if (tmpContent_tDBInput_2 != null) {
								if (talendToDBList_tDBInput_2
										.contains(rsmd_tDBInput_2
												.getColumnTypeName(74)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row2.FFCollectionName = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_2);
								} else {
									row2.FFCollectionName = tmpContent_tDBInput_2;
								}
							} else {
								row2.FFCollectionName = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 75) {
							row2.ClientFFCollectionName = null;
						} else {

							tmpContent_tDBInput_2 = rs_tDBInput_2.getString(75);
							if (tmpContent_tDBInput_2 != null) {
								if (talendToDBList_tDBInput_2
										.contains(rsmd_tDBInput_2
												.getColumnTypeName(75)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row2.ClientFFCollectionName = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_2);
								} else {
									row2.ClientFFCollectionName = tmpContent_tDBInput_2;
								}
							} else {
								row2.ClientFFCollectionName = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 76) {
							row2.CRCollectionName = null;
						} else {

							tmpContent_tDBInput_2 = rs_tDBInput_2.getString(76);
							if (tmpContent_tDBInput_2 != null) {
								if (talendToDBList_tDBInput_2
										.contains(rsmd_tDBInput_2
												.getColumnTypeName(76)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row2.CRCollectionName = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_2);
								} else {
									row2.CRCollectionName = tmpContent_tDBInput_2;
								}
							} else {
								row2.CRCollectionName = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 77) {
							row2.InternalFill = null;
						} else {

							if (rs_tDBInput_2.getObject(77) != null) {
								row2.InternalFill = rs_tDBInput_2
										.getBoolean(77);
							} else {
								row2.InternalFill = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 78) {
							row2.DivisionName = null;
						} else {

							tmpContent_tDBInput_2 = rs_tDBInput_2.getString(78);
							if (tmpContent_tDBInput_2 != null) {
								if (talendToDBList_tDBInput_2
										.contains(rsmd_tDBInput_2
												.getColumnTypeName(78)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row2.DivisionName = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_2);
								} else {
									row2.DivisionName = tmpContent_tDBInput_2;
								}
							} else {
								row2.DivisionName = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 79) {
							row2.DepartmentName = null;
						} else {

							tmpContent_tDBInput_2 = rs_tDBInput_2.getString(79);
							if (tmpContent_tDBInput_2 != null) {
								if (talendToDBList_tDBInput_2
										.contains(rsmd_tDBInput_2
												.getColumnTypeName(79)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row2.DepartmentName = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_2);
								} else {
									row2.DepartmentName = tmpContent_tDBInput_2;
								}
							} else {
								row2.DepartmentName = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 80) {
							row2.LocationName = null;
						} else {

							tmpContent_tDBInput_2 = rs_tDBInput_2.getString(80);
							if (tmpContent_tDBInput_2 != null) {
								if (talendToDBList_tDBInput_2
										.contains(rsmd_tDBInput_2
												.getColumnTypeName(80)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row2.LocationName = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_2);
								} else {
									row2.LocationName = tmpContent_tDBInput_2;
								}
							} else {
								row2.LocationName = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 81) {
							row2.OrigCitText = null;
						} else {

							tmpContent_tDBInput_2 = rs_tDBInput_2.getString(81);
							if (tmpContent_tDBInput_2 != null) {
								if (talendToDBList_tDBInput_2
										.contains(rsmd_tDBInput_2
												.getColumnTypeName(81)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row2.OrigCitText = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_2);
								} else {
									row2.OrigCitText = tmpContent_tDBInput_2;
								}
							} else {
								row2.OrigCitText = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 82) {
							row2.TurnaroundMinutes = 0;
						} else {

							if (rs_tDBInput_2.getObject(82) != null) {
								row2.TurnaroundMinutes = rs_tDBInput_2
										.getShort(82);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_2 < 83) {
							row2.WorkMinutes = 0;
						} else {

							if (rs_tDBInput_2.getObject(83) != null) {
								row2.WorkMinutes = rs_tDBInput_2.getShort(83);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_2 < 84) {
							row2.ReferenceTime = null;
						} else {

							row2.ReferenceTime = mssqlGTU_tDBInput_2.getDate(
									rsmd_tDBInput_2, rs_tDBInput_2, 84);

						}
						if (colQtyInRs_tDBInput_2 < 85) {
							row2.UseCopies = 0;
						} else {

							if (rs_tDBInput_2.getObject(85) != null) {
								row2.UseCopies = rs_tDBInput_2.getShort(85);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_2 < 86) {
							row2.Source = null;
						} else {

							tmpContent_tDBInput_2 = rs_tDBInput_2.getString(86);
							if (tmpContent_tDBInput_2 != null) {
								if (talendToDBList_tDBInput_2
										.contains(rsmd_tDBInput_2
												.getColumnTypeName(86)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row2.Source = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_2);
								} else {
									row2.Source = tmpContent_tDBInput_2;
								}
							} else {
								row2.Source = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 87) {
							row2.PMID = null;
						} else {

							tmpContent_tDBInput_2 = rs_tDBInput_2.getString(87);
							if (tmpContent_tDBInput_2 != null) {
								if (talendToDBList_tDBInput_2
										.contains(rsmd_tDBInput_2
												.getColumnTypeName(87)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row2.PMID = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_2);
								} else {
									row2.PMID = tmpContent_tDBInput_2;
								}
							} else {
								row2.PMID = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 88) {
							row2.PayCR = null;
						} else {

							if (rs_tDBInput_2.getObject(88) != null) {
								row2.PayCR = rs_tDBInput_2.getObject(88);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_2 < 89) {
							row2.ClientGroupId = 0;
						} else {

							if (rs_tDBInput_2.getObject(89) != null) {
								row2.ClientGroupId = rs_tDBInput_2.getInt(89);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_2 < 90) {
							row2.DRMApplied = null;
						} else {

							if (rs_tDBInput_2.getObject(90) != null) {
								row2.DRMApplied = rs_tDBInput_2.getBoolean(90);
							} else {
								row2.DRMApplied = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 91) {
							row2.InvoiceId = 0;
						} else {

							if (rs_tDBInput_2.getObject(91) != null) {
								row2.InvoiceId = rs_tDBInput_2.getInt(91);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_2 < 92) {
							row2.GST_HST = null;
						} else {

							if (rs_tDBInput_2.getObject(92) != null) {
								row2.GST_HST = rs_tDBInput_2.getObject(92);
							} else {
								row2.GST_HST = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 93) {
							row2.PST = null;
						} else {

							if (rs_tDBInput_2.getObject(93) != null) {
								row2.PST = rs_tDBInput_2.getObject(93);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_2 < 94) {
							row2.PartnerId = 0;
						} else {

							if (rs_tDBInput_2.getObject(94) != null) {
								row2.PartnerId = rs_tDBInput_2.getShort(94);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_2 < 95) {
							row2.PartnerClientId = null;
						} else {

							tmpContent_tDBInput_2 = rs_tDBInput_2.getString(95);
							if (tmpContent_tDBInput_2 != null) {
								if (talendToDBList_tDBInput_2
										.contains(rsmd_tDBInput_2
												.getColumnTypeName(95)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row2.PartnerClientId = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_2);
								} else {
									row2.PartnerClientId = tmpContent_tDBInput_2;
								}
							} else {
								row2.PartnerClientId = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 96) {
							row2.AssignedToId = 0;
						} else {

							if (rs_tDBInput_2.getObject(96) != null) {
								row2.AssignedToId = rs_tDBInput_2.getInt(96);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_2 < 97) {
							row2.AssignedToEmail = null;
						} else {

							tmpContent_tDBInput_2 = rs_tDBInput_2.getString(97);
							if (tmpContent_tDBInput_2 != null) {
								if (talendToDBList_tDBInput_2
										.contains(rsmd_tDBInput_2
												.getColumnTypeName(97)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row2.AssignedToEmail = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_2);
								} else {
									row2.AssignedToEmail = tmpContent_tDBInput_2;
								}
							} else {
								row2.AssignedToEmail = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 98) {
							row2.IsTestOrder = null;
						} else {

							if (rs_tDBInput_2.getObject(98) != null) {
								row2.IsTestOrder = rs_tDBInput_2.getBoolean(98);
							} else {
								row2.IsTestOrder = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 99) {
							row2.WorkStatus = null;
						} else {

							if (rs_tDBInput_2.getObject(99) != null) {
								row2.WorkStatus = rs_tDBInput_2.getInt(99);
							} else {
								row2.WorkStatus = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 100) {
							row2.SuspendedReason = null;
						} else {

							if (rs_tDBInput_2.getObject(100) != null) {
								row2.SuspendedReason = rs_tDBInput_2
										.getInt(100);
							} else {
								row2.SuspendedReason = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 101) {
							row2.WorkAssignedTime = null;
						} else {

							row2.WorkAssignedTime = mssqlGTU_tDBInput_2
									.getDate(rsmd_tDBInput_2, rs_tDBInput_2,
											101);

						}
						if (colQtyInRs_tDBInput_2 < 102) {
							row2.WorkCreatedTime = null;
						} else {

							row2.WorkCreatedTime = mssqlGTU_tDBInput_2.getDate(
									rsmd_tDBInput_2, rs_tDBInput_2, 102);

						}
						if (colQtyInRs_tDBInput_2 < 103) {
							row2.CRVerificationRequired = null;
						} else {

							if (rs_tDBInput_2.getObject(103) != null) {
								row2.CRVerificationRequired = rs_tDBInput_2
										.getBoolean(103);
							} else {
								row2.CRVerificationRequired = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 104) {
							row2.CRVerificationVerified = null;
						} else {

							if (rs_tDBInput_2.getObject(104) != null) {
								row2.CRVerificationVerified = rs_tDBInput_2
										.getBoolean(104);
							} else {
								row2.CRVerificationVerified = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 105) {
							row2.CRVerificationNotFound = null;
						} else {

							if (rs_tDBInput_2.getObject(105) != null) {
								row2.CRVerificationNotFound = rs_tDBInput_2
										.getBoolean(105);
							} else {
								row2.CRVerificationNotFound = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 106) {
							row2.CRVerificationDenied = null;
						} else {

							if (rs_tDBInput_2.getObject(106) != null) {
								row2.CRVerificationDenied = rs_tDBInput_2
										.getBoolean(106);
							} else {
								row2.CRVerificationDenied = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 107) {
							row2.ContentId = 0;
						} else {

							if (rs_tDBInput_2.getObject(107) != null) {
								row2.ContentId = rs_tDBInput_2.getInt(107);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_2 < 108) {
							row2.PartOfContentId = 0;
						} else {

							if (rs_tDBInput_2.getObject(108) != null) {
								row2.PartOfContentId = rs_tDBInput_2
										.getInt(108);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_2 < 109) {
							row2.PartOfTitle = null;
						} else {

							tmpContent_tDBInput_2 = rs_tDBInput_2
									.getString(109);
							if (tmpContent_tDBInput_2 != null) {
								if (talendToDBList_tDBInput_2
										.contains(rsmd_tDBInput_2
												.getColumnTypeName(109)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row2.PartOfTitle = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_2);
								} else {
									row2.PartOfTitle = tmpContent_tDBInput_2;
								}
							} else {
								row2.PartOfTitle = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 110) {
							row2.PublicationId = null;
						} else {

							if (rs_tDBInput_2.getObject(110) != null) {
								row2.PublicationId = rs_tDBInput_2.getInt(110);
							} else {
								row2.PublicationId = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 111) {
							row2.ArticleId = null;
						} else {

							if (rs_tDBInput_2.getObject(111) != null) {
								row2.ArticleId = rs_tDBInput_2.getInt(111);
							} else {
								row2.ArticleId = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 112) {
							row2.FFMethod = 0;
						} else {

							if (rs_tDBInput_2.getObject(112) != null) {
								row2.FFMethod = rs_tDBInput_2.getShort(112);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_2 < 113) {
							row2.LastNotify = null;
						} else {

							row2.LastNotify = mssqlGTU_tDBInput_2.getDate(
									rsmd_tDBInput_2, rs_tDBInput_2, 113);

						}
						if (colQtyInRs_tDBInput_2 < 114) {
							row2.ReferencingRequired = null;
						} else {

							if (rs_tDBInput_2.getObject(114) != null) {
								row2.ReferencingRequired = rs_tDBInput_2
										.getBoolean(114);
							} else {
								row2.ReferencingRequired = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 115) {
							row2.RightsRequired = null;
						} else {

							tmpContent_tDBInput_2 = rs_tDBInput_2
									.getString(115);
							if (tmpContent_tDBInput_2 != null) {
								if (talendToDBList_tDBInput_2
										.contains(rsmd_tDBInput_2
												.getColumnTypeName(115)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row2.RightsRequired = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_2);
								} else {
									row2.RightsRequired = tmpContent_tDBInput_2;
								}
							} else {
								row2.RightsRequired = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 116) {
							row2.FFSourceType = 0;
						} else {

							if (rs_tDBInput_2.getObject(116) != null) {
								row2.FFSourceType = rs_tDBInput_2.getShort(116);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_2 < 117) {
							row2.ClientCosts = null;
						} else {

							if (rs_tDBInput_2.getObject(117) != null) {
								row2.ClientCosts = rs_tDBInput_2.getObject(117);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_2 < 118) {
							row2.FFHoldingId = 0;
						} else {

							if (rs_tDBInput_2.getObject(118) != null) {
								row2.FFHoldingId = rs_tDBInput_2.getInt(118);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_2 < 119) {
							row2.CRHoldingId = 0;
						} else {

							if (rs_tDBInput_2.getObject(119) != null) {
								row2.CRHoldingId = rs_tDBInput_2.getInt(119);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_2 < 120) {
							row2.TotalPublisherVendorFee = null;
						} else {

							if (rs_tDBInput_2.getObject(120) != null) {
								row2.TotalPublisherVendorFee = rs_tDBInput_2
										.getObject(120);
							} else {
								row2.TotalPublisherVendorFee = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 121) {
							row2.WireTransferFee = null;
						} else {

							if (rs_tDBInput_2.getObject(121) != null) {
								row2.WireTransferFee = rs_tDBInput_2
										.getObject(121);
							} else {
								row2.WireTransferFee = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 122) {
							row2.CreditCardCharge = null;
						} else {

							if (rs_tDBInput_2.getObject(122) != null) {
								row2.CreditCardCharge = rs_tDBInput_2
										.getObject(122);
							} else {
								row2.CreditCardCharge = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 123) {
							row2.ResellerFeeTransaction = null;
						} else {

							if (rs_tDBInput_2.getObject(123) != null) {
								row2.ResellerFeeTransaction = rs_tDBInput_2
										.getObject(123);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_2 < 124) {
							row2.ResellerFeeCR = null;
						} else {

							if (rs_tDBInput_2.getObject(124) != null) {
								row2.ResellerFeeCR = rs_tDBInput_2
										.getObject(124);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_2 < 125) {
							row2.ResellerFeeCRSErvices = null;
						} else {

							if (rs_tDBInput_2.getObject(125) != null) {
								row2.ResellerFeeCRSErvices = rs_tDBInput_2
										.getObject(125);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_2 < 126) {
							row2.ResellerFeeFF = null;
						} else {

							if (rs_tDBInput_2.getObject(126) != null) {
								row2.ResellerFeeFF = rs_tDBInput_2
										.getObject(126);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_2 < 127) {
							row2.ResellerFeeAdvRef = null;
						} else {

							if (rs_tDBInput_2.getObject(127) != null) {
								row2.ResellerFeeAdvRef = rs_tDBInput_2
										.getObject(127);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_2 < 128) {
							row2.ResellerFeeSH = null;
						} else {

							if (rs_tDBInput_2.getObject(128) != null) {
								row2.ResellerFeeSH = rs_tDBInput_2
										.getObject(128);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_2 < 129) {
							row2.ResellerFeeOther = null;
						} else {

							if (rs_tDBInput_2.getObject(129) != null) {
								row2.ResellerFeeOther = rs_tDBInput_2
										.getObject(129);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_2 < 130) {
							row2.ResellerFeeTax = null;
						} else {

							if (rs_tDBInput_2.getObject(130) != null) {
								row2.ResellerFeeTax = rs_tDBInput_2
										.getObject(130);
							} else {
								row2.ResellerFeeTax = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 131) {
							row2.ResellerFeeTotal = null;
						} else {

							if (rs_tDBInput_2.getObject(131) != null) {
								row2.ResellerFeeTotal = rs_tDBInput_2
										.getObject(131);
							} else {
								row2.ResellerFeeTotal = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 132) {
							row2.InDigitalLibrary = null;
						} else {

							if (rs_tDBInput_2.getObject(132) != null) {
								row2.InDigitalLibrary = rs_tDBInput_2
										.getBoolean(132);
							} else {
								row2.InDigitalLibrary = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 133) {
							row2.LinkWithHeader = null;
						} else {

							tmpContent_tDBInput_2 = rs_tDBInput_2
									.getString(133);
							if (tmpContent_tDBInput_2 != null) {
								if (talendToDBList_tDBInput_2
										.contains(rsmd_tDBInput_2
												.getColumnTypeName(133)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row2.LinkWithHeader = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_2);
								} else {
									row2.LinkWithHeader = tmpContent_tDBInput_2;
								}
							} else {
								row2.LinkWithHeader = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 134) {
							row2.BritishLibraryId = null;
						} else {

							tmpContent_tDBInput_2 = rs_tDBInput_2
									.getString(134);
							if (tmpContent_tDBInput_2 != null) {
								if (talendToDBList_tDBInput_2
										.contains(rsmd_tDBInput_2
												.getColumnTypeName(134)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row2.BritishLibraryId = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_2);
								} else {
									row2.BritishLibraryId = tmpContent_tDBInput_2;
								}
							} else {
								row2.BritishLibraryId = null;
							}
						}

						/**
						 * [tDBInput_2 begin ] stop
						 */

						/**
						 * [tDBInput_2 main ] start
						 */

						currentComponent = "tDBInput_2";

						tos_count_tDBInput_2++;

						/**
						 * [tDBInput_2 main ] stop
						 */

						/**
						 * [tDBInput_2 process_data_begin ] start
						 */

						currentComponent = "tDBInput_2";

						/**
						 * [tDBInput_2 process_data_begin ] stop
						 */

						/**
						 * [tDBOutput_2 main ] start
						 */

						currentComponent = "tDBOutput_2";

						// row2
						// row2

						if (execStat) {
							runStat.updateStatOnConnection("row2" + iterateId,
									1, 1);
						}

						whetherReject_tDBOutput_2 = false;
						pstmt_tDBOutput_2.setInt(1, row2.OrderItemId);

						pstmt_tDBOutput_2.setShort(2, row2.Type);

						pstmt_tDBOutput_2.setShort(3, row2.ItemType);

						pstmt_tDBOutput_2.setShort(4, row2.Status);

						pstmt_tDBOutput_2.setShort(5, row2.CopyrightStatus);

						pstmt_tDBOutput_2.setShort(6, row2.CloseReason);

						if (row2.CreatedTime != null) {
							pstmt_tDBOutput_2.setTimestamp(
									7,
									new java.sql.Timestamp(row2.CreatedTime
											.getTime()));
						} else {
							pstmt_tDBOutput_2.setNull(7,
									java.sql.Types.TIMESTAMP);
						}

						if (row2.CreatedByEmail == null) {
							pstmt_tDBOutput_2
									.setNull(8, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(8, row2.CreatedByEmail);
						}

						if (row2.CreatedByName == null) {
							pstmt_tDBOutput_2
									.setNull(9, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(9, row2.CreatedByName);
						}

						if (row2.Usage == null) {
							pstmt_tDBOutput_2.setNull(10,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(10, row2.Usage);
						}

						if (row2.UserEmail == null) {
							pstmt_tDBOutput_2.setNull(11,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(11, row2.UserEmail);
						}

						if (row2.UserName == null) {
							pstmt_tDBOutput_2.setNull(12,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(12, row2.UserName);
						}

						pstmt_tDBOutput_2.setShort(13, row2.PageCount);

						pstmt_tDBOutput_2.setShort(14, row2.DeliveryUrgency);

						if (row2.NeededByDate != null) {
							pstmt_tDBOutput_2.setTimestamp(
									15,
									new java.sql.Timestamp(row2.NeededByDate
											.getTime()));
						} else {
							pstmt_tDBOutput_2.setNull(15,
									java.sql.Types.TIMESTAMP);
						}

						if (row2.PromisedDate != null) {
							pstmt_tDBOutput_2.setTimestamp(
									16,
									new java.sql.Timestamp(row2.PromisedDate
											.getTime()));
						} else {
							pstmt_tDBOutput_2.setNull(16,
									java.sql.Types.TIMESTAMP);
						}

						if (row2.FeeTransaction == null) {
							pstmt_tDBOutput_2.setNull(17, java.sql.Types.OTHER);
						} else {
							pstmt_tDBOutput_2
									.setObject(17, row2.FeeTransaction);
						}

						if (row2.FeeCR == null) {
							pstmt_tDBOutput_2.setNull(18, java.sql.Types.OTHER);
						} else {
							pstmt_tDBOutput_2.setObject(18, row2.FeeCR);
						}

						if (row2.FeeCRServices == null) {
							pstmt_tDBOutput_2.setNull(19, java.sql.Types.OTHER);
						} else {
							pstmt_tDBOutput_2.setObject(19, row2.FeeCRServices);
						}

						if (row2.FeeFF == null) {
							pstmt_tDBOutput_2.setNull(20, java.sql.Types.OTHER);
						} else {
							pstmt_tDBOutput_2.setObject(20, row2.FeeFF);
						}

						if (row2.FeeAdvRef == null) {
							pstmt_tDBOutput_2.setNull(21, java.sql.Types.OTHER);
						} else {
							pstmt_tDBOutput_2.setObject(21, row2.FeeAdvRef);
						}

						if (row2.FeeSH == null) {
							pstmt_tDBOutput_2.setNull(22, java.sql.Types.OTHER);
						} else {
							pstmt_tDBOutput_2.setObject(22, row2.FeeSH);
						}

						if (row2.FeeOther == null) {
							pstmt_tDBOutput_2.setNull(23, java.sql.Types.OTHER);
						} else {
							pstmt_tDBOutput_2.setObject(23, row2.FeeOther);
						}

						if (row2.FeeTax == null) {
							pstmt_tDBOutput_2.setNull(24, java.sql.Types.OTHER);
						} else {
							pstmt_tDBOutput_2.setObject(24, row2.FeeTax);
						}

						if (row2.FeeTotal == null) {
							pstmt_tDBOutput_2.setNull(25, java.sql.Types.OTHER);
						} else {
							pstmt_tDBOutput_2.setObject(25, row2.FeeTotal);
						}

						if (row2.Link == null) {
							pstmt_tDBOutput_2.setNull(26,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(26, row2.Link);
						}

						if (row2.LinkExpiration != null) {
							pstmt_tDBOutput_2.setTimestamp(
									27,
									new java.sql.Timestamp(row2.LinkExpiration
											.getTime()));
						} else {
							pstmt_tDBOutput_2.setNull(27,
									java.sql.Types.TIMESTAMP);
						}

						if (row2.CostCenter == null) {
							pstmt_tDBOutput_2.setNull(28,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(28, row2.CostCenter);
						}

						if (row2.BillRef == null) {
							pstmt_tDBOutput_2.setNull(29,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(29, row2.BillRef);
						}

						if (row2.PubDescription == null) {
							pstmt_tDBOutput_2.setNull(30,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2
									.setString(30, row2.PubDescription);
						}

						if (row2.UsageStatement == null) {
							pstmt_tDBOutput_2.setNull(31,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2
									.setString(31, row2.UsageStatement);
						}

						pstmt_tDBOutput_2.setInt(32, row2.ClientId);

						if (row2.ClientName == null) {
							pstmt_tDBOutput_2.setNull(33,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(33, row2.ClientName);
						}

						pstmt_tDBOutput_2.setShort(34, row2.DeliveryMethod);

						if (row2.SpecialInstruct == null) {
							pstmt_tDBOutput_2.setNull(35,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(35,
									row2.SpecialInstruct);
						}

						if (row2.CustSpecialInstruct == null) {
							pstmt_tDBOutput_2.setNull(36,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(36,
									row2.CustSpecialInstruct);
						}

						if (row2.FeeAlternate == null) {
							pstmt_tDBOutput_2.setNull(37, java.sql.Types.OTHER);
						} else {
							pstmt_tDBOutput_2.setObject(37, row2.FeeAlternate);
						}

						if (row2.DeliveryAddr == null) {
							pstmt_tDBOutput_2.setNull(38,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(38, row2.DeliveryAddr);
						}

						if (row2.DeliveryCity == null) {
							pstmt_tDBOutput_2.setNull(39,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(39, row2.DeliveryCity);
						}

						if (row2.DeliveryState == null) {
							pstmt_tDBOutput_2.setNull(40,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(40, row2.DeliveryState);
						}

						if (row2.DeliveryCountry == null) {
							pstmt_tDBOutput_2.setNull(41,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(41,
									row2.DeliveryCountry);
						}

						if (row2.DeliveryZip == null) {
							pstmt_tDBOutput_2.setNull(42,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(42, row2.DeliveryZip);
						}

						if (row2.DeliveryTracking == null) {
							pstmt_tDBOutput_2.setNull(43,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(43,
									row2.DeliveryTracking);
						}

						if (row2.DeliveryTime != null) {
							pstmt_tDBOutput_2.setTimestamp(
									44,
									new java.sql.Timestamp(row2.DeliveryTime
											.getTime()));
						} else {
							pstmt_tDBOutput_2.setNull(44,
									java.sql.Types.TIMESTAMP);
						}

						if (row2.RightsGranted == null) {
							pstmt_tDBOutput_2.setNull(45,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(45, row2.RightsGranted);
						}

						pstmt_tDBOutput_2.setShort(46, row2.AllowedViewsOrig);

						pstmt_tDBOutput_2.setShort(47, row2.AllowedViewsLeft);

						pstmt_tDBOutput_2.setShort(48, row2.AllowedPrintsOrig);

						pstmt_tDBOutput_2.setShort(49, row2.AllowedPrintsLeft);

						if (row2.CRTerms == null) {
							pstmt_tDBOutput_2.setNull(50,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(50, row2.CRTerms);
						}

						if (row2.PO == null) {
							pstmt_tDBOutput_2.setNull(51,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(51, row2.PO);
						}

						if (row2.CustOrderNum == null) {
							pstmt_tDBOutput_2.setNull(52,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(52, row2.CustOrderNum);
						}

						if (row2.PriceLimit == null) {
							pstmt_tDBOutput_2.setNull(53, java.sql.Types.OTHER);
						} else {
							pstmt_tDBOutput_2.setObject(53, row2.PriceLimit);
						}

						if (row2.Title == null) {
							pstmt_tDBOutput_2.setNull(54,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(54, row2.Title);
						}

						if (row2.Authors == null) {
							pstmt_tDBOutput_2.setNull(55,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(55, row2.Authors);
						}

						if (row2.Issue == null) {
							pstmt_tDBOutput_2.setNull(56,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(56, row2.Issue);
						}

						if (row2.Volume == null) {
							pstmt_tDBOutput_2.setNull(57,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(57, row2.Volume);
						}

						if (row2.Pages == null) {
							pstmt_tDBOutput_2.setNull(58,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(58, row2.Pages);
						}

						if (row2.Publication == null) {
							pstmt_tDBOutput_2.setNull(59,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(59, row2.Publication);
						}

						if (row2.PubDate == null) {
							pstmt_tDBOutput_2.setNull(60,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(60, row2.PubDate);
						}

						if (row2.StdNum == null) {
							pstmt_tDBOutput_2.setNull(61,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(61, row2.StdNum);
						}

						if (row2.FormattedStdNum == null) {
							pstmt_tDBOutput_2.setNull(62,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(62,
									row2.FormattedStdNum);
						}

						if (row2.Publisher == null) {
							pstmt_tDBOutput_2.setNull(63,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(63, row2.Publisher);
						}

						if (row2.DOI == null) {
							pstmt_tDBOutput_2.setNull(64,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(64, row2.DOI);
						}

						if (row2.UCustomId == null) {
							pstmt_tDBOutput_2.setNull(65,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(65, row2.UCustomId);
						}

						if (row2.CCustomId == null) {
							pstmt_tDBOutput_2.setNull(66,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(66, row2.CCustomId);
						}

						if (row2.ucLastName == null) {
							pstmt_tDBOutput_2.setNull(67,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(67, row2.ucLastName);
						}

						if (row2.ucFirstName == null) {
							pstmt_tDBOutput_2.setNull(68,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(68, row2.ucFirstName);
						}

						if (row2.ccLastName == null) {
							pstmt_tDBOutput_2.setNull(69,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(69, row2.ccLastName);
						}

						if (row2.ccFirstName == null) {
							pstmt_tDBOutput_2.setNull(70,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(70, row2.ccFirstName);
						}

						pstmt_tDBOutput_2.setInt(71, row2.FFCollectionId);

						pstmt_tDBOutput_2.setInt(72, row2.CRCollectionId);

						pstmt_tDBOutput_2.setInt(73, row2.CRAltProvId);

						if (row2.FFCollectionName == null) {
							pstmt_tDBOutput_2.setNull(74,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(74,
									row2.FFCollectionName);
						}

						if (row2.ClientFFCollectionName == null) {
							pstmt_tDBOutput_2.setNull(75,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(75,
									row2.ClientFFCollectionName);
						}

						if (row2.CRCollectionName == null) {
							pstmt_tDBOutput_2.setNull(76,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(76,
									row2.CRCollectionName);
						}

						if (row2.InternalFill == null) {
							pstmt_tDBOutput_2.setNull(77,
									java.sql.Types.BOOLEAN);
						} else {
							pstmt_tDBOutput_2.setBoolean(77, row2.InternalFill);
						}

						if (row2.DivisionName == null) {
							pstmt_tDBOutput_2.setNull(78,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(78, row2.DivisionName);
						}

						if (row2.DepartmentName == null) {
							pstmt_tDBOutput_2.setNull(79,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2
									.setString(79, row2.DepartmentName);
						}

						if (row2.LocationName == null) {
							pstmt_tDBOutput_2.setNull(80,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(80, row2.LocationName);
						}

						if (row2.OrigCitText == null) {
							pstmt_tDBOutput_2.setNull(81,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(81, row2.OrigCitText);
						}

						pstmt_tDBOutput_2.setShort(82, row2.TurnaroundMinutes);

						pstmt_tDBOutput_2.setShort(83, row2.WorkMinutes);

						if (row2.ReferenceTime != null) {
							pstmt_tDBOutput_2.setTimestamp(
									84,
									new java.sql.Timestamp(row2.ReferenceTime
											.getTime()));
						} else {
							pstmt_tDBOutput_2.setNull(84,
									java.sql.Types.TIMESTAMP);
						}

						pstmt_tDBOutput_2.setShort(85, row2.UseCopies);

						if (row2.Source == null) {
							pstmt_tDBOutput_2.setNull(86,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(86, row2.Source);
						}

						if (row2.PMID == null) {
							pstmt_tDBOutput_2.setNull(87,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(87, row2.PMID);
						}

						if (row2.PayCR == null) {
							pstmt_tDBOutput_2.setNull(88, java.sql.Types.OTHER);
						} else {
							pstmt_tDBOutput_2.setObject(88, row2.PayCR);
						}

						pstmt_tDBOutput_2.setInt(89, row2.ClientGroupId);

						if (row2.DRMApplied == null) {
							pstmt_tDBOutput_2.setNull(90,
									java.sql.Types.BOOLEAN);
						} else {
							pstmt_tDBOutput_2.setBoolean(90, row2.DRMApplied);
						}

						pstmt_tDBOutput_2.setInt(91, row2.InvoiceId);

						if (row2.GST_HST == null) {
							pstmt_tDBOutput_2.setNull(92, java.sql.Types.OTHER);
						} else {
							pstmt_tDBOutput_2.setObject(92, row2.GST_HST);
						}

						if (row2.PST == null) {
							pstmt_tDBOutput_2.setNull(93, java.sql.Types.OTHER);
						} else {
							pstmt_tDBOutput_2.setObject(93, row2.PST);
						}

						pstmt_tDBOutput_2.setShort(94, row2.PartnerId);

						if (row2.PartnerClientId == null) {
							pstmt_tDBOutput_2.setNull(95,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(95,
									row2.PartnerClientId);
						}

						pstmt_tDBOutput_2.setInt(96, row2.AssignedToId);

						if (row2.AssignedToEmail == null) {
							pstmt_tDBOutput_2.setNull(97,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(97,
									row2.AssignedToEmail);
						}

						if (row2.IsTestOrder == null) {
							pstmt_tDBOutput_2.setNull(98,
									java.sql.Types.BOOLEAN);
						} else {
							pstmt_tDBOutput_2.setBoolean(98, row2.IsTestOrder);
						}

						if (row2.WorkStatus == null) {
							pstmt_tDBOutput_2.setNull(99,
									java.sql.Types.INTEGER);
						} else {
							pstmt_tDBOutput_2.setInt(99, row2.WorkStatus);
						}

						if (row2.SuspendedReason == null) {
							pstmt_tDBOutput_2.setNull(100,
									java.sql.Types.INTEGER);
						} else {
							pstmt_tDBOutput_2.setInt(100, row2.SuspendedReason);
						}

						if (row2.WorkAssignedTime != null) {
							pstmt_tDBOutput_2.setTimestamp(101,
									new java.sql.Timestamp(
											row2.WorkAssignedTime.getTime()));
						} else {
							pstmt_tDBOutput_2.setNull(101,
									java.sql.Types.TIMESTAMP);
						}

						if (row2.WorkCreatedTime != null) {
							pstmt_tDBOutput_2.setTimestamp(
									102,
									new java.sql.Timestamp(row2.WorkCreatedTime
											.getTime()));
						} else {
							pstmt_tDBOutput_2.setNull(102,
									java.sql.Types.TIMESTAMP);
						}

						if (row2.CRVerificationRequired == null) {
							pstmt_tDBOutput_2.setNull(103,
									java.sql.Types.BOOLEAN);
						} else {
							pstmt_tDBOutput_2.setBoolean(103,
									row2.CRVerificationRequired);
						}

						if (row2.CRVerificationVerified == null) {
							pstmt_tDBOutput_2.setNull(104,
									java.sql.Types.BOOLEAN);
						} else {
							pstmt_tDBOutput_2.setBoolean(104,
									row2.CRVerificationVerified);
						}

						if (row2.CRVerificationNotFound == null) {
							pstmt_tDBOutput_2.setNull(105,
									java.sql.Types.BOOLEAN);
						} else {
							pstmt_tDBOutput_2.setBoolean(105,
									row2.CRVerificationNotFound);
						}

						if (row2.CRVerificationDenied == null) {
							pstmt_tDBOutput_2.setNull(106,
									java.sql.Types.BOOLEAN);
						} else {
							pstmt_tDBOutput_2.setBoolean(106,
									row2.CRVerificationDenied);
						}

						pstmt_tDBOutput_2.setInt(107, row2.ContentId);

						pstmt_tDBOutput_2.setInt(108, row2.PartOfContentId);

						if (row2.PartOfTitle == null) {
							pstmt_tDBOutput_2.setNull(109,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(109, row2.PartOfTitle);
						}

						if (row2.PublicationId == null) {
							pstmt_tDBOutput_2.setNull(110,
									java.sql.Types.INTEGER);
						} else {
							pstmt_tDBOutput_2.setInt(110, row2.PublicationId);
						}

						if (row2.ArticleId == null) {
							pstmt_tDBOutput_2.setNull(111,
									java.sql.Types.INTEGER);
						} else {
							pstmt_tDBOutput_2.setInt(111, row2.ArticleId);
						}

						pstmt_tDBOutput_2.setShort(112, row2.FFMethod);

						if (row2.LastNotify != null) {
							pstmt_tDBOutput_2.setTimestamp(
									113,
									new java.sql.Timestamp(row2.LastNotify
											.getTime()));
						} else {
							pstmt_tDBOutput_2.setNull(113,
									java.sql.Types.TIMESTAMP);
						}

						if (row2.ReferencingRequired == null) {
							pstmt_tDBOutput_2.setNull(114,
									java.sql.Types.BOOLEAN);
						} else {
							pstmt_tDBOutput_2.setBoolean(114,
									row2.ReferencingRequired);
						}

						if (row2.RightsRequired == null) {
							pstmt_tDBOutput_2.setNull(115,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(115,
									row2.RightsRequired);
						}

						pstmt_tDBOutput_2.setShort(116, row2.FFSourceType);

						if (row2.ClientCosts == null) {
							pstmt_tDBOutput_2
									.setNull(117, java.sql.Types.OTHER);
						} else {
							pstmt_tDBOutput_2.setObject(117, row2.ClientCosts);
						}

						pstmt_tDBOutput_2.setInt(118, row2.FFHoldingId);

						pstmt_tDBOutput_2.setInt(119, row2.CRHoldingId);

						if (row2.TotalPublisherVendorFee == null) {
							pstmt_tDBOutput_2
									.setNull(120, java.sql.Types.OTHER);
						} else {
							pstmt_tDBOutput_2.setObject(120,
									row2.TotalPublisherVendorFee);
						}

						if (row2.WireTransferFee == null) {
							pstmt_tDBOutput_2
									.setNull(121, java.sql.Types.OTHER);
						} else {
							pstmt_tDBOutput_2.setObject(121,
									row2.WireTransferFee);
						}

						if (row2.CreditCardCharge == null) {
							pstmt_tDBOutput_2
									.setNull(122, java.sql.Types.OTHER);
						} else {
							pstmt_tDBOutput_2.setObject(122,
									row2.CreditCardCharge);
						}

						if (row2.ResellerFeeTransaction == null) {
							pstmt_tDBOutput_2
									.setNull(123, java.sql.Types.OTHER);
						} else {
							pstmt_tDBOutput_2.setObject(123,
									row2.ResellerFeeTransaction);
						}

						if (row2.ResellerFeeCR == null) {
							pstmt_tDBOutput_2
									.setNull(124, java.sql.Types.OTHER);
						} else {
							pstmt_tDBOutput_2
									.setObject(124, row2.ResellerFeeCR);
						}

						if (row2.ResellerFeeCRSErvices == null) {
							pstmt_tDBOutput_2
									.setNull(125, java.sql.Types.OTHER);
						} else {
							pstmt_tDBOutput_2.setObject(125,
									row2.ResellerFeeCRSErvices);
						}

						if (row2.ResellerFeeFF == null) {
							pstmt_tDBOutput_2
									.setNull(126, java.sql.Types.OTHER);
						} else {
							pstmt_tDBOutput_2
									.setObject(126, row2.ResellerFeeFF);
						}

						if (row2.ResellerFeeAdvRef == null) {
							pstmt_tDBOutput_2
									.setNull(127, java.sql.Types.OTHER);
						} else {
							pstmt_tDBOutput_2.setObject(127,
									row2.ResellerFeeAdvRef);
						}

						if (row2.ResellerFeeSH == null) {
							pstmt_tDBOutput_2
									.setNull(128, java.sql.Types.OTHER);
						} else {
							pstmt_tDBOutput_2
									.setObject(128, row2.ResellerFeeSH);
						}

						if (row2.ResellerFeeOther == null) {
							pstmt_tDBOutput_2
									.setNull(129, java.sql.Types.OTHER);
						} else {
							pstmt_tDBOutput_2.setObject(129,
									row2.ResellerFeeOther);
						}

						if (row2.ResellerFeeTax == null) {
							pstmt_tDBOutput_2
									.setNull(130, java.sql.Types.OTHER);
						} else {
							pstmt_tDBOutput_2.setObject(130,
									row2.ResellerFeeTax);
						}

						if (row2.ResellerFeeTotal == null) {
							pstmt_tDBOutput_2
									.setNull(131, java.sql.Types.OTHER);
						} else {
							pstmt_tDBOutput_2.setObject(131,
									row2.ResellerFeeTotal);
						}

						if (row2.InDigitalLibrary == null) {
							pstmt_tDBOutput_2.setNull(132,
									java.sql.Types.BOOLEAN);
						} else {
							pstmt_tDBOutput_2.setBoolean(132,
									row2.InDigitalLibrary);
						}

						if (row2.LinkWithHeader == null) {
							pstmt_tDBOutput_2.setNull(133,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(133,
									row2.LinkWithHeader);
						}

						if (row2.BritishLibraryId == null) {
							pstmt_tDBOutput_2.setNull(134,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(134,
									row2.BritishLibraryId);
						}

						pstmt_tDBOutput_2.addBatch();
						nb_line_tDBOutput_2++;

						batchSizeCounter_tDBOutput_2++;

						if ((batchSize_tDBOutput_2 > 0)
								&& (batchSize_tDBOutput_2 <= batchSizeCounter_tDBOutput_2)) {
							try {
								int countSum_tDBOutput_2 = 0;

								for (int countEach_tDBOutput_2 : pstmt_tDBOutput_2
										.executeBatch()) {
									countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0
											: countEach_tDBOutput_2);
								}

								insertedCount_tDBOutput_2 += countSum_tDBOutput_2;

								batchSizeCounter_tDBOutput_2 = 0;
							} catch (java.sql.BatchUpdateException e_tDBOutput_2) {
								java.sql.SQLException ne_tDBOutput_2 = e_tDBOutput_2
										.getNextException(), sqle_tDBOutput_2 = null;
								String errormessage_tDBOutput_2;
								if (ne_tDBOutput_2 != null) {
									// build new exception to provide the
									// original cause
									sqle_tDBOutput_2 = new java.sql.SQLException(
											e_tDBOutput_2.getMessage()
													+ "\ncaused by: "
													+ ne_tDBOutput_2
															.getMessage(),
											ne_tDBOutput_2.getSQLState(),
											ne_tDBOutput_2.getErrorCode(),
											ne_tDBOutput_2);
									errormessage_tDBOutput_2 = sqle_tDBOutput_2
											.getMessage();
								} else {
									errormessage_tDBOutput_2 = e_tDBOutput_2
											.getMessage();
								}

								int countSum_tDBOutput_2 = 0;
								for (int countEach_tDBOutput_2 : e_tDBOutput_2
										.getUpdateCounts()) {
									countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0
											: countEach_tDBOutput_2);
								}

								insertedCount_tDBOutput_2 += countSum_tDBOutput_2;

								System.err.println(errormessage_tDBOutput_2);

							}
						}

						commitCounter_tDBOutput_2++;
						if (commitEvery_tDBOutput_2 <= commitCounter_tDBOutput_2) {
							if ((batchSize_tDBOutput_2 > 0)
									&& (batchSizeCounter_tDBOutput_2 > 0)) {
								try {
									int countSum_tDBOutput_2 = 0;

									for (int countEach_tDBOutput_2 : pstmt_tDBOutput_2
											.executeBatch()) {
										countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0
												: countEach_tDBOutput_2);
									}

									insertedCount_tDBOutput_2 += countSum_tDBOutput_2;

									batchSizeCounter_tDBOutput_2 = 0;
								} catch (java.sql.BatchUpdateException e_tDBOutput_2) {
									java.sql.SQLException ne_tDBOutput_2 = e_tDBOutput_2
											.getNextException(), sqle_tDBOutput_2 = null;
									String errormessage_tDBOutput_2;
									if (ne_tDBOutput_2 != null) {
										// build new exception to provide the
										// original cause
										sqle_tDBOutput_2 = new java.sql.SQLException(
												e_tDBOutput_2.getMessage()
														+ "\ncaused by: "
														+ ne_tDBOutput_2
																.getMessage(),
												ne_tDBOutput_2.getSQLState(),
												ne_tDBOutput_2.getErrorCode(),
												ne_tDBOutput_2);
										errormessage_tDBOutput_2 = sqle_tDBOutput_2
												.getMessage();
									} else {
										errormessage_tDBOutput_2 = e_tDBOutput_2
												.getMessage();
									}

									int countSum_tDBOutput_2 = 0;
									for (int countEach_tDBOutput_2 : e_tDBOutput_2
											.getUpdateCounts()) {
										countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0
												: countEach_tDBOutput_2);
									}

									insertedCount_tDBOutput_2 += countSum_tDBOutput_2;

									System.err
											.println(errormessage_tDBOutput_2);

								}
							}
							conn_tDBOutput_2.commit();

							commitCounter_tDBOutput_2 = 0;
						}

						tos_count_tDBOutput_2++;

						/**
						 * [tDBOutput_2 main ] stop
						 */

						/**
						 * [tDBOutput_2 process_data_begin ] start
						 */

						currentComponent = "tDBOutput_2";

						/**
						 * [tDBOutput_2 process_data_begin ] stop
						 */

						/**
						 * [tDBOutput_2 process_data_end ] start
						 */

						currentComponent = "tDBOutput_2";

						/**
						 * [tDBOutput_2 process_data_end ] stop
						 */

						/**
						 * [tDBInput_2 process_data_end ] start
						 */

						currentComponent = "tDBInput_2";

						/**
						 * [tDBInput_2 process_data_end ] stop
						 */

						/**
						 * [tDBInput_2 end ] start
						 */

						currentComponent = "tDBInput_2";

					}
				} finally {
					if (rs_tDBInput_2 != null) {
						rs_tDBInput_2.close();
					}
					if (stmt_tDBInput_2 != null) {
						stmt_tDBInput_2.close();
					}
				}
				globalMap.put("tDBInput_2_NB_LINE", nb_line_tDBInput_2);

				ok_Hash.put("tDBInput_2", true);
				end_Hash.put("tDBInput_2", System.currentTimeMillis());

				tStatCatcher_1.addMessage(
						"end",
						"tDBInput_2",
						end_Hash.get("tDBInput_2")
								- start_Hash.get("tDBInput_2"));
				tStatCatcher_1Process(globalMap);
				talendStats_STATS.addMessage(
						"end",
						"tDBInput_2",
						end_Hash.get("tDBInput_2")
								- start_Hash.get("tDBInput_2"));
				talendStats_STATSProcess(globalMap);

				/**
				 * [tDBInput_2 end ] stop
				 */

				/**
				 * [tDBOutput_2 end ] start
				 */

				currentComponent = "tDBOutput_2";

				try {
					int countSum_tDBOutput_2 = 0;
					if (pstmt_tDBOutput_2 != null
							&& batchSizeCounter_tDBOutput_2 > 0) {

						for (int countEach_tDBOutput_2 : pstmt_tDBOutput_2
								.executeBatch()) {
							countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0
									: countEach_tDBOutput_2);
						}

					}

					insertedCount_tDBOutput_2 += countSum_tDBOutput_2;

				} catch (java.sql.BatchUpdateException e_tDBOutput_2) {
					java.sql.SQLException ne_tDBOutput_2 = e_tDBOutput_2
							.getNextException(), sqle_tDBOutput_2 = null;
					String errormessage_tDBOutput_2;
					if (ne_tDBOutput_2 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_2 = new java.sql.SQLException(
								e_tDBOutput_2.getMessage() + "\ncaused by: "
										+ ne_tDBOutput_2.getMessage(),
								ne_tDBOutput_2.getSQLState(),
								ne_tDBOutput_2.getErrorCode(), ne_tDBOutput_2);
						errormessage_tDBOutput_2 = sqle_tDBOutput_2
								.getMessage();
					} else {
						errormessage_tDBOutput_2 = e_tDBOutput_2.getMessage();
					}

					int countSum_tDBOutput_2 = 0;
					for (int countEach_tDBOutput_2 : e_tDBOutput_2
							.getUpdateCounts()) {
						countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0
								: countEach_tDBOutput_2);
					}

					insertedCount_tDBOutput_2 += countSum_tDBOutput_2;

					System.err.println(errormessage_tDBOutput_2);

				}

				if (pstmt_tDBOutput_2 != null) {

					pstmt_tDBOutput_2.close();
					resourceMap.remove("pstmt_tDBOutput_2");
				}
				resourceMap.put("statementClosed_tDBOutput_2", true);

				conn_tDBOutput_2.commit();

				conn_tDBOutput_2.close();

				resourceMap.put("finish_tDBOutput_2", true);

				nb_line_deleted_tDBOutput_2 = nb_line_deleted_tDBOutput_2
						+ deletedCount_tDBOutput_2;
				nb_line_update_tDBOutput_2 = nb_line_update_tDBOutput_2
						+ updatedCount_tDBOutput_2;
				nb_line_inserted_tDBOutput_2 = nb_line_inserted_tDBOutput_2
						+ insertedCount_tDBOutput_2;
				nb_line_rejected_tDBOutput_2 = nb_line_rejected_tDBOutput_2
						+ rejectedCount_tDBOutput_2;

				globalMap.put("tDBOutput_2_NB_LINE", nb_line_tDBOutput_2);
				globalMap.put("tDBOutput_2_NB_LINE_UPDATED",
						nb_line_update_tDBOutput_2);
				globalMap.put("tDBOutput_2_NB_LINE_INSERTED",
						nb_line_inserted_tDBOutput_2);
				globalMap.put("tDBOutput_2_NB_LINE_DELETED",
						nb_line_deleted_tDBOutput_2);
				globalMap.put("tDBOutput_2_NB_LINE_REJECTED",
						nb_line_rejected_tDBOutput_2);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row2" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tDBOutput_2", true);
				end_Hash.put("tDBOutput_2", System.currentTimeMillis());

				tStatCatcher_1.addMessage(
						"end",
						"tDBOutput_2",
						end_Hash.get("tDBOutput_2")
								- start_Hash.get("tDBOutput_2"));
				tStatCatcher_1Process(globalMap);
				talendStats_STATS.addMessage(
						"end",
						"tDBOutput_2",
						end_Hash.get("tDBOutput_2")
								- start_Hash.get("tDBOutput_2"));
				talendStats_STATSProcess(globalMap);

				/**
				 * [tDBOutput_2 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_2 finally ] start
				 */

				currentComponent = "tDBInput_2";

				/**
				 * [tDBInput_2 finally ] stop
				 */

				/**
				 * [tDBOutput_2 finally ] start
				 */

				currentComponent = "tDBOutput_2";

				try {
					if (resourceMap.get("statementClosed_tDBOutput_2") == null) {
						java.sql.PreparedStatement pstmtToClose_tDBOutput_2 = null;
						if ((pstmtToClose_tDBOutput_2 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmt_tDBOutput_2")) != null) {
							pstmtToClose_tDBOutput_2.close();
						}
					}
				} finally {
					if (resourceMap.get("finish_tDBOutput_2") == null) {
						java.sql.Connection ctn_tDBOutput_2 = null;
						if ((ctn_tDBOutput_2 = (java.sql.Connection) resourceMap
								.get("conn_tDBOutput_2")) != null) {
							try {
								ctn_tDBOutput_2.close();
							} catch (java.sql.SQLException sqlEx_tDBOutput_2) {
								String errorMessage_tDBOutput_2 = "failed to close the connection in tDBOutput_2 :"
										+ sqlEx_tDBOutput_2.getMessage();
								System.err.println(errorMessage_tDBOutput_2);
							}
						}
					}
				}

				/**
				 * [tDBOutput_2 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_2_SUBPROCESS_STATE", 1);
	}

	public static class row3Struct implements
			routines.system.IPersistableRow<row3Struct> {
		final static byte[] commonByteArrayLock_ORDER_ETL_RFE_ETL = new byte[0];
		static byte[] commonByteArray_ORDER_ETL_RFE_ETL = new byte[0];

		public int OrderItemId;

		public int getOrderItemId() {
			return this.OrderItemId;
		}

		public int CartId;

		public int getCartId() {
			return this.CartId;
		}

		public short Type;

		public short getType() {
			return this.Type;
		}

		public short ItemType;

		public short getItemType() {
			return this.ItemType;
		}

		public short Status;

		public short getStatus() {
			return this.Status;
		}

		public short CopyrightStatus;

		public short getCopyrightStatus() {
			return this.CopyrightStatus;
		}

		public short CloseReason;

		public short getCloseReason() {
			return this.CloseReason;
		}

		public java.util.Date CreatedTime;

		public java.util.Date getCreatedTime() {
			return this.CreatedTime;
		}

		public int CreatedBy;

		public int getCreatedBy() {
			return this.CreatedBy;
		}

		public java.util.Date ModifiedTime;

		public java.util.Date getModifiedTime() {
			return this.ModifiedTime;
		}

		public int ModifiedBy;

		public int getModifiedBy() {
			return this.ModifiedBy;
		}

		public int PublicationId_Old;

		public int getPublicationId_Old() {
			return this.PublicationId_Old;
		}

		public int ArticleId_Old;

		public int getArticleId_Old() {
			return this.ArticleId_Old;
		}

		public long RightsRequired;

		public long getRightsRequired() {
			return this.RightsRequired;
		}

		public int UseId;

		public int getUseId() {
			return this.UseId;
		}

		public int UserId;

		public int getUserId() {
			return this.UserId;
		}

		public int UseLocation;

		public int getUseLocation() {
			return this.UseLocation;
		}

		public short UsePossessedAs;

		public short getUsePossessedAs() {
			return this.UsePossessedAs;
		}

		public short UseCopies;

		public short getUseCopies() {
			return this.UseCopies;
		}

		public short PageCount;

		public short getPageCount() {
			return this.PageCount;
		}

		public int DeliveryProfileId;

		public int getDeliveryProfileId() {
			return this.DeliveryProfileId;
		}

		public short DeliveryUrgency;

		public short getDeliveryUrgency() {
			return this.DeliveryUrgency;
		}

		public java.util.Date NeededByDate;

		public java.util.Date getNeededByDate() {
			return this.NeededByDate;
		}

		public java.util.Date PromisedDate;

		public java.util.Date getPromisedDate() {
			return this.PromisedDate;
		}

		public String IPAddress;

		public String getIPAddress() {
			return this.IPAddress;
		}

		public String Source;

		public String getSource() {
			return this.Source;
		}

		public Object FeeTransaction;

		public Object getFeeTransaction() {
			return this.FeeTransaction;
		}

		public Object FeeCR;

		public Object getFeeCR() {
			return this.FeeCR;
		}

		public Object FeeCRServices;

		public Object getFeeCRServices() {
			return this.FeeCRServices;
		}

		public Object FeeFF;

		public Object getFeeFF() {
			return this.FeeFF;
		}

		public Object FeeAdvRef;

		public Object getFeeAdvRef() {
			return this.FeeAdvRef;
		}

		public Object FeeSH;

		public Object getFeeSH() {
			return this.FeeSH;
		}

		public Object FeeOther;

		public Object getFeeOther() {
			return this.FeeOther;
		}

		public Object FeeTax;

		public Object getFeeTax() {
			return this.FeeTax;
		}

		public Object FeeTotal;

		public Object getFeeTotal() {
			return this.FeeTotal;
		}

		public Object PayCR;

		public Object getPayCR() {
			return this.PayCR;
		}

		public Object PayFF;

		public Object getPayFF() {
			return this.PayFF;
		}

		public int CRCollectionId;

		public int getCRCollectionId() {
			return this.CRCollectionId;
		}

		public int CRAltProvId;

		public int getCRAltProvId() {
			return this.CRAltProvId;
		}

		public String Link;

		public String getLink() {
			return this.Link;
		}

		public java.util.Date LinkExpiration;

		public java.util.Date getLinkExpiration() {
			return this.LinkExpiration;
		}

		public int FFCollectionId;

		public int getFFCollectionId() {
			return this.FFCollectionId;
		}

		public int FFAltProvId;

		public int getFFAltProvId() {
			return this.FFAltProvId;
		}

		public String FFLocation;

		public String getFFLocation() {
			return this.FFLocation;
		}

		public String FFCallNumber;

		public String getFFCallNumber() {
			return this.FFCallNumber;
		}

		public short FFMethod;

		public short getFFMethod() {
			return this.FFMethod;
		}

		public short FFResult;

		public short getFFResult() {
			return this.FFResult;
		}

		public String CostCenter;

		public String getCostCenter() {
			return this.CostCenter;
		}

		public String BillRef;

		public String getBillRef() {
			return this.BillRef;
		}

		public String PubDescription;

		public String getPubDescription() {
			return this.PubDescription;
		}

		public String UsageStatement;

		public String getUsageStatement() {
			return this.UsageStatement;
		}

		public int ClassId;

		public int getClassId() {
			return this.ClassId;
		}

		public int ClientId;

		public int getClientId() {
			return this.ClientId;
		}

		public Object ExternalId;

		public Object getExternalId() {
			return this.ExternalId;
		}

		public short DeliveryMethod;

		public short getDeliveryMethod() {
			return this.DeliveryMethod;
		}

		public long SpecialInstruct;

		public long getSpecialInstruct() {
			return this.SpecialInstruct;
		}

		public String CustSpecialInstruct;

		public String getCustSpecialInstruct() {
			return this.CustSpecialInstruct;
		}

		public Object FeeAlternate;

		public Object getFeeAlternate() {
			return this.FeeAlternate;
		}

		public short TaxCategory;

		public short getTaxCategory() {
			return this.TaxCategory;
		}

		public String DeliveryAddr;

		public String getDeliveryAddr() {
			return this.DeliveryAddr;
		}

		public String DeliveryCity;

		public String getDeliveryCity() {
			return this.DeliveryCity;
		}

		public String DeliveryState;

		public String getDeliveryState() {
			return this.DeliveryState;
		}

		public String DeliveryCountry;

		public String getDeliveryCountry() {
			return this.DeliveryCountry;
		}

		public String DeliveryZip;

		public String getDeliveryZip() {
			return this.DeliveryZip;
		}

		public String DeliveryTracking;

		public String getDeliveryTracking() {
			return this.DeliveryTracking;
		}

		public java.util.Date DeliveryTime;

		public java.util.Date getDeliveryTime() {
			return this.DeliveryTime;
		}

		public java.util.Date OrigPromisedDate;

		public java.util.Date getOrigPromisedDate() {
			return this.OrigPromisedDate;
		}

		public long RightsGranted;

		public long getRightsGranted() {
			return this.RightsGranted;
		}

		public short TurnaroundMinutes;

		public short getTurnaroundMinutes() {
			return this.TurnaroundMinutes;
		}

		public short WorkMinutes;

		public short getWorkMinutes() {
			return this.WorkMinutes;
		}

		public String EncryptKey;

		public String getEncryptKey() {
			return this.EncryptKey;
		}

		public short AllowedViewsOrig;

		public short getAllowedViewsOrig() {
			return this.AllowedViewsOrig;
		}

		public short AllowedViewsLeft;

		public short getAllowedViewsLeft() {
			return this.AllowedViewsLeft;
		}

		public short AllowedPrintsOrig;

		public short getAllowedPrintsOrig() {
			return this.AllowedPrintsOrig;
		}

		public short AllowedPrintsLeft;

		public short getAllowedPrintsLeft() {
			return this.AllowedPrintsLeft;
		}

		public String CRTerms;

		public String getCRTerms() {
			return this.CRTerms;
		}

		public String PO;

		public String getPO() {
			return this.PO;
		}

		public String CustOrderNum;

		public String getCustOrderNum() {
			return this.CustOrderNum;
		}

		public Object PriceLimit;

		public Object getPriceLimit() {
			return this.PriceLimit;
		}

		public String FFFileExt;

		public String getFFFileExt() {
			return this.FFFileExt;
		}

		public String RefCitXml;

		public String getRefCitXml() {
			return this.RefCitXml;
		}

		public String OrigCitXml;

		public String getOrigCitXml() {
			return this.OrigCitXml;
		}

		public int SessionId;

		public int getSessionId() {
			return this.SessionId;
		}

		public String ExtOrderRef;

		public String getExtOrderRef() {
			return this.ExtOrderRef;
		}

		public int InvoiceId;

		public int getInvoiceId() {
			return this.InvoiceId;
		}

		public int ClientGroupId;

		public int getClientGroupId() {
			return this.ClientGroupId;
		}

		public int StateFlags;

		public int getStateFlags() {
			return this.StateFlags;
		}

		public java.util.Date ExpirationTime;

		public java.util.Date getExpirationTime() {
			return this.ExpirationTime;
		}

		public short FFSourceType;

		public short getFFSourceType() {
			return this.FFSourceType;
		}

		public Object OtherTax;

		public Object getOtherTax() {
			return this.OtherTax;
		}

		public int UserSector;

		public int getUserSector() {
			return this.UserSector;
		}

		public int PrevOrderId;

		public int getPrevOrderId() {
			return this.PrevOrderId;
		}

		public int NextOrderId;

		public int getNextOrderId() {
			return this.NextOrderId;
		}

		public String Tags;

		public String getTags() {
			return this.Tags;
		}

		public Object FeeAdjustment;

		public Object getFeeAdjustment() {
			return this.FeeAdjustment;
		}

		public Object CreditAccountCharge;

		public Object getCreditAccountCharge() {
			return this.CreditAccountCharge;
		}

		public int UserCreditGroupId;

		public int getUserCreditGroupId() {
			return this.UserCreditGroupId;
		}

		public int FFHoldingId;

		public int getFFHoldingId() {
			return this.FFHoldingId;
		}

		public int CRHoldingId;

		public int getCRHoldingId() {
			return this.CRHoldingId;
		}

		public Short PubYear;

		public Short getPubYear() {
			return this.PubYear;
		}

		public Object RightsGranted2;

		public Object getRightsGranted2() {
			return this.RightsGranted2;
		}

		public Object RightsRequired2;

		public Object getRightsRequired2() {
			return this.RightsRequired2;
		}

		public int ContentId;

		public int getContentId() {
			return this.ContentId;
		}

		public int _PartOfContentId;

		public int get_PartOfContentId() {
			return this._PartOfContentId;
		}

		public Object ClientCosts;

		public Object getClientCosts() {
			return this.ClientCosts;
		}

		public String UserInfoLink;

		public String getUserInfoLink() {
			return this.UserInfoLink;
		}

		public short Partner;

		public short getPartner() {
			return this.Partner;
		}

		public Integer RelatedToOrderItemId;

		public Integer getRelatedToOrderItemId() {
			return this.RelatedToOrderItemId;
		}

		public Object PriceQuote;

		public Object getPriceQuote() {
			return this.PriceQuote;
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ORDER_ETL_RFE_ETL.length) {
					if (length < 1024
							&& commonByteArray_ORDER_ETL_RFE_ETL.length == 0) {
						commonByteArray_ORDER_ETL_RFE_ETL = new byte[1024];
					} else {
						commonByteArray_ORDER_ETL_RFE_ETL = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ORDER_ETL_RFE_ETL, 0, length);
				strReturn = new String(commonByteArray_ORDER_ETL_RFE_ETL, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ORDER_ETL_RFE_ETL) {

				try {

					int length = 0;

					this.OrderItemId = dis.readInt();

					this.CartId = dis.readInt();

					this.Type = dis.readShort();

					this.ItemType = dis.readShort();

					this.Status = dis.readShort();

					this.CopyrightStatus = dis.readShort();

					this.CloseReason = dis.readShort();

					this.CreatedTime = readDate(dis);

					this.CreatedBy = dis.readInt();

					this.ModifiedTime = readDate(dis);

					this.ModifiedBy = dis.readInt();

					this.PublicationId_Old = dis.readInt();

					this.ArticleId_Old = dis.readInt();

					this.RightsRequired = dis.readLong();

					this.UseId = dis.readInt();

					this.UserId = dis.readInt();

					this.UseLocation = dis.readInt();

					this.UsePossessedAs = dis.readShort();

					this.UseCopies = dis.readShort();

					this.PageCount = dis.readShort();

					this.DeliveryProfileId = dis.readInt();

					this.DeliveryUrgency = dis.readShort();

					this.NeededByDate = readDate(dis);

					this.PromisedDate = readDate(dis);

					this.IPAddress = readString(dis);

					this.Source = readString(dis);

					this.FeeTransaction = (Object) dis.readObject();

					this.FeeCR = (Object) dis.readObject();

					this.FeeCRServices = (Object) dis.readObject();

					this.FeeFF = (Object) dis.readObject();

					this.FeeAdvRef = (Object) dis.readObject();

					this.FeeSH = (Object) dis.readObject();

					this.FeeOther = (Object) dis.readObject();

					this.FeeTax = (Object) dis.readObject();

					this.FeeTotal = (Object) dis.readObject();

					this.PayCR = (Object) dis.readObject();

					this.PayFF = (Object) dis.readObject();

					this.CRCollectionId = dis.readInt();

					this.CRAltProvId = dis.readInt();

					this.Link = readString(dis);

					this.LinkExpiration = readDate(dis);

					this.FFCollectionId = dis.readInt();

					this.FFAltProvId = dis.readInt();

					this.FFLocation = readString(dis);

					this.FFCallNumber = readString(dis);

					this.FFMethod = dis.readShort();

					this.FFResult = dis.readShort();

					this.CostCenter = readString(dis);

					this.BillRef = readString(dis);

					this.PubDescription = readString(dis);

					this.UsageStatement = readString(dis);

					this.ClassId = dis.readInt();

					this.ClientId = dis.readInt();

					this.ExternalId = (Object) dis.readObject();

					this.DeliveryMethod = dis.readShort();

					this.SpecialInstruct = dis.readLong();

					this.CustSpecialInstruct = readString(dis);

					this.FeeAlternate = (Object) dis.readObject();

					this.TaxCategory = dis.readShort();

					this.DeliveryAddr = readString(dis);

					this.DeliveryCity = readString(dis);

					this.DeliveryState = readString(dis);

					this.DeliveryCountry = readString(dis);

					this.DeliveryZip = readString(dis);

					this.DeliveryTracking = readString(dis);

					this.DeliveryTime = readDate(dis);

					this.OrigPromisedDate = readDate(dis);

					this.RightsGranted = dis.readLong();

					this.TurnaroundMinutes = dis.readShort();

					this.WorkMinutes = dis.readShort();

					this.EncryptKey = readString(dis);

					this.AllowedViewsOrig = dis.readShort();

					this.AllowedViewsLeft = dis.readShort();

					this.AllowedPrintsOrig = dis.readShort();

					this.AllowedPrintsLeft = dis.readShort();

					this.CRTerms = readString(dis);

					this.PO = readString(dis);

					this.CustOrderNum = readString(dis);

					this.PriceLimit = (Object) dis.readObject();

					this.FFFileExt = readString(dis);

					this.RefCitXml = readString(dis);

					this.OrigCitXml = readString(dis);

					this.SessionId = dis.readInt();

					this.ExtOrderRef = readString(dis);

					this.InvoiceId = dis.readInt();

					this.ClientGroupId = dis.readInt();

					this.StateFlags = dis.readInt();

					this.ExpirationTime = readDate(dis);

					this.FFSourceType = dis.readShort();

					this.OtherTax = (Object) dis.readObject();

					this.UserSector = dis.readInt();

					this.PrevOrderId = dis.readInt();

					this.NextOrderId = dis.readInt();

					this.Tags = readString(dis);

					this.FeeAdjustment = (Object) dis.readObject();

					this.CreditAccountCharge = (Object) dis.readObject();

					this.UserCreditGroupId = dis.readInt();

					this.FFHoldingId = dis.readInt();

					this.CRHoldingId = dis.readInt();

					length = dis.readByte();
					if (length == -1) {
						this.PubYear = null;
					} else {
						this.PubYear = dis.readShort();
					}

					this.RightsGranted2 = (Object) dis.readObject();

					this.RightsRequired2 = (Object) dis.readObject();

					this.ContentId = dis.readInt();

					this._PartOfContentId = dis.readInt();

					this.ClientCosts = (Object) dis.readObject();

					this.UserInfoLink = readString(dis);

					this.Partner = dis.readShort();

					this.RelatedToOrderItemId = readInteger(dis);

					this.PriceQuote = (Object) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.OrderItemId);

				// int

				dos.writeInt(this.CartId);

				// short

				dos.writeShort(this.Type);

				// short

				dos.writeShort(this.ItemType);

				// short

				dos.writeShort(this.Status);

				// short

				dos.writeShort(this.CopyrightStatus);

				// short

				dos.writeShort(this.CloseReason);

				// java.util.Date

				writeDate(this.CreatedTime, dos);

				// int

				dos.writeInt(this.CreatedBy);

				// java.util.Date

				writeDate(this.ModifiedTime, dos);

				// int

				dos.writeInt(this.ModifiedBy);

				// int

				dos.writeInt(this.PublicationId_Old);

				// int

				dos.writeInt(this.ArticleId_Old);

				// long

				dos.writeLong(this.RightsRequired);

				// int

				dos.writeInt(this.UseId);

				// int

				dos.writeInt(this.UserId);

				// int

				dos.writeInt(this.UseLocation);

				// short

				dos.writeShort(this.UsePossessedAs);

				// short

				dos.writeShort(this.UseCopies);

				// short

				dos.writeShort(this.PageCount);

				// int

				dos.writeInt(this.DeliveryProfileId);

				// short

				dos.writeShort(this.DeliveryUrgency);

				// java.util.Date

				writeDate(this.NeededByDate, dos);

				// java.util.Date

				writeDate(this.PromisedDate, dos);

				// String

				writeString(this.IPAddress, dos);

				// String

				writeString(this.Source, dos);

				// Object

				dos.writeObject(this.FeeTransaction);

				// Object

				dos.writeObject(this.FeeCR);

				// Object

				dos.writeObject(this.FeeCRServices);

				// Object

				dos.writeObject(this.FeeFF);

				// Object

				dos.writeObject(this.FeeAdvRef);

				// Object

				dos.writeObject(this.FeeSH);

				// Object

				dos.writeObject(this.FeeOther);

				// Object

				dos.writeObject(this.FeeTax);

				// Object

				dos.writeObject(this.FeeTotal);

				// Object

				dos.writeObject(this.PayCR);

				// Object

				dos.writeObject(this.PayFF);

				// int

				dos.writeInt(this.CRCollectionId);

				// int

				dos.writeInt(this.CRAltProvId);

				// String

				writeString(this.Link, dos);

				// java.util.Date

				writeDate(this.LinkExpiration, dos);

				// int

				dos.writeInt(this.FFCollectionId);

				// int

				dos.writeInt(this.FFAltProvId);

				// String

				writeString(this.FFLocation, dos);

				// String

				writeString(this.FFCallNumber, dos);

				// short

				dos.writeShort(this.FFMethod);

				// short

				dos.writeShort(this.FFResult);

				// String

				writeString(this.CostCenter, dos);

				// String

				writeString(this.BillRef, dos);

				// String

				writeString(this.PubDescription, dos);

				// String

				writeString(this.UsageStatement, dos);

				// int

				dos.writeInt(this.ClassId);

				// int

				dos.writeInt(this.ClientId);

				// Object

				dos.writeObject(this.ExternalId);

				// short

				dos.writeShort(this.DeliveryMethod);

				// long

				dos.writeLong(this.SpecialInstruct);

				// String

				writeString(this.CustSpecialInstruct, dos);

				// Object

				dos.writeObject(this.FeeAlternate);

				// short

				dos.writeShort(this.TaxCategory);

				// String

				writeString(this.DeliveryAddr, dos);

				// String

				writeString(this.DeliveryCity, dos);

				// String

				writeString(this.DeliveryState, dos);

				// String

				writeString(this.DeliveryCountry, dos);

				// String

				writeString(this.DeliveryZip, dos);

				// String

				writeString(this.DeliveryTracking, dos);

				// java.util.Date

				writeDate(this.DeliveryTime, dos);

				// java.util.Date

				writeDate(this.OrigPromisedDate, dos);

				// long

				dos.writeLong(this.RightsGranted);

				// short

				dos.writeShort(this.TurnaroundMinutes);

				// short

				dos.writeShort(this.WorkMinutes);

				// String

				writeString(this.EncryptKey, dos);

				// short

				dos.writeShort(this.AllowedViewsOrig);

				// short

				dos.writeShort(this.AllowedViewsLeft);

				// short

				dos.writeShort(this.AllowedPrintsOrig);

				// short

				dos.writeShort(this.AllowedPrintsLeft);

				// String

				writeString(this.CRTerms, dos);

				// String

				writeString(this.PO, dos);

				// String

				writeString(this.CustOrderNum, dos);

				// Object

				dos.writeObject(this.PriceLimit);

				// String

				writeString(this.FFFileExt, dos);

				// String

				writeString(this.RefCitXml, dos);

				// String

				writeString(this.OrigCitXml, dos);

				// int

				dos.writeInt(this.SessionId);

				// String

				writeString(this.ExtOrderRef, dos);

				// int

				dos.writeInt(this.InvoiceId);

				// int

				dos.writeInt(this.ClientGroupId);

				// int

				dos.writeInt(this.StateFlags);

				// java.util.Date

				writeDate(this.ExpirationTime, dos);

				// short

				dos.writeShort(this.FFSourceType);

				// Object

				dos.writeObject(this.OtherTax);

				// int

				dos.writeInt(this.UserSector);

				// int

				dos.writeInt(this.PrevOrderId);

				// int

				dos.writeInt(this.NextOrderId);

				// String

				writeString(this.Tags, dos);

				// Object

				dos.writeObject(this.FeeAdjustment);

				// Object

				dos.writeObject(this.CreditAccountCharge);

				// int

				dos.writeInt(this.UserCreditGroupId);

				// int

				dos.writeInt(this.FFHoldingId);

				// int

				dos.writeInt(this.CRHoldingId);

				// Short

				if (this.PubYear == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.PubYear);
				}

				// Object

				dos.writeObject(this.RightsGranted2);

				// Object

				dos.writeObject(this.RightsRequired2);

				// int

				dos.writeInt(this.ContentId);

				// int

				dos.writeInt(this._PartOfContentId);

				// Object

				dos.writeObject(this.ClientCosts);

				// String

				writeString(this.UserInfoLink, dos);

				// short

				dos.writeShort(this.Partner);

				// Integer

				writeInteger(this.RelatedToOrderItemId, dos);

				// Object

				dos.writeObject(this.PriceQuote);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("OrderItemId=" + String.valueOf(OrderItemId));
			sb.append(",CartId=" + String.valueOf(CartId));
			sb.append(",Type=" + String.valueOf(Type));
			sb.append(",ItemType=" + String.valueOf(ItemType));
			sb.append(",Status=" + String.valueOf(Status));
			sb.append(",CopyrightStatus=" + String.valueOf(CopyrightStatus));
			sb.append(",CloseReason=" + String.valueOf(CloseReason));
			sb.append(",CreatedTime=" + String.valueOf(CreatedTime));
			sb.append(",CreatedBy=" + String.valueOf(CreatedBy));
			sb.append(",ModifiedTime=" + String.valueOf(ModifiedTime));
			sb.append(",ModifiedBy=" + String.valueOf(ModifiedBy));
			sb.append(",PublicationId_Old=" + String.valueOf(PublicationId_Old));
			sb.append(",ArticleId_Old=" + String.valueOf(ArticleId_Old));
			sb.append(",RightsRequired=" + String.valueOf(RightsRequired));
			sb.append(",UseId=" + String.valueOf(UseId));
			sb.append(",UserId=" + String.valueOf(UserId));
			sb.append(",UseLocation=" + String.valueOf(UseLocation));
			sb.append(",UsePossessedAs=" + String.valueOf(UsePossessedAs));
			sb.append(",UseCopies=" + String.valueOf(UseCopies));
			sb.append(",PageCount=" + String.valueOf(PageCount));
			sb.append(",DeliveryProfileId=" + String.valueOf(DeliveryProfileId));
			sb.append(",DeliveryUrgency=" + String.valueOf(DeliveryUrgency));
			sb.append(",NeededByDate=" + String.valueOf(NeededByDate));
			sb.append(",PromisedDate=" + String.valueOf(PromisedDate));
			sb.append(",IPAddress=" + IPAddress);
			sb.append(",Source=" + Source);
			sb.append(",FeeTransaction=" + String.valueOf(FeeTransaction));
			sb.append(",FeeCR=" + String.valueOf(FeeCR));
			sb.append(",FeeCRServices=" + String.valueOf(FeeCRServices));
			sb.append(",FeeFF=" + String.valueOf(FeeFF));
			sb.append(",FeeAdvRef=" + String.valueOf(FeeAdvRef));
			sb.append(",FeeSH=" + String.valueOf(FeeSH));
			sb.append(",FeeOther=" + String.valueOf(FeeOther));
			sb.append(",FeeTax=" + String.valueOf(FeeTax));
			sb.append(",FeeTotal=" + String.valueOf(FeeTotal));
			sb.append(",PayCR=" + String.valueOf(PayCR));
			sb.append(",PayFF=" + String.valueOf(PayFF));
			sb.append(",CRCollectionId=" + String.valueOf(CRCollectionId));
			sb.append(",CRAltProvId=" + String.valueOf(CRAltProvId));
			sb.append(",Link=" + Link);
			sb.append(",LinkExpiration=" + String.valueOf(LinkExpiration));
			sb.append(",FFCollectionId=" + String.valueOf(FFCollectionId));
			sb.append(",FFAltProvId=" + String.valueOf(FFAltProvId));
			sb.append(",FFLocation=" + FFLocation);
			sb.append(",FFCallNumber=" + FFCallNumber);
			sb.append(",FFMethod=" + String.valueOf(FFMethod));
			sb.append(",FFResult=" + String.valueOf(FFResult));
			sb.append(",CostCenter=" + CostCenter);
			sb.append(",BillRef=" + BillRef);
			sb.append(",PubDescription=" + PubDescription);
			sb.append(",UsageStatement=" + UsageStatement);
			sb.append(",ClassId=" + String.valueOf(ClassId));
			sb.append(",ClientId=" + String.valueOf(ClientId));
			sb.append(",ExternalId=" + String.valueOf(ExternalId));
			sb.append(",DeliveryMethod=" + String.valueOf(DeliveryMethod));
			sb.append(",SpecialInstruct=" + String.valueOf(SpecialInstruct));
			sb.append(",CustSpecialInstruct=" + CustSpecialInstruct);
			sb.append(",FeeAlternate=" + String.valueOf(FeeAlternate));
			sb.append(",TaxCategory=" + String.valueOf(TaxCategory));
			sb.append(",DeliveryAddr=" + DeliveryAddr);
			sb.append(",DeliveryCity=" + DeliveryCity);
			sb.append(",DeliveryState=" + DeliveryState);
			sb.append(",DeliveryCountry=" + DeliveryCountry);
			sb.append(",DeliveryZip=" + DeliveryZip);
			sb.append(",DeliveryTracking=" + DeliveryTracking);
			sb.append(",DeliveryTime=" + String.valueOf(DeliveryTime));
			sb.append(",OrigPromisedDate=" + String.valueOf(OrigPromisedDate));
			sb.append(",RightsGranted=" + String.valueOf(RightsGranted));
			sb.append(",TurnaroundMinutes=" + String.valueOf(TurnaroundMinutes));
			sb.append(",WorkMinutes=" + String.valueOf(WorkMinutes));
			sb.append(",EncryptKey=" + EncryptKey);
			sb.append(",AllowedViewsOrig=" + String.valueOf(AllowedViewsOrig));
			sb.append(",AllowedViewsLeft=" + String.valueOf(AllowedViewsLeft));
			sb.append(",AllowedPrintsOrig=" + String.valueOf(AllowedPrintsOrig));
			sb.append(",AllowedPrintsLeft=" + String.valueOf(AllowedPrintsLeft));
			sb.append(",CRTerms=" + CRTerms);
			sb.append(",PO=" + PO);
			sb.append(",CustOrderNum=" + CustOrderNum);
			sb.append(",PriceLimit=" + String.valueOf(PriceLimit));
			sb.append(",FFFileExt=" + FFFileExt);
			sb.append(",RefCitXml=" + RefCitXml);
			sb.append(",OrigCitXml=" + OrigCitXml);
			sb.append(",SessionId=" + String.valueOf(SessionId));
			sb.append(",ExtOrderRef=" + ExtOrderRef);
			sb.append(",InvoiceId=" + String.valueOf(InvoiceId));
			sb.append(",ClientGroupId=" + String.valueOf(ClientGroupId));
			sb.append(",StateFlags=" + String.valueOf(StateFlags));
			sb.append(",ExpirationTime=" + String.valueOf(ExpirationTime));
			sb.append(",FFSourceType=" + String.valueOf(FFSourceType));
			sb.append(",OtherTax=" + String.valueOf(OtherTax));
			sb.append(",UserSector=" + String.valueOf(UserSector));
			sb.append(",PrevOrderId=" + String.valueOf(PrevOrderId));
			sb.append(",NextOrderId=" + String.valueOf(NextOrderId));
			sb.append(",Tags=" + Tags);
			sb.append(",FeeAdjustment=" + String.valueOf(FeeAdjustment));
			sb.append(",CreditAccountCharge="
					+ String.valueOf(CreditAccountCharge));
			sb.append(",UserCreditGroupId=" + String.valueOf(UserCreditGroupId));
			sb.append(",FFHoldingId=" + String.valueOf(FFHoldingId));
			sb.append(",CRHoldingId=" + String.valueOf(CRHoldingId));
			sb.append(",PubYear=" + String.valueOf(PubYear));
			sb.append(",RightsGranted2=" + String.valueOf(RightsGranted2));
			sb.append(",RightsRequired2=" + String.valueOf(RightsRequired2));
			sb.append(",ContentId=" + String.valueOf(ContentId));
			sb.append(",_PartOfContentId=" + String.valueOf(_PartOfContentId));
			sb.append(",ClientCosts=" + String.valueOf(ClientCosts));
			sb.append(",UserInfoLink=" + UserInfoLink);
			sb.append(",Partner=" + String.valueOf(Partner));
			sb.append(",RelatedToOrderItemId="
					+ String.valueOf(RelatedToOrderItemId));
			sb.append(",PriceQuote=" + String.valueOf(PriceQuote));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_3Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDBInput_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row3Struct row3 = new row3Struct();

				/**
				 * [tDBOutput_3 begin ] start
				 */

				ok_Hash.put("tDBOutput_3", false);
				start_Hash.put("tDBOutput_3", System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tDBOutput_3");
				tStatCatcher_1Process(globalMap);

				talendStats_STATS.addMessage("begin", "tDBOutput_3");
				talendStats_STATSProcess(globalMap);

				currentComponent = "tDBOutput_3";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row3" + iterateId, 0, 0);

					}
				}

				int tos_count_tDBOutput_3 = 0;

				String dbschema_tDBOutput_3 = null;
				dbschema_tDBOutput_3 = context.data_warehouse_order_dwos_schema;

				String tableName_tDBOutput_3 = null;
				if (dbschema_tDBOutput_3 == null
						|| dbschema_tDBOutput_3.trim().length() == 0) {
					tableName_tDBOutput_3 = "dwo_rfe_orderitem";
				} else {
					tableName_tDBOutput_3 = dbschema_tDBOutput_3 + "\".\""
							+ "dwo_rfe_orderitem";
				}

				int nb_line_tDBOutput_3 = 0;
				int nb_line_update_tDBOutput_3 = 0;
				int nb_line_inserted_tDBOutput_3 = 0;
				int nb_line_deleted_tDBOutput_3 = 0;
				int nb_line_rejected_tDBOutput_3 = 0;

				int deletedCount_tDBOutput_3 = 0;
				int updatedCount_tDBOutput_3 = 0;
				int insertedCount_tDBOutput_3 = 0;
				int rejectedCount_tDBOutput_3 = 0;

				boolean whetherReject_tDBOutput_3 = false;

				java.sql.Connection conn_tDBOutput_3 = null;
				String dbUser_tDBOutput_3 = null;

				java.lang.Class.forName("org.postgresql.Driver");
				String url_tDBOutput_3 = "jdbc:postgresql://"
						+ context.data_warehouse_order_dwos_host + ":"
						+ context.data_warehouse_order_dwos_port + "/"
						+ context.data_warehouse_order_dwos_database;
				dbUser_tDBOutput_3 = context.data_warehouse_order_dwos_username;

				final String decryptedPassword_tDBOutput_3 = context.data_warehouse_order_dwos_password;

				String dbPwd_tDBOutput_3 = decryptedPassword_tDBOutput_3;

				conn_tDBOutput_3 = java.sql.DriverManager.getConnection(
						url_tDBOutput_3, dbUser_tDBOutput_3, dbPwd_tDBOutput_3);

				resourceMap.put("conn_tDBOutput_3", conn_tDBOutput_3);
				conn_tDBOutput_3.setAutoCommit(false);
				int commitEvery_tDBOutput_3 = 10000;
				int commitCounter_tDBOutput_3 = 0;

				int batchSize_tDBOutput_3 = 10000;
				int batchSizeCounter_tDBOutput_3 = 0;

				int count_tDBOutput_3 = 0;
				int rsTruncCountNumber_tDBOutput_3 = 0;
				try (java.sql.Statement stmtTruncCount_tDBOutput_3 = conn_tDBOutput_3
						.createStatement()) {
					try (java.sql.ResultSet rsTruncCount_tDBOutput_3 = stmtTruncCount_tDBOutput_3
							.executeQuery("SELECT COUNT(1) FROM \""
									+ tableName_tDBOutput_3 + "\"")) {
						if (rsTruncCount_tDBOutput_3.next()) {
							rsTruncCountNumber_tDBOutput_3 = rsTruncCount_tDBOutput_3
									.getInt(1);
						}
					}
				}
				try (java.sql.Statement stmtTrunc_tDBOutput_3 = conn_tDBOutput_3
						.createStatement()) {
					stmtTrunc_tDBOutput_3.executeUpdate("TRUNCATE TABLE \""
							+ tableName_tDBOutput_3 + "\"");
					deletedCount_tDBOutput_3 += rsTruncCountNumber_tDBOutput_3;
				}
				String insert_tDBOutput_3 = "INSERT INTO \""
						+ tableName_tDBOutput_3
						+ "\" (\"orderitemid\",\"cartid\",\"type\",\"itemtype\",\"status\",\"copyrightstatus\",\"closereason\",\"createdtime\",\"createdby\",\"modifiedtime\",\"modifiedby\",\"publicationid_old\",\"articleid_old\",\"rightsrequired\",\"useid\",\"userid\",\"uselocation\",\"usepossessedas\",\"usecopies\",\"pagecount\",\"deliveryprofileid\",\"deliveryurgency\",\"neededbydate\",\"promiseddate\",\"ipaddress\",\"source\",\"feetransaction\",\"feecr\",\"feecrservices\",\"feeff\",\"feeadvref\",\"feesh\",\"feeother\",\"feetax\",\"feetotal\",\"paycr\",\"payff\",\"crcollectionid\",\"craltprovid\",\"link\",\"linkexpiration\",\"ffcollectionid\",\"ffaltprovid\",\"fflocation\",\"ffcallnumber\",\"ffmethod\",\"ffresult\",\"costcenter\",\"billref\",\"pubdescription\",\"usagestatement\",\"classid\",\"clientid\",\"externalid\",\"deliverymethod\",\"specialinstruct\",\"custspecialinstruct\",\"feealternate\",\"taxcategory\",\"deliveryaddr\",\"deliverycity\",\"deliverystate\",\"deliverycountry\",\"deliveryzip\",\"deliverytracking\",\"deliverytime\",\"origpromiseddate\",\"rightsgranted\",\"turnaroundminutes\",\"workminutes\",\"encryptkey\",\"allowedviewsorig\",\"allowedviewsleft\",\"allowedprintsorig\",\"allowedprintsleft\",\"crterms\",\"po\",\"custordernum\",\"pricelimit\",\"fffileext\",\"refcitxml\",\"origcitxml\",\"sessionid\",\"extorderref\",\"invoiceid\",\"clientgroupid\",\"stateflags\",\"expirationtime\",\"ffsourcetype\",\"othertax\",\"usersector\",\"prevorderid\",\"nextorderid\",\"tags\",\"feeadjustment\",\"creditaccountcharge\",\"usercreditgroupid\",\"ffholdingid\",\"crholdingid\",\"pubyear\",\"rightsgranted2\",\"rightsrequired2\",\"contentid\",\"partofcontentid\",\"clientcosts\",\"userinfolink\",\"partner\",\"relatedtoorderitemid\",\"pricequote\") VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

				java.sql.PreparedStatement pstmt_tDBOutput_3 = conn_tDBOutput_3
						.prepareStatement(insert_tDBOutput_3);
				resourceMap.put("pstmt_tDBOutput_3", pstmt_tDBOutput_3);

				/**
				 * [tDBOutput_3 begin ] stop
				 */

				/**
				 * [tDBInput_3 begin ] start
				 */

				ok_Hash.put("tDBInput_3", false);
				start_Hash.put("tDBInput_3", System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tDBInput_3");
				tStatCatcher_1Process(globalMap);

				talendStats_STATS.addMessage("begin", "tDBInput_3");
				talendStats_STATSProcess(globalMap);

				currentComponent = "tDBInput_3";

				int tos_count_tDBInput_3 = 0;

				org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_3 = org.talend.designer.components.util.mssql.MSSqlUtilFactory
						.getMSSqlGenerateTimestampUtil();

				java.util.List<String> talendToDBList_tDBInput_3 = new java.util.ArrayList();
				String[] talendToDBArray_tDBInput_3 = new String[] { "FLOAT",
						"NUMERIC", "NUMERIC IDENTITY", "DECIMAL",
						"DECIMAL IDENTITY", "REAL" };
				java.util.Collections.addAll(talendToDBList_tDBInput_3,
						talendToDBArray_tDBInput_3);
				int nb_line_tDBInput_3 = 0;
				java.sql.Connection conn_tDBInput_3 = null;
				conn_tDBInput_3 = (java.sql.Connection) globalMap
						.get("conn_tDBConnection_1");
				String dbschema_tDBInput_3 = (String) globalMap
						.get("dbschema_tDBConnection_1");

				java.sql.Statement stmt_tDBInput_3 = conn_tDBInput_3
						.createStatement();

				String dbquery_tDBInput_3 = "SELECT * FROM OrderItem\nWHERE CreatedTime > '2017-06-30 23:59:59'";

				globalMap.put("tDBInput_3_QUERY", dbquery_tDBInput_3);
				java.sql.ResultSet rs_tDBInput_3 = null;

				try {
					rs_tDBInput_3 = stmt_tDBInput_3
							.executeQuery(dbquery_tDBInput_3);
					java.sql.ResultSetMetaData rsmd_tDBInput_3 = rs_tDBInput_3
							.getMetaData();
					int colQtyInRs_tDBInput_3 = rsmd_tDBInput_3
							.getColumnCount();

					String tmpContent_tDBInput_3 = null;

					while (rs_tDBInput_3.next()) {
						nb_line_tDBInput_3++;

						if (colQtyInRs_tDBInput_3 < 1) {
							row3.OrderItemId = 0;
						} else {

							if (rs_tDBInput_3.getObject(1) != null) {
								row3.OrderItemId = rs_tDBInput_3.getInt(1);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_3 < 2) {
							row3.CartId = 0;
						} else {

							if (rs_tDBInput_3.getObject(2) != null) {
								row3.CartId = rs_tDBInput_3.getInt(2);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_3 < 3) {
							row3.Type = 0;
						} else {

							if (rs_tDBInput_3.getObject(3) != null) {
								row3.Type = rs_tDBInput_3.getShort(3);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_3 < 4) {
							row3.ItemType = 0;
						} else {

							if (rs_tDBInput_3.getObject(4) != null) {
								row3.ItemType = rs_tDBInput_3.getShort(4);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_3 < 5) {
							row3.Status = 0;
						} else {

							if (rs_tDBInput_3.getObject(5) != null) {
								row3.Status = rs_tDBInput_3.getShort(5);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_3 < 6) {
							row3.CopyrightStatus = 0;
						} else {

							if (rs_tDBInput_3.getObject(6) != null) {
								row3.CopyrightStatus = rs_tDBInput_3
										.getShort(6);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_3 < 7) {
							row3.CloseReason = 0;
						} else {

							if (rs_tDBInput_3.getObject(7) != null) {
								row3.CloseReason = rs_tDBInput_3.getShort(7);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_3 < 8) {
							row3.CreatedTime = null;
						} else {

							row3.CreatedTime = mssqlGTU_tDBInput_3.getDate(
									rsmd_tDBInput_3, rs_tDBInput_3, 8);

						}
						if (colQtyInRs_tDBInput_3 < 9) {
							row3.CreatedBy = 0;
						} else {

							if (rs_tDBInput_3.getObject(9) != null) {
								row3.CreatedBy = rs_tDBInput_3.getInt(9);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_3 < 10) {
							row3.ModifiedTime = null;
						} else {

							row3.ModifiedTime = mssqlGTU_tDBInput_3.getDate(
									rsmd_tDBInput_3, rs_tDBInput_3, 10);

						}
						if (colQtyInRs_tDBInput_3 < 11) {
							row3.ModifiedBy = 0;
						} else {

							if (rs_tDBInput_3.getObject(11) != null) {
								row3.ModifiedBy = rs_tDBInput_3.getInt(11);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_3 < 12) {
							row3.PublicationId_Old = 0;
						} else {

							if (rs_tDBInput_3.getObject(12) != null) {
								row3.PublicationId_Old = rs_tDBInput_3
										.getInt(12);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_3 < 13) {
							row3.ArticleId_Old = 0;
						} else {

							if (rs_tDBInput_3.getObject(13) != null) {
								row3.ArticleId_Old = rs_tDBInput_3.getInt(13);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_3 < 14) {
							row3.RightsRequired = 0;
						} else {

							if (rs_tDBInput_3.getObject(14) != null) {
								row3.RightsRequired = rs_tDBInput_3.getLong(14);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_3 < 15) {
							row3.UseId = 0;
						} else {

							if (rs_tDBInput_3.getObject(15) != null) {
								row3.UseId = rs_tDBInput_3.getInt(15);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_3 < 16) {
							row3.UserId = 0;
						} else {

							if (rs_tDBInput_3.getObject(16) != null) {
								row3.UserId = rs_tDBInput_3.getInt(16);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_3 < 17) {
							row3.UseLocation = 0;
						} else {

							if (rs_tDBInput_3.getObject(17) != null) {
								row3.UseLocation = rs_tDBInput_3.getInt(17);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_3 < 18) {
							row3.UsePossessedAs = 0;
						} else {

							if (rs_tDBInput_3.getObject(18) != null) {
								row3.UsePossessedAs = rs_tDBInput_3
										.getShort(18);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_3 < 19) {
							row3.UseCopies = 0;
						} else {

							if (rs_tDBInput_3.getObject(19) != null) {
								row3.UseCopies = rs_tDBInput_3.getShort(19);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_3 < 20) {
							row3.PageCount = 0;
						} else {

							if (rs_tDBInput_3.getObject(20) != null) {
								row3.PageCount = rs_tDBInput_3.getShort(20);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_3 < 21) {
							row3.DeliveryProfileId = 0;
						} else {

							if (rs_tDBInput_3.getObject(21) != null) {
								row3.DeliveryProfileId = rs_tDBInput_3
										.getInt(21);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_3 < 22) {
							row3.DeliveryUrgency = 0;
						} else {

							if (rs_tDBInput_3.getObject(22) != null) {
								row3.DeliveryUrgency = rs_tDBInput_3
										.getShort(22);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_3 < 23) {
							row3.NeededByDate = null;
						} else {

							row3.NeededByDate = mssqlGTU_tDBInput_3.getDate(
									rsmd_tDBInput_3, rs_tDBInput_3, 23);

						}
						if (colQtyInRs_tDBInput_3 < 24) {
							row3.PromisedDate = null;
						} else {

							row3.PromisedDate = mssqlGTU_tDBInput_3.getDate(
									rsmd_tDBInput_3, rs_tDBInput_3, 24);

						}
						if (colQtyInRs_tDBInput_3 < 25) {
							row3.IPAddress = null;
						} else {

							tmpContent_tDBInput_3 = rs_tDBInput_3.getString(25);
							if (tmpContent_tDBInput_3 != null) {
								if (talendToDBList_tDBInput_3
										.contains(rsmd_tDBInput_3
												.getColumnTypeName(25)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row3.IPAddress = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_3);
								} else {
									row3.IPAddress = tmpContent_tDBInput_3;
								}
							} else {
								row3.IPAddress = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 26) {
							row3.Source = null;
						} else {

							tmpContent_tDBInput_3 = rs_tDBInput_3.getString(26);
							if (tmpContent_tDBInput_3 != null) {
								if (talendToDBList_tDBInput_3
										.contains(rsmd_tDBInput_3
												.getColumnTypeName(26)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row3.Source = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_3);
								} else {
									row3.Source = tmpContent_tDBInput_3;
								}
							} else {
								row3.Source = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 27) {
							row3.FeeTransaction = null;
						} else {

							if (rs_tDBInput_3.getObject(27) != null) {
								row3.FeeTransaction = rs_tDBInput_3
										.getObject(27);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_3 < 28) {
							row3.FeeCR = null;
						} else {

							if (rs_tDBInput_3.getObject(28) != null) {
								row3.FeeCR = rs_tDBInput_3.getObject(28);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_3 < 29) {
							row3.FeeCRServices = null;
						} else {

							if (rs_tDBInput_3.getObject(29) != null) {
								row3.FeeCRServices = rs_tDBInput_3
										.getObject(29);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_3 < 30) {
							row3.FeeFF = null;
						} else {

							if (rs_tDBInput_3.getObject(30) != null) {
								row3.FeeFF = rs_tDBInput_3.getObject(30);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_3 < 31) {
							row3.FeeAdvRef = null;
						} else {

							if (rs_tDBInput_3.getObject(31) != null) {
								row3.FeeAdvRef = rs_tDBInput_3.getObject(31);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_3 < 32) {
							row3.FeeSH = null;
						} else {

							if (rs_tDBInput_3.getObject(32) != null) {
								row3.FeeSH = rs_tDBInput_3.getObject(32);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_3 < 33) {
							row3.FeeOther = null;
						} else {

							if (rs_tDBInput_3.getObject(33) != null) {
								row3.FeeOther = rs_tDBInput_3.getObject(33);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_3 < 34) {
							row3.FeeTax = null;
						} else {

							if (rs_tDBInput_3.getObject(34) != null) {
								row3.FeeTax = rs_tDBInput_3.getObject(34);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_3 < 35) {
							row3.FeeTotal = null;
						} else {

							if (rs_tDBInput_3.getObject(35) != null) {
								row3.FeeTotal = rs_tDBInput_3.getObject(35);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_3 < 36) {
							row3.PayCR = null;
						} else {

							if (rs_tDBInput_3.getObject(36) != null) {
								row3.PayCR = rs_tDBInput_3.getObject(36);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_3 < 37) {
							row3.PayFF = null;
						} else {

							if (rs_tDBInput_3.getObject(37) != null) {
								row3.PayFF = rs_tDBInput_3.getObject(37);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_3 < 38) {
							row3.CRCollectionId = 0;
						} else {

							if (rs_tDBInput_3.getObject(38) != null) {
								row3.CRCollectionId = rs_tDBInput_3.getInt(38);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_3 < 39) {
							row3.CRAltProvId = 0;
						} else {

							if (rs_tDBInput_3.getObject(39) != null) {
								row3.CRAltProvId = rs_tDBInput_3.getInt(39);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_3 < 40) {
							row3.Link = null;
						} else {

							tmpContent_tDBInput_3 = rs_tDBInput_3.getString(40);
							if (tmpContent_tDBInput_3 != null) {
								if (talendToDBList_tDBInput_3
										.contains(rsmd_tDBInput_3
												.getColumnTypeName(40)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row3.Link = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_3);
								} else {
									row3.Link = tmpContent_tDBInput_3;
								}
							} else {
								row3.Link = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 41) {
							row3.LinkExpiration = null;
						} else {

							row3.LinkExpiration = mssqlGTU_tDBInput_3.getDate(
									rsmd_tDBInput_3, rs_tDBInput_3, 41);

						}
						if (colQtyInRs_tDBInput_3 < 42) {
							row3.FFCollectionId = 0;
						} else {

							if (rs_tDBInput_3.getObject(42) != null) {
								row3.FFCollectionId = rs_tDBInput_3.getInt(42);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_3 < 43) {
							row3.FFAltProvId = 0;
						} else {

							if (rs_tDBInput_3.getObject(43) != null) {
								row3.FFAltProvId = rs_tDBInput_3.getInt(43);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_3 < 44) {
							row3.FFLocation = null;
						} else {

							tmpContent_tDBInput_3 = rs_tDBInput_3.getString(44);
							if (tmpContent_tDBInput_3 != null) {
								if (talendToDBList_tDBInput_3
										.contains(rsmd_tDBInput_3
												.getColumnTypeName(44)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row3.FFLocation = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_3);
								} else {
									row3.FFLocation = tmpContent_tDBInput_3;
								}
							} else {
								row3.FFLocation = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 45) {
							row3.FFCallNumber = null;
						} else {

							tmpContent_tDBInput_3 = rs_tDBInput_3.getString(45);
							if (tmpContent_tDBInput_3 != null) {
								if (talendToDBList_tDBInput_3
										.contains(rsmd_tDBInput_3
												.getColumnTypeName(45)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row3.FFCallNumber = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_3);
								} else {
									row3.FFCallNumber = tmpContent_tDBInput_3;
								}
							} else {
								row3.FFCallNumber = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 46) {
							row3.FFMethod = 0;
						} else {

							if (rs_tDBInput_3.getObject(46) != null) {
								row3.FFMethod = rs_tDBInput_3.getShort(46);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_3 < 47) {
							row3.FFResult = 0;
						} else {

							if (rs_tDBInput_3.getObject(47) != null) {
								row3.FFResult = rs_tDBInput_3.getShort(47);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_3 < 48) {
							row3.CostCenter = null;
						} else {

							tmpContent_tDBInput_3 = rs_tDBInput_3.getString(48);
							if (tmpContent_tDBInput_3 != null) {
								if (talendToDBList_tDBInput_3
										.contains(rsmd_tDBInput_3
												.getColumnTypeName(48)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row3.CostCenter = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_3);
								} else {
									row3.CostCenter = tmpContent_tDBInput_3;
								}
							} else {
								row3.CostCenter = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 49) {
							row3.BillRef = null;
						} else {

							tmpContent_tDBInput_3 = rs_tDBInput_3.getString(49);
							if (tmpContent_tDBInput_3 != null) {
								if (talendToDBList_tDBInput_3
										.contains(rsmd_tDBInput_3
												.getColumnTypeName(49)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row3.BillRef = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_3);
								} else {
									row3.BillRef = tmpContent_tDBInput_3;
								}
							} else {
								row3.BillRef = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 50) {
							row3.PubDescription = null;
						} else {

							tmpContent_tDBInput_3 = rs_tDBInput_3.getString(50);
							if (tmpContent_tDBInput_3 != null) {
								if (talendToDBList_tDBInput_3
										.contains(rsmd_tDBInput_3
												.getColumnTypeName(50)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row3.PubDescription = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_3);
								} else {
									row3.PubDescription = tmpContent_tDBInput_3;
								}
							} else {
								row3.PubDescription = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 51) {
							row3.UsageStatement = null;
						} else {

							tmpContent_tDBInput_3 = rs_tDBInput_3.getString(51);
							if (tmpContent_tDBInput_3 != null) {
								if (talendToDBList_tDBInput_3
										.contains(rsmd_tDBInput_3
												.getColumnTypeName(51)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row3.UsageStatement = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_3);
								} else {
									row3.UsageStatement = tmpContent_tDBInput_3;
								}
							} else {
								row3.UsageStatement = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 52) {
							row3.ClassId = 0;
						} else {

							if (rs_tDBInput_3.getObject(52) != null) {
								row3.ClassId = rs_tDBInput_3.getInt(52);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_3 < 53) {
							row3.ClientId = 0;
						} else {

							if (rs_tDBInput_3.getObject(53) != null) {
								row3.ClientId = rs_tDBInput_3.getInt(53);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_3 < 54) {
							row3.ExternalId = null;
						} else {

							if (rs_tDBInput_3.getObject(54) != null) {
								row3.ExternalId = rs_tDBInput_3.getObject(54);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_3 < 55) {
							row3.DeliveryMethod = 0;
						} else {

							if (rs_tDBInput_3.getObject(55) != null) {
								row3.DeliveryMethod = rs_tDBInput_3
										.getShort(55);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_3 < 56) {
							row3.SpecialInstruct = 0;
						} else {

							if (rs_tDBInput_3.getObject(56) != null) {
								row3.SpecialInstruct = rs_tDBInput_3
										.getLong(56);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_3 < 57) {
							row3.CustSpecialInstruct = null;
						} else {

							tmpContent_tDBInput_3 = rs_tDBInput_3.getString(57);
							if (tmpContent_tDBInput_3 != null) {
								if (talendToDBList_tDBInput_3
										.contains(rsmd_tDBInput_3
												.getColumnTypeName(57)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row3.CustSpecialInstruct = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_3);
								} else {
									row3.CustSpecialInstruct = tmpContent_tDBInput_3;
								}
							} else {
								row3.CustSpecialInstruct = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 58) {
							row3.FeeAlternate = null;
						} else {

							if (rs_tDBInput_3.getObject(58) != null) {
								row3.FeeAlternate = rs_tDBInput_3.getObject(58);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_3 < 59) {
							row3.TaxCategory = 0;
						} else {

							if (rs_tDBInput_3.getObject(59) != null) {
								row3.TaxCategory = rs_tDBInput_3.getShort(59);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_3 < 60) {
							row3.DeliveryAddr = null;
						} else {

							tmpContent_tDBInput_3 = rs_tDBInput_3.getString(60);
							if (tmpContent_tDBInput_3 != null) {
								if (talendToDBList_tDBInput_3
										.contains(rsmd_tDBInput_3
												.getColumnTypeName(60)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row3.DeliveryAddr = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_3);
								} else {
									row3.DeliveryAddr = tmpContent_tDBInput_3;
								}
							} else {
								row3.DeliveryAddr = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 61) {
							row3.DeliveryCity = null;
						} else {

							tmpContent_tDBInput_3 = rs_tDBInput_3.getString(61);
							if (tmpContent_tDBInput_3 != null) {
								if (talendToDBList_tDBInput_3
										.contains(rsmd_tDBInput_3
												.getColumnTypeName(61)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row3.DeliveryCity = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_3);
								} else {
									row3.DeliveryCity = tmpContent_tDBInput_3;
								}
							} else {
								row3.DeliveryCity = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 62) {
							row3.DeliveryState = null;
						} else {

							tmpContent_tDBInput_3 = rs_tDBInput_3.getString(62);
							if (tmpContent_tDBInput_3 != null) {
								if (talendToDBList_tDBInput_3
										.contains(rsmd_tDBInput_3
												.getColumnTypeName(62)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row3.DeliveryState = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_3);
								} else {
									row3.DeliveryState = tmpContent_tDBInput_3;
								}
							} else {
								row3.DeliveryState = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 63) {
							row3.DeliveryCountry = null;
						} else {

							tmpContent_tDBInput_3 = rs_tDBInput_3.getString(63);
							if (tmpContent_tDBInput_3 != null) {
								if (talendToDBList_tDBInput_3
										.contains(rsmd_tDBInput_3
												.getColumnTypeName(63)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row3.DeliveryCountry = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_3);
								} else {
									row3.DeliveryCountry = tmpContent_tDBInput_3;
								}
							} else {
								row3.DeliveryCountry = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 64) {
							row3.DeliveryZip = null;
						} else {

							tmpContent_tDBInput_3 = rs_tDBInput_3.getString(64);
							if (tmpContent_tDBInput_3 != null) {
								if (talendToDBList_tDBInput_3
										.contains(rsmd_tDBInput_3
												.getColumnTypeName(64)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row3.DeliveryZip = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_3);
								} else {
									row3.DeliveryZip = tmpContent_tDBInput_3;
								}
							} else {
								row3.DeliveryZip = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 65) {
							row3.DeliveryTracking = null;
						} else {

							tmpContent_tDBInput_3 = rs_tDBInput_3.getString(65);
							if (tmpContent_tDBInput_3 != null) {
								if (talendToDBList_tDBInput_3
										.contains(rsmd_tDBInput_3
												.getColumnTypeName(65)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row3.DeliveryTracking = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_3);
								} else {
									row3.DeliveryTracking = tmpContent_tDBInput_3;
								}
							} else {
								row3.DeliveryTracking = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 66) {
							row3.DeliveryTime = null;
						} else {

							row3.DeliveryTime = mssqlGTU_tDBInput_3.getDate(
									rsmd_tDBInput_3, rs_tDBInput_3, 66);

						}
						if (colQtyInRs_tDBInput_3 < 67) {
							row3.OrigPromisedDate = null;
						} else {

							row3.OrigPromisedDate = mssqlGTU_tDBInput_3
									.getDate(rsmd_tDBInput_3, rs_tDBInput_3, 67);

						}
						if (colQtyInRs_tDBInput_3 < 68) {
							row3.RightsGranted = 0;
						} else {

							if (rs_tDBInput_3.getObject(68) != null) {
								row3.RightsGranted = rs_tDBInput_3.getLong(68);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_3 < 69) {
							row3.TurnaroundMinutes = 0;
						} else {

							if (rs_tDBInput_3.getObject(69) != null) {
								row3.TurnaroundMinutes = rs_tDBInput_3
										.getShort(69);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_3 < 70) {
							row3.WorkMinutes = 0;
						} else {

							if (rs_tDBInput_3.getObject(70) != null) {
								row3.WorkMinutes = rs_tDBInput_3.getShort(70);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_3 < 71) {
							row3.EncryptKey = null;
						} else {

							tmpContent_tDBInput_3 = rs_tDBInput_3.getString(71);
							if (tmpContent_tDBInput_3 != null) {
								if (talendToDBList_tDBInput_3
										.contains(rsmd_tDBInput_3
												.getColumnTypeName(71)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row3.EncryptKey = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_3);
								} else {
									row3.EncryptKey = tmpContent_tDBInput_3;
								}
							} else {
								row3.EncryptKey = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 72) {
							row3.AllowedViewsOrig = 0;
						} else {

							if (rs_tDBInput_3.getObject(72) != null) {
								row3.AllowedViewsOrig = rs_tDBInput_3
										.getShort(72);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_3 < 73) {
							row3.AllowedViewsLeft = 0;
						} else {

							if (rs_tDBInput_3.getObject(73) != null) {
								row3.AllowedViewsLeft = rs_tDBInput_3
										.getShort(73);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_3 < 74) {
							row3.AllowedPrintsOrig = 0;
						} else {

							if (rs_tDBInput_3.getObject(74) != null) {
								row3.AllowedPrintsOrig = rs_tDBInput_3
										.getShort(74);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_3 < 75) {
							row3.AllowedPrintsLeft = 0;
						} else {

							if (rs_tDBInput_3.getObject(75) != null) {
								row3.AllowedPrintsLeft = rs_tDBInput_3
										.getShort(75);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_3 < 76) {
							row3.CRTerms = null;
						} else {

							tmpContent_tDBInput_3 = rs_tDBInput_3.getString(76);
							if (tmpContent_tDBInput_3 != null) {
								if (talendToDBList_tDBInput_3
										.contains(rsmd_tDBInput_3
												.getColumnTypeName(76)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row3.CRTerms = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_3);
								} else {
									row3.CRTerms = tmpContent_tDBInput_3;
								}
							} else {
								row3.CRTerms = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 77) {
							row3.PO = null;
						} else {

							tmpContent_tDBInput_3 = rs_tDBInput_3.getString(77);
							if (tmpContent_tDBInput_3 != null) {
								if (talendToDBList_tDBInput_3
										.contains(rsmd_tDBInput_3
												.getColumnTypeName(77)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row3.PO = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_3);
								} else {
									row3.PO = tmpContent_tDBInput_3;
								}
							} else {
								row3.PO = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 78) {
							row3.CustOrderNum = null;
						} else {

							tmpContent_tDBInput_3 = rs_tDBInput_3.getString(78);
							if (tmpContent_tDBInput_3 != null) {
								if (talendToDBList_tDBInput_3
										.contains(rsmd_tDBInput_3
												.getColumnTypeName(78)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row3.CustOrderNum = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_3);
								} else {
									row3.CustOrderNum = tmpContent_tDBInput_3;
								}
							} else {
								row3.CustOrderNum = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 79) {
							row3.PriceLimit = null;
						} else {

							if (rs_tDBInput_3.getObject(79) != null) {
								row3.PriceLimit = rs_tDBInput_3.getObject(79);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_3 < 80) {
							row3.FFFileExt = null;
						} else {

							tmpContent_tDBInput_3 = rs_tDBInput_3.getString(80);
							if (tmpContent_tDBInput_3 != null) {
								if (talendToDBList_tDBInput_3
										.contains(rsmd_tDBInput_3
												.getColumnTypeName(80)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row3.FFFileExt = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_3);
								} else {
									row3.FFFileExt = tmpContent_tDBInput_3;
								}
							} else {
								row3.FFFileExt = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 81) {
							row3.RefCitXml = null;
						} else {

							tmpContent_tDBInput_3 = rs_tDBInput_3.getString(81);
							if (tmpContent_tDBInput_3 != null) {
								if (talendToDBList_tDBInput_3
										.contains(rsmd_tDBInput_3
												.getColumnTypeName(81)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row3.RefCitXml = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_3);
								} else {
									row3.RefCitXml = tmpContent_tDBInput_3;
								}
							} else {
								row3.RefCitXml = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 82) {
							row3.OrigCitXml = null;
						} else {

							tmpContent_tDBInput_3 = rs_tDBInput_3.getString(82);
							if (tmpContent_tDBInput_3 != null) {
								if (talendToDBList_tDBInput_3
										.contains(rsmd_tDBInput_3
												.getColumnTypeName(82)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row3.OrigCitXml = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_3);
								} else {
									row3.OrigCitXml = tmpContent_tDBInput_3;
								}
							} else {
								row3.OrigCitXml = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 83) {
							row3.SessionId = 0;
						} else {

							if (rs_tDBInput_3.getObject(83) != null) {
								row3.SessionId = rs_tDBInput_3.getInt(83);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_3 < 84) {
							row3.ExtOrderRef = null;
						} else {

							tmpContent_tDBInput_3 = rs_tDBInput_3.getString(84);
							if (tmpContent_tDBInput_3 != null) {
								if (talendToDBList_tDBInput_3
										.contains(rsmd_tDBInput_3
												.getColumnTypeName(84)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row3.ExtOrderRef = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_3);
								} else {
									row3.ExtOrderRef = tmpContent_tDBInput_3;
								}
							} else {
								row3.ExtOrderRef = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 85) {
							row3.InvoiceId = 0;
						} else {

							if (rs_tDBInput_3.getObject(85) != null) {
								row3.InvoiceId = rs_tDBInput_3.getInt(85);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_3 < 86) {
							row3.ClientGroupId = 0;
						} else {

							if (rs_tDBInput_3.getObject(86) != null) {
								row3.ClientGroupId = rs_tDBInput_3.getInt(86);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_3 < 87) {
							row3.StateFlags = 0;
						} else {

							if (rs_tDBInput_3.getObject(87) != null) {
								row3.StateFlags = rs_tDBInput_3.getInt(87);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_3 < 88) {
							row3.ExpirationTime = null;
						} else {

							row3.ExpirationTime = mssqlGTU_tDBInput_3.getDate(
									rsmd_tDBInput_3, rs_tDBInput_3, 88);

						}
						if (colQtyInRs_tDBInput_3 < 89) {
							row3.FFSourceType = 0;
						} else {

							if (rs_tDBInput_3.getObject(89) != null) {
								row3.FFSourceType = rs_tDBInput_3.getShort(89);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_3 < 90) {
							row3.OtherTax = null;
						} else {

							if (rs_tDBInput_3.getObject(90) != null) {
								row3.OtherTax = rs_tDBInput_3.getObject(90);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_3 < 91) {
							row3.UserSector = 0;
						} else {

							if (rs_tDBInput_3.getObject(91) != null) {
								row3.UserSector = rs_tDBInput_3.getInt(91);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_3 < 92) {
							row3.PrevOrderId = 0;
						} else {

							if (rs_tDBInput_3.getObject(92) != null) {
								row3.PrevOrderId = rs_tDBInput_3.getInt(92);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_3 < 93) {
							row3.NextOrderId = 0;
						} else {

							if (rs_tDBInput_3.getObject(93) != null) {
								row3.NextOrderId = rs_tDBInput_3.getInt(93);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_3 < 94) {
							row3.Tags = null;
						} else {

							tmpContent_tDBInput_3 = rs_tDBInput_3.getString(94);
							if (tmpContent_tDBInput_3 != null) {
								if (talendToDBList_tDBInput_3
										.contains(rsmd_tDBInput_3
												.getColumnTypeName(94)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row3.Tags = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_3);
								} else {
									row3.Tags = tmpContent_tDBInput_3;
								}
							} else {
								row3.Tags = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 95) {
							row3.FeeAdjustment = null;
						} else {

							if (rs_tDBInput_3.getObject(95) != null) {
								row3.FeeAdjustment = rs_tDBInput_3
										.getObject(95);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_3 < 96) {
							row3.CreditAccountCharge = null;
						} else {

							if (rs_tDBInput_3.getObject(96) != null) {
								row3.CreditAccountCharge = rs_tDBInput_3
										.getObject(96);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_3 < 97) {
							row3.UserCreditGroupId = 0;
						} else {

							if (rs_tDBInput_3.getObject(97) != null) {
								row3.UserCreditGroupId = rs_tDBInput_3
										.getInt(97);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_3 < 98) {
							row3.FFHoldingId = 0;
						} else {

							if (rs_tDBInput_3.getObject(98) != null) {
								row3.FFHoldingId = rs_tDBInput_3.getInt(98);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_3 < 99) {
							row3.CRHoldingId = 0;
						} else {

							if (rs_tDBInput_3.getObject(99) != null) {
								row3.CRHoldingId = rs_tDBInput_3.getInt(99);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_3 < 100) {
							row3.PubYear = null;
						} else {

							if (rs_tDBInput_3.getObject(100) != null) {
								row3.PubYear = rs_tDBInput_3.getShort(100);
							} else {
								row3.PubYear = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 101) {
							row3.RightsGranted2 = null;
						} else {

							if (rs_tDBInput_3.getObject(101) != null) {
								row3.RightsGranted2 = rs_tDBInput_3
										.getObject(101);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_3 < 102) {
							row3.RightsRequired2 = null;
						} else {

							if (rs_tDBInput_3.getObject(102) != null) {
								row3.RightsRequired2 = rs_tDBInput_3
										.getObject(102);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_3 < 103) {
							row3.ContentId = 0;
						} else {

							if (rs_tDBInput_3.getObject(103) != null) {
								row3.ContentId = rs_tDBInput_3.getInt(103);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_3 < 104) {
							row3._PartOfContentId = 0;
						} else {

							if (rs_tDBInput_3.getObject(104) != null) {
								row3._PartOfContentId = rs_tDBInput_3
										.getInt(104);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_3 < 105) {
							row3.ClientCosts = null;
						} else {

							if (rs_tDBInput_3.getObject(105) != null) {
								row3.ClientCosts = rs_tDBInput_3.getObject(105);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_3 < 106) {
							row3.UserInfoLink = null;
						} else {

							tmpContent_tDBInput_3 = rs_tDBInput_3
									.getString(106);
							if (tmpContent_tDBInput_3 != null) {
								if (talendToDBList_tDBInput_3
										.contains(rsmd_tDBInput_3
												.getColumnTypeName(106)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row3.UserInfoLink = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_3);
								} else {
									row3.UserInfoLink = tmpContent_tDBInput_3;
								}
							} else {
								row3.UserInfoLink = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 107) {
							row3.Partner = 0;
						} else {

							if (rs_tDBInput_3.getObject(107) != null) {
								row3.Partner = rs_tDBInput_3.getShort(107);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_3 < 108) {
							row3.RelatedToOrderItemId = null;
						} else {

							if (rs_tDBInput_3.getObject(108) != null) {
								row3.RelatedToOrderItemId = rs_tDBInput_3
										.getInt(108);
							} else {
								row3.RelatedToOrderItemId = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 109) {
							row3.PriceQuote = null;
						} else {

							if (rs_tDBInput_3.getObject(109) != null) {
								row3.PriceQuote = rs_tDBInput_3.getObject(109);
							} else {
								row3.PriceQuote = null;
							}
						}

						/**
						 * [tDBInput_3 begin ] stop
						 */

						/**
						 * [tDBInput_3 main ] start
						 */

						currentComponent = "tDBInput_3";

						tos_count_tDBInput_3++;

						/**
						 * [tDBInput_3 main ] stop
						 */

						/**
						 * [tDBInput_3 process_data_begin ] start
						 */

						currentComponent = "tDBInput_3";

						/**
						 * [tDBInput_3 process_data_begin ] stop
						 */

						/**
						 * [tDBOutput_3 main ] start
						 */

						currentComponent = "tDBOutput_3";

						// row3
						// row3

						if (execStat) {
							runStat.updateStatOnConnection("row3" + iterateId,
									1, 1);
						}

						whetherReject_tDBOutput_3 = false;
						pstmt_tDBOutput_3.setInt(1, row3.OrderItemId);

						pstmt_tDBOutput_3.setInt(2, row3.CartId);

						pstmt_tDBOutput_3.setShort(3, row3.Type);

						pstmt_tDBOutput_3.setShort(4, row3.ItemType);

						pstmt_tDBOutput_3.setShort(5, row3.Status);

						pstmt_tDBOutput_3.setShort(6, row3.CopyrightStatus);

						pstmt_tDBOutput_3.setShort(7, row3.CloseReason);

						if (row3.CreatedTime != null) {
							pstmt_tDBOutput_3.setTimestamp(
									8,
									new java.sql.Timestamp(row3.CreatedTime
											.getTime()));
						} else {
							pstmt_tDBOutput_3.setNull(8,
									java.sql.Types.TIMESTAMP);
						}

						pstmt_tDBOutput_3.setInt(9, row3.CreatedBy);

						if (row3.ModifiedTime != null) {
							pstmt_tDBOutput_3.setTimestamp(
									10,
									new java.sql.Timestamp(row3.ModifiedTime
											.getTime()));
						} else {
							pstmt_tDBOutput_3.setNull(10,
									java.sql.Types.TIMESTAMP);
						}

						pstmt_tDBOutput_3.setInt(11, row3.ModifiedBy);

						pstmt_tDBOutput_3.setInt(12, row3.PublicationId_Old);

						pstmt_tDBOutput_3.setInt(13, row3.ArticleId_Old);

						pstmt_tDBOutput_3.setLong(14, row3.RightsRequired);

						pstmt_tDBOutput_3.setInt(15, row3.UseId);

						pstmt_tDBOutput_3.setInt(16, row3.UserId);

						pstmt_tDBOutput_3.setInt(17, row3.UseLocation);

						pstmt_tDBOutput_3.setShort(18, row3.UsePossessedAs);

						pstmt_tDBOutput_3.setShort(19, row3.UseCopies);

						pstmt_tDBOutput_3.setShort(20, row3.PageCount);

						pstmt_tDBOutput_3.setInt(21, row3.DeliveryProfileId);

						pstmt_tDBOutput_3.setShort(22, row3.DeliveryUrgency);

						if (row3.NeededByDate != null) {
							pstmt_tDBOutput_3.setTimestamp(
									23,
									new java.sql.Timestamp(row3.NeededByDate
											.getTime()));
						} else {
							pstmt_tDBOutput_3.setNull(23,
									java.sql.Types.TIMESTAMP);
						}

						if (row3.PromisedDate != null) {
							pstmt_tDBOutput_3.setTimestamp(
									24,
									new java.sql.Timestamp(row3.PromisedDate
											.getTime()));
						} else {
							pstmt_tDBOutput_3.setNull(24,
									java.sql.Types.TIMESTAMP);
						}

						if (row3.IPAddress == null) {
							pstmt_tDBOutput_3.setNull(25,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_3.setString(25, row3.IPAddress);
						}

						if (row3.Source == null) {
							pstmt_tDBOutput_3.setNull(26,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_3.setString(26, row3.Source);
						}

						if (row3.FeeTransaction == null) {
							pstmt_tDBOutput_3.setNull(27, java.sql.Types.OTHER);
						} else {
							pstmt_tDBOutput_3
									.setObject(27, row3.FeeTransaction);
						}

						if (row3.FeeCR == null) {
							pstmt_tDBOutput_3.setNull(28, java.sql.Types.OTHER);
						} else {
							pstmt_tDBOutput_3.setObject(28, row3.FeeCR);
						}

						if (row3.FeeCRServices == null) {
							pstmt_tDBOutput_3.setNull(29, java.sql.Types.OTHER);
						} else {
							pstmt_tDBOutput_3.setObject(29, row3.FeeCRServices);
						}

						if (row3.FeeFF == null) {
							pstmt_tDBOutput_3.setNull(30, java.sql.Types.OTHER);
						} else {
							pstmt_tDBOutput_3.setObject(30, row3.FeeFF);
						}

						if (row3.FeeAdvRef == null) {
							pstmt_tDBOutput_3.setNull(31, java.sql.Types.OTHER);
						} else {
							pstmt_tDBOutput_3.setObject(31, row3.FeeAdvRef);
						}

						if (row3.FeeSH == null) {
							pstmt_tDBOutput_3.setNull(32, java.sql.Types.OTHER);
						} else {
							pstmt_tDBOutput_3.setObject(32, row3.FeeSH);
						}

						if (row3.FeeOther == null) {
							pstmt_tDBOutput_3.setNull(33, java.sql.Types.OTHER);
						} else {
							pstmt_tDBOutput_3.setObject(33, row3.FeeOther);
						}

						if (row3.FeeTax == null) {
							pstmt_tDBOutput_3.setNull(34, java.sql.Types.OTHER);
						} else {
							pstmt_tDBOutput_3.setObject(34, row3.FeeTax);
						}

						if (row3.FeeTotal == null) {
							pstmt_tDBOutput_3.setNull(35, java.sql.Types.OTHER);
						} else {
							pstmt_tDBOutput_3.setObject(35, row3.FeeTotal);
						}

						if (row3.PayCR == null) {
							pstmt_tDBOutput_3.setNull(36, java.sql.Types.OTHER);
						} else {
							pstmt_tDBOutput_3.setObject(36, row3.PayCR);
						}

						if (row3.PayFF == null) {
							pstmt_tDBOutput_3.setNull(37, java.sql.Types.OTHER);
						} else {
							pstmt_tDBOutput_3.setObject(37, row3.PayFF);
						}

						pstmt_tDBOutput_3.setInt(38, row3.CRCollectionId);

						pstmt_tDBOutput_3.setInt(39, row3.CRAltProvId);

						if (row3.Link == null) {
							pstmt_tDBOutput_3.setNull(40,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_3.setString(40, row3.Link);
						}

						if (row3.LinkExpiration != null) {
							pstmt_tDBOutput_3.setTimestamp(
									41,
									new java.sql.Timestamp(row3.LinkExpiration
											.getTime()));
						} else {
							pstmt_tDBOutput_3.setNull(41,
									java.sql.Types.TIMESTAMP);
						}

						pstmt_tDBOutput_3.setInt(42, row3.FFCollectionId);

						pstmt_tDBOutput_3.setInt(43, row3.FFAltProvId);

						if (row3.FFLocation == null) {
							pstmt_tDBOutput_3.setNull(44,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_3.setString(44, row3.FFLocation);
						}

						if (row3.FFCallNumber == null) {
							pstmt_tDBOutput_3.setNull(45,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_3.setString(45, row3.FFCallNumber);
						}

						pstmt_tDBOutput_3.setShort(46, row3.FFMethod);

						pstmt_tDBOutput_3.setShort(47, row3.FFResult);

						if (row3.CostCenter == null) {
							pstmt_tDBOutput_3.setNull(48,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_3.setString(48, row3.CostCenter);
						}

						if (row3.BillRef == null) {
							pstmt_tDBOutput_3.setNull(49,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_3.setString(49, row3.BillRef);
						}

						if (row3.PubDescription == null) {
							pstmt_tDBOutput_3.setNull(50,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_3
									.setString(50, row3.PubDescription);
						}

						if (row3.UsageStatement == null) {
							pstmt_tDBOutput_3.setNull(51,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_3
									.setString(51, row3.UsageStatement);
						}

						pstmt_tDBOutput_3.setInt(52, row3.ClassId);

						pstmt_tDBOutput_3.setInt(53, row3.ClientId);

						if (row3.ExternalId == null) {
							pstmt_tDBOutput_3.setNull(54, java.sql.Types.OTHER);
						} else {
							pstmt_tDBOutput_3.setObject(54, row3.ExternalId);
						}

						pstmt_tDBOutput_3.setShort(55, row3.DeliveryMethod);

						pstmt_tDBOutput_3.setLong(56, row3.SpecialInstruct);

						if (row3.CustSpecialInstruct == null) {
							pstmt_tDBOutput_3.setNull(57,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_3.setString(57,
									row3.CustSpecialInstruct);
						}

						if (row3.FeeAlternate == null) {
							pstmt_tDBOutput_3.setNull(58, java.sql.Types.OTHER);
						} else {
							pstmt_tDBOutput_3.setObject(58, row3.FeeAlternate);
						}

						pstmt_tDBOutput_3.setShort(59, row3.TaxCategory);

						if (row3.DeliveryAddr == null) {
							pstmt_tDBOutput_3.setNull(60,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_3.setString(60, row3.DeliveryAddr);
						}

						if (row3.DeliveryCity == null) {
							pstmt_tDBOutput_3.setNull(61,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_3.setString(61, row3.DeliveryCity);
						}

						if (row3.DeliveryState == null) {
							pstmt_tDBOutput_3.setNull(62,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_3.setString(62, row3.DeliveryState);
						}

						if (row3.DeliveryCountry == null) {
							pstmt_tDBOutput_3.setNull(63,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_3.setString(63,
									row3.DeliveryCountry);
						}

						if (row3.DeliveryZip == null) {
							pstmt_tDBOutput_3.setNull(64,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_3.setString(64, row3.DeliveryZip);
						}

						if (row3.DeliveryTracking == null) {
							pstmt_tDBOutput_3.setNull(65,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_3.setString(65,
									row3.DeliveryTracking);
						}

						if (row3.DeliveryTime != null) {
							pstmt_tDBOutput_3.setTimestamp(
									66,
									new java.sql.Timestamp(row3.DeliveryTime
											.getTime()));
						} else {
							pstmt_tDBOutput_3.setNull(66,
									java.sql.Types.TIMESTAMP);
						}

						if (row3.OrigPromisedDate != null) {
							pstmt_tDBOutput_3.setTimestamp(67,
									new java.sql.Timestamp(
											row3.OrigPromisedDate.getTime()));
						} else {
							pstmt_tDBOutput_3.setNull(67,
									java.sql.Types.TIMESTAMP);
						}

						pstmt_tDBOutput_3.setLong(68, row3.RightsGranted);

						pstmt_tDBOutput_3.setShort(69, row3.TurnaroundMinutes);

						pstmt_tDBOutput_3.setShort(70, row3.WorkMinutes);

						if (row3.EncryptKey == null) {
							pstmt_tDBOutput_3.setNull(71,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_3.setString(71, row3.EncryptKey);
						}

						pstmt_tDBOutput_3.setShort(72, row3.AllowedViewsOrig);

						pstmt_tDBOutput_3.setShort(73, row3.AllowedViewsLeft);

						pstmt_tDBOutput_3.setShort(74, row3.AllowedPrintsOrig);

						pstmt_tDBOutput_3.setShort(75, row3.AllowedPrintsLeft);

						if (row3.CRTerms == null) {
							pstmt_tDBOutput_3.setNull(76,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_3.setString(76, row3.CRTerms);
						}

						if (row3.PO == null) {
							pstmt_tDBOutput_3.setNull(77,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_3.setString(77, row3.PO);
						}

						if (row3.CustOrderNum == null) {
							pstmt_tDBOutput_3.setNull(78,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_3.setString(78, row3.CustOrderNum);
						}

						if (row3.PriceLimit == null) {
							pstmt_tDBOutput_3.setNull(79, java.sql.Types.OTHER);
						} else {
							pstmt_tDBOutput_3.setObject(79, row3.PriceLimit);
						}

						if (row3.FFFileExt == null) {
							pstmt_tDBOutput_3.setNull(80,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_3.setString(80, row3.FFFileExt);
						}

						if (row3.RefCitXml == null) {
							pstmt_tDBOutput_3.setNull(81,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_3.setString(81, row3.RefCitXml);
						}

						if (row3.OrigCitXml == null) {
							pstmt_tDBOutput_3.setNull(82,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_3.setString(82, row3.OrigCitXml);
						}

						pstmt_tDBOutput_3.setInt(83, row3.SessionId);

						if (row3.ExtOrderRef == null) {
							pstmt_tDBOutput_3.setNull(84,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_3.setString(84, row3.ExtOrderRef);
						}

						pstmt_tDBOutput_3.setInt(85, row3.InvoiceId);

						pstmt_tDBOutput_3.setInt(86, row3.ClientGroupId);

						pstmt_tDBOutput_3.setInt(87, row3.StateFlags);

						if (row3.ExpirationTime != null) {
							pstmt_tDBOutput_3.setTimestamp(
									88,
									new java.sql.Timestamp(row3.ExpirationTime
											.getTime()));
						} else {
							pstmt_tDBOutput_3.setNull(88,
									java.sql.Types.TIMESTAMP);
						}

						pstmt_tDBOutput_3.setShort(89, row3.FFSourceType);

						if (row3.OtherTax == null) {
							pstmt_tDBOutput_3.setNull(90, java.sql.Types.OTHER);
						} else {
							pstmt_tDBOutput_3.setObject(90, row3.OtherTax);
						}

						pstmt_tDBOutput_3.setInt(91, row3.UserSector);

						pstmt_tDBOutput_3.setInt(92, row3.PrevOrderId);

						pstmt_tDBOutput_3.setInt(93, row3.NextOrderId);

						if (row3.Tags == null) {
							pstmt_tDBOutput_3.setNull(94,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_3.setString(94, row3.Tags);
						}

						if (row3.FeeAdjustment == null) {
							pstmt_tDBOutput_3.setNull(95, java.sql.Types.OTHER);
						} else {
							pstmt_tDBOutput_3.setObject(95, row3.FeeAdjustment);
						}

						if (row3.CreditAccountCharge == null) {
							pstmt_tDBOutput_3.setNull(96, java.sql.Types.OTHER);
						} else {
							pstmt_tDBOutput_3.setObject(96,
									row3.CreditAccountCharge);
						}

						pstmt_tDBOutput_3.setInt(97, row3.UserCreditGroupId);

						pstmt_tDBOutput_3.setInt(98, row3.FFHoldingId);

						pstmt_tDBOutput_3.setInt(99, row3.CRHoldingId);

						if (row3.PubYear == null) {
							pstmt_tDBOutput_3.setNull(100,
									java.sql.Types.INTEGER);
						} else {
							pstmt_tDBOutput_3.setShort(100, row3.PubYear);
						}

						if (row3.RightsGranted2 == null) {
							pstmt_tDBOutput_3
									.setNull(101, java.sql.Types.OTHER);
						} else {
							pstmt_tDBOutput_3.setObject(101,
									row3.RightsGranted2);
						}

						if (row3.RightsRequired2 == null) {
							pstmt_tDBOutput_3
									.setNull(102, java.sql.Types.OTHER);
						} else {
							pstmt_tDBOutput_3.setObject(102,
									row3.RightsRequired2);
						}

						pstmt_tDBOutput_3.setInt(103, row3.ContentId);

						pstmt_tDBOutput_3.setInt(104, row3._PartOfContentId);

						if (row3.ClientCosts == null) {
							pstmt_tDBOutput_3
									.setNull(105, java.sql.Types.OTHER);
						} else {
							pstmt_tDBOutput_3.setObject(105, row3.ClientCosts);
						}

						if (row3.UserInfoLink == null) {
							pstmt_tDBOutput_3.setNull(106,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_3.setString(106, row3.UserInfoLink);
						}

						pstmt_tDBOutput_3.setShort(107, row3.Partner);

						if (row3.RelatedToOrderItemId == null) {
							pstmt_tDBOutput_3.setNull(108,
									java.sql.Types.INTEGER);
						} else {
							pstmt_tDBOutput_3.setInt(108,
									row3.RelatedToOrderItemId);
						}

						if (row3.PriceQuote == null) {
							pstmt_tDBOutput_3
									.setNull(109, java.sql.Types.OTHER);
						} else {
							pstmt_tDBOutput_3.setObject(109, row3.PriceQuote);
						}

						pstmt_tDBOutput_3.addBatch();
						nb_line_tDBOutput_3++;

						batchSizeCounter_tDBOutput_3++;

						if (!whetherReject_tDBOutput_3) {
						}
						if ((batchSize_tDBOutput_3 > 0)
								&& (batchSize_tDBOutput_3 <= batchSizeCounter_tDBOutput_3)) {
							try {
								int countSum_tDBOutput_3 = 0;

								for (int countEach_tDBOutput_3 : pstmt_tDBOutput_3
										.executeBatch()) {
									countSum_tDBOutput_3 += (countEach_tDBOutput_3 < 0 ? 0
											: countEach_tDBOutput_3);
								}

								insertedCount_tDBOutput_3 += countSum_tDBOutput_3;

								batchSizeCounter_tDBOutput_3 = 0;
							} catch (java.sql.BatchUpdateException e_tDBOutput_3) {
								java.sql.SQLException ne_tDBOutput_3 = e_tDBOutput_3
										.getNextException(), sqle_tDBOutput_3 = null;
								String errormessage_tDBOutput_3;
								if (ne_tDBOutput_3 != null) {
									// build new exception to provide the
									// original cause
									sqle_tDBOutput_3 = new java.sql.SQLException(
											e_tDBOutput_3.getMessage()
													+ "\ncaused by: "
													+ ne_tDBOutput_3
															.getMessage(),
											ne_tDBOutput_3.getSQLState(),
											ne_tDBOutput_3.getErrorCode(),
											ne_tDBOutput_3);
									errormessage_tDBOutput_3 = sqle_tDBOutput_3
											.getMessage();
								} else {
									errormessage_tDBOutput_3 = e_tDBOutput_3
											.getMessage();
								}

								int countSum_tDBOutput_3 = 0;
								for (int countEach_tDBOutput_3 : e_tDBOutput_3
										.getUpdateCounts()) {
									countSum_tDBOutput_3 += (countEach_tDBOutput_3 < 0 ? 0
											: countEach_tDBOutput_3);
								}

								insertedCount_tDBOutput_3 += countSum_tDBOutput_3;

								System.err.println(errormessage_tDBOutput_3);

							}
						}

						commitCounter_tDBOutput_3++;
						if (commitEvery_tDBOutput_3 <= commitCounter_tDBOutput_3) {
							if ((batchSize_tDBOutput_3 > 0)
									&& (batchSizeCounter_tDBOutput_3 > 0)) {
								try {
									int countSum_tDBOutput_3 = 0;

									for (int countEach_tDBOutput_3 : pstmt_tDBOutput_3
											.executeBatch()) {
										countSum_tDBOutput_3 += (countEach_tDBOutput_3 < 0 ? 0
												: countEach_tDBOutput_3);
									}

									insertedCount_tDBOutput_3 += countSum_tDBOutput_3;

									batchSizeCounter_tDBOutput_3 = 0;
								} catch (java.sql.BatchUpdateException e_tDBOutput_3) {
									java.sql.SQLException ne_tDBOutput_3 = e_tDBOutput_3
											.getNextException(), sqle_tDBOutput_3 = null;
									String errormessage_tDBOutput_3;
									if (ne_tDBOutput_3 != null) {
										// build new exception to provide the
										// original cause
										sqle_tDBOutput_3 = new java.sql.SQLException(
												e_tDBOutput_3.getMessage()
														+ "\ncaused by: "
														+ ne_tDBOutput_3
																.getMessage(),
												ne_tDBOutput_3.getSQLState(),
												ne_tDBOutput_3.getErrorCode(),
												ne_tDBOutput_3);
										errormessage_tDBOutput_3 = sqle_tDBOutput_3
												.getMessage();
									} else {
										errormessage_tDBOutput_3 = e_tDBOutput_3
												.getMessage();
									}

									int countSum_tDBOutput_3 = 0;
									for (int countEach_tDBOutput_3 : e_tDBOutput_3
											.getUpdateCounts()) {
										countSum_tDBOutput_3 += (countEach_tDBOutput_3 < 0 ? 0
												: countEach_tDBOutput_3);
									}

									insertedCount_tDBOutput_3 += countSum_tDBOutput_3;

									System.err
											.println(errormessage_tDBOutput_3);

								}
							}
							conn_tDBOutput_3.commit();

							commitCounter_tDBOutput_3 = 0;
						}

						tos_count_tDBOutput_3++;

						/**
						 * [tDBOutput_3 main ] stop
						 */

						/**
						 * [tDBOutput_3 process_data_begin ] start
						 */

						currentComponent = "tDBOutput_3";

						/**
						 * [tDBOutput_3 process_data_begin ] stop
						 */

						/**
						 * [tDBOutput_3 process_data_end ] start
						 */

						currentComponent = "tDBOutput_3";

						/**
						 * [tDBOutput_3 process_data_end ] stop
						 */

						/**
						 * [tDBInput_3 process_data_end ] start
						 */

						currentComponent = "tDBInput_3";

						/**
						 * [tDBInput_3 process_data_end ] stop
						 */

						/**
						 * [tDBInput_3 end ] start
						 */

						currentComponent = "tDBInput_3";

					}
				} finally {
					if (rs_tDBInput_3 != null) {
						rs_tDBInput_3.close();
					}
					if (stmt_tDBInput_3 != null) {
						stmt_tDBInput_3.close();
					}
				}
				globalMap.put("tDBInput_3_NB_LINE", nb_line_tDBInput_3);

				ok_Hash.put("tDBInput_3", true);
				end_Hash.put("tDBInput_3", System.currentTimeMillis());

				tStatCatcher_1.addMessage(
						"end",
						"tDBInput_3",
						end_Hash.get("tDBInput_3")
								- start_Hash.get("tDBInput_3"));
				tStatCatcher_1Process(globalMap);
				talendStats_STATS.addMessage(
						"end",
						"tDBInput_3",
						end_Hash.get("tDBInput_3")
								- start_Hash.get("tDBInput_3"));
				talendStats_STATSProcess(globalMap);

				/**
				 * [tDBInput_3 end ] stop
				 */

				/**
				 * [tDBOutput_3 end ] start
				 */

				currentComponent = "tDBOutput_3";

				try {
					int countSum_tDBOutput_3 = 0;
					if (pstmt_tDBOutput_3 != null
							&& batchSizeCounter_tDBOutput_3 > 0) {

						for (int countEach_tDBOutput_3 : pstmt_tDBOutput_3
								.executeBatch()) {
							countSum_tDBOutput_3 += (countEach_tDBOutput_3 < 0 ? 0
									: countEach_tDBOutput_3);
						}

					}

					insertedCount_tDBOutput_3 += countSum_tDBOutput_3;

				} catch (java.sql.BatchUpdateException e_tDBOutput_3) {
					java.sql.SQLException ne_tDBOutput_3 = e_tDBOutput_3
							.getNextException(), sqle_tDBOutput_3 = null;
					String errormessage_tDBOutput_3;
					if (ne_tDBOutput_3 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_3 = new java.sql.SQLException(
								e_tDBOutput_3.getMessage() + "\ncaused by: "
										+ ne_tDBOutput_3.getMessage(),
								ne_tDBOutput_3.getSQLState(),
								ne_tDBOutput_3.getErrorCode(), ne_tDBOutput_3);
						errormessage_tDBOutput_3 = sqle_tDBOutput_3
								.getMessage();
					} else {
						errormessage_tDBOutput_3 = e_tDBOutput_3.getMessage();
					}

					int countSum_tDBOutput_3 = 0;
					for (int countEach_tDBOutput_3 : e_tDBOutput_3
							.getUpdateCounts()) {
						countSum_tDBOutput_3 += (countEach_tDBOutput_3 < 0 ? 0
								: countEach_tDBOutput_3);
					}

					insertedCount_tDBOutput_3 += countSum_tDBOutput_3;

					System.err.println(errormessage_tDBOutput_3);

				}

				if (pstmt_tDBOutput_3 != null) {

					pstmt_tDBOutput_3.close();
					resourceMap.remove("pstmt_tDBOutput_3");
				}
				resourceMap.put("statementClosed_tDBOutput_3", true);

				conn_tDBOutput_3.commit();

				conn_tDBOutput_3.close();

				resourceMap.put("finish_tDBOutput_3", true);

				nb_line_deleted_tDBOutput_3 = nb_line_deleted_tDBOutput_3
						+ deletedCount_tDBOutput_3;
				nb_line_update_tDBOutput_3 = nb_line_update_tDBOutput_3
						+ updatedCount_tDBOutput_3;
				nb_line_inserted_tDBOutput_3 = nb_line_inserted_tDBOutput_3
						+ insertedCount_tDBOutput_3;
				nb_line_rejected_tDBOutput_3 = nb_line_rejected_tDBOutput_3
						+ rejectedCount_tDBOutput_3;

				globalMap.put("tDBOutput_3_NB_LINE", nb_line_tDBOutput_3);
				globalMap.put("tDBOutput_3_NB_LINE_UPDATED",
						nb_line_update_tDBOutput_3);
				globalMap.put("tDBOutput_3_NB_LINE_INSERTED",
						nb_line_inserted_tDBOutput_3);
				globalMap.put("tDBOutput_3_NB_LINE_DELETED",
						nb_line_deleted_tDBOutput_3);
				globalMap.put("tDBOutput_3_NB_LINE_REJECTED",
						nb_line_rejected_tDBOutput_3);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row3" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tDBOutput_3", true);
				end_Hash.put("tDBOutput_3", System.currentTimeMillis());

				tStatCatcher_1.addMessage(
						"end",
						"tDBOutput_3",
						end_Hash.get("tDBOutput_3")
								- start_Hash.get("tDBOutput_3"));
				tStatCatcher_1Process(globalMap);
				talendStats_STATS.addMessage(
						"end",
						"tDBOutput_3",
						end_Hash.get("tDBOutput_3")
								- start_Hash.get("tDBOutput_3"));
				talendStats_STATSProcess(globalMap);
				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk6", 0, "ok");
				}
				tDBInput_7Process(globalMap);
				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk7", 0, "ok");
				}
				tDBInput_8Process(globalMap);
				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk8", 0, "ok");
				}
				tDBInput_9Process(globalMap);

				/**
				 * [tDBOutput_3 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_3 finally ] start
				 */

				currentComponent = "tDBInput_3";

				/**
				 * [tDBInput_3 finally ] stop
				 */

				/**
				 * [tDBOutput_3 finally ] start
				 */

				currentComponent = "tDBOutput_3";

				try {
					if (resourceMap.get("statementClosed_tDBOutput_3") == null) {
						java.sql.PreparedStatement pstmtToClose_tDBOutput_3 = null;
						if ((pstmtToClose_tDBOutput_3 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmt_tDBOutput_3")) != null) {
							pstmtToClose_tDBOutput_3.close();
						}
					}
				} finally {
					if (resourceMap.get("finish_tDBOutput_3") == null) {
						java.sql.Connection ctn_tDBOutput_3 = null;
						if ((ctn_tDBOutput_3 = (java.sql.Connection) resourceMap
								.get("conn_tDBOutput_3")) != null) {
							try {
								ctn_tDBOutput_3.close();
							} catch (java.sql.SQLException sqlEx_tDBOutput_3) {
								String errorMessage_tDBOutput_3 = "failed to close the connection in tDBOutput_3 :"
										+ sqlEx_tDBOutput_3.getMessage();
								System.err.println(errorMessage_tDBOutput_3);
							}
						}
					}
				}

				/**
				 * [tDBOutput_3 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_3_SUBPROCESS_STATE", 1);
	}

	public static class row7Struct implements
			routines.system.IPersistableRow<row7Struct> {
		final static byte[] commonByteArrayLock_ORDER_ETL_RFE_ETL = new byte[0];
		static byte[] commonByteArray_ORDER_ETL_RFE_ETL = new byte[0];

		public Long dwo_order_header_dimension_uid;

		public Long getDwo_order_header_dimension_uid() {
			return this.dwo_order_header_dimension_uid;
		}

		public Integer source_system_order_header_uid;

		public Integer getSource_system_order_header_uid() {
			return this.source_system_order_header_uid;
		}

		public Integer order_number;

		public Integer getOrder_number() {
			return this.order_number;
		}

		public Integer licensee_oracle_party_number;

		public Integer getLicensee_oracle_party_number() {
			return this.licensee_oracle_party_number;
		}

		public java.util.Date order_date;

		public java.util.Date getOrder_date() {
			return this.order_date;
		}

		public String order_channel;

		public String getOrder_channel() {
			return this.order_channel;
		}

		public String organization_name;

		public String getOrganization_name() {
			return this.organization_name;
		}

		public String organization_location_country_code;

		public String getOrganization_location_country_code() {
			return this.organization_location_country_code;
		}

		public String organization_location_name;

		public String getOrganization_location_name() {
			return this.organization_location_name;
		}

		public String taxable_city;

		public String getTaxable_city() {
			return this.taxable_city;
		}

		public String taxable_region;

		public String getTaxable_region() {
			return this.taxable_region;
		}

		public String taxable_postal_code;

		public String getTaxable_postal_code() {
			return this.taxable_postal_code;
		}

		public String taxable_country;

		public String getTaxable_country() {
			return this.taxable_country;
		}

		public Integer order_invoice_uid;

		public Integer getOrder_invoice_uid() {
			return this.order_invoice_uid;
		}

		public String order_source;

		public String getOrder_source() {
			return this.order_source;
		}

		public java.util.Date created_datetime;

		public java.util.Date getCreated_datetime() {
			return this.created_datetime;
		}

		public Integer created_by_user;

		public Integer getCreated_by_user() {
			return this.created_by_user;
		}

		public java.util.Date updated_datetime;

		public java.util.Date getUpdated_datetime() {
			return this.updated_datetime;
		}

		public Integer updated_by_user;

		public Integer getUpdated_by_user() {
			return this.updated_by_user;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ORDER_ETL_RFE_ETL.length) {
					if (length < 1024
							&& commonByteArray_ORDER_ETL_RFE_ETL.length == 0) {
						commonByteArray_ORDER_ETL_RFE_ETL = new byte[1024];
					} else {
						commonByteArray_ORDER_ETL_RFE_ETL = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ORDER_ETL_RFE_ETL, 0, length);
				strReturn = new String(commonByteArray_ORDER_ETL_RFE_ETL, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ORDER_ETL_RFE_ETL) {

				try {

					int length = 0;

					length = dis.readByte();
					if (length == -1) {
						this.dwo_order_header_dimension_uid = null;
					} else {
						this.dwo_order_header_dimension_uid = dis.readLong();
					}

					this.source_system_order_header_uid = readInteger(dis);

					this.order_number = readInteger(dis);

					this.licensee_oracle_party_number = readInteger(dis);

					this.order_date = readDate(dis);

					this.order_channel = readString(dis);

					this.organization_name = readString(dis);

					this.organization_location_country_code = readString(dis);

					this.organization_location_name = readString(dis);

					this.taxable_city = readString(dis);

					this.taxable_region = readString(dis);

					this.taxable_postal_code = readString(dis);

					this.taxable_country = readString(dis);

					this.order_invoice_uid = readInteger(dis);

					this.order_source = readString(dis);

					this.created_datetime = readDate(dis);

					this.created_by_user = readInteger(dis);

					this.updated_datetime = readDate(dis);

					this.updated_by_user = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Long

				if (this.dwo_order_header_dimension_uid == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.dwo_order_header_dimension_uid);
				}

				// Integer

				writeInteger(this.source_system_order_header_uid, dos);

				// Integer

				writeInteger(this.order_number, dos);

				// Integer

				writeInteger(this.licensee_oracle_party_number, dos);

				// java.util.Date

				writeDate(this.order_date, dos);

				// String

				writeString(this.order_channel, dos);

				// String

				writeString(this.organization_name, dos);

				// String

				writeString(this.organization_location_country_code, dos);

				// String

				writeString(this.organization_location_name, dos);

				// String

				writeString(this.taxable_city, dos);

				// String

				writeString(this.taxable_region, dos);

				// String

				writeString(this.taxable_postal_code, dos);

				// String

				writeString(this.taxable_country, dos);

				// Integer

				writeInteger(this.order_invoice_uid, dos);

				// String

				writeString(this.order_source, dos);

				// java.util.Date

				writeDate(this.created_datetime, dos);

				// Integer

				writeInteger(this.created_by_user, dos);

				// java.util.Date

				writeDate(this.updated_datetime, dos);

				// Integer

				writeInteger(this.updated_by_user, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("dwo_order_header_dimension_uid="
					+ String.valueOf(dwo_order_header_dimension_uid));
			sb.append(",source_system_order_header_uid="
					+ String.valueOf(source_system_order_header_uid));
			sb.append(",order_number=" + String.valueOf(order_number));
			sb.append(",licensee_oracle_party_number="
					+ String.valueOf(licensee_oracle_party_number));
			sb.append(",order_date=" + String.valueOf(order_date));
			sb.append(",order_channel=" + order_channel);
			sb.append(",organization_name=" + organization_name);
			sb.append(",organization_location_country_code="
					+ organization_location_country_code);
			sb.append(",organization_location_name="
					+ organization_location_name);
			sb.append(",taxable_city=" + taxable_city);
			sb.append(",taxable_region=" + taxable_region);
			sb.append(",taxable_postal_code=" + taxable_postal_code);
			sb.append(",taxable_country=" + taxable_country);
			sb.append(",order_invoice_uid=" + String.valueOf(order_invoice_uid));
			sb.append(",order_source=" + order_source);
			sb.append(",created_datetime=" + String.valueOf(created_datetime));
			sb.append(",created_by_user=" + String.valueOf(created_by_user));
			sb.append(",updated_datetime=" + String.valueOf(updated_datetime));
			sb.append(",updated_by_user=" + String.valueOf(updated_by_user));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row7Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_7Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDBInput_7_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row7Struct row7 = new row7Struct();

				/**
				 * [tDBOutput_7 begin ] start
				 */

				ok_Hash.put("tDBOutput_7", false);
				start_Hash.put("tDBOutput_7", System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tDBOutput_7");
				tStatCatcher_1Process(globalMap);

				talendStats_STATS.addMessage("begin", "tDBOutput_7");
				talendStats_STATSProcess(globalMap);

				currentComponent = "tDBOutput_7";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row7" + iterateId, 0, 0);

					}
				}

				int tos_count_tDBOutput_7 = 0;

				String dbschema_tDBOutput_7 = null;
				dbschema_tDBOutput_7 = context.data_warehouse_order_dwos_schema;

				String tableName_tDBOutput_7 = null;
				if (dbschema_tDBOutput_7 == null
						|| dbschema_tDBOutput_7.trim().length() == 0) {
					tableName_tDBOutput_7 = "dwo_order_header_dimension";
				} else {
					tableName_tDBOutput_7 = dbschema_tDBOutput_7 + "\".\""
							+ "dwo_order_header_dimension";
				}

				int nb_line_tDBOutput_7 = 0;
				int nb_line_update_tDBOutput_7 = 0;
				int nb_line_inserted_tDBOutput_7 = 0;
				int nb_line_deleted_tDBOutput_7 = 0;
				int nb_line_rejected_tDBOutput_7 = 0;

				int deletedCount_tDBOutput_7 = 0;
				int updatedCount_tDBOutput_7 = 0;
				int insertedCount_tDBOutput_7 = 0;
				int rejectedCount_tDBOutput_7 = 0;

				boolean whetherReject_tDBOutput_7 = false;

				java.sql.Connection conn_tDBOutput_7 = null;
				String dbUser_tDBOutput_7 = null;

				java.lang.Class.forName("org.postgresql.Driver");
				String url_tDBOutput_7 = "jdbc:postgresql://"
						+ context.data_warehouse_order_dwos_host + ":"
						+ context.data_warehouse_order_dwos_port + "/"
						+ context.data_warehouse_order_dwos_database;
				dbUser_tDBOutput_7 = context.data_warehouse_order_dwos_username;

				final String decryptedPassword_tDBOutput_7 = context.data_warehouse_order_dwos_password;

				String dbPwd_tDBOutput_7 = decryptedPassword_tDBOutput_7;

				conn_tDBOutput_7 = java.sql.DriverManager.getConnection(
						url_tDBOutput_7, dbUser_tDBOutput_7, dbPwd_tDBOutput_7);

				resourceMap.put("conn_tDBOutput_7", conn_tDBOutput_7);
				conn_tDBOutput_7.setAutoCommit(false);
				int commitEvery_tDBOutput_7 = 10000;
				int commitCounter_tDBOutput_7 = 0;

				int batchSize_tDBOutput_7 = 10000;
				int batchSizeCounter_tDBOutput_7 = 0;

				int count_tDBOutput_7 = 0;
				String insert_tDBOutput_7 = "INSERT INTO \""
						+ tableName_tDBOutput_7
						+ "\" (\"dwo_order_header_dimension_uid\",\"source_system_order_header_uid\",\"order_number\",\"licensee_oracle_party_number\",\"order_date\",\"order_channel\",\"organization_name\",\"organization_location_country_code\",\"organization_location_name\",\"taxable_city\",\"taxable_region\",\"taxable_postal_code\",\"taxable_country\",\"order_invoice_uid\",\"order_source\",\"created_datetime\",\"created_by_user\",\"updated_datetime\",\"updated_by_user\") VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

				java.sql.PreparedStatement pstmt_tDBOutput_7 = conn_tDBOutput_7
						.prepareStatement(insert_tDBOutput_7);
				resourceMap.put("pstmt_tDBOutput_7", pstmt_tDBOutput_7);

				/**
				 * [tDBOutput_7 begin ] stop
				 */

				/**
				 * [tDBInput_7 begin ] start
				 */

				ok_Hash.put("tDBInput_7", false);
				start_Hash.put("tDBInput_7", System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tDBInput_7");
				tStatCatcher_1Process(globalMap);

				talendStats_STATS.addMessage("begin", "tDBInput_7");
				talendStats_STATSProcess(globalMap);

				currentComponent = "tDBInput_7";

				int tos_count_tDBInput_7 = 0;

				int nb_line_tDBInput_7 = 0;
				java.sql.Connection conn_tDBInput_7 = null;
				String driverClass_tDBInput_7 = "org.postgresql.Driver";
				java.lang.Class.forName(driverClass_tDBInput_7);
				String dbUser_tDBInput_7 = context.data_warehouse_order_dwos_username;

				final String decryptedPassword_tDBInput_7 = context.data_warehouse_order_dwos_password;

				String dbPwd_tDBInput_7 = decryptedPassword_tDBInput_7;

				String url_tDBInput_7 = "jdbc:postgresql://"
						+ context.data_warehouse_order_dwos_host + ":"
						+ context.data_warehouse_order_dwos_port + "/"
						+ context.data_warehouse_order_dwos_database;

				conn_tDBInput_7 = java.sql.DriverManager.getConnection(
						url_tDBInput_7, dbUser_tDBInput_7, dbPwd_tDBInput_7);

				conn_tDBInput_7.setAutoCommit(false);

				java.sql.Statement stmt_tDBInput_7 = conn_tDBInput_7
						.createStatement();
				stmt_tDBInput_7.setFetchSize(1000);

				String dbquery_tDBInput_7 = "SELECT nextval('staging.order_header_dimension_seq') as dwo_order_header_dimension_uid,\n       ei.orderitemid as source"
						+ "_system_order_header_uid,\n       ei.orderitemid as order_number,\n       ei.clientid as licensee_oracle_party_number,\n   "
						+ "    ei.createdtime as order_date,\n       NULL as order_channel,\n       ei.clientname as organization_name,\n       NULL a"
						+ "s organization_location_country_code,\n       NULL as organization_location_name,\n       ei.deliverycity as taxable_city,"
						+ "\n       ei.deliverystate as taxable_region,\n       ei.deliveryzip as taxable_postal_code,\n       ei.deliverycountry as t"
						+ "axable_country,\n       ei.invoiceid as order_invoice_uid,\n       ei.ffcollectionname as order_source,\n       ei.createdt"
						+ "ime as created_datetime,\n       oi.createdby as created_by_user,\n       oi.modifiedtime as updated_datetime,\n       oi.m"
						+ "odifiedby as updated_by_user\nFROM staging.dwo_rfe_exporderitem ei\nJOIN staging.dwo_rfe_orderitem oi ON oi.orderitemid = "
						+ "ei.orderitemid";

				globalMap.put("tDBInput_7_QUERY", dbquery_tDBInput_7);
				java.sql.ResultSet rs_tDBInput_7 = null;

				try {
					rs_tDBInput_7 = stmt_tDBInput_7
							.executeQuery(dbquery_tDBInput_7);
					java.sql.ResultSetMetaData rsmd_tDBInput_7 = rs_tDBInput_7
							.getMetaData();
					int colQtyInRs_tDBInput_7 = rsmd_tDBInput_7
							.getColumnCount();

					String tmpContent_tDBInput_7 = null;

					while (rs_tDBInput_7.next()) {
						nb_line_tDBInput_7++;

						if (colQtyInRs_tDBInput_7 < 1) {
							row7.dwo_order_header_dimension_uid = null;
						} else {

							if (rs_tDBInput_7.getObject(1) != null) {
								row7.dwo_order_header_dimension_uid = rs_tDBInput_7
										.getLong(1);
							} else {
								row7.dwo_order_header_dimension_uid = null;
							}
						}
						if (colQtyInRs_tDBInput_7 < 2) {
							row7.source_system_order_header_uid = null;
						} else {

							if (rs_tDBInput_7.getObject(2) != null) {
								row7.source_system_order_header_uid = rs_tDBInput_7
										.getInt(2);
							} else {
								row7.source_system_order_header_uid = null;
							}
						}
						if (colQtyInRs_tDBInput_7 < 3) {
							row7.order_number = null;
						} else {

							if (rs_tDBInput_7.getObject(3) != null) {
								row7.order_number = rs_tDBInput_7.getInt(3);
							} else {
								row7.order_number = null;
							}
						}
						if (colQtyInRs_tDBInput_7 < 4) {
							row7.licensee_oracle_party_number = null;
						} else {

							if (rs_tDBInput_7.getObject(4) != null) {
								row7.licensee_oracle_party_number = rs_tDBInput_7
										.getInt(4);
							} else {
								row7.licensee_oracle_party_number = null;
							}
						}
						if (colQtyInRs_tDBInput_7 < 5) {
							row7.order_date = null;
						} else {

							row7.order_date = routines.system.JDBCUtil.getDate(
									rs_tDBInput_7, 5);
						}
						if (colQtyInRs_tDBInput_7 < 6) {
							row7.order_channel = null;
						} else {

							row7.order_channel = routines.system.JDBCUtil
									.getString(rs_tDBInput_7, 6, false);
						}
						if (colQtyInRs_tDBInput_7 < 7) {
							row7.organization_name = null;
						} else {

							row7.organization_name = routines.system.JDBCUtil
									.getString(rs_tDBInput_7, 7, false);
						}
						if (colQtyInRs_tDBInput_7 < 8) {
							row7.organization_location_country_code = null;
						} else {

							row7.organization_location_country_code = routines.system.JDBCUtil
									.getString(rs_tDBInput_7, 8, false);
						}
						if (colQtyInRs_tDBInput_7 < 9) {
							row7.organization_location_name = null;
						} else {

							row7.organization_location_name = routines.system.JDBCUtil
									.getString(rs_tDBInput_7, 9, false);
						}
						if (colQtyInRs_tDBInput_7 < 10) {
							row7.taxable_city = null;
						} else {

							row7.taxable_city = routines.system.JDBCUtil
									.getString(rs_tDBInput_7, 10, false);
						}
						if (colQtyInRs_tDBInput_7 < 11) {
							row7.taxable_region = null;
						} else {

							row7.taxable_region = routines.system.JDBCUtil
									.getString(rs_tDBInput_7, 11, false);
						}
						if (colQtyInRs_tDBInput_7 < 12) {
							row7.taxable_postal_code = null;
						} else {

							row7.taxable_postal_code = routines.system.JDBCUtil
									.getString(rs_tDBInput_7, 12, false);
						}
						if (colQtyInRs_tDBInput_7 < 13) {
							row7.taxable_country = null;
						} else {

							row7.taxable_country = routines.system.JDBCUtil
									.getString(rs_tDBInput_7, 13, false);
						}
						if (colQtyInRs_tDBInput_7 < 14) {
							row7.order_invoice_uid = null;
						} else {

							if (rs_tDBInput_7.getObject(14) != null) {
								row7.order_invoice_uid = rs_tDBInput_7
										.getInt(14);
							} else {
								row7.order_invoice_uid = null;
							}
						}
						if (colQtyInRs_tDBInput_7 < 15) {
							row7.order_source = null;
						} else {

							row7.order_source = routines.system.JDBCUtil
									.getString(rs_tDBInput_7, 15, false);
						}
						if (colQtyInRs_tDBInput_7 < 16) {
							row7.created_datetime = null;
						} else {

							row7.created_datetime = routines.system.JDBCUtil
									.getDate(rs_tDBInput_7, 16);
						}
						if (colQtyInRs_tDBInput_7 < 17) {
							row7.created_by_user = null;
						} else {

							if (rs_tDBInput_7.getObject(17) != null) {
								row7.created_by_user = rs_tDBInput_7.getInt(17);
							} else {
								row7.created_by_user = null;
							}
						}
						if (colQtyInRs_tDBInput_7 < 18) {
							row7.updated_datetime = null;
						} else {

							row7.updated_datetime = routines.system.JDBCUtil
									.getDate(rs_tDBInput_7, 18);
						}
						if (colQtyInRs_tDBInput_7 < 19) {
							row7.updated_by_user = null;
						} else {

							if (rs_tDBInput_7.getObject(19) != null) {
								row7.updated_by_user = rs_tDBInput_7.getInt(19);
							} else {
								row7.updated_by_user = null;
							}
						}

						/**
						 * [tDBInput_7 begin ] stop
						 */

						/**
						 * [tDBInput_7 main ] start
						 */

						currentComponent = "tDBInput_7";

						tos_count_tDBInput_7++;

						/**
						 * [tDBInput_7 main ] stop
						 */

						/**
						 * [tDBInput_7 process_data_begin ] start
						 */

						currentComponent = "tDBInput_7";

						/**
						 * [tDBInput_7 process_data_begin ] stop
						 */

						/**
						 * [tDBOutput_7 main ] start
						 */

						currentComponent = "tDBOutput_7";

						// row7
						// row7

						if (execStat) {
							runStat.updateStatOnConnection("row7" + iterateId,
									1, 1);
						}

						whetherReject_tDBOutput_7 = false;
						if (row7.dwo_order_header_dimension_uid == null) {
							pstmt_tDBOutput_7
									.setNull(1, java.sql.Types.INTEGER);
						} else {
							pstmt_tDBOutput_7.setLong(1,
									row7.dwo_order_header_dimension_uid);
						}

						if (row7.source_system_order_header_uid == null) {
							pstmt_tDBOutput_7
									.setNull(2, java.sql.Types.INTEGER);
						} else {
							pstmt_tDBOutput_7.setInt(2,
									row7.source_system_order_header_uid);
						}

						if (row7.order_number == null) {
							pstmt_tDBOutput_7
									.setNull(3, java.sql.Types.INTEGER);
						} else {
							pstmt_tDBOutput_7.setInt(3, row7.order_number);
						}

						if (row7.licensee_oracle_party_number == null) {
							pstmt_tDBOutput_7
									.setNull(4, java.sql.Types.INTEGER);
						} else {
							pstmt_tDBOutput_7.setInt(4,
									row7.licensee_oracle_party_number);
						}

						if (row7.order_date != null) {
							pstmt_tDBOutput_7.setTimestamp(
									5,
									new java.sql.Timestamp(row7.order_date
											.getTime()));
						} else {
							pstmt_tDBOutput_7.setNull(5,
									java.sql.Types.TIMESTAMP);
						}

						if (row7.order_channel == null) {
							pstmt_tDBOutput_7
									.setNull(6, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_7.setString(6, row7.order_channel);
						}

						if (row7.organization_name == null) {
							pstmt_tDBOutput_7
									.setNull(7, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_7.setString(7,
									row7.organization_name);
						}

						if (row7.organization_location_country_code == null) {
							pstmt_tDBOutput_7
									.setNull(8, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_7.setString(8,
									row7.organization_location_country_code);
						}

						if (row7.organization_location_name == null) {
							pstmt_tDBOutput_7
									.setNull(9, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_7.setString(9,
									row7.organization_location_name);
						}

						if (row7.taxable_city == null) {
							pstmt_tDBOutput_7.setNull(10,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_7.setString(10, row7.taxable_city);
						}

						if (row7.taxable_region == null) {
							pstmt_tDBOutput_7.setNull(11,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_7
									.setString(11, row7.taxable_region);
						}

						if (row7.taxable_postal_code == null) {
							pstmt_tDBOutput_7.setNull(12,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_7.setString(12,
									row7.taxable_postal_code);
						}

						if (row7.taxable_country == null) {
							pstmt_tDBOutput_7.setNull(13,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_7.setString(13,
									row7.taxable_country);
						}

						if (row7.order_invoice_uid == null) {
							pstmt_tDBOutput_7.setNull(14,
									java.sql.Types.INTEGER);
						} else {
							pstmt_tDBOutput_7
									.setInt(14, row7.order_invoice_uid);
						}

						if (row7.order_source == null) {
							pstmt_tDBOutput_7.setNull(15,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_7.setString(15, row7.order_source);
						}

						if (row7.created_datetime != null) {
							pstmt_tDBOutput_7.setTimestamp(16,
									new java.sql.Timestamp(
											row7.created_datetime.getTime()));
						} else {
							pstmt_tDBOutput_7.setNull(16,
									java.sql.Types.TIMESTAMP);
						}

						if (row7.created_by_user == null) {
							pstmt_tDBOutput_7.setNull(17,
									java.sql.Types.INTEGER);
						} else {
							pstmt_tDBOutput_7.setInt(17, row7.created_by_user);
						}

						if (row7.updated_datetime != null) {
							pstmt_tDBOutput_7.setTimestamp(18,
									new java.sql.Timestamp(
											row7.updated_datetime.getTime()));
						} else {
							pstmt_tDBOutput_7.setNull(18,
									java.sql.Types.TIMESTAMP);
						}

						if (row7.updated_by_user == null) {
							pstmt_tDBOutput_7.setNull(19,
									java.sql.Types.INTEGER);
						} else {
							pstmt_tDBOutput_7.setInt(19, row7.updated_by_user);
						}

						pstmt_tDBOutput_7.addBatch();
						nb_line_tDBOutput_7++;

						batchSizeCounter_tDBOutput_7++;

						if ((batchSize_tDBOutput_7 > 0)
								&& (batchSize_tDBOutput_7 <= batchSizeCounter_tDBOutput_7)) {
							try {
								int countSum_tDBOutput_7 = 0;

								for (int countEach_tDBOutput_7 : pstmt_tDBOutput_7
										.executeBatch()) {
									countSum_tDBOutput_7 += (countEach_tDBOutput_7 < 0 ? 0
											: countEach_tDBOutput_7);
								}

								insertedCount_tDBOutput_7 += countSum_tDBOutput_7;

								batchSizeCounter_tDBOutput_7 = 0;
							} catch (java.sql.BatchUpdateException e_tDBOutput_7) {
								java.sql.SQLException ne_tDBOutput_7 = e_tDBOutput_7
										.getNextException(), sqle_tDBOutput_7 = null;
								String errormessage_tDBOutput_7;
								if (ne_tDBOutput_7 != null) {
									// build new exception to provide the
									// original cause
									sqle_tDBOutput_7 = new java.sql.SQLException(
											e_tDBOutput_7.getMessage()
													+ "\ncaused by: "
													+ ne_tDBOutput_7
															.getMessage(),
											ne_tDBOutput_7.getSQLState(),
											ne_tDBOutput_7.getErrorCode(),
											ne_tDBOutput_7);
									errormessage_tDBOutput_7 = sqle_tDBOutput_7
											.getMessage();
								} else {
									errormessage_tDBOutput_7 = e_tDBOutput_7
											.getMessage();
								}

								int countSum_tDBOutput_7 = 0;
								for (int countEach_tDBOutput_7 : e_tDBOutput_7
										.getUpdateCounts()) {
									countSum_tDBOutput_7 += (countEach_tDBOutput_7 < 0 ? 0
											: countEach_tDBOutput_7);
								}

								insertedCount_tDBOutput_7 += countSum_tDBOutput_7;

								System.err.println(errormessage_tDBOutput_7);

							}
						}

						commitCounter_tDBOutput_7++;
						if (commitEvery_tDBOutput_7 <= commitCounter_tDBOutput_7) {
							if ((batchSize_tDBOutput_7 > 0)
									&& (batchSizeCounter_tDBOutput_7 > 0)) {
								try {
									int countSum_tDBOutput_7 = 0;

									for (int countEach_tDBOutput_7 : pstmt_tDBOutput_7
											.executeBatch()) {
										countSum_tDBOutput_7 += (countEach_tDBOutput_7 < 0 ? 0
												: countEach_tDBOutput_7);
									}

									insertedCount_tDBOutput_7 += countSum_tDBOutput_7;

									batchSizeCounter_tDBOutput_7 = 0;
								} catch (java.sql.BatchUpdateException e_tDBOutput_7) {
									java.sql.SQLException ne_tDBOutput_7 = e_tDBOutput_7
											.getNextException(), sqle_tDBOutput_7 = null;
									String errormessage_tDBOutput_7;
									if (ne_tDBOutput_7 != null) {
										// build new exception to provide the
										// original cause
										sqle_tDBOutput_7 = new java.sql.SQLException(
												e_tDBOutput_7.getMessage()
														+ "\ncaused by: "
														+ ne_tDBOutput_7
																.getMessage(),
												ne_tDBOutput_7.getSQLState(),
												ne_tDBOutput_7.getErrorCode(),
												ne_tDBOutput_7);
										errormessage_tDBOutput_7 = sqle_tDBOutput_7
												.getMessage();
									} else {
										errormessage_tDBOutput_7 = e_tDBOutput_7
												.getMessage();
									}

									int countSum_tDBOutput_7 = 0;
									for (int countEach_tDBOutput_7 : e_tDBOutput_7
											.getUpdateCounts()) {
										countSum_tDBOutput_7 += (countEach_tDBOutput_7 < 0 ? 0
												: countEach_tDBOutput_7);
									}

									insertedCount_tDBOutput_7 += countSum_tDBOutput_7;

									System.err
											.println(errormessage_tDBOutput_7);

								}
							}
							conn_tDBOutput_7.commit();

							commitCounter_tDBOutput_7 = 0;
						}

						tos_count_tDBOutput_7++;

						/**
						 * [tDBOutput_7 main ] stop
						 */

						/**
						 * [tDBOutput_7 process_data_begin ] start
						 */

						currentComponent = "tDBOutput_7";

						/**
						 * [tDBOutput_7 process_data_begin ] stop
						 */

						/**
						 * [tDBOutput_7 process_data_end ] start
						 */

						currentComponent = "tDBOutput_7";

						/**
						 * [tDBOutput_7 process_data_end ] stop
						 */

						/**
						 * [tDBInput_7 process_data_end ] start
						 */

						currentComponent = "tDBInput_7";

						/**
						 * [tDBInput_7 process_data_end ] stop
						 */

						/**
						 * [tDBInput_7 end ] start
						 */

						currentComponent = "tDBInput_7";

					}
				} finally {
					if (rs_tDBInput_7 != null) {
						rs_tDBInput_7.close();
					}
					if (stmt_tDBInput_7 != null) {
						stmt_tDBInput_7.close();
					}
					if (conn_tDBInput_7 != null && !conn_tDBInput_7.isClosed()) {

						conn_tDBInput_7.commit();

						conn_tDBInput_7.close();

					}

				}
				globalMap.put("tDBInput_7_NB_LINE", nb_line_tDBInput_7);

				ok_Hash.put("tDBInput_7", true);
				end_Hash.put("tDBInput_7", System.currentTimeMillis());

				tStatCatcher_1.addMessage(
						"end",
						"tDBInput_7",
						end_Hash.get("tDBInput_7")
								- start_Hash.get("tDBInput_7"));
				tStatCatcher_1Process(globalMap);
				talendStats_STATS.addMessage(
						"end",
						"tDBInput_7",
						end_Hash.get("tDBInput_7")
								- start_Hash.get("tDBInput_7"));
				talendStats_STATSProcess(globalMap);

				/**
				 * [tDBInput_7 end ] stop
				 */

				/**
				 * [tDBOutput_7 end ] start
				 */

				currentComponent = "tDBOutput_7";

				try {
					int countSum_tDBOutput_7 = 0;
					if (pstmt_tDBOutput_7 != null
							&& batchSizeCounter_tDBOutput_7 > 0) {

						for (int countEach_tDBOutput_7 : pstmt_tDBOutput_7
								.executeBatch()) {
							countSum_tDBOutput_7 += (countEach_tDBOutput_7 < 0 ? 0
									: countEach_tDBOutput_7);
						}

					}

					insertedCount_tDBOutput_7 += countSum_tDBOutput_7;

				} catch (java.sql.BatchUpdateException e_tDBOutput_7) {
					java.sql.SQLException ne_tDBOutput_7 = e_tDBOutput_7
							.getNextException(), sqle_tDBOutput_7 = null;
					String errormessage_tDBOutput_7;
					if (ne_tDBOutput_7 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_7 = new java.sql.SQLException(
								e_tDBOutput_7.getMessage() + "\ncaused by: "
										+ ne_tDBOutput_7.getMessage(),
								ne_tDBOutput_7.getSQLState(),
								ne_tDBOutput_7.getErrorCode(), ne_tDBOutput_7);
						errormessage_tDBOutput_7 = sqle_tDBOutput_7
								.getMessage();
					} else {
						errormessage_tDBOutput_7 = e_tDBOutput_7.getMessage();
					}

					int countSum_tDBOutput_7 = 0;
					for (int countEach_tDBOutput_7 : e_tDBOutput_7
							.getUpdateCounts()) {
						countSum_tDBOutput_7 += (countEach_tDBOutput_7 < 0 ? 0
								: countEach_tDBOutput_7);
					}

					insertedCount_tDBOutput_7 += countSum_tDBOutput_7;

					System.err.println(errormessage_tDBOutput_7);

				}

				if (pstmt_tDBOutput_7 != null) {

					pstmt_tDBOutput_7.close();
					resourceMap.remove("pstmt_tDBOutput_7");
				}
				resourceMap.put("statementClosed_tDBOutput_7", true);

				conn_tDBOutput_7.commit();

				conn_tDBOutput_7.close();

				resourceMap.put("finish_tDBOutput_7", true);

				nb_line_deleted_tDBOutput_7 = nb_line_deleted_tDBOutput_7
						+ deletedCount_tDBOutput_7;
				nb_line_update_tDBOutput_7 = nb_line_update_tDBOutput_7
						+ updatedCount_tDBOutput_7;
				nb_line_inserted_tDBOutput_7 = nb_line_inserted_tDBOutput_7
						+ insertedCount_tDBOutput_7;
				nb_line_rejected_tDBOutput_7 = nb_line_rejected_tDBOutput_7
						+ rejectedCount_tDBOutput_7;

				globalMap.put("tDBOutput_7_NB_LINE", nb_line_tDBOutput_7);
				globalMap.put("tDBOutput_7_NB_LINE_UPDATED",
						nb_line_update_tDBOutput_7);
				globalMap.put("tDBOutput_7_NB_LINE_INSERTED",
						nb_line_inserted_tDBOutput_7);
				globalMap.put("tDBOutput_7_NB_LINE_DELETED",
						nb_line_deleted_tDBOutput_7);
				globalMap.put("tDBOutput_7_NB_LINE_REJECTED",
						nb_line_rejected_tDBOutput_7);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row7" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tDBOutput_7", true);
				end_Hash.put("tDBOutput_7", System.currentTimeMillis());

				tStatCatcher_1.addMessage(
						"end",
						"tDBOutput_7",
						end_Hash.get("tDBOutput_7")
								- start_Hash.get("tDBOutput_7"));
				tStatCatcher_1Process(globalMap);
				talendStats_STATS.addMessage(
						"end",
						"tDBOutput_7",
						end_Hash.get("tDBOutput_7")
								- start_Hash.get("tDBOutput_7"));
				talendStats_STATSProcess(globalMap);

				/**
				 * [tDBOutput_7 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_7 finally ] start
				 */

				currentComponent = "tDBInput_7";

				/**
				 * [tDBInput_7 finally ] stop
				 */

				/**
				 * [tDBOutput_7 finally ] start
				 */

				currentComponent = "tDBOutput_7";

				try {
					if (resourceMap.get("statementClosed_tDBOutput_7") == null) {
						java.sql.PreparedStatement pstmtToClose_tDBOutput_7 = null;
						if ((pstmtToClose_tDBOutput_7 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmt_tDBOutput_7")) != null) {
							pstmtToClose_tDBOutput_7.close();
						}
					}
				} finally {
					if (resourceMap.get("finish_tDBOutput_7") == null) {
						java.sql.Connection ctn_tDBOutput_7 = null;
						if ((ctn_tDBOutput_7 = (java.sql.Connection) resourceMap
								.get("conn_tDBOutput_7")) != null) {
							try {
								ctn_tDBOutput_7.close();
							} catch (java.sql.SQLException sqlEx_tDBOutput_7) {
								String errorMessage_tDBOutput_7 = "failed to close the connection in tDBOutput_7 :"
										+ sqlEx_tDBOutput_7.getMessage();
								System.err.println(errorMessage_tDBOutput_7);
							}
						}
					}
				}

				/**
				 * [tDBOutput_7 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_7_SUBPROCESS_STATE", 1);
	}

	public static class row8Struct implements
			routines.system.IPersistableRow<row8Struct> {
		final static byte[] commonByteArrayLock_ORDER_ETL_RFE_ETL = new byte[0];
		static byte[] commonByteArray_ORDER_ETL_RFE_ETL = new byte[0];

		public Long dwo_order_detail_dimension_uid;

		public Long getDwo_order_detail_dimension_uid() {
			return this.dwo_order_detail_dimension_uid;
		}

		public Integer source_system_order_detail_uid;

		public Integer getSource_system_order_detail_uid() {
			return this.source_system_order_detail_uid;
		}

		public Integer dwo_order_header_dimension_uid;

		public Integer getDwo_order_header_dimension_uid() {
			return this.dwo_order_header_dimension_uid;
		}

		public String rightsholder_on_record_account_number;

		public String getRightsholder_on_record_account_number() {
			return this.rightsholder_on_record_account_number;
		}

		public String rightsholder_on_record_name;

		public String getRightsholder_on_record_name() {
			return this.rightsholder_on_record_name;
		}

		public String product_name;

		public String getProduct_name() {
			return this.product_name;
		}

		public String product_code;

		public String getProduct_code() {
			return this.product_code;
		}

		public String product_family;

		public String getProduct_family() {
			return this.product_family;
		}

		public Integer number_of_units;

		public Integer getNumber_of_units() {
			return this.number_of_units;
		}

		public Integer unit_type;

		public Integer getUnit_type() {
			return this.unit_type;
		}

		public String publication_title;

		public String getPublication_title() {
			return this.publication_title;
		}

		public Integer item_status_code;

		public Integer getItem_status_code() {
			return this.item_status_code;
		}

		public String distribution_event_id;

		public String getDistribution_event_id() {
			return this.distribution_event_id;
		}

		public Integer source_of_content;

		public Integer getSource_of_content() {
			return this.source_of_content;
		}

		public Integer tax_pass_through_flag;

		public Integer getTax_pass_through_flag() {
			return this.tax_pass_through_flag;
		}

		public String publication_work_identifier;

		public String getPublication_work_identifier() {
			return this.publication_work_identifier;
		}

		public java.util.Date created_datetime;

		public java.util.Date getCreated_datetime() {
			return this.created_datetime;
		}

		public Integer created_by_user;

		public Integer getCreated_by_user() {
			return this.created_by_user;
		}

		public java.util.Date updated_datetime;

		public java.util.Date getUpdated_datetime() {
			return this.updated_datetime;
		}

		public Integer updated_by_user;

		public Integer getUpdated_by_user() {
			return this.updated_by_user;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ORDER_ETL_RFE_ETL.length) {
					if (length < 1024
							&& commonByteArray_ORDER_ETL_RFE_ETL.length == 0) {
						commonByteArray_ORDER_ETL_RFE_ETL = new byte[1024];
					} else {
						commonByteArray_ORDER_ETL_RFE_ETL = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ORDER_ETL_RFE_ETL, 0, length);
				strReturn = new String(commonByteArray_ORDER_ETL_RFE_ETL, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ORDER_ETL_RFE_ETL) {

				try {

					int length = 0;

					length = dis.readByte();
					if (length == -1) {
						this.dwo_order_detail_dimension_uid = null;
					} else {
						this.dwo_order_detail_dimension_uid = dis.readLong();
					}

					this.source_system_order_detail_uid = readInteger(dis);

					this.dwo_order_header_dimension_uid = readInteger(dis);

					this.rightsholder_on_record_account_number = readString(dis);

					this.rightsholder_on_record_name = readString(dis);

					this.product_name = readString(dis);

					this.product_code = readString(dis);

					this.product_family = readString(dis);

					this.number_of_units = readInteger(dis);

					this.unit_type = readInteger(dis);

					this.publication_title = readString(dis);

					this.item_status_code = readInteger(dis);

					this.distribution_event_id = readString(dis);

					this.source_of_content = readInteger(dis);

					this.tax_pass_through_flag = readInteger(dis);

					this.publication_work_identifier = readString(dis);

					this.created_datetime = readDate(dis);

					this.created_by_user = readInteger(dis);

					this.updated_datetime = readDate(dis);

					this.updated_by_user = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Long

				if (this.dwo_order_detail_dimension_uid == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.dwo_order_detail_dimension_uid);
				}

				// Integer

				writeInteger(this.source_system_order_detail_uid, dos);

				// Integer

				writeInteger(this.dwo_order_header_dimension_uid, dos);

				// String

				writeString(this.rightsholder_on_record_account_number, dos);

				// String

				writeString(this.rightsholder_on_record_name, dos);

				// String

				writeString(this.product_name, dos);

				// String

				writeString(this.product_code, dos);

				// String

				writeString(this.product_family, dos);

				// Integer

				writeInteger(this.number_of_units, dos);

				// Integer

				writeInteger(this.unit_type, dos);

				// String

				writeString(this.publication_title, dos);

				// Integer

				writeInteger(this.item_status_code, dos);

				// String

				writeString(this.distribution_event_id, dos);

				// Integer

				writeInteger(this.source_of_content, dos);

				// Integer

				writeInteger(this.tax_pass_through_flag, dos);

				// String

				writeString(this.publication_work_identifier, dos);

				// java.util.Date

				writeDate(this.created_datetime, dos);

				// Integer

				writeInteger(this.created_by_user, dos);

				// java.util.Date

				writeDate(this.updated_datetime, dos);

				// Integer

				writeInteger(this.updated_by_user, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("dwo_order_detail_dimension_uid="
					+ String.valueOf(dwo_order_detail_dimension_uid));
			sb.append(",source_system_order_detail_uid="
					+ String.valueOf(source_system_order_detail_uid));
			sb.append(",dwo_order_header_dimension_uid="
					+ String.valueOf(dwo_order_header_dimension_uid));
			sb.append(",rightsholder_on_record_account_number="
					+ rightsholder_on_record_account_number);
			sb.append(",rightsholder_on_record_name="
					+ rightsholder_on_record_name);
			sb.append(",product_name=" + product_name);
			sb.append(",product_code=" + product_code);
			sb.append(",product_family=" + product_family);
			sb.append(",number_of_units=" + String.valueOf(number_of_units));
			sb.append(",unit_type=" + String.valueOf(unit_type));
			sb.append(",publication_title=" + publication_title);
			sb.append(",item_status_code=" + String.valueOf(item_status_code));
			sb.append(",distribution_event_id=" + distribution_event_id);
			sb.append(",source_of_content=" + String.valueOf(source_of_content));
			sb.append(",tax_pass_through_flag="
					+ String.valueOf(tax_pass_through_flag));
			sb.append(",publication_work_identifier="
					+ publication_work_identifier);
			sb.append(",created_datetime=" + String.valueOf(created_datetime));
			sb.append(",created_by_user=" + String.valueOf(created_by_user));
			sb.append(",updated_datetime=" + String.valueOf(updated_datetime));
			sb.append(",updated_by_user=" + String.valueOf(updated_by_user));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row8Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_8Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDBInput_8_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row8Struct row8 = new row8Struct();

				/**
				 * [tDBOutput_8 begin ] start
				 */

				ok_Hash.put("tDBOutput_8", false);
				start_Hash.put("tDBOutput_8", System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tDBOutput_8");
				tStatCatcher_1Process(globalMap);

				talendStats_STATS.addMessage("begin", "tDBOutput_8");
				talendStats_STATSProcess(globalMap);

				currentComponent = "tDBOutput_8";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row8" + iterateId, 0, 0);

					}
				}

				int tos_count_tDBOutput_8 = 0;

				String dbschema_tDBOutput_8 = null;
				dbschema_tDBOutput_8 = context.data_warehouse_order_dwos_schema;

				String tableName_tDBOutput_8 = null;
				if (dbschema_tDBOutput_8 == null
						|| dbschema_tDBOutput_8.trim().length() == 0) {
					tableName_tDBOutput_8 = "dwo_order_detail_dimension";
				} else {
					tableName_tDBOutput_8 = dbschema_tDBOutput_8 + "\".\""
							+ "dwo_order_detail_dimension";
				}

				int nb_line_tDBOutput_8 = 0;
				int nb_line_update_tDBOutput_8 = 0;
				int nb_line_inserted_tDBOutput_8 = 0;
				int nb_line_deleted_tDBOutput_8 = 0;
				int nb_line_rejected_tDBOutput_8 = 0;

				int deletedCount_tDBOutput_8 = 0;
				int updatedCount_tDBOutput_8 = 0;
				int insertedCount_tDBOutput_8 = 0;
				int rejectedCount_tDBOutput_8 = 0;

				boolean whetherReject_tDBOutput_8 = false;

				java.sql.Connection conn_tDBOutput_8 = null;
				String dbUser_tDBOutput_8 = null;

				java.lang.Class.forName("org.postgresql.Driver");
				String url_tDBOutput_8 = "jdbc:postgresql://"
						+ context.data_warehouse_order_dwos_host + ":"
						+ context.data_warehouse_order_dwos_port + "/"
						+ context.data_warehouse_order_dwos_database;
				dbUser_tDBOutput_8 = context.data_warehouse_order_dwos_username;

				final String decryptedPassword_tDBOutput_8 = context.data_warehouse_order_dwos_password;

				String dbPwd_tDBOutput_8 = decryptedPassword_tDBOutput_8;

				conn_tDBOutput_8 = java.sql.DriverManager.getConnection(
						url_tDBOutput_8, dbUser_tDBOutput_8, dbPwd_tDBOutput_8);

				resourceMap.put("conn_tDBOutput_8", conn_tDBOutput_8);
				conn_tDBOutput_8.setAutoCommit(false);
				int commitEvery_tDBOutput_8 = 10000;
				int commitCounter_tDBOutput_8 = 0;

				int batchSize_tDBOutput_8 = 10000;
				int batchSizeCounter_tDBOutput_8 = 0;

				int count_tDBOutput_8 = 0;
				String insert_tDBOutput_8 = "INSERT INTO \""
						+ tableName_tDBOutput_8
						+ "\" (\"dwo_order_detail_dimension_uid\",\"source_system_order_detail_uid\",\"dwo_order_header_dimension_uid\",\"rightsholder_on_record_account_number\",\"rightsholder_on_record_name\",\"product_name\",\"product_code\",\"product_family\",\"number_of_units\",\"unit_type\",\"publication_title\",\"item_status_code\",\"distribution_event_id\",\"source_of_content\",\"tax_pass_through_flag\",\"publication_work_identifier\",\"created_datetime\",\"created_by_user\",\"updated_datetime\",\"updated_by_user\") VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

				java.sql.PreparedStatement pstmt_tDBOutput_8 = conn_tDBOutput_8
						.prepareStatement(insert_tDBOutput_8);
				resourceMap.put("pstmt_tDBOutput_8", pstmt_tDBOutput_8);

				/**
				 * [tDBOutput_8 begin ] stop
				 */

				/**
				 * [tDBInput_8 begin ] start
				 */

				ok_Hash.put("tDBInput_8", false);
				start_Hash.put("tDBInput_8", System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tDBInput_8");
				tStatCatcher_1Process(globalMap);

				talendStats_STATS.addMessage("begin", "tDBInput_8");
				talendStats_STATSProcess(globalMap);

				currentComponent = "tDBInput_8";

				int tos_count_tDBInput_8 = 0;

				int nb_line_tDBInput_8 = 0;
				java.sql.Connection conn_tDBInput_8 = null;
				String driverClass_tDBInput_8 = "org.postgresql.Driver";
				java.lang.Class.forName(driverClass_tDBInput_8);
				String dbUser_tDBInput_8 = context.data_warehouse_order_dwos_username;

				final String decryptedPassword_tDBInput_8 = context.data_warehouse_order_dwos_password;

				String dbPwd_tDBInput_8 = decryptedPassword_tDBInput_8;

				String url_tDBInput_8 = "jdbc:postgresql://"
						+ context.data_warehouse_order_dwos_host + ":"
						+ context.data_warehouse_order_dwos_port + "/"
						+ context.data_warehouse_order_dwos_database;

				conn_tDBInput_8 = java.sql.DriverManager.getConnection(
						url_tDBInput_8, dbUser_tDBInput_8, dbPwd_tDBInput_8);

				conn_tDBInput_8.setAutoCommit(false);

				java.sql.Statement stmt_tDBInput_8 = conn_tDBInput_8
						.createStatement();
				stmt_tDBInput_8.setFetchSize(1000);

				String dbquery_tDBInput_8 = "SELECT nextval('staging.order_detail_dimension_seq') as dwo_order_detail_dimension_uid,\n       oi.orderitemid as source"
						+ "_system_order_detail_uid,\n       oi.orderitemid as dwo_order_header_dimension_uid,\n       NULL as rightsholder_on_record"
						+ "_account_number,\n       NULL as rightsholder_on_record_name,\n       case when oi.type = 0 then 'Document Delivery'\n	    "
						+ "when oi.type = 1 then 'Copyright Clearance'\n	    when oi.type = 2 then 'Book Loan'\n	    when oi.type = 3 then 'Book Purc"
						+ "hase'\n	    when oi.type = 4 then 'Rental'\n	    when oi.type = 100 then 'External Transaction'\n	    end as product_name,\n"
						+ "       case when c.productcode = 'VL20' then 'Standard'\n            when c.productcode = 'VL20P' then 'Plus'\n	    when c"
						+ ".productcode = 'CSCM' then 'Full'\n	    end as product_code,\n       NULL as product_family,\n       oi.usecopies as number"
						+ "_of_units,\n       oi.usecopies as unit_type, \n       ei.title as publication_title,\n       oi.status as item_status_code"
						+ ",\n       NULL as distribution_event_id,\n       oi.ffcollectionid as source_of_content,\n       oi.taxcategory as tax_pass"
						+ "_through_flag,\n       ei.stdnum as publication_work_identifier,\n       oi.createdtime as created_datetime,\n       oi.cre"
						+ "atedby as created_by_user,\n       oi.modifiedtime as updated_datetime,\n       oi.modifiedby as updated_by_user\nFROM stag"
						+ "ing.dwo_rfe_orderitem oi\nJOIN staging.dwo_rfe_exporderitem ei ON ei.orderitemid = oi.orderitemid\nJOIN staging.dwo_rfe_cl"
						+ "ient c on oi.clientid = oi.clientid";

				globalMap.put("tDBInput_8_QUERY", dbquery_tDBInput_8);
				java.sql.ResultSet rs_tDBInput_8 = null;

				try {
					rs_tDBInput_8 = stmt_tDBInput_8
							.executeQuery(dbquery_tDBInput_8);
					java.sql.ResultSetMetaData rsmd_tDBInput_8 = rs_tDBInput_8
							.getMetaData();
					int colQtyInRs_tDBInput_8 = rsmd_tDBInput_8
							.getColumnCount();

					String tmpContent_tDBInput_8 = null;

					while (rs_tDBInput_8.next()) {
						nb_line_tDBInput_8++;

						if (colQtyInRs_tDBInput_8 < 1) {
							row8.dwo_order_detail_dimension_uid = null;
						} else {

							if (rs_tDBInput_8.getObject(1) != null) {
								row8.dwo_order_detail_dimension_uid = rs_tDBInput_8
										.getLong(1);
							} else {
								row8.dwo_order_detail_dimension_uid = null;
							}
						}
						if (colQtyInRs_tDBInput_8 < 2) {
							row8.source_system_order_detail_uid = null;
						} else {

							if (rs_tDBInput_8.getObject(2) != null) {
								row8.source_system_order_detail_uid = rs_tDBInput_8
										.getInt(2);
							} else {
								row8.source_system_order_detail_uid = null;
							}
						}
						if (colQtyInRs_tDBInput_8 < 3) {
							row8.dwo_order_header_dimension_uid = null;
						} else {

							if (rs_tDBInput_8.getObject(3) != null) {
								row8.dwo_order_header_dimension_uid = rs_tDBInput_8
										.getInt(3);
							} else {
								row8.dwo_order_header_dimension_uid = null;
							}
						}
						if (colQtyInRs_tDBInput_8 < 4) {
							row8.rightsholder_on_record_account_number = null;
						} else {

							row8.rightsholder_on_record_account_number = routines.system.JDBCUtil
									.getString(rs_tDBInput_8, 4, false);
						}
						if (colQtyInRs_tDBInput_8 < 5) {
							row8.rightsholder_on_record_name = null;
						} else {

							row8.rightsholder_on_record_name = routines.system.JDBCUtil
									.getString(rs_tDBInput_8, 5, false);
						}
						if (colQtyInRs_tDBInput_8 < 6) {
							row8.product_name = null;
						} else {

							row8.product_name = routines.system.JDBCUtil
									.getString(rs_tDBInput_8, 6, false);
						}
						if (colQtyInRs_tDBInput_8 < 7) {
							row8.product_code = null;
						} else {

							row8.product_code = routines.system.JDBCUtil
									.getString(rs_tDBInput_8, 7, false);
						}
						if (colQtyInRs_tDBInput_8 < 8) {
							row8.product_family = null;
						} else {

							row8.product_family = routines.system.JDBCUtil
									.getString(rs_tDBInput_8, 8, false);
						}
						if (colQtyInRs_tDBInput_8 < 9) {
							row8.number_of_units = null;
						} else {

							if (rs_tDBInput_8.getObject(9) != null) {
								row8.number_of_units = rs_tDBInput_8.getInt(9);
							} else {
								row8.number_of_units = null;
							}
						}
						if (colQtyInRs_tDBInput_8 < 10) {
							row8.unit_type = null;
						} else {

							if (rs_tDBInput_8.getObject(10) != null) {
								row8.unit_type = rs_tDBInput_8.getInt(10);
							} else {
								row8.unit_type = null;
							}
						}
						if (colQtyInRs_tDBInput_8 < 11) {
							row8.publication_title = null;
						} else {

							row8.publication_title = routines.system.JDBCUtil
									.getString(rs_tDBInput_8, 11, false);
						}
						if (colQtyInRs_tDBInput_8 < 12) {
							row8.item_status_code = null;
						} else {

							if (rs_tDBInput_8.getObject(12) != null) {
								row8.item_status_code = rs_tDBInput_8
										.getInt(12);
							} else {
								row8.item_status_code = null;
							}
						}
						if (colQtyInRs_tDBInput_8 < 13) {
							row8.distribution_event_id = null;
						} else {

							row8.distribution_event_id = routines.system.JDBCUtil
									.getString(rs_tDBInput_8, 13, false);
						}
						if (colQtyInRs_tDBInput_8 < 14) {
							row8.source_of_content = null;
						} else {

							if (rs_tDBInput_8.getObject(14) != null) {
								row8.source_of_content = rs_tDBInput_8
										.getInt(14);
							} else {
								row8.source_of_content = null;
							}
						}
						if (colQtyInRs_tDBInput_8 < 15) {
							row8.tax_pass_through_flag = null;
						} else {

							if (rs_tDBInput_8.getObject(15) != null) {
								row8.tax_pass_through_flag = rs_tDBInput_8
										.getInt(15);
							} else {
								row8.tax_pass_through_flag = null;
							}
						}
						if (colQtyInRs_tDBInput_8 < 16) {
							row8.publication_work_identifier = null;
						} else {

							row8.publication_work_identifier = routines.system.JDBCUtil
									.getString(rs_tDBInput_8, 16, false);
						}
						if (colQtyInRs_tDBInput_8 < 17) {
							row8.created_datetime = null;
						} else {

							row8.created_datetime = routines.system.JDBCUtil
									.getDate(rs_tDBInput_8, 17);
						}
						if (colQtyInRs_tDBInput_8 < 18) {
							row8.created_by_user = null;
						} else {

							if (rs_tDBInput_8.getObject(18) != null) {
								row8.created_by_user = rs_tDBInput_8.getInt(18);
							} else {
								row8.created_by_user = null;
							}
						}
						if (colQtyInRs_tDBInput_8 < 19) {
							row8.updated_datetime = null;
						} else {

							row8.updated_datetime = routines.system.JDBCUtil
									.getDate(rs_tDBInput_8, 19);
						}
						if (colQtyInRs_tDBInput_8 < 20) {
							row8.updated_by_user = null;
						} else {

							if (rs_tDBInput_8.getObject(20) != null) {
								row8.updated_by_user = rs_tDBInput_8.getInt(20);
							} else {
								row8.updated_by_user = null;
							}
						}

						/**
						 * [tDBInput_8 begin ] stop
						 */

						/**
						 * [tDBInput_8 main ] start
						 */

						currentComponent = "tDBInput_8";

						tos_count_tDBInput_8++;

						/**
						 * [tDBInput_8 main ] stop
						 */

						/**
						 * [tDBInput_8 process_data_begin ] start
						 */

						currentComponent = "tDBInput_8";

						/**
						 * [tDBInput_8 process_data_begin ] stop
						 */

						/**
						 * [tDBOutput_8 main ] start
						 */

						currentComponent = "tDBOutput_8";

						// row8
						// row8

						if (execStat) {
							runStat.updateStatOnConnection("row8" + iterateId,
									1, 1);
						}

						whetherReject_tDBOutput_8 = false;
						if (row8.dwo_order_detail_dimension_uid == null) {
							pstmt_tDBOutput_8
									.setNull(1, java.sql.Types.INTEGER);
						} else {
							pstmt_tDBOutput_8.setLong(1,
									row8.dwo_order_detail_dimension_uid);
						}

						if (row8.source_system_order_detail_uid == null) {
							pstmt_tDBOutput_8
									.setNull(2, java.sql.Types.INTEGER);
						} else {
							pstmt_tDBOutput_8.setInt(2,
									row8.source_system_order_detail_uid);
						}

						if (row8.dwo_order_header_dimension_uid == null) {
							pstmt_tDBOutput_8
									.setNull(3, java.sql.Types.INTEGER);
						} else {
							pstmt_tDBOutput_8.setInt(3,
									row8.dwo_order_header_dimension_uid);
						}

						if (row8.rightsholder_on_record_account_number == null) {
							pstmt_tDBOutput_8
									.setNull(4, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_8.setString(4,
									row8.rightsholder_on_record_account_number);
						}

						if (row8.rightsholder_on_record_name == null) {
							pstmt_tDBOutput_8
									.setNull(5, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_8.setString(5,
									row8.rightsholder_on_record_name);
						}

						if (row8.product_name == null) {
							pstmt_tDBOutput_8
									.setNull(6, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_8.setString(6, row8.product_name);
						}

						if (row8.product_code == null) {
							pstmt_tDBOutput_8
									.setNull(7, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_8.setString(7, row8.product_code);
						}

						if (row8.product_family == null) {
							pstmt_tDBOutput_8
									.setNull(8, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_8.setString(8, row8.product_family);
						}

						if (row8.number_of_units == null) {
							pstmt_tDBOutput_8
									.setNull(9, java.sql.Types.INTEGER);
						} else {
							pstmt_tDBOutput_8.setInt(9, row8.number_of_units);
						}

						if (row8.unit_type == null) {
							pstmt_tDBOutput_8.setNull(10,
									java.sql.Types.INTEGER);
						} else {
							pstmt_tDBOutput_8.setInt(10, row8.unit_type);
						}

						if (row8.publication_title == null) {
							pstmt_tDBOutput_8.setNull(11,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_8.setString(11,
									row8.publication_title);
						}

						if (row8.item_status_code == null) {
							pstmt_tDBOutput_8.setNull(12,
									java.sql.Types.INTEGER);
						} else {
							pstmt_tDBOutput_8.setInt(12, row8.item_status_code);
						}

						if (row8.distribution_event_id == null) {
							pstmt_tDBOutput_8.setNull(13,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_8.setString(13,
									row8.distribution_event_id);
						}

						if (row8.source_of_content == null) {
							pstmt_tDBOutput_8.setNull(14,
									java.sql.Types.INTEGER);
						} else {
							pstmt_tDBOutput_8
									.setInt(14, row8.source_of_content);
						}

						if (row8.tax_pass_through_flag == null) {
							pstmt_tDBOutput_8.setNull(15,
									java.sql.Types.INTEGER);
						} else {
							pstmt_tDBOutput_8.setInt(15,
									row8.tax_pass_through_flag);
						}

						if (row8.publication_work_identifier == null) {
							pstmt_tDBOutput_8.setNull(16,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_8.setString(16,
									row8.publication_work_identifier);
						}

						if (row8.created_datetime != null) {
							pstmt_tDBOutput_8.setTimestamp(17,
									new java.sql.Timestamp(
											row8.created_datetime.getTime()));
						} else {
							pstmt_tDBOutput_8.setNull(17,
									java.sql.Types.TIMESTAMP);
						}

						if (row8.created_by_user == null) {
							pstmt_tDBOutput_8.setNull(18,
									java.sql.Types.INTEGER);
						} else {
							pstmt_tDBOutput_8.setInt(18, row8.created_by_user);
						}

						if (row8.updated_datetime != null) {
							pstmt_tDBOutput_8.setTimestamp(19,
									new java.sql.Timestamp(
											row8.updated_datetime.getTime()));
						} else {
							pstmt_tDBOutput_8.setNull(19,
									java.sql.Types.TIMESTAMP);
						}

						if (row8.updated_by_user == null) {
							pstmt_tDBOutput_8.setNull(20,
									java.sql.Types.INTEGER);
						} else {
							pstmt_tDBOutput_8.setInt(20, row8.updated_by_user);
						}

						pstmt_tDBOutput_8.addBatch();
						nb_line_tDBOutput_8++;

						batchSizeCounter_tDBOutput_8++;

						if ((batchSize_tDBOutput_8 > 0)
								&& (batchSize_tDBOutput_8 <= batchSizeCounter_tDBOutput_8)) {
							try {
								int countSum_tDBOutput_8 = 0;

								for (int countEach_tDBOutput_8 : pstmt_tDBOutput_8
										.executeBatch()) {
									countSum_tDBOutput_8 += (countEach_tDBOutput_8 < 0 ? 0
											: countEach_tDBOutput_8);
								}

								insertedCount_tDBOutput_8 += countSum_tDBOutput_8;

								batchSizeCounter_tDBOutput_8 = 0;
							} catch (java.sql.BatchUpdateException e_tDBOutput_8) {
								java.sql.SQLException ne_tDBOutput_8 = e_tDBOutput_8
										.getNextException(), sqle_tDBOutput_8 = null;
								String errormessage_tDBOutput_8;
								if (ne_tDBOutput_8 != null) {
									// build new exception to provide the
									// original cause
									sqle_tDBOutput_8 = new java.sql.SQLException(
											e_tDBOutput_8.getMessage()
													+ "\ncaused by: "
													+ ne_tDBOutput_8
															.getMessage(),
											ne_tDBOutput_8.getSQLState(),
											ne_tDBOutput_8.getErrorCode(),
											ne_tDBOutput_8);
									errormessage_tDBOutput_8 = sqle_tDBOutput_8
											.getMessage();
								} else {
									errormessage_tDBOutput_8 = e_tDBOutput_8
											.getMessage();
								}

								int countSum_tDBOutput_8 = 0;
								for (int countEach_tDBOutput_8 : e_tDBOutput_8
										.getUpdateCounts()) {
									countSum_tDBOutput_8 += (countEach_tDBOutput_8 < 0 ? 0
											: countEach_tDBOutput_8);
								}

								insertedCount_tDBOutput_8 += countSum_tDBOutput_8;

								System.err.println(errormessage_tDBOutput_8);

							}
						}

						commitCounter_tDBOutput_8++;
						if (commitEvery_tDBOutput_8 <= commitCounter_tDBOutput_8) {
							if ((batchSize_tDBOutput_8 > 0)
									&& (batchSizeCounter_tDBOutput_8 > 0)) {
								try {
									int countSum_tDBOutput_8 = 0;

									for (int countEach_tDBOutput_8 : pstmt_tDBOutput_8
											.executeBatch()) {
										countSum_tDBOutput_8 += (countEach_tDBOutput_8 < 0 ? 0
												: countEach_tDBOutput_8);
									}

									insertedCount_tDBOutput_8 += countSum_tDBOutput_8;

									batchSizeCounter_tDBOutput_8 = 0;
								} catch (java.sql.BatchUpdateException e_tDBOutput_8) {
									java.sql.SQLException ne_tDBOutput_8 = e_tDBOutput_8
											.getNextException(), sqle_tDBOutput_8 = null;
									String errormessage_tDBOutput_8;
									if (ne_tDBOutput_8 != null) {
										// build new exception to provide the
										// original cause
										sqle_tDBOutput_8 = new java.sql.SQLException(
												e_tDBOutput_8.getMessage()
														+ "\ncaused by: "
														+ ne_tDBOutput_8
																.getMessage(),
												ne_tDBOutput_8.getSQLState(),
												ne_tDBOutput_8.getErrorCode(),
												ne_tDBOutput_8);
										errormessage_tDBOutput_8 = sqle_tDBOutput_8
												.getMessage();
									} else {
										errormessage_tDBOutput_8 = e_tDBOutput_8
												.getMessage();
									}

									int countSum_tDBOutput_8 = 0;
									for (int countEach_tDBOutput_8 : e_tDBOutput_8
											.getUpdateCounts()) {
										countSum_tDBOutput_8 += (countEach_tDBOutput_8 < 0 ? 0
												: countEach_tDBOutput_8);
									}

									insertedCount_tDBOutput_8 += countSum_tDBOutput_8;

									System.err
											.println(errormessage_tDBOutput_8);

								}
							}
							conn_tDBOutput_8.commit();

							commitCounter_tDBOutput_8 = 0;
						}

						tos_count_tDBOutput_8++;

						/**
						 * [tDBOutput_8 main ] stop
						 */

						/**
						 * [tDBOutput_8 process_data_begin ] start
						 */

						currentComponent = "tDBOutput_8";

						/**
						 * [tDBOutput_8 process_data_begin ] stop
						 */

						/**
						 * [tDBOutput_8 process_data_end ] start
						 */

						currentComponent = "tDBOutput_8";

						/**
						 * [tDBOutput_8 process_data_end ] stop
						 */

						/**
						 * [tDBInput_8 process_data_end ] start
						 */

						currentComponent = "tDBInput_8";

						/**
						 * [tDBInput_8 process_data_end ] stop
						 */

						/**
						 * [tDBInput_8 end ] start
						 */

						currentComponent = "tDBInput_8";

					}
				} finally {
					if (rs_tDBInput_8 != null) {
						rs_tDBInput_8.close();
					}
					if (stmt_tDBInput_8 != null) {
						stmt_tDBInput_8.close();
					}
					if (conn_tDBInput_8 != null && !conn_tDBInput_8.isClosed()) {

						conn_tDBInput_8.commit();

						conn_tDBInput_8.close();

					}

				}
				globalMap.put("tDBInput_8_NB_LINE", nb_line_tDBInput_8);

				ok_Hash.put("tDBInput_8", true);
				end_Hash.put("tDBInput_8", System.currentTimeMillis());

				tStatCatcher_1.addMessage(
						"end",
						"tDBInput_8",
						end_Hash.get("tDBInput_8")
								- start_Hash.get("tDBInput_8"));
				tStatCatcher_1Process(globalMap);
				talendStats_STATS.addMessage(
						"end",
						"tDBInput_8",
						end_Hash.get("tDBInput_8")
								- start_Hash.get("tDBInput_8"));
				talendStats_STATSProcess(globalMap);

				/**
				 * [tDBInput_8 end ] stop
				 */

				/**
				 * [tDBOutput_8 end ] start
				 */

				currentComponent = "tDBOutput_8";

				try {
					int countSum_tDBOutput_8 = 0;
					if (pstmt_tDBOutput_8 != null
							&& batchSizeCounter_tDBOutput_8 > 0) {

						for (int countEach_tDBOutput_8 : pstmt_tDBOutput_8
								.executeBatch()) {
							countSum_tDBOutput_8 += (countEach_tDBOutput_8 < 0 ? 0
									: countEach_tDBOutput_8);
						}

					}

					insertedCount_tDBOutput_8 += countSum_tDBOutput_8;

				} catch (java.sql.BatchUpdateException e_tDBOutput_8) {
					java.sql.SQLException ne_tDBOutput_8 = e_tDBOutput_8
							.getNextException(), sqle_tDBOutput_8 = null;
					String errormessage_tDBOutput_8;
					if (ne_tDBOutput_8 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_8 = new java.sql.SQLException(
								e_tDBOutput_8.getMessage() + "\ncaused by: "
										+ ne_tDBOutput_8.getMessage(),
								ne_tDBOutput_8.getSQLState(),
								ne_tDBOutput_8.getErrorCode(), ne_tDBOutput_8);
						errormessage_tDBOutput_8 = sqle_tDBOutput_8
								.getMessage();
					} else {
						errormessage_tDBOutput_8 = e_tDBOutput_8.getMessage();
					}

					int countSum_tDBOutput_8 = 0;
					for (int countEach_tDBOutput_8 : e_tDBOutput_8
							.getUpdateCounts()) {
						countSum_tDBOutput_8 += (countEach_tDBOutput_8 < 0 ? 0
								: countEach_tDBOutput_8);
					}

					insertedCount_tDBOutput_8 += countSum_tDBOutput_8;

					System.err.println(errormessage_tDBOutput_8);

				}

				if (pstmt_tDBOutput_8 != null) {

					pstmt_tDBOutput_8.close();
					resourceMap.remove("pstmt_tDBOutput_8");
				}
				resourceMap.put("statementClosed_tDBOutput_8", true);

				conn_tDBOutput_8.commit();

				conn_tDBOutput_8.close();

				resourceMap.put("finish_tDBOutput_8", true);

				nb_line_deleted_tDBOutput_8 = nb_line_deleted_tDBOutput_8
						+ deletedCount_tDBOutput_8;
				nb_line_update_tDBOutput_8 = nb_line_update_tDBOutput_8
						+ updatedCount_tDBOutput_8;
				nb_line_inserted_tDBOutput_8 = nb_line_inserted_tDBOutput_8
						+ insertedCount_tDBOutput_8;
				nb_line_rejected_tDBOutput_8 = nb_line_rejected_tDBOutput_8
						+ rejectedCount_tDBOutput_8;

				globalMap.put("tDBOutput_8_NB_LINE", nb_line_tDBOutput_8);
				globalMap.put("tDBOutput_8_NB_LINE_UPDATED",
						nb_line_update_tDBOutput_8);
				globalMap.put("tDBOutput_8_NB_LINE_INSERTED",
						nb_line_inserted_tDBOutput_8);
				globalMap.put("tDBOutput_8_NB_LINE_DELETED",
						nb_line_deleted_tDBOutput_8);
				globalMap.put("tDBOutput_8_NB_LINE_REJECTED",
						nb_line_rejected_tDBOutput_8);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row8" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tDBOutput_8", true);
				end_Hash.put("tDBOutput_8", System.currentTimeMillis());

				tStatCatcher_1.addMessage(
						"end",
						"tDBOutput_8",
						end_Hash.get("tDBOutput_8")
								- start_Hash.get("tDBOutput_8"));
				tStatCatcher_1Process(globalMap);
				talendStats_STATS.addMessage(
						"end",
						"tDBOutput_8",
						end_Hash.get("tDBOutput_8")
								- start_Hash.get("tDBOutput_8"));
				talendStats_STATSProcess(globalMap);

				/**
				 * [tDBOutput_8 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_8 finally ] start
				 */

				currentComponent = "tDBInput_8";

				/**
				 * [tDBInput_8 finally ] stop
				 */

				/**
				 * [tDBOutput_8 finally ] start
				 */

				currentComponent = "tDBOutput_8";

				try {
					if (resourceMap.get("statementClosed_tDBOutput_8") == null) {
						java.sql.PreparedStatement pstmtToClose_tDBOutput_8 = null;
						if ((pstmtToClose_tDBOutput_8 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmt_tDBOutput_8")) != null) {
							pstmtToClose_tDBOutput_8.close();
						}
					}
				} finally {
					if (resourceMap.get("finish_tDBOutput_8") == null) {
						java.sql.Connection ctn_tDBOutput_8 = null;
						if ((ctn_tDBOutput_8 = (java.sql.Connection) resourceMap
								.get("conn_tDBOutput_8")) != null) {
							try {
								ctn_tDBOutput_8.close();
							} catch (java.sql.SQLException sqlEx_tDBOutput_8) {
								String errorMessage_tDBOutput_8 = "failed to close the connection in tDBOutput_8 :"
										+ sqlEx_tDBOutput_8.getMessage();
								System.err.println(errorMessage_tDBOutput_8);
							}
						}
					}
				}

				/**
				 * [tDBOutput_8 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_8_SUBPROCESS_STATE", 1);
	}

	public static class row9Struct implements
			routines.system.IPersistableRow<row9Struct> {
		final static byte[] commonByteArrayLock_ORDER_ETL_RFE_ETL = new byte[0];
		static byte[] commonByteArray_ORDER_ETL_RFE_ETL = new byte[0];

		public Long dwo_licensee_dimension_uid;

		public Long getDwo_licensee_dimension_uid() {
			return this.dwo_licensee_dimension_uid;
		}

		public Integer source_system_licensee_uid;

		public Integer getSource_system_licensee_uid() {
			return this.source_system_licensee_uid;
		}

		public String licensee_name;

		public String getLicensee_name() {
			return this.licensee_name;
		}

		public String licensee_contact_email;

		public String getLicensee_contact_email() {
			return this.licensee_contact_email;
		}

		public String licensee_sub_type;

		public String getLicensee_sub_type() {
			return this.licensee_sub_type;
		}

		public String parent_organization_uid;

		public String getParent_organization_uid() {
			return this.parent_organization_uid;
		}

		public String licensee_oracle_party_number;

		public String getLicensee_oracle_party_number() {
			return this.licensee_oracle_party_number;
		}

		public String licensee_tax_country;

		public String getLicensee_tax_country() {
			return this.licensee_tax_country;
		}

		public Boolean not_for_profit_flag;

		public Boolean getNot_for_profit_flag() {
			return this.not_for_profit_flag;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ORDER_ETL_RFE_ETL.length) {
					if (length < 1024
							&& commonByteArray_ORDER_ETL_RFE_ETL.length == 0) {
						commonByteArray_ORDER_ETL_RFE_ETL = new byte[1024];
					} else {
						commonByteArray_ORDER_ETL_RFE_ETL = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ORDER_ETL_RFE_ETL, 0, length);
				strReturn = new String(commonByteArray_ORDER_ETL_RFE_ETL, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ORDER_ETL_RFE_ETL) {

				try {

					int length = 0;

					length = dis.readByte();
					if (length == -1) {
						this.dwo_licensee_dimension_uid = null;
					} else {
						this.dwo_licensee_dimension_uid = dis.readLong();
					}

					this.source_system_licensee_uid = readInteger(dis);

					this.licensee_name = readString(dis);

					this.licensee_contact_email = readString(dis);

					this.licensee_sub_type = readString(dis);

					this.parent_organization_uid = readString(dis);

					this.licensee_oracle_party_number = readString(dis);

					this.licensee_tax_country = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.not_for_profit_flag = null;
					} else {
						this.not_for_profit_flag = dis.readBoolean();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Long

				if (this.dwo_licensee_dimension_uid == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.dwo_licensee_dimension_uid);
				}

				// Integer

				writeInteger(this.source_system_licensee_uid, dos);

				// String

				writeString(this.licensee_name, dos);

				// String

				writeString(this.licensee_contact_email, dos);

				// String

				writeString(this.licensee_sub_type, dos);

				// String

				writeString(this.parent_organization_uid, dos);

				// String

				writeString(this.licensee_oracle_party_number, dos);

				// String

				writeString(this.licensee_tax_country, dos);

				// Boolean

				if (this.not_for_profit_flag == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.not_for_profit_flag);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("dwo_licensee_dimension_uid="
					+ String.valueOf(dwo_licensee_dimension_uid));
			sb.append(",source_system_licensee_uid="
					+ String.valueOf(source_system_licensee_uid));
			sb.append(",licensee_name=" + licensee_name);
			sb.append(",licensee_contact_email=" + licensee_contact_email);
			sb.append(",licensee_sub_type=" + licensee_sub_type);
			sb.append(",parent_organization_uid=" + parent_organization_uid);
			sb.append(",licensee_oracle_party_number="
					+ licensee_oracle_party_number);
			sb.append(",licensee_tax_country=" + licensee_tax_country);
			sb.append(",not_for_profit_flag="
					+ String.valueOf(not_for_profit_flag));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row9Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_9Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDBInput_9_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row9Struct row9 = new row9Struct();

				/**
				 * [tDBOutput_9 begin ] start
				 */

				ok_Hash.put("tDBOutput_9", false);
				start_Hash.put("tDBOutput_9", System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tDBOutput_9");
				tStatCatcher_1Process(globalMap);

				talendStats_STATS.addMessage("begin", "tDBOutput_9");
				talendStats_STATSProcess(globalMap);

				currentComponent = "tDBOutput_9";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row9" + iterateId, 0, 0);

					}
				}

				int tos_count_tDBOutput_9 = 0;

				String dbschema_tDBOutput_9 = null;
				dbschema_tDBOutput_9 = context.data_warehouse_order_dwos_schema;

				String tableName_tDBOutput_9 = null;
				if (dbschema_tDBOutput_9 == null
						|| dbschema_tDBOutput_9.trim().length() == 0) {
					tableName_tDBOutput_9 = "dwo_licensee_dimension";
				} else {
					tableName_tDBOutput_9 = dbschema_tDBOutput_9 + "\".\""
							+ "dwo_licensee_dimension";
				}

				int nb_line_tDBOutput_9 = 0;
				int nb_line_update_tDBOutput_9 = 0;
				int nb_line_inserted_tDBOutput_9 = 0;
				int nb_line_deleted_tDBOutput_9 = 0;
				int nb_line_rejected_tDBOutput_9 = 0;

				int deletedCount_tDBOutput_9 = 0;
				int updatedCount_tDBOutput_9 = 0;
				int insertedCount_tDBOutput_9 = 0;
				int rejectedCount_tDBOutput_9 = 0;

				boolean whetherReject_tDBOutput_9 = false;

				java.sql.Connection conn_tDBOutput_9 = null;
				String dbUser_tDBOutput_9 = null;

				java.lang.Class.forName("org.postgresql.Driver");
				String url_tDBOutput_9 = "jdbc:postgresql://"
						+ context.data_warehouse_order_dwos_host + ":"
						+ context.data_warehouse_order_dwos_port + "/"
						+ context.data_warehouse_order_dwos_database;
				dbUser_tDBOutput_9 = context.data_warehouse_order_dwos_username;

				final String decryptedPassword_tDBOutput_9 = context.data_warehouse_order_dwos_password;

				String dbPwd_tDBOutput_9 = decryptedPassword_tDBOutput_9;

				conn_tDBOutput_9 = java.sql.DriverManager.getConnection(
						url_tDBOutput_9, dbUser_tDBOutput_9, dbPwd_tDBOutput_9);

				resourceMap.put("conn_tDBOutput_9", conn_tDBOutput_9);
				conn_tDBOutput_9.setAutoCommit(false);
				int commitEvery_tDBOutput_9 = 10000;
				int commitCounter_tDBOutput_9 = 0;

				int batchSize_tDBOutput_9 = 10000;
				int batchSizeCounter_tDBOutput_9 = 0;

				int count_tDBOutput_9 = 0;
				String insert_tDBOutput_9 = "INSERT INTO \""
						+ tableName_tDBOutput_9
						+ "\" (\"dwo_licensee_dimension_uid\",\"source_system_licensee_uid\",\"licensee_name\",\"licensee_contact_email\",\"licensee_sub_type\",\"parent_organization_uid\",\"licensee_oracle_party_number\",\"licensee_tax_country\",\"not_for_profit_flag\") VALUES (?,?,?,?,?,?,?,?,?)";

				java.sql.PreparedStatement pstmt_tDBOutput_9 = conn_tDBOutput_9
						.prepareStatement(insert_tDBOutput_9);
				resourceMap.put("pstmt_tDBOutput_9", pstmt_tDBOutput_9);

				/**
				 * [tDBOutput_9 begin ] stop
				 */

				/**
				 * [tDBInput_9 begin ] start
				 */

				ok_Hash.put("tDBInput_9", false);
				start_Hash.put("tDBInput_9", System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tDBInput_9");
				tStatCatcher_1Process(globalMap);

				talendStats_STATS.addMessage("begin", "tDBInput_9");
				talendStats_STATSProcess(globalMap);

				currentComponent = "tDBInput_9";

				int tos_count_tDBInput_9 = 0;

				int nb_line_tDBInput_9 = 0;
				java.sql.Connection conn_tDBInput_9 = null;
				String driverClass_tDBInput_9 = "org.postgresql.Driver";
				java.lang.Class.forName(driverClass_tDBInput_9);
				String dbUser_tDBInput_9 = context.data_warehouse_order_dwos_username;

				final String decryptedPassword_tDBInput_9 = context.data_warehouse_order_dwos_password;

				String dbPwd_tDBInput_9 = decryptedPassword_tDBInput_9;

				String url_tDBInput_9 = "jdbc:postgresql://"
						+ context.data_warehouse_order_dwos_host + ":"
						+ context.data_warehouse_order_dwos_port + "/"
						+ context.data_warehouse_order_dwos_database;

				conn_tDBInput_9 = java.sql.DriverManager.getConnection(
						url_tDBInput_9, dbUser_tDBInput_9, dbPwd_tDBInput_9);

				conn_tDBInput_9.setAutoCommit(false);

				java.sql.Statement stmt_tDBInput_9 = conn_tDBInput_9
						.createStatement();
				stmt_tDBInput_9.setFetchSize(1000);

				String dbquery_tDBInput_9 = "SELECT nextval('staging.licensee_dimension_seq') as dwo_licensee_dimension_uid,\n       c.clientid as source_system_lice"
						+ "nsee_uid,\n       c.clientname as licensee_name,\n       a.email as licensee_contact_email,\n       NULL as licensee_sub_ty"
						+ "pe,\n       NULL as parent_organization_uid,\n       NULL as licensee_oracle_party_number,\n CASE ei.deliverycountry\n  WHEN"
						+ " 'Afghanistan' THEN 'AF'\n  WHEN 'Åland Islands' THEN 'AX'\n  WHEN 'Albania' THEN 'AL'\n  WHEN 'Algeria' THEN 'DZ'\n  WHEN '"
						+ "American Samoa' THEN 'AS'\n  WHEN 'Andorra' THEN 'AD'\n  WHEN 'Angola' THEN 'AO'\n  WHEN 'Anguilla' THEN 'AI'\n  WHEN 'Antar"
						+ "ctica' THEN 'AQ'\n  WHEN 'Antigua and Barbuda' THEN 'AG'\n  WHEN 'Argentina' THEN 'AR'\n  WHEN 'Armenia' THEN 'AM'\n  WHEN '"
						+ "Aruba' THEN 'AW'\n  WHEN 'Australia' THEN 'AU'\n  WHEN 'Austria' THEN 'AT'\n  WHEN 'Azerbaijan' THEN 'AZ'\n  WHEN 'Bahamas' "
						+ "THEN 'BS'\n  WHEN 'Bahrain' THEN 'BH'\n  WHEN 'Bangladesh' THEN 'BD'\n  WHEN 'Barbados' THEN 'BB'\n  WHEN 'Belarus' THEN 'BY"
						+ "'\n  WHEN 'Belgium' THEN 'BE'\n  WHEN 'Belize' THEN 'BZ'\n  WHEN 'Benin' THEN 'BJ'\n  WHEN 'Bermuda' THEN 'BM'\n  WHEN 'Bhuta"
						+ "n' THEN 'BT'\n  WHEN 'Bolivia, Plurinational State of' THEN 'BO'\n  WHEN 'Bonaire, Sint Eustatius and Saba' THEN 'BQ'\n  WH"
						+ "EN 'Bosnia and Herzegovina' THEN 'BA'\n  WHEN 'Botswana' THEN 'BW'\n  WHEN 'Bouvet Island' THEN 'BV'\n  WHEN 'Brazil' THEN "
						+ "'BR'\n  WHEN 'British Indian Ocean Territory' THEN 'IO'\n  WHEN 'Brunei Darussalam' THEN 'BN'\n  WHEN 'Bulgaria' THEN 'BG'\n"
						+ "  WHEN 'Burkina Faso' THEN 'BF'\n  WHEN 'Burundi' THEN 'BI'\n  WHEN 'Cambodia' THEN 'KH'\n  WHEN 'Cameroon' THEN 'CM'\n  WHE"
						+ "N 'Canada' THEN 'CA'\n  WHEN 'Cape Verde' THEN 'CV'\n  WHEN 'Cayman Islands' THEN 'KY'\n  WHEN 'Central African Republic' T"
						+ "HEN 'CF'\n  WHEN 'Chad' THEN 'TD'\n  WHEN 'Chile' THEN 'CL'\n  WHEN 'China' THEN 'CN'\n  WHEN 'Christmas Island' THEN 'CX'\n "
						+ " WHEN 'Cocos (Keeling) Islands' THEN 'CC'\n  WHEN 'Colombia' THEN 'CO'\n  WHEN 'Comoros' THEN 'KM'\n  WHEN 'Congo' THEN 'CG"
						+ "'\n  WHEN 'Congo, The Democratic Republic of the' THEN 'CD'\n  WHEN 'Cook Islands' THEN 'CK'\n  WHEN 'Costa Rica' THEN 'CR'"
						+ "\n  WHEN 'Côte D''Ivoire' THEN 'CI'\n  WHEN 'Croatia' THEN 'HR'\n  WHEN 'Cuba' THEN 'CU'\n  WHEN 'Curaçao' THEN 'CW'\n  WHEN "
						+ "'Cyprus' THEN 'CY'\n  WHEN 'Czech Republic' THEN 'CZ'\n  WHEN 'Denmark' THEN 'DK'\n  WHEN 'Djibouti' THEN 'DJ'\n  WHEN 'Domi"
						+ "nica' THEN 'DM'\n  WHEN 'Dominican Republic' THEN 'DO'\n  WHEN 'Ecuador' THEN 'EC'\n  WHEN 'Egypt' THEN 'EG'\n  WHEN 'El Sal"
						+ "vador' THEN 'SV'\n  WHEN 'Equatorial Guinea' THEN 'GQ'\n  WHEN 'Eritrea' THEN 'ER'\n  WHEN 'Estonia' THEN 'EE'\n  WHEN 'Ethi"
						+ "opia' THEN 'ET'\n  WHEN 'Falkland Islands (Malvinas)' THEN 'FK'\n  WHEN 'Faroe Islands' THEN 'FO'\n  WHEN 'Fiji' THEN 'FJ'\n"
						+ "  WHEN 'Finland' THEN 'FI'\n  WHEN 'France' THEN 'FR'\n  WHEN 'French Guiana' THEN 'GF'\n  WHEN 'French Polynesia' THEN 'PF"
						+ "'\n  WHEN 'French Southern Territories' THEN 'TF'\n  WHEN 'Gabon' THEN 'GA'\n  WHEN 'Gambia' THEN 'GM'\n  WHEN 'Georgia' THE"
						+ "N 'GE'\n  WHEN 'Germany' THEN 'DE'\n  WHEN 'Ghana' THEN 'GH'\n  WHEN 'Gibraltar' THEN 'GI'\n  WHEN 'Greece' THEN 'GR'\n  WHEN"
						+ " 'Greenland' THEN 'GL'\n  WHEN 'Grenada' THEN 'GD'\n  WHEN 'Guadeloupe' THEN 'GP'\n  WHEN 'Guam' THEN 'GU'\n  WHEN 'Guatemal"
						+ "a' THEN 'GT'\n  WHEN 'Guernsey' THEN 'GG'\n  WHEN 'Guinea' THEN 'GN'\n  WHEN 'Guinea-Bissau' THEN 'GW'\n  WHEN 'Guyana' THEN"
						+ " 'GY'\n  WHEN 'Haiti' THEN 'HT'\n  WHEN 'Heard Island and McDonald Islands' THEN 'HM'\n  WHEN 'Holy See (Vatican City State"
						+ ")' THEN 'VA'\n  WHEN 'Honduras' THEN 'HN'\n  WHEN 'Hong Kong' THEN 'HK'\n  WHEN 'Hungary' THEN 'HU'\n  WHEN 'Iceland' THEN '"
						+ "IS'\n  WHEN 'India' THEN 'IN'\n  WHEN 'Indonesia' THEN 'ID'\n  WHEN 'Iran, Islamic Republic of' THEN 'IR'\n  WHEN 'Iraq' THE"
						+ "N 'IQ'\n  WHEN 'Ireland' THEN 'IE'\n  WHEN 'Isle of Man' THEN 'IM'\n  WHEN 'Israel' THEN 'IL'\n  WHEN 'Italy' THEN 'IT'\n  WH"
						+ "EN 'Jamaica' THEN 'JM'\n  WHEN 'Japan' THEN 'JP'\n  WHEN 'Jersey' THEN 'JE'\n  WHEN 'Jordan' THEN 'JO'\n  WHEN 'Kazakhstan' "
						+ "THEN 'KZ'\n  WHEN 'Kenya' THEN 'KE'\n  WHEN 'Kiribati' THEN 'KI'\n  WHEN 'Korea, Democratic People''s Republic of' THEN 'KP"
						+ "'\n  WHEN 'Korea, Republic of' THEN 'KR'\n  WHEN 'Kuwait' THEN 'KW'\n  WHEN 'Kyrgyzstan' THEN 'KG'\n  WHEN 'Lao People''s De"
						+ "mocratic Republic' THEN 'LA'\n  WHEN 'Latvia' THEN 'LV'\n  WHEN 'Lebanon' THEN 'LB'\n  WHEN 'Lesotho' THEN 'LS'\n  WHEN 'Lib"
						+ "eria' THEN 'LR'\n  WHEN 'Libya' THEN 'LY'\n  WHEN 'Liechtenstein' THEN 'LI'\n  WHEN 'Lithuania' THEN 'LT'\n  WHEN 'Luxembour"
						+ "g' THEN 'LU'\n  WHEN 'Macao' THEN 'MO'\n  WHEN 'Macedonia, The Former Yugoslav Republic of' THEN 'MK'\n  WHEN 'Madagascar' "
						+ "THEN 'MG'\n  WHEN 'Malawi' THEN 'MW'\n  WHEN 'Malaysia' THEN 'MY'\n  WHEN 'Maldives' THEN 'MV'\n  WHEN 'Mali' THEN 'ML'\n  WH"
						+ "EN 'Malta' THEN 'MT'\n  WHEN 'Marshall Islands' THEN 'MH'\n  WHEN 'Martinique' THEN 'MQ'\n  WHEN 'Mauritania' THEN 'MR'\n  W"
						+ "HEN 'Mauritius' THEN 'MU'\n  WHEN 'Mayotte' THEN 'YT'\n  WHEN 'Mexico' THEN 'MX'\n  WHEN 'Micronesia, Federated States of' "
						+ "THEN 'FM'\n  WHEN 'Moldova, Republic of' THEN 'MD'\n  WHEN 'Monaco' THEN 'MC'\n  WHEN 'Mongolia' THEN 'MN'\n  WHEN 'Monteneg"
						+ "ro' THEN 'ME'\n  WHEN 'Montserrat' THEN 'MS'\n  WHEN 'Morocco' THEN 'MA'\n  WHEN 'Mozambique' THEN 'MZ'\n  WHEN 'Myanmar' TH"
						+ "EN 'MM'\n  WHEN 'Namibia' THEN 'NA'\n  WHEN 'Nauru' THEN 'NR'\n  WHEN 'Nepal' THEN 'NP'\n  WHEN 'Netherlands' THEN 'NL'\n  WH"
						+ "EN 'New Caledonia' THEN 'NC'\n  WHEN 'New Zealand' THEN 'NZ'\n  WHEN 'Nicaragua' THEN 'NI'\n  WHEN 'Niger' THEN 'NE'\n  WHEN"
						+ " 'Nigeria' THEN 'NG'\n  WHEN 'Niue' THEN 'NU'\n  WHEN 'Norfolk Island' THEN 'NF'\n  WHEN 'Northern Mariana Islands' THEN 'M"
						+ "P'\n  WHEN 'Norway' THEN 'NO'\n  WHEN 'Oman' THEN 'OM'\n  WHEN 'Pakistan' THEN 'PK'\n  WHEN 'Palau' THEN 'PW'\n  WHEN 'Palest"
						+ "inian Territory, Occupied' THEN 'PS'\n  WHEN 'Panama' THEN 'PA'\n  WHEN 'Papua New Guinea' THEN 'PG'\n  WHEN 'Paraguay' THE"
						+ "N 'PY'\n  WHEN 'Peru' THEN 'PE'\n  WHEN 'Philippines' THEN 'PH'\n  WHEN 'Pitcairn' THEN 'PN'\n  WHEN 'Poland' THEN 'PL'\n  WH"
						+ "EN 'Portugal' THEN 'PT'\n  WHEN 'Puerto Rico' THEN 'PR'\n  WHEN 'Qatar' THEN 'QA'\n  WHEN 'Réunion' THEN 'RE'\n  WHEN 'Roman"
						+ "ia' THEN 'RO'\n  WHEN 'Russian Federation' THEN 'RU'\n  WHEN 'Rwanda' THEN 'RW'\n  WHEN 'Saint Barthélemy' THEN 'BL'\n  WHEN"
						+ " 'Saint Helena, Ascension and Tristan Da Cunha' THEN 'SH'\n  WHEN 'Saint Kitts and Nevis' THEN 'KN'\n  WHEN 'Saint Lucia' "
						+ "THEN 'LC'\n  WHEN 'Saint Martin (French Part)' THEN 'MF'\n  WHEN 'Saint Pierre and Miquelon' THEN 'PM'\n  WHEN 'Saint Vince"
						+ "nt and the Grenadines' THEN 'VC'\n  WHEN 'Samoa' THEN 'WS'\n  WHEN 'San Marino' THEN 'SM'\n  WHEN 'Sao Tome and Principe' T"
						+ "HEN 'ST'\n  WHEN 'Saudi Arabia' THEN 'SA'\n  WHEN 'Senegal' THEN 'SN'\n  WHEN 'Serbia' THEN 'RS'\n  WHEN 'Seychelles' THEN '"
						+ "SC'\n  WHEN 'Sierra Leone' THEN 'SL'\n  WHEN 'Singapore' THEN 'SG'\n  WHEN 'Sint Maarten (Dutch Part)' THEN 'SX'\n  WHEN 'Sl"
						+ "ovakia' THEN 'SK'\n  WHEN 'Slovenia' THEN 'SI'\n  WHEN 'Solomon Islands' THEN 'SB'\n  WHEN 'Somalia' THEN 'SO'\n  WHEN 'Sout"
						+ "h Africa' THEN 'ZA'\n  WHEN 'South Georgia and the South Sandwich Islands' THEN 'GS'\n  WHEN 'South Sudan' THEN 'SS'\n  WHE"
						+ "N 'Spain' THEN 'ES'\n  WHEN 'Sri Lanka' THEN 'LK'\n  WHEN 'Sudan' THEN 'SD'\n  WHEN 'Suriname' THEN 'SR'\n  WHEN 'Svalbard a"
						+ "nd Jan Mayen' THEN 'SJ'\n  WHEN 'Swaziland' THEN 'SZ'\n  WHEN 'Sweden' THEN 'SE'\n  WHEN 'Switzerland' THEN 'CH'\n  WHEN 'Sy"
						+ "rian Arab Republic' THEN 'SY'\n  WHEN 'Taiwan, Province of China' THEN 'TW'\n  WHEN 'Tajikistan' THEN 'TJ'\n  WHEN 'Tanzani"
						+ "a, United Republic of' THEN 'TZ'\n  WHEN 'Thailand' THEN 'TH'\n  WHEN 'Timor-Leste' THEN 'TL'\n  WHEN 'Togo' THEN 'TG'\n  WH"
						+ "EN 'Tokelau' THEN 'TK'\n  WHEN 'Tonga' THEN 'TO'\n  WHEN 'Trinidad and Tobago' THEN 'TT'\n  WHEN 'Tunisia' THEN 'TN'\n  WHEN"
						+ " 'Turkey' THEN 'TR'\n  WHEN 'Turkmenistan' THEN 'TM'\n  WHEN 'Turks and Caicos Islands' THEN 'TC'\n  WHEN 'Tuvalu' THEN 'TV"
						+ "'\n  WHEN 'Uganda' THEN 'UG'\n  WHEN 'Ukraine' THEN 'UA'\n  WHEN 'United Arab Emirates' THEN 'AE'\n  WHEN 'United Kingdom' T"
						+ "HEN 'GB'\n  WHEN 'United States' THEN 'US'\n  WHEN 'United States Minor Outlying Islands' THEN 'UM'\n  WHEN 'Uruguay' THEN "
						+ "'UY'\n  WHEN 'Uzbekistan' THEN 'UZ'\n  WHEN 'Vanuatu' THEN 'VU'\n  WHEN 'Venezuela, Bolivarian Republic of' THEN 'VE'\n  WHE"
						+ "N 'Viet Nam' THEN 'VN'\n  WHEN 'Virgin Islands, British' THEN 'VG'\n  WHEN 'Virgin Islands, U.S.' THEN 'VI'\n  WHEN 'Wallis"
						+ " and Futuna' THEN 'WF'\n  WHEN 'Western Sahara' THEN 'EH'\n  WHEN 'Yemen' THEN 'YE'\n  WHEN 'Zambia' THEN 'ZM'\n  WHEN 'Zimb"
						+ "abwe' THEN 'ZW'\n  ELSE ei.deliverycountry \nEND as licensee_tax_country,\nNULL::BOOLEAN as not_for_profit_flag\nFROM stagin"
						+ "g.dwo_rfe_client c\nJOIN staging.dwo_rfe_appuser a ON a.clientid = c.clientid\nJOIN staging.dwo_rfe_exporderitem ei ON ei."
						+ "clientid = c.clientid";

				globalMap.put("tDBInput_9_QUERY", dbquery_tDBInput_9);
				java.sql.ResultSet rs_tDBInput_9 = null;

				try {
					rs_tDBInput_9 = stmt_tDBInput_9
							.executeQuery(dbquery_tDBInput_9);
					java.sql.ResultSetMetaData rsmd_tDBInput_9 = rs_tDBInput_9
							.getMetaData();
					int colQtyInRs_tDBInput_9 = rsmd_tDBInput_9
							.getColumnCount();

					String tmpContent_tDBInput_9 = null;

					while (rs_tDBInput_9.next()) {
						nb_line_tDBInput_9++;

						if (colQtyInRs_tDBInput_9 < 1) {
							row9.dwo_licensee_dimension_uid = null;
						} else {

							if (rs_tDBInput_9.getObject(1) != null) {
								row9.dwo_licensee_dimension_uid = rs_tDBInput_9
										.getLong(1);
							} else {
								row9.dwo_licensee_dimension_uid = null;
							}
						}
						if (colQtyInRs_tDBInput_9 < 2) {
							row9.source_system_licensee_uid = null;
						} else {

							if (rs_tDBInput_9.getObject(2) != null) {
								row9.source_system_licensee_uid = rs_tDBInput_9
										.getInt(2);
							} else {
								row9.source_system_licensee_uid = null;
							}
						}
						if (colQtyInRs_tDBInput_9 < 3) {
							row9.licensee_name = null;
						} else {

							row9.licensee_name = routines.system.JDBCUtil
									.getString(rs_tDBInput_9, 3, true);
						}
						if (colQtyInRs_tDBInput_9 < 4) {
							row9.licensee_contact_email = null;
						} else {

							row9.licensee_contact_email = routines.system.JDBCUtil
									.getString(rs_tDBInput_9, 4, true);
						}
						if (colQtyInRs_tDBInput_9 < 5) {
							row9.licensee_sub_type = null;
						} else {

							row9.licensee_sub_type = routines.system.JDBCUtil
									.getString(rs_tDBInput_9, 5, true);
						}
						if (colQtyInRs_tDBInput_9 < 6) {
							row9.parent_organization_uid = null;
						} else {

							row9.parent_organization_uid = routines.system.JDBCUtil
									.getString(rs_tDBInput_9, 6, true);
						}
						if (colQtyInRs_tDBInput_9 < 7) {
							row9.licensee_oracle_party_number = null;
						} else {

							row9.licensee_oracle_party_number = routines.system.JDBCUtil
									.getString(rs_tDBInput_9, 7, true);
						}
						if (colQtyInRs_tDBInput_9 < 8) {
							row9.licensee_tax_country = null;
						} else {

							row9.licensee_tax_country = routines.system.JDBCUtil
									.getString(rs_tDBInput_9, 8, true);
						}
						if (colQtyInRs_tDBInput_9 < 9) {
							row9.not_for_profit_flag = null;
						} else {

							if (rs_tDBInput_9.getObject(9) != null) {
								row9.not_for_profit_flag = rs_tDBInput_9
										.getBoolean(9);
							} else {
								row9.not_for_profit_flag = null;
							}
						}

						/**
						 * [tDBInput_9 begin ] stop
						 */

						/**
						 * [tDBInput_9 main ] start
						 */

						currentComponent = "tDBInput_9";

						tos_count_tDBInput_9++;

						/**
						 * [tDBInput_9 main ] stop
						 */

						/**
						 * [tDBInput_9 process_data_begin ] start
						 */

						currentComponent = "tDBInput_9";

						/**
						 * [tDBInput_9 process_data_begin ] stop
						 */

						/**
						 * [tDBOutput_9 main ] start
						 */

						currentComponent = "tDBOutput_9";

						// row9
						// row9

						if (execStat) {
							runStat.updateStatOnConnection("row9" + iterateId,
									1, 1);
						}

						whetherReject_tDBOutput_9 = false;
						if (row9.dwo_licensee_dimension_uid == null) {
							pstmt_tDBOutput_9
									.setNull(1, java.sql.Types.INTEGER);
						} else {
							pstmt_tDBOutput_9.setLong(1,
									row9.dwo_licensee_dimension_uid);
						}

						if (row9.source_system_licensee_uid == null) {
							pstmt_tDBOutput_9
									.setNull(2, java.sql.Types.INTEGER);
						} else {
							pstmt_tDBOutput_9.setInt(2,
									row9.source_system_licensee_uid);
						}

						if (row9.licensee_name == null) {
							pstmt_tDBOutput_9
									.setNull(3, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_9.setString(3, row9.licensee_name);
						}

						if (row9.licensee_contact_email == null) {
							pstmt_tDBOutput_9
									.setNull(4, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_9.setString(4,
									row9.licensee_contact_email);
						}

						if (row9.licensee_sub_type == null) {
							pstmt_tDBOutput_9
									.setNull(5, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_9.setString(5,
									row9.licensee_sub_type);
						}

						if (row9.parent_organization_uid == null) {
							pstmt_tDBOutput_9
									.setNull(6, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_9.setString(6,
									row9.parent_organization_uid);
						}

						if (row9.licensee_oracle_party_number == null) {
							pstmt_tDBOutput_9
									.setNull(7, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_9.setString(7,
									row9.licensee_oracle_party_number);
						}

						if (row9.licensee_tax_country == null) {
							pstmt_tDBOutput_9
									.setNull(8, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_9.setString(8,
									row9.licensee_tax_country);
						}

						if (row9.not_for_profit_flag == null) {
							pstmt_tDBOutput_9
									.setNull(9, java.sql.Types.BOOLEAN);
						} else {
							pstmt_tDBOutput_9.setBoolean(9,
									row9.not_for_profit_flag);
						}

						pstmt_tDBOutput_9.addBatch();
						nb_line_tDBOutput_9++;

						batchSizeCounter_tDBOutput_9++;

						if ((batchSize_tDBOutput_9 > 0)
								&& (batchSize_tDBOutput_9 <= batchSizeCounter_tDBOutput_9)) {
							try {
								int countSum_tDBOutput_9 = 0;

								for (int countEach_tDBOutput_9 : pstmt_tDBOutput_9
										.executeBatch()) {
									countSum_tDBOutput_9 += (countEach_tDBOutput_9 < 0 ? 0
											: countEach_tDBOutput_9);
								}

								insertedCount_tDBOutput_9 += countSum_tDBOutput_9;

								batchSizeCounter_tDBOutput_9 = 0;
							} catch (java.sql.BatchUpdateException e_tDBOutput_9) {
								java.sql.SQLException ne_tDBOutput_9 = e_tDBOutput_9
										.getNextException(), sqle_tDBOutput_9 = null;
								String errormessage_tDBOutput_9;
								if (ne_tDBOutput_9 != null) {
									// build new exception to provide the
									// original cause
									sqle_tDBOutput_9 = new java.sql.SQLException(
											e_tDBOutput_9.getMessage()
													+ "\ncaused by: "
													+ ne_tDBOutput_9
															.getMessage(),
											ne_tDBOutput_9.getSQLState(),
											ne_tDBOutput_9.getErrorCode(),
											ne_tDBOutput_9);
									errormessage_tDBOutput_9 = sqle_tDBOutput_9
											.getMessage();
								} else {
									errormessage_tDBOutput_9 = e_tDBOutput_9
											.getMessage();
								}

								int countSum_tDBOutput_9 = 0;
								for (int countEach_tDBOutput_9 : e_tDBOutput_9
										.getUpdateCounts()) {
									countSum_tDBOutput_9 += (countEach_tDBOutput_9 < 0 ? 0
											: countEach_tDBOutput_9);
								}

								insertedCount_tDBOutput_9 += countSum_tDBOutput_9;

								System.err.println(errormessage_tDBOutput_9);

							}
						}

						commitCounter_tDBOutput_9++;
						if (commitEvery_tDBOutput_9 <= commitCounter_tDBOutput_9) {
							if ((batchSize_tDBOutput_9 > 0)
									&& (batchSizeCounter_tDBOutput_9 > 0)) {
								try {
									int countSum_tDBOutput_9 = 0;

									for (int countEach_tDBOutput_9 : pstmt_tDBOutput_9
											.executeBatch()) {
										countSum_tDBOutput_9 += (countEach_tDBOutput_9 < 0 ? 0
												: countEach_tDBOutput_9);
									}

									insertedCount_tDBOutput_9 += countSum_tDBOutput_9;

									batchSizeCounter_tDBOutput_9 = 0;
								} catch (java.sql.BatchUpdateException e_tDBOutput_9) {
									java.sql.SQLException ne_tDBOutput_9 = e_tDBOutput_9
											.getNextException(), sqle_tDBOutput_9 = null;
									String errormessage_tDBOutput_9;
									if (ne_tDBOutput_9 != null) {
										// build new exception to provide the
										// original cause
										sqle_tDBOutput_9 = new java.sql.SQLException(
												e_tDBOutput_9.getMessage()
														+ "\ncaused by: "
														+ ne_tDBOutput_9
																.getMessage(),
												ne_tDBOutput_9.getSQLState(),
												ne_tDBOutput_9.getErrorCode(),
												ne_tDBOutput_9);
										errormessage_tDBOutput_9 = sqle_tDBOutput_9
												.getMessage();
									} else {
										errormessage_tDBOutput_9 = e_tDBOutput_9
												.getMessage();
									}

									int countSum_tDBOutput_9 = 0;
									for (int countEach_tDBOutput_9 : e_tDBOutput_9
											.getUpdateCounts()) {
										countSum_tDBOutput_9 += (countEach_tDBOutput_9 < 0 ? 0
												: countEach_tDBOutput_9);
									}

									insertedCount_tDBOutput_9 += countSum_tDBOutput_9;

									System.err
											.println(errormessage_tDBOutput_9);

								}
							}
							conn_tDBOutput_9.commit();

							commitCounter_tDBOutput_9 = 0;
						}

						tos_count_tDBOutput_9++;

						/**
						 * [tDBOutput_9 main ] stop
						 */

						/**
						 * [tDBOutput_9 process_data_begin ] start
						 */

						currentComponent = "tDBOutput_9";

						/**
						 * [tDBOutput_9 process_data_begin ] stop
						 */

						/**
						 * [tDBOutput_9 process_data_end ] start
						 */

						currentComponent = "tDBOutput_9";

						/**
						 * [tDBOutput_9 process_data_end ] stop
						 */

						/**
						 * [tDBInput_9 process_data_end ] start
						 */

						currentComponent = "tDBInput_9";

						/**
						 * [tDBInput_9 process_data_end ] stop
						 */

						/**
						 * [tDBInput_9 end ] start
						 */

						currentComponent = "tDBInput_9";

					}
				} finally {
					if (rs_tDBInput_9 != null) {
						rs_tDBInput_9.close();
					}
					if (stmt_tDBInput_9 != null) {
						stmt_tDBInput_9.close();
					}
					if (conn_tDBInput_9 != null && !conn_tDBInput_9.isClosed()) {

						conn_tDBInput_9.commit();

						conn_tDBInput_9.close();

					}

				}
				globalMap.put("tDBInput_9_NB_LINE", nb_line_tDBInput_9);

				ok_Hash.put("tDBInput_9", true);
				end_Hash.put("tDBInput_9", System.currentTimeMillis());

				tStatCatcher_1.addMessage(
						"end",
						"tDBInput_9",
						end_Hash.get("tDBInput_9")
								- start_Hash.get("tDBInput_9"));
				tStatCatcher_1Process(globalMap);
				talendStats_STATS.addMessage(
						"end",
						"tDBInput_9",
						end_Hash.get("tDBInput_9")
								- start_Hash.get("tDBInput_9"));
				talendStats_STATSProcess(globalMap);

				/**
				 * [tDBInput_9 end ] stop
				 */

				/**
				 * [tDBOutput_9 end ] start
				 */

				currentComponent = "tDBOutput_9";

				try {
					int countSum_tDBOutput_9 = 0;
					if (pstmt_tDBOutput_9 != null
							&& batchSizeCounter_tDBOutput_9 > 0) {

						for (int countEach_tDBOutput_9 : pstmt_tDBOutput_9
								.executeBatch()) {
							countSum_tDBOutput_9 += (countEach_tDBOutput_9 < 0 ? 0
									: countEach_tDBOutput_9);
						}

					}

					insertedCount_tDBOutput_9 += countSum_tDBOutput_9;

				} catch (java.sql.BatchUpdateException e_tDBOutput_9) {
					java.sql.SQLException ne_tDBOutput_9 = e_tDBOutput_9
							.getNextException(), sqle_tDBOutput_9 = null;
					String errormessage_tDBOutput_9;
					if (ne_tDBOutput_9 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_9 = new java.sql.SQLException(
								e_tDBOutput_9.getMessage() + "\ncaused by: "
										+ ne_tDBOutput_9.getMessage(),
								ne_tDBOutput_9.getSQLState(),
								ne_tDBOutput_9.getErrorCode(), ne_tDBOutput_9);
						errormessage_tDBOutput_9 = sqle_tDBOutput_9
								.getMessage();
					} else {
						errormessage_tDBOutput_9 = e_tDBOutput_9.getMessage();
					}

					int countSum_tDBOutput_9 = 0;
					for (int countEach_tDBOutput_9 : e_tDBOutput_9
							.getUpdateCounts()) {
						countSum_tDBOutput_9 += (countEach_tDBOutput_9 < 0 ? 0
								: countEach_tDBOutput_9);
					}

					insertedCount_tDBOutput_9 += countSum_tDBOutput_9;

					System.err.println(errormessage_tDBOutput_9);

				}

				if (pstmt_tDBOutput_9 != null) {

					pstmt_tDBOutput_9.close();
					resourceMap.remove("pstmt_tDBOutput_9");
				}
				resourceMap.put("statementClosed_tDBOutput_9", true);

				conn_tDBOutput_9.commit();

				conn_tDBOutput_9.close();

				resourceMap.put("finish_tDBOutput_9", true);

				nb_line_deleted_tDBOutput_9 = nb_line_deleted_tDBOutput_9
						+ deletedCount_tDBOutput_9;
				nb_line_update_tDBOutput_9 = nb_line_update_tDBOutput_9
						+ updatedCount_tDBOutput_9;
				nb_line_inserted_tDBOutput_9 = nb_line_inserted_tDBOutput_9
						+ insertedCount_tDBOutput_9;
				nb_line_rejected_tDBOutput_9 = nb_line_rejected_tDBOutput_9
						+ rejectedCount_tDBOutput_9;

				globalMap.put("tDBOutput_9_NB_LINE", nb_line_tDBOutput_9);
				globalMap.put("tDBOutput_9_NB_LINE_UPDATED",
						nb_line_update_tDBOutput_9);
				globalMap.put("tDBOutput_9_NB_LINE_INSERTED",
						nb_line_inserted_tDBOutput_9);
				globalMap.put("tDBOutput_9_NB_LINE_DELETED",
						nb_line_deleted_tDBOutput_9);
				globalMap.put("tDBOutput_9_NB_LINE_REJECTED",
						nb_line_rejected_tDBOutput_9);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row9" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tDBOutput_9", true);
				end_Hash.put("tDBOutput_9", System.currentTimeMillis());

				tStatCatcher_1.addMessage(
						"end",
						"tDBOutput_9",
						end_Hash.get("tDBOutput_9")
								- start_Hash.get("tDBOutput_9"));
				tStatCatcher_1Process(globalMap);
				talendStats_STATS.addMessage(
						"end",
						"tDBOutput_9",
						end_Hash.get("tDBOutput_9")
								- start_Hash.get("tDBOutput_9"));
				talendStats_STATSProcess(globalMap);

				/**
				 * [tDBOutput_9 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_9 finally ] start
				 */

				currentComponent = "tDBInput_9";

				/**
				 * [tDBInput_9 finally ] stop
				 */

				/**
				 * [tDBOutput_9 finally ] start
				 */

				currentComponent = "tDBOutput_9";

				try {
					if (resourceMap.get("statementClosed_tDBOutput_9") == null) {
						java.sql.PreparedStatement pstmtToClose_tDBOutput_9 = null;
						if ((pstmtToClose_tDBOutput_9 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmt_tDBOutput_9")) != null) {
							pstmtToClose_tDBOutput_9.close();
						}
					}
				} finally {
					if (resourceMap.get("finish_tDBOutput_9") == null) {
						java.sql.Connection ctn_tDBOutput_9 = null;
						if ((ctn_tDBOutput_9 = (java.sql.Connection) resourceMap
								.get("conn_tDBOutput_9")) != null) {
							try {
								ctn_tDBOutput_9.close();
							} catch (java.sql.SQLException sqlEx_tDBOutput_9) {
								String errorMessage_tDBOutput_9 = "failed to close the connection in tDBOutput_9 :"
										+ sqlEx_tDBOutput_9.getMessage();
								System.err.println(errorMessage_tDBOutput_9);
							}
						}
					}
				}

				/**
				 * [tDBOutput_9 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_9_SUBPROCESS_STATE", 1);
	}

	public static class row5Struct implements
			routines.system.IPersistableRow<row5Struct> {
		final static byte[] commonByteArrayLock_ORDER_ETL_RFE_ETL = new byte[0];
		static byte[] commonByteArray_ORDER_ETL_RFE_ETL = new byte[0];

		public int InvoiceId;

		public int getInvoiceId() {
			return this.InvoiceId;
		}

		public int InvoiceRunId;

		public int getInvoiceRunId() {
			return this.InvoiceRunId;
		}

		public int InvoiceDefinitionId;

		public int getInvoiceDefinitionId() {
			return this.InvoiceDefinitionId;
		}

		public int EntityId;

		public int getEntityId() {
			return this.EntityId;
		}

		public short EntityType;

		public short getEntityType() {
			return this.EntityType;
		}

		public String Title;

		public String getTitle() {
			return this.Title;
		}

		public java.util.Date CreatedTime;

		public java.util.Date getCreatedTime() {
			return this.CreatedTime;
		}

		public int TransactionCount;

		public int getTransactionCount() {
			return this.TransactionCount;
		}

		public Object TotalAmount;

		public Object getTotalAmount() {
			return this.TotalAmount;
		}

		public String Currency;

		public String getCurrency() {
			return this.Currency;
		}

		public String InvoiceNumber;

		public String getInvoiceNumber() {
			return this.InvoiceNumber;
		}

		public String Filename;

		public String getFilename() {
			return this.Filename;
		}

		public short Status;

		public short getStatus() {
			return this.Status;
		}

		public int BillingMethod;

		public int getBillingMethod() {
			return this.BillingMethod;
		}

		public String BillingInfo;

		public String getBillingInfo() {
			return this.BillingInfo;
		}

		public String ContactInfo;

		public String getContactInfo() {
			return this.ContactInfo;
		}

		public Object TotalSH;

		public Object getTotalSH() {
			return this.TotalSH;
		}

		public Object TotalTax;

		public Object getTotalTax() {
			return this.TotalTax;
		}

		public Object TotalCR;

		public Object getTotalCR() {
			return this.TotalCR;
		}

		public Object TotalTransaction;

		public Object getTotalTransaction() {
			return this.TotalTransaction;
		}

		public Object TotalFF;

		public Object getTotalFF() {
			return this.TotalFF;
		}

		public Object TotalCRServices;

		public Object getTotalCRServices() {
			return this.TotalCRServices;
		}

		public Object TotalAdvRef;

		public Object getTotalAdvRef() {
			return this.TotalAdvRef;
		}

		public Object TotalOther;

		public Object getTotalOther() {
			return this.TotalOther;
		}

		public java.util.Date CommittedTime;

		public java.util.Date getCommittedTime() {
			return this.CommittedTime;
		}

		public int RunBy;

		public int getRunBy() {
			return this.RunBy;
		}

		public int ClientId;

		public int getClientId() {
			return this.ClientId;
		}

		public Object TotalAmountUSD;

		public Object getTotalAmountUSD() {
			return this.TotalAmountUSD;
		}

		public short Partner;

		public short getPartner() {
			return this.Partner;
		}

		public short BillingEntity;

		public short getBillingEntity() {
			return this.BillingEntity;
		}

		public String PaymentToken;

		public String getPaymentToken() {
			return this.PaymentToken;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ORDER_ETL_RFE_ETL.length) {
					if (length < 1024
							&& commonByteArray_ORDER_ETL_RFE_ETL.length == 0) {
						commonByteArray_ORDER_ETL_RFE_ETL = new byte[1024];
					} else {
						commonByteArray_ORDER_ETL_RFE_ETL = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ORDER_ETL_RFE_ETL, 0, length);
				strReturn = new String(commonByteArray_ORDER_ETL_RFE_ETL, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ORDER_ETL_RFE_ETL) {

				try {

					int length = 0;

					this.InvoiceId = dis.readInt();

					this.InvoiceRunId = dis.readInt();

					this.InvoiceDefinitionId = dis.readInt();

					this.EntityId = dis.readInt();

					this.EntityType = dis.readShort();

					this.Title = readString(dis);

					this.CreatedTime = readDate(dis);

					this.TransactionCount = dis.readInt();

					this.TotalAmount = (Object) dis.readObject();

					this.Currency = readString(dis);

					this.InvoiceNumber = readString(dis);

					this.Filename = readString(dis);

					this.Status = dis.readShort();

					this.BillingMethod = dis.readInt();

					this.BillingInfo = readString(dis);

					this.ContactInfo = readString(dis);

					this.TotalSH = (Object) dis.readObject();

					this.TotalTax = (Object) dis.readObject();

					this.TotalCR = (Object) dis.readObject();

					this.TotalTransaction = (Object) dis.readObject();

					this.TotalFF = (Object) dis.readObject();

					this.TotalCRServices = (Object) dis.readObject();

					this.TotalAdvRef = (Object) dis.readObject();

					this.TotalOther = (Object) dis.readObject();

					this.CommittedTime = readDate(dis);

					this.RunBy = dis.readInt();

					this.ClientId = dis.readInt();

					this.TotalAmountUSD = (Object) dis.readObject();

					this.Partner = dis.readShort();

					this.BillingEntity = dis.readShort();

					this.PaymentToken = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.InvoiceId);

				// int

				dos.writeInt(this.InvoiceRunId);

				// int

				dos.writeInt(this.InvoiceDefinitionId);

				// int

				dos.writeInt(this.EntityId);

				// short

				dos.writeShort(this.EntityType);

				// String

				writeString(this.Title, dos);

				// java.util.Date

				writeDate(this.CreatedTime, dos);

				// int

				dos.writeInt(this.TransactionCount);

				// Object

				dos.writeObject(this.TotalAmount);

				// String

				writeString(this.Currency, dos);

				// String

				writeString(this.InvoiceNumber, dos);

				// String

				writeString(this.Filename, dos);

				// short

				dos.writeShort(this.Status);

				// int

				dos.writeInt(this.BillingMethod);

				// String

				writeString(this.BillingInfo, dos);

				// String

				writeString(this.ContactInfo, dos);

				// Object

				dos.writeObject(this.TotalSH);

				// Object

				dos.writeObject(this.TotalTax);

				// Object

				dos.writeObject(this.TotalCR);

				// Object

				dos.writeObject(this.TotalTransaction);

				// Object

				dos.writeObject(this.TotalFF);

				// Object

				dos.writeObject(this.TotalCRServices);

				// Object

				dos.writeObject(this.TotalAdvRef);

				// Object

				dos.writeObject(this.TotalOther);

				// java.util.Date

				writeDate(this.CommittedTime, dos);

				// int

				dos.writeInt(this.RunBy);

				// int

				dos.writeInt(this.ClientId);

				// Object

				dos.writeObject(this.TotalAmountUSD);

				// short

				dos.writeShort(this.Partner);

				// short

				dos.writeShort(this.BillingEntity);

				// String

				writeString(this.PaymentToken, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("InvoiceId=" + String.valueOf(InvoiceId));
			sb.append(",InvoiceRunId=" + String.valueOf(InvoiceRunId));
			sb.append(",InvoiceDefinitionId="
					+ String.valueOf(InvoiceDefinitionId));
			sb.append(",EntityId=" + String.valueOf(EntityId));
			sb.append(",EntityType=" + String.valueOf(EntityType));
			sb.append(",Title=" + Title);
			sb.append(",CreatedTime=" + String.valueOf(CreatedTime));
			sb.append(",TransactionCount=" + String.valueOf(TransactionCount));
			sb.append(",TotalAmount=" + String.valueOf(TotalAmount));
			sb.append(",Currency=" + Currency);
			sb.append(",InvoiceNumber=" + InvoiceNumber);
			sb.append(",Filename=" + Filename);
			sb.append(",Status=" + String.valueOf(Status));
			sb.append(",BillingMethod=" + String.valueOf(BillingMethod));
			sb.append(",BillingInfo=" + BillingInfo);
			sb.append(",ContactInfo=" + ContactInfo);
			sb.append(",TotalSH=" + String.valueOf(TotalSH));
			sb.append(",TotalTax=" + String.valueOf(TotalTax));
			sb.append(",TotalCR=" + String.valueOf(TotalCR));
			sb.append(",TotalTransaction=" + String.valueOf(TotalTransaction));
			sb.append(",TotalFF=" + String.valueOf(TotalFF));
			sb.append(",TotalCRServices=" + String.valueOf(TotalCRServices));
			sb.append(",TotalAdvRef=" + String.valueOf(TotalAdvRef));
			sb.append(",TotalOther=" + String.valueOf(TotalOther));
			sb.append(",CommittedTime=" + String.valueOf(CommittedTime));
			sb.append(",RunBy=" + String.valueOf(RunBy));
			sb.append(",ClientId=" + String.valueOf(ClientId));
			sb.append(",TotalAmountUSD=" + String.valueOf(TotalAmountUSD));
			sb.append(",Partner=" + String.valueOf(Partner));
			sb.append(",BillingEntity=" + String.valueOf(BillingEntity));
			sb.append(",PaymentToken=" + PaymentToken);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row5Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_5Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDBInput_5_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row5Struct row5 = new row5Struct();

				/**
				 * [tDBOutput_5 begin ] start
				 */

				ok_Hash.put("tDBOutput_5", false);
				start_Hash.put("tDBOutput_5", System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tDBOutput_5");
				tStatCatcher_1Process(globalMap);

				talendStats_STATS.addMessage("begin", "tDBOutput_5");
				talendStats_STATSProcess(globalMap);

				currentComponent = "tDBOutput_5";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row5" + iterateId, 0, 0);

					}
				}

				int tos_count_tDBOutput_5 = 0;

				String dbschema_tDBOutput_5 = null;
				dbschema_tDBOutput_5 = context.data_warehouse_order_dwos_schema;

				String tableName_tDBOutput_5 = null;
				if (dbschema_tDBOutput_5 == null
						|| dbschema_tDBOutput_5.trim().length() == 0) {
					tableName_tDBOutput_5 = "dwo_rfe_invoice";
				} else {
					tableName_tDBOutput_5 = dbschema_tDBOutput_5 + "\".\""
							+ "dwo_rfe_invoice";
				}

				int nb_line_tDBOutput_5 = 0;
				int nb_line_update_tDBOutput_5 = 0;
				int nb_line_inserted_tDBOutput_5 = 0;
				int nb_line_deleted_tDBOutput_5 = 0;
				int nb_line_rejected_tDBOutput_5 = 0;

				int deletedCount_tDBOutput_5 = 0;
				int updatedCount_tDBOutput_5 = 0;
				int insertedCount_tDBOutput_5 = 0;
				int rejectedCount_tDBOutput_5 = 0;

				boolean whetherReject_tDBOutput_5 = false;

				java.sql.Connection conn_tDBOutput_5 = null;
				String dbUser_tDBOutput_5 = null;

				java.lang.Class.forName("org.postgresql.Driver");
				String url_tDBOutput_5 = "jdbc:postgresql://"
						+ context.data_warehouse_order_dwos_host + ":"
						+ context.data_warehouse_order_dwos_port + "/"
						+ context.data_warehouse_order_dwos_database;
				dbUser_tDBOutput_5 = context.data_warehouse_order_dwos_username;

				final String decryptedPassword_tDBOutput_5 = context.data_warehouse_order_dwos_password;

				String dbPwd_tDBOutput_5 = decryptedPassword_tDBOutput_5;

				conn_tDBOutput_5 = java.sql.DriverManager.getConnection(
						url_tDBOutput_5, dbUser_tDBOutput_5, dbPwd_tDBOutput_5);

				resourceMap.put("conn_tDBOutput_5", conn_tDBOutput_5);
				conn_tDBOutput_5.setAutoCommit(false);
				int commitEvery_tDBOutput_5 = 10000;
				int commitCounter_tDBOutput_5 = 0;

				int batchSize_tDBOutput_5 = 10000;
				int batchSizeCounter_tDBOutput_5 = 0;

				int count_tDBOutput_5 = 0;
				int rsTruncCountNumber_tDBOutput_5 = 0;
				try (java.sql.Statement stmtTruncCount_tDBOutput_5 = conn_tDBOutput_5
						.createStatement()) {
					try (java.sql.ResultSet rsTruncCount_tDBOutput_5 = stmtTruncCount_tDBOutput_5
							.executeQuery("SELECT COUNT(1) FROM \""
									+ tableName_tDBOutput_5 + "\"")) {
						if (rsTruncCount_tDBOutput_5.next()) {
							rsTruncCountNumber_tDBOutput_5 = rsTruncCount_tDBOutput_5
									.getInt(1);
						}
					}
				}
				try (java.sql.Statement stmtTrunc_tDBOutput_5 = conn_tDBOutput_5
						.createStatement()) {
					stmtTrunc_tDBOutput_5.executeUpdate("TRUNCATE TABLE \""
							+ tableName_tDBOutput_5 + "\"");
					deletedCount_tDBOutput_5 += rsTruncCountNumber_tDBOutput_5;
				}
				String insert_tDBOutput_5 = "INSERT INTO \""
						+ tableName_tDBOutput_5
						+ "\" (\"invoiceid\",\"invoicerunid\",\"invoicedefinitionid\",\"entityid\",\"entitytype\",\"title\",\"createdtime\",\"transactioncount\",\"totalamount\",\"currency\",\"invoicenumber\",\"filename\",\"status\",\"billingmethod\",\"billinginfo\",\"contactinfo\",\"totalsh\",\"totaltax\",\"totalcr\",\"totaltransaction\",\"totalff\",\"totalcrservices\",\"totaladvref\",\"totalother\",\"committedtime\",\"runby\",\"clientid\",\"totalamountusd\",\"partner\",\"billingentity\",\"paymenttoken\") VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

				java.sql.PreparedStatement pstmt_tDBOutput_5 = conn_tDBOutput_5
						.prepareStatement(insert_tDBOutput_5);
				resourceMap.put("pstmt_tDBOutput_5", pstmt_tDBOutput_5);

				/**
				 * [tDBOutput_5 begin ] stop
				 */

				/**
				 * [tDBInput_5 begin ] start
				 */

				ok_Hash.put("tDBInput_5", false);
				start_Hash.put("tDBInput_5", System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tDBInput_5");
				tStatCatcher_1Process(globalMap);

				talendStats_STATS.addMessage("begin", "tDBInput_5");
				talendStats_STATSProcess(globalMap);

				currentComponent = "tDBInput_5";

				int tos_count_tDBInput_5 = 0;

				org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_5 = org.talend.designer.components.util.mssql.MSSqlUtilFactory
						.getMSSqlGenerateTimestampUtil();

				java.util.List<String> talendToDBList_tDBInput_5 = new java.util.ArrayList();
				String[] talendToDBArray_tDBInput_5 = new String[] { "FLOAT",
						"NUMERIC", "NUMERIC IDENTITY", "DECIMAL",
						"DECIMAL IDENTITY", "REAL" };
				java.util.Collections.addAll(talendToDBList_tDBInput_5,
						talendToDBArray_tDBInput_5);
				int nb_line_tDBInput_5 = 0;
				java.sql.Connection conn_tDBInput_5 = null;
				conn_tDBInput_5 = (java.sql.Connection) globalMap
						.get("conn_tDBConnection_1");
				String dbschema_tDBInput_5 = (String) globalMap
						.get("dbschema_tDBConnection_1");

				java.sql.Statement stmt_tDBInput_5 = conn_tDBInput_5
						.createStatement();

				String dbquery_tDBInput_5 = "SELECT * FROM Invoice\nwhere createdtime > '2017-06-30 23:59:59'";

				globalMap.put("tDBInput_5_QUERY", dbquery_tDBInput_5);
				java.sql.ResultSet rs_tDBInput_5 = null;

				try {
					rs_tDBInput_5 = stmt_tDBInput_5
							.executeQuery(dbquery_tDBInput_5);
					java.sql.ResultSetMetaData rsmd_tDBInput_5 = rs_tDBInput_5
							.getMetaData();
					int colQtyInRs_tDBInput_5 = rsmd_tDBInput_5
							.getColumnCount();

					String tmpContent_tDBInput_5 = null;

					while (rs_tDBInput_5.next()) {
						nb_line_tDBInput_5++;

						if (colQtyInRs_tDBInput_5 < 1) {
							row5.InvoiceId = 0;
						} else {

							if (rs_tDBInput_5.getObject(1) != null) {
								row5.InvoiceId = rs_tDBInput_5.getInt(1);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_5 < 2) {
							row5.InvoiceRunId = 0;
						} else {

							if (rs_tDBInput_5.getObject(2) != null) {
								row5.InvoiceRunId = rs_tDBInput_5.getInt(2);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_5 < 3) {
							row5.InvoiceDefinitionId = 0;
						} else {

							if (rs_tDBInput_5.getObject(3) != null) {
								row5.InvoiceDefinitionId = rs_tDBInput_5
										.getInt(3);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_5 < 4) {
							row5.EntityId = 0;
						} else {

							if (rs_tDBInput_5.getObject(4) != null) {
								row5.EntityId = rs_tDBInput_5.getInt(4);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_5 < 5) {
							row5.EntityType = 0;
						} else {

							if (rs_tDBInput_5.getObject(5) != null) {
								row5.EntityType = rs_tDBInput_5.getShort(5);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_5 < 6) {
							row5.Title = null;
						} else {

							tmpContent_tDBInput_5 = rs_tDBInput_5.getString(6);
							if (tmpContent_tDBInput_5 != null) {
								if (talendToDBList_tDBInput_5
										.contains(rsmd_tDBInput_5
												.getColumnTypeName(6)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row5.Title = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_5);
								} else {
									row5.Title = tmpContent_tDBInput_5;
								}
							} else {
								row5.Title = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 7) {
							row5.CreatedTime = null;
						} else {

							row5.CreatedTime = mssqlGTU_tDBInput_5.getDate(
									rsmd_tDBInput_5, rs_tDBInput_5, 7);

						}
						if (colQtyInRs_tDBInput_5 < 8) {
							row5.TransactionCount = 0;
						} else {

							if (rs_tDBInput_5.getObject(8) != null) {
								row5.TransactionCount = rs_tDBInput_5.getInt(8);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_5 < 9) {
							row5.TotalAmount = null;
						} else {

							if (rs_tDBInput_5.getObject(9) != null) {
								row5.TotalAmount = rs_tDBInput_5.getObject(9);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_5 < 10) {
							row5.Currency = null;
						} else {

							tmpContent_tDBInput_5 = rs_tDBInput_5.getString(10);
							if (tmpContent_tDBInput_5 != null) {
								if (talendToDBList_tDBInput_5
										.contains(rsmd_tDBInput_5
												.getColumnTypeName(10)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row5.Currency = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_5);
								} else {
									row5.Currency = tmpContent_tDBInput_5;
								}
							} else {
								row5.Currency = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 11) {
							row5.InvoiceNumber = null;
						} else {

							tmpContent_tDBInput_5 = rs_tDBInput_5.getString(11);
							if (tmpContent_tDBInput_5 != null) {
								if (talendToDBList_tDBInput_5
										.contains(rsmd_tDBInput_5
												.getColumnTypeName(11)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row5.InvoiceNumber = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_5);
								} else {
									row5.InvoiceNumber = tmpContent_tDBInput_5;
								}
							} else {
								row5.InvoiceNumber = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 12) {
							row5.Filename = null;
						} else {

							tmpContent_tDBInput_5 = rs_tDBInput_5.getString(12);
							if (tmpContent_tDBInput_5 != null) {
								if (talendToDBList_tDBInput_5
										.contains(rsmd_tDBInput_5
												.getColumnTypeName(12)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row5.Filename = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_5);
								} else {
									row5.Filename = tmpContent_tDBInput_5;
								}
							} else {
								row5.Filename = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 13) {
							row5.Status = 0;
						} else {

							if (rs_tDBInput_5.getObject(13) != null) {
								row5.Status = rs_tDBInput_5.getShort(13);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_5 < 14) {
							row5.BillingMethod = 0;
						} else {

							if (rs_tDBInput_5.getObject(14) != null) {
								row5.BillingMethod = rs_tDBInput_5.getInt(14);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_5 < 15) {
							row5.BillingInfo = null;
						} else {

							tmpContent_tDBInput_5 = rs_tDBInput_5.getString(15);
							if (tmpContent_tDBInput_5 != null) {
								if (talendToDBList_tDBInput_5
										.contains(rsmd_tDBInput_5
												.getColumnTypeName(15)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row5.BillingInfo = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_5);
								} else {
									row5.BillingInfo = tmpContent_tDBInput_5;
								}
							} else {
								row5.BillingInfo = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 16) {
							row5.ContactInfo = null;
						} else {

							tmpContent_tDBInput_5 = rs_tDBInput_5.getString(16);
							if (tmpContent_tDBInput_5 != null) {
								if (talendToDBList_tDBInput_5
										.contains(rsmd_tDBInput_5
												.getColumnTypeName(16)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row5.ContactInfo = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_5);
								} else {
									row5.ContactInfo = tmpContent_tDBInput_5;
								}
							} else {
								row5.ContactInfo = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 17) {
							row5.TotalSH = null;
						} else {

							if (rs_tDBInput_5.getObject(17) != null) {
								row5.TotalSH = rs_tDBInput_5.getObject(17);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_5 < 18) {
							row5.TotalTax = null;
						} else {

							if (rs_tDBInput_5.getObject(18) != null) {
								row5.TotalTax = rs_tDBInput_5.getObject(18);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_5 < 19) {
							row5.TotalCR = null;
						} else {

							if (rs_tDBInput_5.getObject(19) != null) {
								row5.TotalCR = rs_tDBInput_5.getObject(19);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_5 < 20) {
							row5.TotalTransaction = null;
						} else {

							if (rs_tDBInput_5.getObject(20) != null) {
								row5.TotalTransaction = rs_tDBInput_5
										.getObject(20);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_5 < 21) {
							row5.TotalFF = null;
						} else {

							if (rs_tDBInput_5.getObject(21) != null) {
								row5.TotalFF = rs_tDBInput_5.getObject(21);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_5 < 22) {
							row5.TotalCRServices = null;
						} else {

							if (rs_tDBInput_5.getObject(22) != null) {
								row5.TotalCRServices = rs_tDBInput_5
										.getObject(22);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_5 < 23) {
							row5.TotalAdvRef = null;
						} else {

							if (rs_tDBInput_5.getObject(23) != null) {
								row5.TotalAdvRef = rs_tDBInput_5.getObject(23);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_5 < 24) {
							row5.TotalOther = null;
						} else {

							if (rs_tDBInput_5.getObject(24) != null) {
								row5.TotalOther = rs_tDBInput_5.getObject(24);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_5 < 25) {
							row5.CommittedTime = null;
						} else {

							row5.CommittedTime = mssqlGTU_tDBInput_5.getDate(
									rsmd_tDBInput_5, rs_tDBInput_5, 25);

						}
						if (colQtyInRs_tDBInput_5 < 26) {
							row5.RunBy = 0;
						} else {

							if (rs_tDBInput_5.getObject(26) != null) {
								row5.RunBy = rs_tDBInput_5.getInt(26);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_5 < 27) {
							row5.ClientId = 0;
						} else {

							if (rs_tDBInput_5.getObject(27) != null) {
								row5.ClientId = rs_tDBInput_5.getInt(27);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_5 < 28) {
							row5.TotalAmountUSD = null;
						} else {

							if (rs_tDBInput_5.getObject(28) != null) {
								row5.TotalAmountUSD = rs_tDBInput_5
										.getObject(28);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_5 < 29) {
							row5.Partner = 0;
						} else {

							if (rs_tDBInput_5.getObject(29) != null) {
								row5.Partner = rs_tDBInput_5.getShort(29);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_5 < 30) {
							row5.BillingEntity = 0;
						} else {

							if (rs_tDBInput_5.getObject(30) != null) {
								row5.BillingEntity = rs_tDBInput_5.getShort(30);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_5 < 31) {
							row5.PaymentToken = null;
						} else {

							tmpContent_tDBInput_5 = rs_tDBInput_5.getString(31);
							if (tmpContent_tDBInput_5 != null) {
								if (talendToDBList_tDBInput_5
										.contains(rsmd_tDBInput_5
												.getColumnTypeName(31)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row5.PaymentToken = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_5);
								} else {
									row5.PaymentToken = tmpContent_tDBInput_5;
								}
							} else {
								row5.PaymentToken = null;
							}
						}

						/**
						 * [tDBInput_5 begin ] stop
						 */

						/**
						 * [tDBInput_5 main ] start
						 */

						currentComponent = "tDBInput_5";

						tos_count_tDBInput_5++;

						/**
						 * [tDBInput_5 main ] stop
						 */

						/**
						 * [tDBInput_5 process_data_begin ] start
						 */

						currentComponent = "tDBInput_5";

						/**
						 * [tDBInput_5 process_data_begin ] stop
						 */

						/**
						 * [tDBOutput_5 main ] start
						 */

						currentComponent = "tDBOutput_5";

						// row5
						// row5

						if (execStat) {
							runStat.updateStatOnConnection("row5" + iterateId,
									1, 1);
						}

						whetherReject_tDBOutput_5 = false;
						pstmt_tDBOutput_5.setInt(1, row5.InvoiceId);

						pstmt_tDBOutput_5.setInt(2, row5.InvoiceRunId);

						pstmt_tDBOutput_5.setInt(3, row5.InvoiceDefinitionId);

						pstmt_tDBOutput_5.setInt(4, row5.EntityId);

						pstmt_tDBOutput_5.setShort(5, row5.EntityType);

						if (row5.Title == null) {
							pstmt_tDBOutput_5
									.setNull(6, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_5.setString(6, row5.Title);
						}

						if (row5.CreatedTime != null) {
							pstmt_tDBOutput_5.setTimestamp(
									7,
									new java.sql.Timestamp(row5.CreatedTime
											.getTime()));
						} else {
							pstmt_tDBOutput_5.setNull(7,
									java.sql.Types.TIMESTAMP);
						}

						pstmt_tDBOutput_5.setInt(8, row5.TransactionCount);

						if (row5.TotalAmount == null) {
							pstmt_tDBOutput_5.setNull(9, java.sql.Types.OTHER);
						} else {
							pstmt_tDBOutput_5.setObject(9, row5.TotalAmount);
						}

						if (row5.Currency == null) {
							pstmt_tDBOutput_5.setNull(10,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_5.setString(10, row5.Currency);
						}

						if (row5.InvoiceNumber == null) {
							pstmt_tDBOutput_5.setNull(11,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_5.setString(11, row5.InvoiceNumber);
						}

						if (row5.Filename == null) {
							pstmt_tDBOutput_5.setNull(12,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_5.setString(12, row5.Filename);
						}

						pstmt_tDBOutput_5.setShort(13, row5.Status);

						pstmt_tDBOutput_5.setInt(14, row5.BillingMethod);

						if (row5.BillingInfo == null) {
							pstmt_tDBOutput_5.setNull(15,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_5.setString(15, row5.BillingInfo);
						}

						if (row5.ContactInfo == null) {
							pstmt_tDBOutput_5.setNull(16,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_5.setString(16, row5.ContactInfo);
						}

						if (row5.TotalSH == null) {
							pstmt_tDBOutput_5.setNull(17, java.sql.Types.OTHER);
						} else {
							pstmt_tDBOutput_5.setObject(17, row5.TotalSH);
						}

						if (row5.TotalTax == null) {
							pstmt_tDBOutput_5.setNull(18, java.sql.Types.OTHER);
						} else {
							pstmt_tDBOutput_5.setObject(18, row5.TotalTax);
						}

						if (row5.TotalCR == null) {
							pstmt_tDBOutput_5.setNull(19, java.sql.Types.OTHER);
						} else {
							pstmt_tDBOutput_5.setObject(19, row5.TotalCR);
						}

						if (row5.TotalTransaction == null) {
							pstmt_tDBOutput_5.setNull(20, java.sql.Types.OTHER);
						} else {
							pstmt_tDBOutput_5.setObject(20,
									row5.TotalTransaction);
						}

						if (row5.TotalFF == null) {
							pstmt_tDBOutput_5.setNull(21, java.sql.Types.OTHER);
						} else {
							pstmt_tDBOutput_5.setObject(21, row5.TotalFF);
						}

						if (row5.TotalCRServices == null) {
							pstmt_tDBOutput_5.setNull(22, java.sql.Types.OTHER);
						} else {
							pstmt_tDBOutput_5.setObject(22,
									row5.TotalCRServices);
						}

						if (row5.TotalAdvRef == null) {
							pstmt_tDBOutput_5.setNull(23, java.sql.Types.OTHER);
						} else {
							pstmt_tDBOutput_5.setObject(23, row5.TotalAdvRef);
						}

						if (row5.TotalOther == null) {
							pstmt_tDBOutput_5.setNull(24, java.sql.Types.OTHER);
						} else {
							pstmt_tDBOutput_5.setObject(24, row5.TotalOther);
						}

						if (row5.CommittedTime != null) {
							pstmt_tDBOutput_5.setTimestamp(
									25,
									new java.sql.Timestamp(row5.CommittedTime
											.getTime()));
						} else {
							pstmt_tDBOutput_5.setNull(25,
									java.sql.Types.TIMESTAMP);
						}

						pstmt_tDBOutput_5.setInt(26, row5.RunBy);

						pstmt_tDBOutput_5.setInt(27, row5.ClientId);

						if (row5.TotalAmountUSD == null) {
							pstmt_tDBOutput_5.setNull(28, java.sql.Types.OTHER);
						} else {
							pstmt_tDBOutput_5
									.setObject(28, row5.TotalAmountUSD);
						}

						pstmt_tDBOutput_5.setShort(29, row5.Partner);

						pstmt_tDBOutput_5.setShort(30, row5.BillingEntity);

						if (row5.PaymentToken == null) {
							pstmt_tDBOutput_5.setNull(31,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_5.setString(31, row5.PaymentToken);
						}

						pstmt_tDBOutput_5.addBatch();
						nb_line_tDBOutput_5++;

						batchSizeCounter_tDBOutput_5++;

						if (!whetherReject_tDBOutput_5) {
						}
						if ((batchSize_tDBOutput_5 > 0)
								&& (batchSize_tDBOutput_5 <= batchSizeCounter_tDBOutput_5)) {
							try {
								int countSum_tDBOutput_5 = 0;

								for (int countEach_tDBOutput_5 : pstmt_tDBOutput_5
										.executeBatch()) {
									countSum_tDBOutput_5 += (countEach_tDBOutput_5 < 0 ? 0
											: countEach_tDBOutput_5);
								}

								insertedCount_tDBOutput_5 += countSum_tDBOutput_5;

								batchSizeCounter_tDBOutput_5 = 0;
							} catch (java.sql.BatchUpdateException e_tDBOutput_5) {
								java.sql.SQLException ne_tDBOutput_5 = e_tDBOutput_5
										.getNextException(), sqle_tDBOutput_5 = null;
								String errormessage_tDBOutput_5;
								if (ne_tDBOutput_5 != null) {
									// build new exception to provide the
									// original cause
									sqle_tDBOutput_5 = new java.sql.SQLException(
											e_tDBOutput_5.getMessage()
													+ "\ncaused by: "
													+ ne_tDBOutput_5
															.getMessage(),
											ne_tDBOutput_5.getSQLState(),
											ne_tDBOutput_5.getErrorCode(),
											ne_tDBOutput_5);
									errormessage_tDBOutput_5 = sqle_tDBOutput_5
											.getMessage();
								} else {
									errormessage_tDBOutput_5 = e_tDBOutput_5
											.getMessage();
								}

								int countSum_tDBOutput_5 = 0;
								for (int countEach_tDBOutput_5 : e_tDBOutput_5
										.getUpdateCounts()) {
									countSum_tDBOutput_5 += (countEach_tDBOutput_5 < 0 ? 0
											: countEach_tDBOutput_5);
								}

								insertedCount_tDBOutput_5 += countSum_tDBOutput_5;

								System.err.println(errormessage_tDBOutput_5);

							}
						}

						commitCounter_tDBOutput_5++;
						if (commitEvery_tDBOutput_5 <= commitCounter_tDBOutput_5) {
							if ((batchSize_tDBOutput_5 > 0)
									&& (batchSizeCounter_tDBOutput_5 > 0)) {
								try {
									int countSum_tDBOutput_5 = 0;

									for (int countEach_tDBOutput_5 : pstmt_tDBOutput_5
											.executeBatch()) {
										countSum_tDBOutput_5 += (countEach_tDBOutput_5 < 0 ? 0
												: countEach_tDBOutput_5);
									}

									insertedCount_tDBOutput_5 += countSum_tDBOutput_5;

									batchSizeCounter_tDBOutput_5 = 0;
								} catch (java.sql.BatchUpdateException e_tDBOutput_5) {
									java.sql.SQLException ne_tDBOutput_5 = e_tDBOutput_5
											.getNextException(), sqle_tDBOutput_5 = null;
									String errormessage_tDBOutput_5;
									if (ne_tDBOutput_5 != null) {
										// build new exception to provide the
										// original cause
										sqle_tDBOutput_5 = new java.sql.SQLException(
												e_tDBOutput_5.getMessage()
														+ "\ncaused by: "
														+ ne_tDBOutput_5
																.getMessage(),
												ne_tDBOutput_5.getSQLState(),
												ne_tDBOutput_5.getErrorCode(),
												ne_tDBOutput_5);
										errormessage_tDBOutput_5 = sqle_tDBOutput_5
												.getMessage();
									} else {
										errormessage_tDBOutput_5 = e_tDBOutput_5
												.getMessage();
									}

									int countSum_tDBOutput_5 = 0;
									for (int countEach_tDBOutput_5 : e_tDBOutput_5
											.getUpdateCounts()) {
										countSum_tDBOutput_5 += (countEach_tDBOutput_5 < 0 ? 0
												: countEach_tDBOutput_5);
									}

									insertedCount_tDBOutput_5 += countSum_tDBOutput_5;

									System.err
											.println(errormessage_tDBOutput_5);

								}
							}
							conn_tDBOutput_5.commit();

							commitCounter_tDBOutput_5 = 0;
						}

						tos_count_tDBOutput_5++;

						/**
						 * [tDBOutput_5 main ] stop
						 */

						/**
						 * [tDBOutput_5 process_data_begin ] start
						 */

						currentComponent = "tDBOutput_5";

						/**
						 * [tDBOutput_5 process_data_begin ] stop
						 */

						/**
						 * [tDBOutput_5 process_data_end ] start
						 */

						currentComponent = "tDBOutput_5";

						/**
						 * [tDBOutput_5 process_data_end ] stop
						 */

						/**
						 * [tDBInput_5 process_data_end ] start
						 */

						currentComponent = "tDBInput_5";

						/**
						 * [tDBInput_5 process_data_end ] stop
						 */

						/**
						 * [tDBInput_5 end ] start
						 */

						currentComponent = "tDBInput_5";

					}
				} finally {
					if (rs_tDBInput_5 != null) {
						rs_tDBInput_5.close();
					}
					if (stmt_tDBInput_5 != null) {
						stmt_tDBInput_5.close();
					}
				}
				globalMap.put("tDBInput_5_NB_LINE", nb_line_tDBInput_5);

				ok_Hash.put("tDBInput_5", true);
				end_Hash.put("tDBInput_5", System.currentTimeMillis());

				tStatCatcher_1.addMessage(
						"end",
						"tDBInput_5",
						end_Hash.get("tDBInput_5")
								- start_Hash.get("tDBInput_5"));
				tStatCatcher_1Process(globalMap);
				talendStats_STATS.addMessage(
						"end",
						"tDBInput_5",
						end_Hash.get("tDBInput_5")
								- start_Hash.get("tDBInput_5"));
				talendStats_STATSProcess(globalMap);

				/**
				 * [tDBInput_5 end ] stop
				 */

				/**
				 * [tDBOutput_5 end ] start
				 */

				currentComponent = "tDBOutput_5";

				try {
					int countSum_tDBOutput_5 = 0;
					if (pstmt_tDBOutput_5 != null
							&& batchSizeCounter_tDBOutput_5 > 0) {

						for (int countEach_tDBOutput_5 : pstmt_tDBOutput_5
								.executeBatch()) {
							countSum_tDBOutput_5 += (countEach_tDBOutput_5 < 0 ? 0
									: countEach_tDBOutput_5);
						}

					}

					insertedCount_tDBOutput_5 += countSum_tDBOutput_5;

				} catch (java.sql.BatchUpdateException e_tDBOutput_5) {
					java.sql.SQLException ne_tDBOutput_5 = e_tDBOutput_5
							.getNextException(), sqle_tDBOutput_5 = null;
					String errormessage_tDBOutput_5;
					if (ne_tDBOutput_5 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_5 = new java.sql.SQLException(
								e_tDBOutput_5.getMessage() + "\ncaused by: "
										+ ne_tDBOutput_5.getMessage(),
								ne_tDBOutput_5.getSQLState(),
								ne_tDBOutput_5.getErrorCode(), ne_tDBOutput_5);
						errormessage_tDBOutput_5 = sqle_tDBOutput_5
								.getMessage();
					} else {
						errormessage_tDBOutput_5 = e_tDBOutput_5.getMessage();
					}

					int countSum_tDBOutput_5 = 0;
					for (int countEach_tDBOutput_5 : e_tDBOutput_5
							.getUpdateCounts()) {
						countSum_tDBOutput_5 += (countEach_tDBOutput_5 < 0 ? 0
								: countEach_tDBOutput_5);
					}

					insertedCount_tDBOutput_5 += countSum_tDBOutput_5;

					System.err.println(errormessage_tDBOutput_5);

				}

				if (pstmt_tDBOutput_5 != null) {

					pstmt_tDBOutput_5.close();
					resourceMap.remove("pstmt_tDBOutput_5");
				}
				resourceMap.put("statementClosed_tDBOutput_5", true);

				conn_tDBOutput_5.commit();

				conn_tDBOutput_5.close();

				resourceMap.put("finish_tDBOutput_5", true);

				nb_line_deleted_tDBOutput_5 = nb_line_deleted_tDBOutput_5
						+ deletedCount_tDBOutput_5;
				nb_line_update_tDBOutput_5 = nb_line_update_tDBOutput_5
						+ updatedCount_tDBOutput_5;
				nb_line_inserted_tDBOutput_5 = nb_line_inserted_tDBOutput_5
						+ insertedCount_tDBOutput_5;
				nb_line_rejected_tDBOutput_5 = nb_line_rejected_tDBOutput_5
						+ rejectedCount_tDBOutput_5;

				globalMap.put("tDBOutput_5_NB_LINE", nb_line_tDBOutput_5);
				globalMap.put("tDBOutput_5_NB_LINE_UPDATED",
						nb_line_update_tDBOutput_5);
				globalMap.put("tDBOutput_5_NB_LINE_INSERTED",
						nb_line_inserted_tDBOutput_5);
				globalMap.put("tDBOutput_5_NB_LINE_DELETED",
						nb_line_deleted_tDBOutput_5);
				globalMap.put("tDBOutput_5_NB_LINE_REJECTED",
						nb_line_rejected_tDBOutput_5);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row5" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tDBOutput_5", true);
				end_Hash.put("tDBOutput_5", System.currentTimeMillis());

				tStatCatcher_1.addMessage(
						"end",
						"tDBOutput_5",
						end_Hash.get("tDBOutput_5")
								- start_Hash.get("tDBOutput_5"));
				tStatCatcher_1Process(globalMap);
				talendStats_STATS.addMessage(
						"end",
						"tDBOutput_5",
						end_Hash.get("tDBOutput_5")
								- start_Hash.get("tDBOutput_5"));
				talendStats_STATSProcess(globalMap);
				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk5", 0, "ok");
				}
				tDBInput_6Process(globalMap);

				/**
				 * [tDBOutput_5 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_5 finally ] start
				 */

				currentComponent = "tDBInput_5";

				/**
				 * [tDBInput_5 finally ] stop
				 */

				/**
				 * [tDBOutput_5 finally ] start
				 */

				currentComponent = "tDBOutput_5";

				try {
					if (resourceMap.get("statementClosed_tDBOutput_5") == null) {
						java.sql.PreparedStatement pstmtToClose_tDBOutput_5 = null;
						if ((pstmtToClose_tDBOutput_5 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmt_tDBOutput_5")) != null) {
							pstmtToClose_tDBOutput_5.close();
						}
					}
				} finally {
					if (resourceMap.get("finish_tDBOutput_5") == null) {
						java.sql.Connection ctn_tDBOutput_5 = null;
						if ((ctn_tDBOutput_5 = (java.sql.Connection) resourceMap
								.get("conn_tDBOutput_5")) != null) {
							try {
								ctn_tDBOutput_5.close();
							} catch (java.sql.SQLException sqlEx_tDBOutput_5) {
								String errorMessage_tDBOutput_5 = "failed to close the connection in tDBOutput_5 :"
										+ sqlEx_tDBOutput_5.getMessage();
								System.err.println(errorMessage_tDBOutput_5);
							}
						}
					}
				}

				/**
				 * [tDBOutput_5 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_5_SUBPROCESS_STATE", 1);
	}

	public static class row6Struct implements
			routines.system.IPersistableRow<row6Struct> {
		final static byte[] commonByteArrayLock_ORDER_ETL_RFE_ETL = new byte[0];
		static byte[] commonByteArray_ORDER_ETL_RFE_ETL = new byte[0];

		public Long dwo_invoice_dimension_uid;

		public Long getDwo_invoice_dimension_uid() {
			return this.dwo_invoice_dimension_uid;
		}

		public Integer source_system_invoice_uid;

		public Integer getSource_system_invoice_uid() {
			return this.source_system_invoice_uid;
		}

		public String invoice_number;

		public String getInvoice_number() {
			return this.invoice_number;
		}

		public String invoice_source_system;

		public String getInvoice_source_system() {
			return this.invoice_source_system;
		}

		public java.util.Date invoice_date;

		public java.util.Date getInvoice_date() {
			return this.invoice_date;
		}

		public Integer invoice_status;

		public Integer getInvoice_status() {
			return this.invoice_status;
		}

		public java.util.Date invoice_payment_date;

		public java.util.Date getInvoice_payment_date() {
			return this.invoice_payment_date;
		}

		public Double invoice_total_amount;

		public Double getInvoice_total_amount() {
			return this.invoice_total_amount;
		}

		public Double invoice_tax_amount;

		public Double getInvoice_tax_amount() {
			return this.invoice_tax_amount;
		}

		public BigDecimal invoice_discount_amount;

		public BigDecimal getInvoice_discount_amount() {
			return this.invoice_discount_amount;
		}

		public BigDecimal invoice_exchange_rate;

		public BigDecimal getInvoice_exchange_rate() {
			return this.invoice_exchange_rate;
		}

		public String channel;

		public String getChannel() {
			return this.channel;
		}

		public String currency;

		public String getCurrency() {
			return this.currency;
		}

		public String cart_type;

		public String getCart_type() {
			return this.cart_type;
		}

		public String organization_name;

		public String getOrganization_name() {
			return this.organization_name;
		}

		public Double total_amount_in_transaction_currency;

		public Double getTotal_amount_in_transaction_currency() {
			return this.total_amount_in_transaction_currency;
		}

		public BigDecimal original_amount_in_transaction_currency;

		public BigDecimal getOriginal_amount_in_transaction_currency() {
			return this.original_amount_in_transaction_currency;
		}

		public Double tax_amount_in_transaction_currency;

		public Double getTax_amount_in_transaction_currency() {
			return this.tax_amount_in_transaction_currency;
		}

		public String payment_status;

		public String getPayment_status() {
			return this.payment_status;
		}

		public String invoice_class;

		public String getInvoice_class() {
			return this.invoice_class;
		}

		public Integer organization_uid;

		public Integer getOrganization_uid() {
			return this.organization_uid;
		}

		public java.util.Date created_datetime;

		public java.util.Date getCreated_datetime() {
			return this.created_datetime;
		}

		public Integer created_by_user;

		public Integer getCreated_by_user() {
			return this.created_by_user;
		}

		public java.util.Date updated_datetime;

		public java.util.Date getUpdated_datetime() {
			return this.updated_datetime;
		}

		public String updated_by_user;

		public String getUpdated_by_user() {
			return this.updated_by_user;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ORDER_ETL_RFE_ETL.length) {
					if (length < 1024
							&& commonByteArray_ORDER_ETL_RFE_ETL.length == 0) {
						commonByteArray_ORDER_ETL_RFE_ETL = new byte[1024];
					} else {
						commonByteArray_ORDER_ETL_RFE_ETL = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ORDER_ETL_RFE_ETL, 0, length);
				strReturn = new String(commonByteArray_ORDER_ETL_RFE_ETL, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ORDER_ETL_RFE_ETL) {

				try {

					int length = 0;

					length = dis.readByte();
					if (length == -1) {
						this.dwo_invoice_dimension_uid = null;
					} else {
						this.dwo_invoice_dimension_uid = dis.readLong();
					}

					this.source_system_invoice_uid = readInteger(dis);

					this.invoice_number = readString(dis);

					this.invoice_source_system = readString(dis);

					this.invoice_date = readDate(dis);

					this.invoice_status = readInteger(dis);

					this.invoice_payment_date = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.invoice_total_amount = null;
					} else {
						this.invoice_total_amount = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.invoice_tax_amount = null;
					} else {
						this.invoice_tax_amount = dis.readDouble();
					}

					this.invoice_discount_amount = (BigDecimal) dis
							.readObject();

					this.invoice_exchange_rate = (BigDecimal) dis.readObject();

					this.channel = readString(dis);

					this.currency = readString(dis);

					this.cart_type = readString(dis);

					this.organization_name = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.total_amount_in_transaction_currency = null;
					} else {
						this.total_amount_in_transaction_currency = dis
								.readDouble();
					}

					this.original_amount_in_transaction_currency = (BigDecimal) dis
							.readObject();

					length = dis.readByte();
					if (length == -1) {
						this.tax_amount_in_transaction_currency = null;
					} else {
						this.tax_amount_in_transaction_currency = dis
								.readDouble();
					}

					this.payment_status = readString(dis);

					this.invoice_class = readString(dis);

					this.organization_uid = readInteger(dis);

					this.created_datetime = readDate(dis);

					this.created_by_user = readInteger(dis);

					this.updated_datetime = readDate(dis);

					this.updated_by_user = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Long

				if (this.dwo_invoice_dimension_uid == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.dwo_invoice_dimension_uid);
				}

				// Integer

				writeInteger(this.source_system_invoice_uid, dos);

				// String

				writeString(this.invoice_number, dos);

				// String

				writeString(this.invoice_source_system, dos);

				// java.util.Date

				writeDate(this.invoice_date, dos);

				// Integer

				writeInteger(this.invoice_status, dos);

				// java.util.Date

				writeDate(this.invoice_payment_date, dos);

				// Double

				if (this.invoice_total_amount == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.invoice_total_amount);
				}

				// Double

				if (this.invoice_tax_amount == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.invoice_tax_amount);
				}

				// BigDecimal

				dos.writeObject(this.invoice_discount_amount);

				// BigDecimal

				dos.writeObject(this.invoice_exchange_rate);

				// String

				writeString(this.channel, dos);

				// String

				writeString(this.currency, dos);

				// String

				writeString(this.cart_type, dos);

				// String

				writeString(this.organization_name, dos);

				// Double

				if (this.total_amount_in_transaction_currency == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.total_amount_in_transaction_currency);
				}

				// BigDecimal

				dos.writeObject(this.original_amount_in_transaction_currency);

				// Double

				if (this.tax_amount_in_transaction_currency == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.tax_amount_in_transaction_currency);
				}

				// String

				writeString(this.payment_status, dos);

				// String

				writeString(this.invoice_class, dos);

				// Integer

				writeInteger(this.organization_uid, dos);

				// java.util.Date

				writeDate(this.created_datetime, dos);

				// Integer

				writeInteger(this.created_by_user, dos);

				// java.util.Date

				writeDate(this.updated_datetime, dos);

				// String

				writeString(this.updated_by_user, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("dwo_invoice_dimension_uid="
					+ String.valueOf(dwo_invoice_dimension_uid));
			sb.append(",source_system_invoice_uid="
					+ String.valueOf(source_system_invoice_uid));
			sb.append(",invoice_number=" + invoice_number);
			sb.append(",invoice_source_system=" + invoice_source_system);
			sb.append(",invoice_date=" + String.valueOf(invoice_date));
			sb.append(",invoice_status=" + String.valueOf(invoice_status));
			sb.append(",invoice_payment_date="
					+ String.valueOf(invoice_payment_date));
			sb.append(",invoice_total_amount="
					+ String.valueOf(invoice_total_amount));
			sb.append(",invoice_tax_amount="
					+ String.valueOf(invoice_tax_amount));
			sb.append(",invoice_discount_amount="
					+ String.valueOf(invoice_discount_amount));
			sb.append(",invoice_exchange_rate="
					+ String.valueOf(invoice_exchange_rate));
			sb.append(",channel=" + channel);
			sb.append(",currency=" + currency);
			sb.append(",cart_type=" + cart_type);
			sb.append(",organization_name=" + organization_name);
			sb.append(",total_amount_in_transaction_currency="
					+ String.valueOf(total_amount_in_transaction_currency));
			sb.append(",original_amount_in_transaction_currency="
					+ String.valueOf(original_amount_in_transaction_currency));
			sb.append(",tax_amount_in_transaction_currency="
					+ String.valueOf(tax_amount_in_transaction_currency));
			sb.append(",payment_status=" + payment_status);
			sb.append(",invoice_class=" + invoice_class);
			sb.append(",organization_uid=" + String.valueOf(organization_uid));
			sb.append(",created_datetime=" + String.valueOf(created_datetime));
			sb.append(",created_by_user=" + String.valueOf(created_by_user));
			sb.append(",updated_datetime=" + String.valueOf(updated_datetime));
			sb.append(",updated_by_user=" + updated_by_user);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row6Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_6Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDBInput_6_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row6Struct row6 = new row6Struct();

				/**
				 * [tDBOutput_6 begin ] start
				 */

				ok_Hash.put("tDBOutput_6", false);
				start_Hash.put("tDBOutput_6", System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tDBOutput_6");
				tStatCatcher_1Process(globalMap);

				talendStats_STATS.addMessage("begin", "tDBOutput_6");
				talendStats_STATSProcess(globalMap);

				currentComponent = "tDBOutput_6";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row6" + iterateId, 0, 0);

					}
				}

				int tos_count_tDBOutput_6 = 0;

				String dbschema_tDBOutput_6 = null;
				dbschema_tDBOutput_6 = context.data_warehouse_order_dwos_schema;

				String tableName_tDBOutput_6 = null;
				if (dbschema_tDBOutput_6 == null
						|| dbschema_tDBOutput_6.trim().length() == 0) {
					tableName_tDBOutput_6 = "dwo_invoice_dimension";
				} else {
					tableName_tDBOutput_6 = dbschema_tDBOutput_6 + "\".\""
							+ "dwo_invoice_dimension";
				}

				int nb_line_tDBOutput_6 = 0;
				int nb_line_update_tDBOutput_6 = 0;
				int nb_line_inserted_tDBOutput_6 = 0;
				int nb_line_deleted_tDBOutput_6 = 0;
				int nb_line_rejected_tDBOutput_6 = 0;

				int deletedCount_tDBOutput_6 = 0;
				int updatedCount_tDBOutput_6 = 0;
				int insertedCount_tDBOutput_6 = 0;
				int rejectedCount_tDBOutput_6 = 0;

				boolean whetherReject_tDBOutput_6 = false;

				java.sql.Connection conn_tDBOutput_6 = null;
				String dbUser_tDBOutput_6 = null;

				java.lang.Class.forName("org.postgresql.Driver");
				String url_tDBOutput_6 = "jdbc:postgresql://"
						+ context.data_warehouse_order_dwos_host + ":"
						+ context.data_warehouse_order_dwos_port + "/"
						+ context.data_warehouse_order_dwos_database;
				dbUser_tDBOutput_6 = context.data_warehouse_order_dwos_username;

				final String decryptedPassword_tDBOutput_6 = context.data_warehouse_order_dwos_password;

				String dbPwd_tDBOutput_6 = decryptedPassword_tDBOutput_6;

				conn_tDBOutput_6 = java.sql.DriverManager.getConnection(
						url_tDBOutput_6, dbUser_tDBOutput_6, dbPwd_tDBOutput_6);

				resourceMap.put("conn_tDBOutput_6", conn_tDBOutput_6);
				conn_tDBOutput_6.setAutoCommit(false);
				int commitEvery_tDBOutput_6 = 10000;
				int commitCounter_tDBOutput_6 = 0;

				int batchSize_tDBOutput_6 = 10000;
				int batchSizeCounter_tDBOutput_6 = 0;

				int count_tDBOutput_6 = 0;
				String insert_tDBOutput_6 = "INSERT INTO \""
						+ tableName_tDBOutput_6
						+ "\" (\"dwo_invoice_dimension_uid\",\"source_system_invoice_uid\",\"invoice_number\",\"invoice_source_system\",\"invoice_date\",\"invoice_status\",\"invoice_payment_date\",\"invoice_total_amount\",\"invoice_tax_amount\",\"invoice_discount_amount\",\"invoice_exchange_rate\",\"channel\",\"currency\",\"cart_type\",\"organization_name\",\"total_amount_in_transaction_currency\",\"original_amount_in_transaction_currency\",\"tax_amount_in_transaction_currency\",\"payment_status\",\"invoice_class\",\"organization_uid\",\"created_datetime\",\"created_by_user\",\"updated_datetime\",\"updated_by_user\") VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

				java.sql.PreparedStatement pstmt_tDBOutput_6 = conn_tDBOutput_6
						.prepareStatement(insert_tDBOutput_6);
				resourceMap.put("pstmt_tDBOutput_6", pstmt_tDBOutput_6);

				/**
				 * [tDBOutput_6 begin ] stop
				 */

				/**
				 * [tDBInput_6 begin ] start
				 */

				ok_Hash.put("tDBInput_6", false);
				start_Hash.put("tDBInput_6", System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tDBInput_6");
				tStatCatcher_1Process(globalMap);

				talendStats_STATS.addMessage("begin", "tDBInput_6");
				talendStats_STATSProcess(globalMap);

				currentComponent = "tDBInput_6";

				int tos_count_tDBInput_6 = 0;

				int nb_line_tDBInput_6 = 0;
				java.sql.Connection conn_tDBInput_6 = null;
				String driverClass_tDBInput_6 = "org.postgresql.Driver";
				java.lang.Class.forName(driverClass_tDBInput_6);
				String dbUser_tDBInput_6 = context.data_warehouse_order_dwos_username;

				final String decryptedPassword_tDBInput_6 = context.data_warehouse_order_dwos_password;

				String dbPwd_tDBInput_6 = decryptedPassword_tDBInput_6;

				String url_tDBInput_6 = "jdbc:postgresql://"
						+ context.data_warehouse_order_dwos_host + ":"
						+ context.data_warehouse_order_dwos_port + "/"
						+ context.data_warehouse_order_dwos_database;

				conn_tDBInput_6 = java.sql.DriverManager.getConnection(
						url_tDBInput_6, dbUser_tDBInput_6, dbPwd_tDBInput_6);

				conn_tDBInput_6.setAutoCommit(false);

				java.sql.Statement stmt_tDBInput_6 = conn_tDBInput_6
						.createStatement();
				stmt_tDBInput_6.setFetchSize(1000);

				String dbquery_tDBInput_6 = "SELECT nextval('staging.invoice_dimension_seq') as dwo_invoice_dimension_uid,\n       i.invoiceid as source_system_invoi"
						+ "ce_uid,\n       i.invoicenumber as invoice_number,\n       'RFE' as invoice_source_system,\n       i.committedtime as invoi"
						+ "ce_date,\n       i.status as invoice_status,\n       NULL::TIMESTAMPTZ as invoice_payment_date,\n       i.totalamountusd::m"
						+ "oney::numeric::float8 as invoice_total_amount,\n       i.totaltax::money::numeric::float8 as invoice_tax_amount,\n       N"
						+ "ULL::NUMERIC as invoice_discount_amount,\n       NULL::NUMERIC as invoice_exchange_rate,\n       NULL as channel,\n       i"
						+ ".currency as currency,\n       NULL as cart_type,\n       c.clientname as organization_name,\n       i.totalamount::money::"
						+ "numeric::float8 as total_amount_in_transaction_currency,\n       NULL::NUMERIC as original_amount_in_transaction_currency"
						+ ",\n       i.totaltax::money::numeric::float8 as tax_amount_in_transaction_currency,\n       NULL as payment_status,\n      "
						+ " NULL as invoice_class,\n       c.clientid as organization_uid,\n       i.createdtime as created_datetime,\n       i.runby "
						+ "as created_by_user,\n       NULL::TIMESTAMPTZ as updated_datetime,\n       NULL as updated_by_user\nFROM staging.dwo_rfe_in"
						+ "voice i\nJOIN staging.dwo_rfe_client c ON c.clientid = i.clientid";

				globalMap.put("tDBInput_6_QUERY", dbquery_tDBInput_6);
				java.sql.ResultSet rs_tDBInput_6 = null;

				try {
					rs_tDBInput_6 = stmt_tDBInput_6
							.executeQuery(dbquery_tDBInput_6);
					java.sql.ResultSetMetaData rsmd_tDBInput_6 = rs_tDBInput_6
							.getMetaData();
					int colQtyInRs_tDBInput_6 = rsmd_tDBInput_6
							.getColumnCount();

					String tmpContent_tDBInput_6 = null;

					while (rs_tDBInput_6.next()) {
						nb_line_tDBInput_6++;

						if (colQtyInRs_tDBInput_6 < 1) {
							row6.dwo_invoice_dimension_uid = null;
						} else {

							if (rs_tDBInput_6.getObject(1) != null) {
								row6.dwo_invoice_dimension_uid = rs_tDBInput_6
										.getLong(1);
							} else {
								row6.dwo_invoice_dimension_uid = null;
							}
						}
						if (colQtyInRs_tDBInput_6 < 2) {
							row6.source_system_invoice_uid = null;
						} else {

							if (rs_tDBInput_6.getObject(2) != null) {
								row6.source_system_invoice_uid = rs_tDBInput_6
										.getInt(2);
							} else {
								row6.source_system_invoice_uid = null;
							}
						}
						if (colQtyInRs_tDBInput_6 < 3) {
							row6.invoice_number = null;
						} else {

							row6.invoice_number = routines.system.JDBCUtil
									.getString(rs_tDBInput_6, 3, false);
						}
						if (colQtyInRs_tDBInput_6 < 4) {
							row6.invoice_source_system = null;
						} else {

							row6.invoice_source_system = routines.system.JDBCUtil
									.getString(rs_tDBInput_6, 4, false);
						}
						if (colQtyInRs_tDBInput_6 < 5) {
							row6.invoice_date = null;
						} else {

							row6.invoice_date = routines.system.JDBCUtil
									.getDate(rs_tDBInput_6, 5);
						}
						if (colQtyInRs_tDBInput_6 < 6) {
							row6.invoice_status = null;
						} else {

							if (rs_tDBInput_6.getObject(6) != null) {
								row6.invoice_status = rs_tDBInput_6.getInt(6);
							} else {
								row6.invoice_status = null;
							}
						}
						if (colQtyInRs_tDBInput_6 < 7) {
							row6.invoice_payment_date = null;
						} else {

							row6.invoice_payment_date = routines.system.JDBCUtil
									.getDate(rs_tDBInput_6, 7);
						}
						if (colQtyInRs_tDBInput_6 < 8) {
							row6.invoice_total_amount = null;
						} else {

							if (rs_tDBInput_6.getObject(8) != null) {
								row6.invoice_total_amount = rs_tDBInput_6
										.getDouble(8);
							} else {
								row6.invoice_total_amount = null;
							}
						}
						if (colQtyInRs_tDBInput_6 < 9) {
							row6.invoice_tax_amount = null;
						} else {

							if (rs_tDBInput_6.getObject(9) != null) {
								row6.invoice_tax_amount = rs_tDBInput_6
										.getDouble(9);
							} else {
								row6.invoice_tax_amount = null;
							}
						}
						if (colQtyInRs_tDBInput_6 < 10) {
							row6.invoice_discount_amount = null;
						} else {

							if (rs_tDBInput_6.getObject(10) != null) {
								row6.invoice_discount_amount = rs_tDBInput_6
										.getBigDecimal(10);
							} else {
								row6.invoice_discount_amount = null;
							}
						}
						if (colQtyInRs_tDBInput_6 < 11) {
							row6.invoice_exchange_rate = null;
						} else {

							if (rs_tDBInput_6.getObject(11) != null) {
								row6.invoice_exchange_rate = rs_tDBInput_6
										.getBigDecimal(11);
							} else {
								row6.invoice_exchange_rate = null;
							}
						}
						if (colQtyInRs_tDBInput_6 < 12) {
							row6.channel = null;
						} else {

							row6.channel = routines.system.JDBCUtil.getString(
									rs_tDBInput_6, 12, false);
						}
						if (colQtyInRs_tDBInput_6 < 13) {
							row6.currency = null;
						} else {

							row6.currency = routines.system.JDBCUtil.getString(
									rs_tDBInput_6, 13, false);
						}
						if (colQtyInRs_tDBInput_6 < 14) {
							row6.cart_type = null;
						} else {

							row6.cart_type = routines.system.JDBCUtil
									.getString(rs_tDBInput_6, 14, false);
						}
						if (colQtyInRs_tDBInput_6 < 15) {
							row6.organization_name = null;
						} else {

							row6.organization_name = routines.system.JDBCUtil
									.getString(rs_tDBInput_6, 15, false);
						}
						if (colQtyInRs_tDBInput_6 < 16) {
							row6.total_amount_in_transaction_currency = null;
						} else {

							if (rs_tDBInput_6.getObject(16) != null) {
								row6.total_amount_in_transaction_currency = rs_tDBInput_6
										.getDouble(16);
							} else {
								row6.total_amount_in_transaction_currency = null;
							}
						}
						if (colQtyInRs_tDBInput_6 < 17) {
							row6.original_amount_in_transaction_currency = null;
						} else {

							if (rs_tDBInput_6.getObject(17) != null) {
								row6.original_amount_in_transaction_currency = rs_tDBInput_6
										.getBigDecimal(17);
							} else {
								row6.original_amount_in_transaction_currency = null;
							}
						}
						if (colQtyInRs_tDBInput_6 < 18) {
							row6.tax_amount_in_transaction_currency = null;
						} else {

							if (rs_tDBInput_6.getObject(18) != null) {
								row6.tax_amount_in_transaction_currency = rs_tDBInput_6
										.getDouble(18);
							} else {
								row6.tax_amount_in_transaction_currency = null;
							}
						}
						if (colQtyInRs_tDBInput_6 < 19) {
							row6.payment_status = null;
						} else {

							row6.payment_status = routines.system.JDBCUtil
									.getString(rs_tDBInput_6, 19, false);
						}
						if (colQtyInRs_tDBInput_6 < 20) {
							row6.invoice_class = null;
						} else {

							row6.invoice_class = routines.system.JDBCUtil
									.getString(rs_tDBInput_6, 20, false);
						}
						if (colQtyInRs_tDBInput_6 < 21) {
							row6.organization_uid = null;
						} else {

							if (rs_tDBInput_6.getObject(21) != null) {
								row6.organization_uid = rs_tDBInput_6
										.getInt(21);
							} else {
								row6.organization_uid = null;
							}
						}
						if (colQtyInRs_tDBInput_6 < 22) {
							row6.created_datetime = null;
						} else {

							row6.created_datetime = routines.system.JDBCUtil
									.getDate(rs_tDBInput_6, 22);
						}
						if (colQtyInRs_tDBInput_6 < 23) {
							row6.created_by_user = null;
						} else {

							if (rs_tDBInput_6.getObject(23) != null) {
								row6.created_by_user = rs_tDBInput_6.getInt(23);
							} else {
								row6.created_by_user = null;
							}
						}
						if (colQtyInRs_tDBInput_6 < 24) {
							row6.updated_datetime = null;
						} else {

							row6.updated_datetime = routines.system.JDBCUtil
									.getDate(rs_tDBInput_6, 24);
						}
						if (colQtyInRs_tDBInput_6 < 25) {
							row6.updated_by_user = null;
						} else {

							row6.updated_by_user = routines.system.JDBCUtil
									.getString(rs_tDBInput_6, 25, false);
						}

						/**
						 * [tDBInput_6 begin ] stop
						 */

						/**
						 * [tDBInput_6 main ] start
						 */

						currentComponent = "tDBInput_6";

						tos_count_tDBInput_6++;

						/**
						 * [tDBInput_6 main ] stop
						 */

						/**
						 * [tDBInput_6 process_data_begin ] start
						 */

						currentComponent = "tDBInput_6";

						/**
						 * [tDBInput_6 process_data_begin ] stop
						 */

						/**
						 * [tDBOutput_6 main ] start
						 */

						currentComponent = "tDBOutput_6";

						// row6
						// row6

						if (execStat) {
							runStat.updateStatOnConnection("row6" + iterateId,
									1, 1);
						}

						whetherReject_tDBOutput_6 = false;
						if (row6.dwo_invoice_dimension_uid == null) {
							pstmt_tDBOutput_6
									.setNull(1, java.sql.Types.INTEGER);
						} else {
							pstmt_tDBOutput_6.setLong(1,
									row6.dwo_invoice_dimension_uid);
						}

						if (row6.source_system_invoice_uid == null) {
							pstmt_tDBOutput_6
									.setNull(2, java.sql.Types.INTEGER);
						} else {
							pstmt_tDBOutput_6.setInt(2,
									row6.source_system_invoice_uid);
						}

						if (row6.invoice_number == null) {
							pstmt_tDBOutput_6
									.setNull(3, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_6.setString(3, row6.invoice_number);
						}

						if (row6.invoice_source_system == null) {
							pstmt_tDBOutput_6
									.setNull(4, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_6.setString(4,
									row6.invoice_source_system);
						}

						if (row6.invoice_date != null) {
							pstmt_tDBOutput_6.setTimestamp(
									5,
									new java.sql.Timestamp(row6.invoice_date
											.getTime()));
						} else {
							pstmt_tDBOutput_6.setNull(5,
									java.sql.Types.TIMESTAMP);
						}

						if (row6.invoice_status == null) {
							pstmt_tDBOutput_6
									.setNull(6, java.sql.Types.INTEGER);
						} else {
							pstmt_tDBOutput_6.setInt(6, row6.invoice_status);
						}

						if (row6.invoice_payment_date != null) {
							pstmt_tDBOutput_6
									.setTimestamp(
											7,
											new java.sql.Timestamp(
													row6.invoice_payment_date
															.getTime()));
						} else {
							pstmt_tDBOutput_6.setNull(7,
									java.sql.Types.TIMESTAMP);
						}

						if (row6.invoice_total_amount == null) {
							pstmt_tDBOutput_6.setNull(8, java.sql.Types.DOUBLE);
						} else {
							pstmt_tDBOutput_6.setDouble(8,
									row6.invoice_total_amount);
						}

						if (row6.invoice_tax_amount == null) {
							pstmt_tDBOutput_6.setNull(9, java.sql.Types.DOUBLE);
						} else {
							pstmt_tDBOutput_6.setDouble(9,
									row6.invoice_tax_amount);
						}

						pstmt_tDBOutput_6.setBigDecimal(10,
								row6.invoice_discount_amount);

						pstmt_tDBOutput_6.setBigDecimal(11,
								row6.invoice_exchange_rate);

						if (row6.channel == null) {
							pstmt_tDBOutput_6.setNull(12,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_6.setString(12, row6.channel);
						}

						if (row6.currency == null) {
							pstmt_tDBOutput_6.setNull(13,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_6.setString(13, row6.currency);
						}

						if (row6.cart_type == null) {
							pstmt_tDBOutput_6.setNull(14,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_6.setString(14, row6.cart_type);
						}

						if (row6.organization_name == null) {
							pstmt_tDBOutput_6.setNull(15,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_6.setString(15,
									row6.organization_name);
						}

						if (row6.total_amount_in_transaction_currency == null) {
							pstmt_tDBOutput_6
									.setNull(16, java.sql.Types.DOUBLE);
						} else {
							pstmt_tDBOutput_6.setDouble(16,
									row6.total_amount_in_transaction_currency);
						}

						pstmt_tDBOutput_6.setBigDecimal(17,
								row6.original_amount_in_transaction_currency);

						if (row6.tax_amount_in_transaction_currency == null) {
							pstmt_tDBOutput_6
									.setNull(18, java.sql.Types.DOUBLE);
						} else {
							pstmt_tDBOutput_6.setDouble(18,
									row6.tax_amount_in_transaction_currency);
						}

						if (row6.payment_status == null) {
							pstmt_tDBOutput_6.setNull(19,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_6
									.setString(19, row6.payment_status);
						}

						if (row6.invoice_class == null) {
							pstmt_tDBOutput_6.setNull(20,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_6.setString(20, row6.invoice_class);
						}

						if (row6.organization_uid == null) {
							pstmt_tDBOutput_6.setNull(21,
									java.sql.Types.INTEGER);
						} else {
							pstmt_tDBOutput_6.setInt(21, row6.organization_uid);
						}

						if (row6.created_datetime != null) {
							pstmt_tDBOutput_6.setTimestamp(22,
									new java.sql.Timestamp(
											row6.created_datetime.getTime()));
						} else {
							pstmt_tDBOutput_6.setNull(22,
									java.sql.Types.TIMESTAMP);
						}

						if (row6.created_by_user == null) {
							pstmt_tDBOutput_6.setNull(23,
									java.sql.Types.INTEGER);
						} else {
							pstmt_tDBOutput_6.setInt(23, row6.created_by_user);
						}

						if (row6.updated_datetime != null) {
							pstmt_tDBOutput_6.setTimestamp(24,
									new java.sql.Timestamp(
											row6.updated_datetime.getTime()));
						} else {
							pstmt_tDBOutput_6.setNull(24,
									java.sql.Types.TIMESTAMP);
						}

						if (row6.updated_by_user == null) {
							pstmt_tDBOutput_6.setNull(25,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_6.setString(25,
									row6.updated_by_user);
						}

						pstmt_tDBOutput_6.addBatch();
						nb_line_tDBOutput_6++;

						batchSizeCounter_tDBOutput_6++;

						if ((batchSize_tDBOutput_6 > 0)
								&& (batchSize_tDBOutput_6 <= batchSizeCounter_tDBOutput_6)) {
							try {
								int countSum_tDBOutput_6 = 0;

								for (int countEach_tDBOutput_6 : pstmt_tDBOutput_6
										.executeBatch()) {
									countSum_tDBOutput_6 += (countEach_tDBOutput_6 < 0 ? 0
											: countEach_tDBOutput_6);
								}

								insertedCount_tDBOutput_6 += countSum_tDBOutput_6;

								batchSizeCounter_tDBOutput_6 = 0;
							} catch (java.sql.BatchUpdateException e_tDBOutput_6) {
								java.sql.SQLException ne_tDBOutput_6 = e_tDBOutput_6
										.getNextException(), sqle_tDBOutput_6 = null;
								String errormessage_tDBOutput_6;
								if (ne_tDBOutput_6 != null) {
									// build new exception to provide the
									// original cause
									sqle_tDBOutput_6 = new java.sql.SQLException(
											e_tDBOutput_6.getMessage()
													+ "\ncaused by: "
													+ ne_tDBOutput_6
															.getMessage(),
											ne_tDBOutput_6.getSQLState(),
											ne_tDBOutput_6.getErrorCode(),
											ne_tDBOutput_6);
									errormessage_tDBOutput_6 = sqle_tDBOutput_6
											.getMessage();
								} else {
									errormessage_tDBOutput_6 = e_tDBOutput_6
											.getMessage();
								}

								int countSum_tDBOutput_6 = 0;
								for (int countEach_tDBOutput_6 : e_tDBOutput_6
										.getUpdateCounts()) {
									countSum_tDBOutput_6 += (countEach_tDBOutput_6 < 0 ? 0
											: countEach_tDBOutput_6);
								}

								insertedCount_tDBOutput_6 += countSum_tDBOutput_6;

								System.err.println(errormessage_tDBOutput_6);

							}
						}

						commitCounter_tDBOutput_6++;
						if (commitEvery_tDBOutput_6 <= commitCounter_tDBOutput_6) {
							if ((batchSize_tDBOutput_6 > 0)
									&& (batchSizeCounter_tDBOutput_6 > 0)) {
								try {
									int countSum_tDBOutput_6 = 0;

									for (int countEach_tDBOutput_6 : pstmt_tDBOutput_6
											.executeBatch()) {
										countSum_tDBOutput_6 += (countEach_tDBOutput_6 < 0 ? 0
												: countEach_tDBOutput_6);
									}

									insertedCount_tDBOutput_6 += countSum_tDBOutput_6;

									batchSizeCounter_tDBOutput_6 = 0;
								} catch (java.sql.BatchUpdateException e_tDBOutput_6) {
									java.sql.SQLException ne_tDBOutput_6 = e_tDBOutput_6
											.getNextException(), sqle_tDBOutput_6 = null;
									String errormessage_tDBOutput_6;
									if (ne_tDBOutput_6 != null) {
										// build new exception to provide the
										// original cause
										sqle_tDBOutput_6 = new java.sql.SQLException(
												e_tDBOutput_6.getMessage()
														+ "\ncaused by: "
														+ ne_tDBOutput_6
																.getMessage(),
												ne_tDBOutput_6.getSQLState(),
												ne_tDBOutput_6.getErrorCode(),
												ne_tDBOutput_6);
										errormessage_tDBOutput_6 = sqle_tDBOutput_6
												.getMessage();
									} else {
										errormessage_tDBOutput_6 = e_tDBOutput_6
												.getMessage();
									}

									int countSum_tDBOutput_6 = 0;
									for (int countEach_tDBOutput_6 : e_tDBOutput_6
											.getUpdateCounts()) {
										countSum_tDBOutput_6 += (countEach_tDBOutput_6 < 0 ? 0
												: countEach_tDBOutput_6);
									}

									insertedCount_tDBOutput_6 += countSum_tDBOutput_6;

									System.err
											.println(errormessage_tDBOutput_6);

								}
							}
							conn_tDBOutput_6.commit();

							commitCounter_tDBOutput_6 = 0;
						}

						tos_count_tDBOutput_6++;

						/**
						 * [tDBOutput_6 main ] stop
						 */

						/**
						 * [tDBOutput_6 process_data_begin ] start
						 */

						currentComponent = "tDBOutput_6";

						/**
						 * [tDBOutput_6 process_data_begin ] stop
						 */

						/**
						 * [tDBOutput_6 process_data_end ] start
						 */

						currentComponent = "tDBOutput_6";

						/**
						 * [tDBOutput_6 process_data_end ] stop
						 */

						/**
						 * [tDBInput_6 process_data_end ] start
						 */

						currentComponent = "tDBInput_6";

						/**
						 * [tDBInput_6 process_data_end ] stop
						 */

						/**
						 * [tDBInput_6 end ] start
						 */

						currentComponent = "tDBInput_6";

					}
				} finally {
					if (rs_tDBInput_6 != null) {
						rs_tDBInput_6.close();
					}
					if (stmt_tDBInput_6 != null) {
						stmt_tDBInput_6.close();
					}
					if (conn_tDBInput_6 != null && !conn_tDBInput_6.isClosed()) {

						conn_tDBInput_6.commit();

						conn_tDBInput_6.close();

					}

				}
				globalMap.put("tDBInput_6_NB_LINE", nb_line_tDBInput_6);

				ok_Hash.put("tDBInput_6", true);
				end_Hash.put("tDBInput_6", System.currentTimeMillis());

				tStatCatcher_1.addMessage(
						"end",
						"tDBInput_6",
						end_Hash.get("tDBInput_6")
								- start_Hash.get("tDBInput_6"));
				tStatCatcher_1Process(globalMap);
				talendStats_STATS.addMessage(
						"end",
						"tDBInput_6",
						end_Hash.get("tDBInput_6")
								- start_Hash.get("tDBInput_6"));
				talendStats_STATSProcess(globalMap);

				/**
				 * [tDBInput_6 end ] stop
				 */

				/**
				 * [tDBOutput_6 end ] start
				 */

				currentComponent = "tDBOutput_6";

				try {
					int countSum_tDBOutput_6 = 0;
					if (pstmt_tDBOutput_6 != null
							&& batchSizeCounter_tDBOutput_6 > 0) {

						for (int countEach_tDBOutput_6 : pstmt_tDBOutput_6
								.executeBatch()) {
							countSum_tDBOutput_6 += (countEach_tDBOutput_6 < 0 ? 0
									: countEach_tDBOutput_6);
						}

					}

					insertedCount_tDBOutput_6 += countSum_tDBOutput_6;

				} catch (java.sql.BatchUpdateException e_tDBOutput_6) {
					java.sql.SQLException ne_tDBOutput_6 = e_tDBOutput_6
							.getNextException(), sqle_tDBOutput_6 = null;
					String errormessage_tDBOutput_6;
					if (ne_tDBOutput_6 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_6 = new java.sql.SQLException(
								e_tDBOutput_6.getMessage() + "\ncaused by: "
										+ ne_tDBOutput_6.getMessage(),
								ne_tDBOutput_6.getSQLState(),
								ne_tDBOutput_6.getErrorCode(), ne_tDBOutput_6);
						errormessage_tDBOutput_6 = sqle_tDBOutput_6
								.getMessage();
					} else {
						errormessage_tDBOutput_6 = e_tDBOutput_6.getMessage();
					}

					int countSum_tDBOutput_6 = 0;
					for (int countEach_tDBOutput_6 : e_tDBOutput_6
							.getUpdateCounts()) {
						countSum_tDBOutput_6 += (countEach_tDBOutput_6 < 0 ? 0
								: countEach_tDBOutput_6);
					}

					insertedCount_tDBOutput_6 += countSum_tDBOutput_6;

					System.err.println(errormessage_tDBOutput_6);

				}

				if (pstmt_tDBOutput_6 != null) {

					pstmt_tDBOutput_6.close();
					resourceMap.remove("pstmt_tDBOutput_6");
				}
				resourceMap.put("statementClosed_tDBOutput_6", true);

				conn_tDBOutput_6.commit();

				conn_tDBOutput_6.close();

				resourceMap.put("finish_tDBOutput_6", true);

				nb_line_deleted_tDBOutput_6 = nb_line_deleted_tDBOutput_6
						+ deletedCount_tDBOutput_6;
				nb_line_update_tDBOutput_6 = nb_line_update_tDBOutput_6
						+ updatedCount_tDBOutput_6;
				nb_line_inserted_tDBOutput_6 = nb_line_inserted_tDBOutput_6
						+ insertedCount_tDBOutput_6;
				nb_line_rejected_tDBOutput_6 = nb_line_rejected_tDBOutput_6
						+ rejectedCount_tDBOutput_6;

				globalMap.put("tDBOutput_6_NB_LINE", nb_line_tDBOutput_6);
				globalMap.put("tDBOutput_6_NB_LINE_UPDATED",
						nb_line_update_tDBOutput_6);
				globalMap.put("tDBOutput_6_NB_LINE_INSERTED",
						nb_line_inserted_tDBOutput_6);
				globalMap.put("tDBOutput_6_NB_LINE_DELETED",
						nb_line_deleted_tDBOutput_6);
				globalMap.put("tDBOutput_6_NB_LINE_REJECTED",
						nb_line_rejected_tDBOutput_6);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row6" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tDBOutput_6", true);
				end_Hash.put("tDBOutput_6", System.currentTimeMillis());

				tStatCatcher_1.addMessage(
						"end",
						"tDBOutput_6",
						end_Hash.get("tDBOutput_6")
								- start_Hash.get("tDBOutput_6"));
				tStatCatcher_1Process(globalMap);
				talendStats_STATS.addMessage(
						"end",
						"tDBOutput_6",
						end_Hash.get("tDBOutput_6")
								- start_Hash.get("tDBOutput_6"));
				talendStats_STATSProcess(globalMap);

				/**
				 * [tDBOutput_6 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_6 finally ] start
				 */

				currentComponent = "tDBInput_6";

				/**
				 * [tDBInput_6 finally ] stop
				 */

				/**
				 * [tDBOutput_6 finally ] start
				 */

				currentComponent = "tDBOutput_6";

				try {
					if (resourceMap.get("statementClosed_tDBOutput_6") == null) {
						java.sql.PreparedStatement pstmtToClose_tDBOutput_6 = null;
						if ((pstmtToClose_tDBOutput_6 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmt_tDBOutput_6")) != null) {
							pstmtToClose_tDBOutput_6.close();
						}
					}
				} finally {
					if (resourceMap.get("finish_tDBOutput_6") == null) {
						java.sql.Connection ctn_tDBOutput_6 = null;
						if ((ctn_tDBOutput_6 = (java.sql.Connection) resourceMap
								.get("conn_tDBOutput_6")) != null) {
							try {
								ctn_tDBOutput_6.close();
							} catch (java.sql.SQLException sqlEx_tDBOutput_6) {
								String errorMessage_tDBOutput_6 = "failed to close the connection in tDBOutput_6 :"
										+ sqlEx_tDBOutput_6.getMessage();
								System.err.println(errorMessage_tDBOutput_6);
							}
						}
					}
				}

				/**
				 * [tDBOutput_6 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_6_SUBPROCESS_STATE", 1);
	}

	public static class row12Struct implements
			routines.system.IPersistableRow<row12Struct> {
		final static byte[] commonByteArrayLock_ORDER_ETL_RFE_ETL = new byte[0];
		static byte[] commonByteArray_ORDER_ETL_RFE_ETL = new byte[0];

		public java.util.Date moment;

		public java.util.Date getMoment() {
			return this.moment;
		}

		public String pid;

		public String getPid() {
			return this.pid;
		}

		public String root_pid;

		public String getRoot_pid() {
			return this.root_pid;
		}

		public String father_pid;

		public String getFather_pid() {
			return this.father_pid;
		}

		public String project;

		public String getProject() {
			return this.project;
		}

		public String job;

		public String getJob() {
			return this.job;
		}

		public String context;

		public String getContext() {
			return this.context;
		}

		public Integer priority;

		public Integer getPriority() {
			return this.priority;
		}

		public String type;

		public String getType() {
			return this.type;
		}

		public String origin;

		public String getOrigin() {
			return this.origin;
		}

		public String message;

		public String getMessage() {
			return this.message;
		}

		public Integer code;

		public Integer getCode() {
			return this.code;
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ORDER_ETL_RFE_ETL.length) {
					if (length < 1024
							&& commonByteArray_ORDER_ETL_RFE_ETL.length == 0) {
						commonByteArray_ORDER_ETL_RFE_ETL = new byte[1024];
					} else {
						commonByteArray_ORDER_ETL_RFE_ETL = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ORDER_ETL_RFE_ETL, 0, length);
				strReturn = new String(commonByteArray_ORDER_ETL_RFE_ETL, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ORDER_ETL_RFE_ETL) {

				try {

					int length = 0;

					this.moment = readDate(dis);

					this.pid = readString(dis);

					this.root_pid = readString(dis);

					this.father_pid = readString(dis);

					this.project = readString(dis);

					this.job = readString(dis);

					this.context = readString(dis);

					this.priority = readInteger(dis);

					this.type = readString(dis);

					this.origin = readString(dis);

					this.message = readString(dis);

					this.code = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.moment, dos);

				// String

				writeString(this.pid, dos);

				// String

				writeString(this.root_pid, dos);

				// String

				writeString(this.father_pid, dos);

				// String

				writeString(this.project, dos);

				// String

				writeString(this.job, dos);

				// String

				writeString(this.context, dos);

				// Integer

				writeInteger(this.priority, dos);

				// String

				writeString(this.type, dos);

				// String

				writeString(this.origin, dos);

				// String

				writeString(this.message, dos);

				// Integer

				writeInteger(this.code, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("moment=" + String.valueOf(moment));
			sb.append(",pid=" + pid);
			sb.append(",root_pid=" + root_pid);
			sb.append(",father_pid=" + father_pid);
			sb.append(",project=" + project);
			sb.append(",job=" + job);
			sb.append(",context=" + context);
			sb.append(",priority=" + String.valueOf(priority));
			sb.append(",type=" + type);
			sb.append(",origin=" + origin);
			sb.append(",message=" + message);
			sb.append(",code=" + String.valueOf(code));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row12Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tLogCatcher_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tLogCatcher_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row12Struct row12 = new row12Struct();

				/**
				 * [tLogRow_2 begin ] start
				 */

				ok_Hash.put("tLogRow_2", false);
				start_Hash.put("tLogRow_2", System.currentTimeMillis());

				currentComponent = "tLogRow_2";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row12" + iterateId, 0,
								0);

					}
				}

				int tos_count_tLogRow_2 = 0;

				// /////////////////////

				final String OUTPUT_FIELD_SEPARATOR_tLogRow_2 = "|";
				java.io.PrintStream consoleOut_tLogRow_2 = null;

				StringBuilder strBuffer_tLogRow_2 = null;
				int nb_line_tLogRow_2 = 0;
				// /////////////////////

				/**
				 * [tLogRow_2 begin ] stop
				 */

				/**
				 * [tLogCatcher_1 begin ] start
				 */

				ok_Hash.put("tLogCatcher_1", false);
				start_Hash.put("tLogCatcher_1", System.currentTimeMillis());

				currentComponent = "tLogCatcher_1";

				int tos_count_tLogCatcher_1 = 0;

				try {
					for (LogCatcherUtils.LogCatcherMessage lcm : tLogCatcher_1
							.getMessages()) {
						row12.type = lcm.getType();
						row12.origin = (lcm.getOrigin() == null
								|| lcm.getOrigin().length() < 1 ? null : lcm
								.getOrigin());
						row12.priority = lcm.getPriority();
						row12.message = lcm.getMessage();
						row12.code = lcm.getCode();

						row12.moment = java.util.Calendar.getInstance()
								.getTime();

						row12.pid = pid;
						row12.root_pid = rootPid;
						row12.father_pid = fatherPid;

						row12.project = projectName;
						row12.job = jobName;
						row12.context = contextStr;

						/**
						 * [tLogCatcher_1 begin ] stop
						 */

						/**
						 * [tLogCatcher_1 main ] start
						 */

						currentComponent = "tLogCatcher_1";

						tos_count_tLogCatcher_1++;

						/**
						 * [tLogCatcher_1 main ] stop
						 */

						/**
						 * [tLogCatcher_1 process_data_begin ] start
						 */

						currentComponent = "tLogCatcher_1";

						/**
						 * [tLogCatcher_1 process_data_begin ] stop
						 */

						/**
						 * [tLogRow_2 main ] start
						 */

						currentComponent = "tLogRow_2";

						// row12
						// row12

						if (execStat) {
							runStat.updateStatOnConnection("row12" + iterateId,
									1, 1);
						}

						// /////////////////////

						strBuffer_tLogRow_2 = new StringBuilder();

						if (row12.moment != null) { //

							strBuffer_tLogRow_2.append(FormatterUtils
									.format_Date(row12.moment,
											"yyyy-MM-dd HH:mm:ss"));

						} //

						strBuffer_tLogRow_2.append("|");

						if (row12.pid != null) { //

							strBuffer_tLogRow_2.append(String
									.valueOf(row12.pid));

						} //

						strBuffer_tLogRow_2.append("|");

						if (row12.root_pid != null) { //

							strBuffer_tLogRow_2.append(String
									.valueOf(row12.root_pid));

						} //

						strBuffer_tLogRow_2.append("|");

						if (row12.father_pid != null) { //

							strBuffer_tLogRow_2.append(String
									.valueOf(row12.father_pid));

						} //

						strBuffer_tLogRow_2.append("|");

						if (row12.project != null) { //

							strBuffer_tLogRow_2.append(String
									.valueOf(row12.project));

						} //

						strBuffer_tLogRow_2.append("|");

						if (row12.job != null) { //

							strBuffer_tLogRow_2.append(String
									.valueOf(row12.job));

						} //

						strBuffer_tLogRow_2.append("|");

						if (row12.context != null) { //

							strBuffer_tLogRow_2.append(String
									.valueOf(row12.context));

						} //

						strBuffer_tLogRow_2.append("|");

						if (row12.priority != null) { //

							strBuffer_tLogRow_2.append(String
									.valueOf(row12.priority));

						} //

						strBuffer_tLogRow_2.append("|");

						if (row12.type != null) { //

							strBuffer_tLogRow_2.append(String
									.valueOf(row12.type));

						} //

						strBuffer_tLogRow_2.append("|");

						if (row12.origin != null) { //

							strBuffer_tLogRow_2.append(String
									.valueOf(row12.origin));

						} //

						strBuffer_tLogRow_2.append("|");

						if (row12.message != null) { //

							strBuffer_tLogRow_2.append(String
									.valueOf(row12.message));

						} //

						strBuffer_tLogRow_2.append("|");

						if (row12.code != null) { //

							strBuffer_tLogRow_2.append(String
									.valueOf(row12.code));

						} //

						if (globalMap.get("tLogRow_CONSOLE") != null) {
							consoleOut_tLogRow_2 = (java.io.PrintStream) globalMap
									.get("tLogRow_CONSOLE");
						} else {
							consoleOut_tLogRow_2 = new java.io.PrintStream(
									new java.io.BufferedOutputStream(System.out));
							globalMap.put("tLogRow_CONSOLE",
									consoleOut_tLogRow_2);
						}
						consoleOut_tLogRow_2.println(strBuffer_tLogRow_2
								.toString());
						consoleOut_tLogRow_2.flush();
						nb_line_tLogRow_2++;
						// ////

						// ////

						// /////////////////////

						tos_count_tLogRow_2++;

						/**
						 * [tLogRow_2 main ] stop
						 */

						/**
						 * [tLogRow_2 process_data_begin ] start
						 */

						currentComponent = "tLogRow_2";

						/**
						 * [tLogRow_2 process_data_begin ] stop
						 */

						/**
						 * [tLogRow_2 process_data_end ] start
						 */

						currentComponent = "tLogRow_2";

						/**
						 * [tLogRow_2 process_data_end ] stop
						 */

						/**
						 * [tLogCatcher_1 process_data_end ] start
						 */

						currentComponent = "tLogCatcher_1";

						/**
						 * [tLogCatcher_1 process_data_end ] stop
						 */

						/**
						 * [tLogCatcher_1 end ] start
						 */

						currentComponent = "tLogCatcher_1";

					}
				} catch (Exception e_tLogCatcher_1) {
					logIgnoredError(
							String.format(
									"tLogCatcher_1 - tLogCatcher failed to process log message(s) due to internal error: %s",
									e_tLogCatcher_1), e_tLogCatcher_1);
				}

				ok_Hash.put("tLogCatcher_1", true);
				end_Hash.put("tLogCatcher_1", System.currentTimeMillis());

				/**
				 * [tLogCatcher_1 end ] stop
				 */

				/**
				 * [tLogRow_2 end ] start
				 */

				currentComponent = "tLogRow_2";

				// ////
				// ////
				globalMap.put("tLogRow_2_NB_LINE", nb_line_tLogRow_2);

				// /////////////////////

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row12" + iterateId, 2,
								0);
					}
				}

				ok_Hash.put("tLogRow_2", true);
				end_Hash.put("tLogRow_2", System.currentTimeMillis());

				/**
				 * [tLogRow_2 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tLogCatcher_1 finally ] start
				 */

				currentComponent = "tLogCatcher_1";

				/**
				 * [tLogCatcher_1 finally ] stop
				 */

				/**
				 * [tLogRow_2 finally ] start
				 */

				currentComponent = "tLogRow_2";

				/**
				 * [tLogRow_2 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tLogCatcher_1_SUBPROCESS_STATE", 1);
	}

	public static class row19Struct implements
			routines.system.IPersistableRow<row19Struct> {
		final static byte[] commonByteArrayLock_ORDER_ETL_RFE_ETL = new byte[0];
		static byte[] commonByteArray_ORDER_ETL_RFE_ETL = new byte[0];

		public java.util.Date moment;

		public java.util.Date getMoment() {
			return this.moment;
		}

		public String pid;

		public String getPid() {
			return this.pid;
		}

		public String father_pid;

		public String getFather_pid() {
			return this.father_pid;
		}

		public String root_pid;

		public String getRoot_pid() {
			return this.root_pid;
		}

		public Long system_pid;

		public Long getSystem_pid() {
			return this.system_pid;
		}

		public String project;

		public String getProject() {
			return this.project;
		}

		public String job;

		public String getJob() {
			return this.job;
		}

		public String job_repository_id;

		public String getJob_repository_id() {
			return this.job_repository_id;
		}

		public String job_version;

		public String getJob_version() {
			return this.job_version;
		}

		public String context;

		public String getContext() {
			return this.context;
		}

		public String origin;

		public String getOrigin() {
			return this.origin;
		}

		public String message_type;

		public String getMessage_type() {
			return this.message_type;
		}

		public String message;

		public String getMessage() {
			return this.message;
		}

		public Long duration;

		public Long getDuration() {
			return this.duration;
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ORDER_ETL_RFE_ETL.length) {
					if (length < 1024
							&& commonByteArray_ORDER_ETL_RFE_ETL.length == 0) {
						commonByteArray_ORDER_ETL_RFE_ETL = new byte[1024];
					} else {
						commonByteArray_ORDER_ETL_RFE_ETL = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ORDER_ETL_RFE_ETL, 0, length);
				strReturn = new String(commonByteArray_ORDER_ETL_RFE_ETL, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ORDER_ETL_RFE_ETL) {

				try {

					int length = 0;

					this.moment = readDate(dis);

					this.pid = readString(dis);

					this.father_pid = readString(dis);

					this.root_pid = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.system_pid = null;
					} else {
						this.system_pid = dis.readLong();
					}

					this.project = readString(dis);

					this.job = readString(dis);

					this.job_repository_id = readString(dis);

					this.job_version = readString(dis);

					this.context = readString(dis);

					this.origin = readString(dis);

					this.message_type = readString(dis);

					this.message = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.duration = null;
					} else {
						this.duration = dis.readLong();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.moment, dos);

				// String

				writeString(this.pid, dos);

				// String

				writeString(this.father_pid, dos);

				// String

				writeString(this.root_pid, dos);

				// Long

				if (this.system_pid == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.system_pid);
				}

				// String

				writeString(this.project, dos);

				// String

				writeString(this.job, dos);

				// String

				writeString(this.job_repository_id, dos);

				// String

				writeString(this.job_version, dos);

				// String

				writeString(this.context, dos);

				// String

				writeString(this.origin, dos);

				// String

				writeString(this.message_type, dos);

				// String

				writeString(this.message, dos);

				// Long

				if (this.duration == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.duration);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("moment=" + String.valueOf(moment));
			sb.append(",pid=" + pid);
			sb.append(",father_pid=" + father_pid);
			sb.append(",root_pid=" + root_pid);
			sb.append(",system_pid=" + String.valueOf(system_pid));
			sb.append(",project=" + project);
			sb.append(",job=" + job);
			sb.append(",job_repository_id=" + job_repository_id);
			sb.append(",job_version=" + job_version);
			sb.append(",context=" + context);
			sb.append(",origin=" + origin);
			sb.append(",message_type=" + message_type);
			sb.append(",message=" + message);
			sb.append(",duration=" + String.valueOf(duration));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row19Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tStatCatcher_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tStatCatcher_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row19Struct row19 = new row19Struct();

				/**
				 * [tLogRow_1 begin ] start
				 */

				ok_Hash.put("tLogRow_1", false);
				start_Hash.put("tLogRow_1", System.currentTimeMillis());

				currentComponent = "tLogRow_1";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row19" + iterateId, 0,
								0);

					}
				}

				int tos_count_tLogRow_1 = 0;

				// /////////////////////

				final String OUTPUT_FIELD_SEPARATOR_tLogRow_1 = "|";
				java.io.PrintStream consoleOut_tLogRow_1 = null;

				StringBuilder strBuffer_tLogRow_1 = null;
				int nb_line_tLogRow_1 = 0;
				// /////////////////////

				/**
				 * [tLogRow_1 begin ] stop
				 */

				/**
				 * [tStatCatcher_1 begin ] start
				 */

				ok_Hash.put("tStatCatcher_1", false);
				start_Hash.put("tStatCatcher_1", System.currentTimeMillis());

				currentComponent = "tStatCatcher_1";

				int tos_count_tStatCatcher_1 = 0;

				for (StatCatcherUtils.StatCatcherMessage scm : tStatCatcher_1
						.getMessages()) {
					row19.pid = pid;
					row19.root_pid = rootPid;
					row19.father_pid = fatherPid;
					row19.project = projectName;
					row19.job = jobName;
					row19.context = contextStr;
					row19.origin = (scm.getOrigin() == null
							|| scm.getOrigin().length() < 1 ? null : scm
							.getOrigin());
					row19.message = scm.getMessage();
					row19.duration = scm.getDuration();
					row19.moment = scm.getMoment();
					row19.message_type = scm.getMessageType();
					row19.job_version = scm.getJobVersion();
					row19.job_repository_id = scm.getJobId();
					row19.system_pid = scm.getSystemPid();

					/**
					 * [tStatCatcher_1 begin ] stop
					 */

					/**
					 * [tStatCatcher_1 main ] start
					 */

					currentComponent = "tStatCatcher_1";

					tos_count_tStatCatcher_1++;

					/**
					 * [tStatCatcher_1 main ] stop
					 */

					/**
					 * [tStatCatcher_1 process_data_begin ] start
					 */

					currentComponent = "tStatCatcher_1";

					/**
					 * [tStatCatcher_1 process_data_begin ] stop
					 */

					/**
					 * [tLogRow_1 main ] start
					 */

					currentComponent = "tLogRow_1";

					// row19
					// row19

					if (execStat) {
						runStat.updateStatOnConnection("row19" + iterateId, 1,
								1);
					}

					// /////////////////////

					strBuffer_tLogRow_1 = new StringBuilder();

					if (row19.moment != null) { //

						strBuffer_tLogRow_1.append(FormatterUtils.format_Date(
								row19.moment, "yyyy-MM-dd HH:mm:ss"));

					} //

					strBuffer_tLogRow_1.append("|");

					if (row19.pid != null) { //

						strBuffer_tLogRow_1.append(String.valueOf(row19.pid));

					} //

					strBuffer_tLogRow_1.append("|");

					if (row19.father_pid != null) { //

						strBuffer_tLogRow_1.append(String
								.valueOf(row19.father_pid));

					} //

					strBuffer_tLogRow_1.append("|");

					if (row19.root_pid != null) { //

						strBuffer_tLogRow_1.append(String
								.valueOf(row19.root_pid));

					} //

					strBuffer_tLogRow_1.append("|");

					if (row19.system_pid != null) { //

						strBuffer_tLogRow_1.append(String
								.valueOf(row19.system_pid));

					} //

					strBuffer_tLogRow_1.append("|");

					if (row19.project != null) { //

						strBuffer_tLogRow_1.append(String
								.valueOf(row19.project));

					} //

					strBuffer_tLogRow_1.append("|");

					if (row19.job != null) { //

						strBuffer_tLogRow_1.append(String.valueOf(row19.job));

					} //

					strBuffer_tLogRow_1.append("|");

					if (row19.job_repository_id != null) { //

						strBuffer_tLogRow_1.append(String
								.valueOf(row19.job_repository_id));

					} //

					strBuffer_tLogRow_1.append("|");

					if (row19.job_version != null) { //

						strBuffer_tLogRow_1.append(String
								.valueOf(row19.job_version));

					} //

					strBuffer_tLogRow_1.append("|");

					if (row19.context != null) { //

						strBuffer_tLogRow_1.append(String
								.valueOf(row19.context));

					} //

					strBuffer_tLogRow_1.append("|");

					if (row19.origin != null) { //

						strBuffer_tLogRow_1
								.append(String.valueOf(row19.origin));

					} //

					strBuffer_tLogRow_1.append("|");

					if (row19.message_type != null) { //

						strBuffer_tLogRow_1.append(String
								.valueOf(row19.message_type));

					} //

					strBuffer_tLogRow_1.append("|");

					if (row19.message != null) { //

						strBuffer_tLogRow_1.append(String
								.valueOf(row19.message));

					} //

					strBuffer_tLogRow_1.append("|");

					if (row19.duration != null) { //

						strBuffer_tLogRow_1.append(String
								.valueOf(row19.duration));

					} //

					if (globalMap.get("tLogRow_CONSOLE") != null) {
						consoleOut_tLogRow_1 = (java.io.PrintStream) globalMap
								.get("tLogRow_CONSOLE");
					} else {
						consoleOut_tLogRow_1 = new java.io.PrintStream(
								new java.io.BufferedOutputStream(System.out));
						globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_1);
					}
					consoleOut_tLogRow_1
							.println(strBuffer_tLogRow_1.toString());
					consoleOut_tLogRow_1.flush();
					nb_line_tLogRow_1++;
					// ////

					// ////

					// /////////////////////

					tos_count_tLogRow_1++;

					/**
					 * [tLogRow_1 main ] stop
					 */

					/**
					 * [tLogRow_1 process_data_begin ] start
					 */

					currentComponent = "tLogRow_1";

					/**
					 * [tLogRow_1 process_data_begin ] stop
					 */

					/**
					 * [tLogRow_1 process_data_end ] start
					 */

					currentComponent = "tLogRow_1";

					/**
					 * [tLogRow_1 process_data_end ] stop
					 */

					/**
					 * [tStatCatcher_1 process_data_end ] start
					 */

					currentComponent = "tStatCatcher_1";

					/**
					 * [tStatCatcher_1 process_data_end ] stop
					 */

					/**
					 * [tStatCatcher_1 end ] start
					 */

					currentComponent = "tStatCatcher_1";

				}

				ok_Hash.put("tStatCatcher_1", true);
				end_Hash.put("tStatCatcher_1", System.currentTimeMillis());

				/**
				 * [tStatCatcher_1 end ] stop
				 */

				/**
				 * [tLogRow_1 end ] start
				 */

				currentComponent = "tLogRow_1";

				// ////
				// ////
				globalMap.put("tLogRow_1_NB_LINE", nb_line_tLogRow_1);

				// /////////////////////

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row19" + iterateId, 2,
								0);
					}
				}

				ok_Hash.put("tLogRow_1", true);
				end_Hash.put("tLogRow_1", System.currentTimeMillis());

				/**
				 * [tLogRow_1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tStatCatcher_1 finally ] start
				 */

				currentComponent = "tStatCatcher_1";

				/**
				 * [tStatCatcher_1 finally ] stop
				 */

				/**
				 * [tLogRow_1 finally ] start
				 */

				currentComponent = "tLogRow_1";

				/**
				 * [tLogRow_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tStatCatcher_1_SUBPROCESS_STATE", 1);
	}

	public static class row_talendStats_STATSStruct implements
			routines.system.IPersistableRow<row_talendStats_STATSStruct> {
		final static byte[] commonByteArrayLock_ORDER_ETL_RFE_ETL = new byte[0];
		static byte[] commonByteArray_ORDER_ETL_RFE_ETL = new byte[0];

		public java.util.Date moment;

		public java.util.Date getMoment() {
			return this.moment;
		}

		public String pid;

		public String getPid() {
			return this.pid;
		}

		public String father_pid;

		public String getFather_pid() {
			return this.father_pid;
		}

		public String root_pid;

		public String getRoot_pid() {
			return this.root_pid;
		}

		public Long system_pid;

		public Long getSystem_pid() {
			return this.system_pid;
		}

		public String project;

		public String getProject() {
			return this.project;
		}

		public String job;

		public String getJob() {
			return this.job;
		}

		public String job_repository_id;

		public String getJob_repository_id() {
			return this.job_repository_id;
		}

		public String job_version;

		public String getJob_version() {
			return this.job_version;
		}

		public String context;

		public String getContext() {
			return this.context;
		}

		public String origin;

		public String getOrigin() {
			return this.origin;
		}

		public String message_type;

		public String getMessage_type() {
			return this.message_type;
		}

		public String message;

		public String getMessage() {
			return this.message;
		}

		public Long duration;

		public Long getDuration() {
			return this.duration;
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ORDER_ETL_RFE_ETL.length) {
					if (length < 1024
							&& commonByteArray_ORDER_ETL_RFE_ETL.length == 0) {
						commonByteArray_ORDER_ETL_RFE_ETL = new byte[1024];
					} else {
						commonByteArray_ORDER_ETL_RFE_ETL = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ORDER_ETL_RFE_ETL, 0, length);
				strReturn = new String(commonByteArray_ORDER_ETL_RFE_ETL, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ORDER_ETL_RFE_ETL) {

				try {

					int length = 0;

					this.moment = readDate(dis);

					this.pid = readString(dis);

					this.father_pid = readString(dis);

					this.root_pid = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.system_pid = null;
					} else {
						this.system_pid = dis.readLong();
					}

					this.project = readString(dis);

					this.job = readString(dis);

					this.job_repository_id = readString(dis);

					this.job_version = readString(dis);

					this.context = readString(dis);

					this.origin = readString(dis);

					this.message_type = readString(dis);

					this.message = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.duration = null;
					} else {
						this.duration = dis.readLong();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.moment, dos);

				// String

				writeString(this.pid, dos);

				// String

				writeString(this.father_pid, dos);

				// String

				writeString(this.root_pid, dos);

				// Long

				if (this.system_pid == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.system_pid);
				}

				// String

				writeString(this.project, dos);

				// String

				writeString(this.job, dos);

				// String

				writeString(this.job_repository_id, dos);

				// String

				writeString(this.job_version, dos);

				// String

				writeString(this.context, dos);

				// String

				writeString(this.origin, dos);

				// String

				writeString(this.message_type, dos);

				// String

				writeString(this.message, dos);

				// Long

				if (this.duration == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.duration);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("moment=" + String.valueOf(moment));
			sb.append(",pid=" + pid);
			sb.append(",father_pid=" + father_pid);
			sb.append(",root_pid=" + root_pid);
			sb.append(",system_pid=" + String.valueOf(system_pid));
			sb.append(",project=" + project);
			sb.append(",job=" + job);
			sb.append(",job_repository_id=" + job_repository_id);
			sb.append(",job_version=" + job_version);
			sb.append(",context=" + context);
			sb.append(",origin=" + origin);
			sb.append(",message_type=" + message_type);
			sb.append(",message=" + message);
			sb.append(",duration=" + String.valueOf(duration));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row_talendStats_STATSStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void talendStats_STATSProcess(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("talendStats_STATS_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row_talendStats_STATSStruct row_talendStats_STATS = new row_talendStats_STATSStruct();

				/**
				 * [talendStats_FILE begin ] start
				 */

				ok_Hash.put("talendStats_FILE", false);
				start_Hash.put("talendStats_FILE", System.currentTimeMillis());

				currentVirtualComponent = "talendStats_FILE";

				currentComponent = "talendStats_FILE";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("Main" + iterateId, 0, 0);

					}
				}

				int tos_count_talendStats_FILE = 0;

				String fileName_talendStats_FILE = "";
				fileName_talendStats_FILE = (new java.io.File("/r01/log" + "/"
						+ "stats_file.txt")).getAbsolutePath().replace("\\",
						"/");
				String fullName_talendStats_FILE = null;
				String extension_talendStats_FILE = null;
				String directory_talendStats_FILE = null;
				if ((fileName_talendStats_FILE.indexOf("/") != -1)) {
					if (fileName_talendStats_FILE.lastIndexOf(".") < fileName_talendStats_FILE
							.lastIndexOf("/")) {
						fullName_talendStats_FILE = fileName_talendStats_FILE;
						extension_talendStats_FILE = "";
					} else {
						fullName_talendStats_FILE = fileName_talendStats_FILE
								.substring(0, fileName_talendStats_FILE
										.lastIndexOf("."));
						extension_talendStats_FILE = fileName_talendStats_FILE
								.substring(fileName_talendStats_FILE
										.lastIndexOf("."));
					}
					directory_talendStats_FILE = fileName_talendStats_FILE
							.substring(0,
									fileName_talendStats_FILE.lastIndexOf("/"));
				} else {
					if (fileName_talendStats_FILE.lastIndexOf(".") != -1) {
						fullName_talendStats_FILE = fileName_talendStats_FILE
								.substring(0, fileName_talendStats_FILE
										.lastIndexOf("."));
						extension_talendStats_FILE = fileName_talendStats_FILE
								.substring(fileName_talendStats_FILE
										.lastIndexOf("."));
					} else {
						fullName_talendStats_FILE = fileName_talendStats_FILE;
						extension_talendStats_FILE = "";
					}
					directory_talendStats_FILE = "";
				}
				boolean isFileGenerated_talendStats_FILE = true;
				java.io.File filetalendStats_FILE = new java.io.File(
						fileName_talendStats_FILE);
				globalMap.put("talendStats_FILE_FILE_NAME",
						fileName_talendStats_FILE);
				if (filetalendStats_FILE.exists()) {
					isFileGenerated_talendStats_FILE = false;
				}
				int nb_line_talendStats_FILE = 0;
				int splitedFileNo_talendStats_FILE = 0;
				int currentRow_talendStats_FILE = 0;

				final String OUT_DELIM_talendStats_FILE = /**
				 * Start field
				 * talendStats_FILE:FIELDSEPARATOR
				 */
				";"/** End field talendStats_FILE:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_talendStats_FILE = /**
				 * Start field
				 * talendStats_FILE:ROWSEPARATOR
				 */
				"\n"/** End field talendStats_FILE:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_talendStats_FILE != null
						&& directory_talendStats_FILE.trim().length() != 0) {
					java.io.File dir_talendStats_FILE = new java.io.File(
							directory_talendStats_FILE);
					if (!dir_talendStats_FILE.exists()) {
						dir_talendStats_FILE.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtalendStats_FILE = null;

				outtalendStats_FILE = new java.io.BufferedWriter(
						new java.io.OutputStreamWriter(
								new java.io.FileOutputStream(
										fileName_talendStats_FILE, true),
								"UTF-8"));

				resourceMap.put("out_talendStats_FILE", outtalendStats_FILE);
				resourceMap.put("nb_line_talendStats_FILE",
						nb_line_talendStats_FILE);

				/**
				 * [talendStats_FILE begin ] stop
				 */

				/**
				 * [talendStats_STATS begin ] start
				 */

				ok_Hash.put("talendStats_STATS", false);
				start_Hash.put("talendStats_STATS", System.currentTimeMillis());

				currentVirtualComponent = "talendStats_STATS";

				currentComponent = "talendStats_STATS";

				int tos_count_talendStats_STATS = 0;

				for (StatCatcherUtils.StatCatcherMessage scm : talendStats_STATS
						.getMessages()) {
					row_talendStats_STATS.pid = pid;
					row_talendStats_STATS.root_pid = rootPid;
					row_talendStats_STATS.father_pid = fatherPid;
					row_talendStats_STATS.project = projectName;
					row_talendStats_STATS.job = jobName;
					row_talendStats_STATS.context = contextStr;
					row_talendStats_STATS.origin = (scm.getOrigin() == null
							|| scm.getOrigin().length() < 1 ? null : scm
							.getOrigin());
					row_talendStats_STATS.message = scm.getMessage();
					row_talendStats_STATS.duration = scm.getDuration();
					row_talendStats_STATS.moment = scm.getMoment();
					row_talendStats_STATS.message_type = scm.getMessageType();
					row_talendStats_STATS.job_version = scm.getJobVersion();
					row_talendStats_STATS.job_repository_id = scm.getJobId();
					row_talendStats_STATS.system_pid = scm.getSystemPid();

					/**
					 * [talendStats_STATS begin ] stop
					 */

					/**
					 * [talendStats_STATS main ] start
					 */

					currentVirtualComponent = "talendStats_STATS";

					currentComponent = "talendStats_STATS";

					tos_count_talendStats_STATS++;

					/**
					 * [talendStats_STATS main ] stop
					 */

					/**
					 * [talendStats_STATS process_data_begin ] start
					 */

					currentVirtualComponent = "talendStats_STATS";

					currentComponent = "talendStats_STATS";

					/**
					 * [talendStats_STATS process_data_begin ] stop
					 */

					/**
					 * [talendStats_FILE main ] start
					 */

					currentVirtualComponent = "talendStats_FILE";

					currentComponent = "talendStats_FILE";

					// Main
					// row_talendStats_STATS

					if (execStat) {
						runStat.updateStatOnConnection("Main" + iterateId, 1, 1);
					}

					StringBuilder sb_talendStats_FILE = new StringBuilder();
					if (row_talendStats_STATS.moment != null) {
						sb_talendStats_FILE.append(FormatterUtils.format_Date(
								row_talendStats_STATS.moment,
								"yyyy-MM-dd HH:mm:ss"));
					}
					sb_talendStats_FILE.append(OUT_DELIM_talendStats_FILE);
					if (row_talendStats_STATS.pid != null) {
						sb_talendStats_FILE.append(row_talendStats_STATS.pid);
					}
					sb_talendStats_FILE.append(OUT_DELIM_talendStats_FILE);
					if (row_talendStats_STATS.father_pid != null) {
						sb_talendStats_FILE
								.append(row_talendStats_STATS.father_pid);
					}
					sb_talendStats_FILE.append(OUT_DELIM_talendStats_FILE);
					if (row_talendStats_STATS.root_pid != null) {
						sb_talendStats_FILE
								.append(row_talendStats_STATS.root_pid);
					}
					sb_talendStats_FILE.append(OUT_DELIM_talendStats_FILE);
					if (row_talendStats_STATS.system_pid != null) {
						sb_talendStats_FILE
								.append(row_talendStats_STATS.system_pid);
					}
					sb_talendStats_FILE.append(OUT_DELIM_talendStats_FILE);
					if (row_talendStats_STATS.project != null) {
						sb_talendStats_FILE
								.append(row_talendStats_STATS.project);
					}
					sb_talendStats_FILE.append(OUT_DELIM_talendStats_FILE);
					if (row_talendStats_STATS.job != null) {
						sb_talendStats_FILE.append(row_talendStats_STATS.job);
					}
					sb_talendStats_FILE.append(OUT_DELIM_talendStats_FILE);
					if (row_talendStats_STATS.job_repository_id != null) {
						sb_talendStats_FILE
								.append(row_talendStats_STATS.job_repository_id);
					}
					sb_talendStats_FILE.append(OUT_DELIM_talendStats_FILE);
					if (row_talendStats_STATS.job_version != null) {
						sb_talendStats_FILE
								.append(row_talendStats_STATS.job_version);
					}
					sb_talendStats_FILE.append(OUT_DELIM_talendStats_FILE);
					if (row_talendStats_STATS.context != null) {
						sb_talendStats_FILE
								.append(row_talendStats_STATS.context);
					}
					sb_talendStats_FILE.append(OUT_DELIM_talendStats_FILE);
					if (row_talendStats_STATS.origin != null) {
						sb_talendStats_FILE
								.append(row_talendStats_STATS.origin);
					}
					sb_talendStats_FILE.append(OUT_DELIM_talendStats_FILE);
					if (row_talendStats_STATS.message_type != null) {
						sb_talendStats_FILE
								.append(row_talendStats_STATS.message_type);
					}
					sb_talendStats_FILE.append(OUT_DELIM_talendStats_FILE);
					if (row_talendStats_STATS.message != null) {
						sb_talendStats_FILE
								.append(row_talendStats_STATS.message);
					}
					sb_talendStats_FILE.append(OUT_DELIM_talendStats_FILE);
					if (row_talendStats_STATS.duration != null) {
						sb_talendStats_FILE
								.append(row_talendStats_STATS.duration);
					}
					sb_talendStats_FILE
							.append(OUT_DELIM_ROWSEP_talendStats_FILE);

					synchronized (multiThreadLockWrite) {
						nb_line_talendStats_FILE++;
						resourceMap.put("nb_line_talendStats_FILE",
								nb_line_talendStats_FILE);

						outtalendStats_FILE.write(sb_talendStats_FILE
								.toString());

					}

					tos_count_talendStats_FILE++;

					/**
					 * [talendStats_FILE main ] stop
					 */

					/**
					 * [talendStats_FILE process_data_begin ] start
					 */

					currentVirtualComponent = "talendStats_FILE";

					currentComponent = "talendStats_FILE";

					/**
					 * [talendStats_FILE process_data_begin ] stop
					 */

					/**
					 * [talendStats_FILE process_data_end ] start
					 */

					currentVirtualComponent = "talendStats_FILE";

					currentComponent = "talendStats_FILE";

					/**
					 * [talendStats_FILE process_data_end ] stop
					 */

					/**
					 * [talendStats_STATS process_data_end ] start
					 */

					currentVirtualComponent = "talendStats_STATS";

					currentComponent = "talendStats_STATS";

					/**
					 * [talendStats_STATS process_data_end ] stop
					 */

					/**
					 * [talendStats_STATS end ] start
					 */

					currentVirtualComponent = "talendStats_STATS";

					currentComponent = "talendStats_STATS";

				}

				ok_Hash.put("talendStats_STATS", true);
				end_Hash.put("talendStats_STATS", System.currentTimeMillis());

				/**
				 * [talendStats_STATS end ] stop
				 */

				/**
				 * [talendStats_FILE end ] start
				 */

				currentVirtualComponent = "talendStats_FILE";

				currentComponent = "talendStats_FILE";

				synchronized (multiThreadLockWrite) {

					if (outtalendStats_FILE != null) {
						outtalendStats_FILE.flush();
						outtalendStats_FILE.close();
					}

					globalMap.put("talendStats_FILE_NB_LINE",
							nb_line_talendStats_FILE);
					globalMap.put("talendStats_FILE_FILE_NAME",
							fileName_talendStats_FILE);

				}

				resourceMap.put("finish_talendStats_FILE", true);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("Main" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("talendStats_FILE", true);
				end_Hash.put("talendStats_FILE", System.currentTimeMillis());

				/**
				 * [talendStats_FILE end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [talendStats_STATS finally ] start
				 */

				currentVirtualComponent = "talendStats_STATS";

				currentComponent = "talendStats_STATS";

				/**
				 * [talendStats_STATS finally ] stop
				 */

				/**
				 * [talendStats_FILE finally ] start
				 */

				currentVirtualComponent = "talendStats_FILE";

				currentComponent = "talendStats_FILE";

				if (resourceMap.get("finish_talendStats_FILE") == null) {

					synchronized (multiThreadLockWrite) {

						java.io.Writer outtalendStats_FILE = (java.io.Writer) resourceMap
								.get("out_talendStats_FILE");
						if (outtalendStats_FILE != null) {
							outtalendStats_FILE.flush();
							outtalendStats_FILE.close();
						}

					}

				}

				/**
				 * [talendStats_FILE finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("talendStats_STATS_SUBPROCESS_STATE", 1);
	}

	public static class row_talendLogs_LOGSStruct implements
			routines.system.IPersistableRow<row_talendLogs_LOGSStruct> {
		final static byte[] commonByteArrayLock_ORDER_ETL_RFE_ETL = new byte[0];
		static byte[] commonByteArray_ORDER_ETL_RFE_ETL = new byte[0];

		public java.util.Date moment;

		public java.util.Date getMoment() {
			return this.moment;
		}

		public String pid;

		public String getPid() {
			return this.pid;
		}

		public String root_pid;

		public String getRoot_pid() {
			return this.root_pid;
		}

		public String father_pid;

		public String getFather_pid() {
			return this.father_pid;
		}

		public String project;

		public String getProject() {
			return this.project;
		}

		public String job;

		public String getJob() {
			return this.job;
		}

		public String context;

		public String getContext() {
			return this.context;
		}

		public Integer priority;

		public Integer getPriority() {
			return this.priority;
		}

		public String type;

		public String getType() {
			return this.type;
		}

		public String origin;

		public String getOrigin() {
			return this.origin;
		}

		public String message;

		public String getMessage() {
			return this.message;
		}

		public Integer code;

		public Integer getCode() {
			return this.code;
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ORDER_ETL_RFE_ETL.length) {
					if (length < 1024
							&& commonByteArray_ORDER_ETL_RFE_ETL.length == 0) {
						commonByteArray_ORDER_ETL_RFE_ETL = new byte[1024];
					} else {
						commonByteArray_ORDER_ETL_RFE_ETL = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ORDER_ETL_RFE_ETL, 0, length);
				strReturn = new String(commonByteArray_ORDER_ETL_RFE_ETL, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ORDER_ETL_RFE_ETL) {

				try {

					int length = 0;

					this.moment = readDate(dis);

					this.pid = readString(dis);

					this.root_pid = readString(dis);

					this.father_pid = readString(dis);

					this.project = readString(dis);

					this.job = readString(dis);

					this.context = readString(dis);

					this.priority = readInteger(dis);

					this.type = readString(dis);

					this.origin = readString(dis);

					this.message = readString(dis);

					this.code = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.moment, dos);

				// String

				writeString(this.pid, dos);

				// String

				writeString(this.root_pid, dos);

				// String

				writeString(this.father_pid, dos);

				// String

				writeString(this.project, dos);

				// String

				writeString(this.job, dos);

				// String

				writeString(this.context, dos);

				// Integer

				writeInteger(this.priority, dos);

				// String

				writeString(this.type, dos);

				// String

				writeString(this.origin, dos);

				// String

				writeString(this.message, dos);

				// Integer

				writeInteger(this.code, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("moment=" + String.valueOf(moment));
			sb.append(",pid=" + pid);
			sb.append(",root_pid=" + root_pid);
			sb.append(",father_pid=" + father_pid);
			sb.append(",project=" + project);
			sb.append(",job=" + job);
			sb.append(",context=" + context);
			sb.append(",priority=" + String.valueOf(priority));
			sb.append(",type=" + type);
			sb.append(",origin=" + origin);
			sb.append(",message=" + message);
			sb.append(",code=" + String.valueOf(code));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row_talendLogs_LOGSStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void talendLogs_LOGSProcess(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("talendLogs_LOGS_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row_talendLogs_LOGSStruct row_talendLogs_LOGS = new row_talendLogs_LOGSStruct();

				/**
				 * [talendLogs_FILE begin ] start
				 */

				ok_Hash.put("talendLogs_FILE", false);
				start_Hash.put("talendLogs_FILE", System.currentTimeMillis());

				currentVirtualComponent = "talendLogs_FILE";

				currentComponent = "talendLogs_FILE";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("Main" + iterateId, 0, 0);

					}
				}

				int tos_count_talendLogs_FILE = 0;

				String fileName_talendLogs_FILE = "";
				fileName_talendLogs_FILE = (new java.io.File("/r01/log" + "/"
						+ "logs_file.txt")).getAbsolutePath()
						.replace("\\", "/");
				String fullName_talendLogs_FILE = null;
				String extension_talendLogs_FILE = null;
				String directory_talendLogs_FILE = null;
				if ((fileName_talendLogs_FILE.indexOf("/") != -1)) {
					if (fileName_talendLogs_FILE.lastIndexOf(".") < fileName_talendLogs_FILE
							.lastIndexOf("/")) {
						fullName_talendLogs_FILE = fileName_talendLogs_FILE;
						extension_talendLogs_FILE = "";
					} else {
						fullName_talendLogs_FILE = fileName_talendLogs_FILE
								.substring(0, fileName_talendLogs_FILE
										.lastIndexOf("."));
						extension_talendLogs_FILE = fileName_talendLogs_FILE
								.substring(fileName_talendLogs_FILE
										.lastIndexOf("."));
					}
					directory_talendLogs_FILE = fileName_talendLogs_FILE
							.substring(0,
									fileName_talendLogs_FILE.lastIndexOf("/"));
				} else {
					if (fileName_talendLogs_FILE.lastIndexOf(".") != -1) {
						fullName_talendLogs_FILE = fileName_talendLogs_FILE
								.substring(0, fileName_talendLogs_FILE
										.lastIndexOf("."));
						extension_talendLogs_FILE = fileName_talendLogs_FILE
								.substring(fileName_talendLogs_FILE
										.lastIndexOf("."));
					} else {
						fullName_talendLogs_FILE = fileName_talendLogs_FILE;
						extension_talendLogs_FILE = "";
					}
					directory_talendLogs_FILE = "";
				}
				boolean isFileGenerated_talendLogs_FILE = true;
				java.io.File filetalendLogs_FILE = new java.io.File(
						fileName_talendLogs_FILE);
				globalMap.put("talendLogs_FILE_FILE_NAME",
						fileName_talendLogs_FILE);
				if (filetalendLogs_FILE.exists()) {
					isFileGenerated_talendLogs_FILE = false;
				}
				int nb_line_talendLogs_FILE = 0;
				int splitedFileNo_talendLogs_FILE = 0;
				int currentRow_talendLogs_FILE = 0;

				final String OUT_DELIM_talendLogs_FILE = /**
				 * Start field
				 * talendLogs_FILE:FIELDSEPARATOR
				 */
				";"/** End field talendLogs_FILE:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_talendLogs_FILE = /**
				 * Start field
				 * talendLogs_FILE:ROWSEPARATOR
				 */
				"\n"/** End field talendLogs_FILE:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_talendLogs_FILE != null
						&& directory_talendLogs_FILE.trim().length() != 0) {
					java.io.File dir_talendLogs_FILE = new java.io.File(
							directory_talendLogs_FILE);
					if (!dir_talendLogs_FILE.exists()) {
						dir_talendLogs_FILE.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtalendLogs_FILE = null;

				outtalendLogs_FILE = new java.io.BufferedWriter(
						new java.io.OutputStreamWriter(
								new java.io.FileOutputStream(
										fileName_talendLogs_FILE, true),
								"UTF-8"));

				resourceMap.put("out_talendLogs_FILE", outtalendLogs_FILE);
				resourceMap.put("nb_line_talendLogs_FILE",
						nb_line_talendLogs_FILE);

				/**
				 * [talendLogs_FILE begin ] stop
				 */

				/**
				 * [talendLogs_LOGS begin ] start
				 */

				ok_Hash.put("talendLogs_LOGS", false);
				start_Hash.put("talendLogs_LOGS", System.currentTimeMillis());

				currentVirtualComponent = "talendLogs_LOGS";

				currentComponent = "talendLogs_LOGS";

				int tos_count_talendLogs_LOGS = 0;

				try {
					for (LogCatcherUtils.LogCatcherMessage lcm : talendLogs_LOGS
							.getMessages()) {
						row_talendLogs_LOGS.type = lcm.getType();
						row_talendLogs_LOGS.origin = (lcm.getOrigin() == null
								|| lcm.getOrigin().length() < 1 ? null : lcm
								.getOrigin());
						row_talendLogs_LOGS.priority = lcm.getPriority();
						row_talendLogs_LOGS.message = lcm.getMessage();
						row_talendLogs_LOGS.code = lcm.getCode();

						row_talendLogs_LOGS.moment = java.util.Calendar
								.getInstance().getTime();

						row_talendLogs_LOGS.pid = pid;
						row_talendLogs_LOGS.root_pid = rootPid;
						row_talendLogs_LOGS.father_pid = fatherPid;

						row_talendLogs_LOGS.project = projectName;
						row_talendLogs_LOGS.job = jobName;
						row_talendLogs_LOGS.context = contextStr;

						/**
						 * [talendLogs_LOGS begin ] stop
						 */

						/**
						 * [talendLogs_LOGS main ] start
						 */

						currentVirtualComponent = "talendLogs_LOGS";

						currentComponent = "talendLogs_LOGS";

						tos_count_talendLogs_LOGS++;

						/**
						 * [talendLogs_LOGS main ] stop
						 */

						/**
						 * [talendLogs_LOGS process_data_begin ] start
						 */

						currentVirtualComponent = "talendLogs_LOGS";

						currentComponent = "talendLogs_LOGS";

						/**
						 * [talendLogs_LOGS process_data_begin ] stop
						 */

						/**
						 * [talendLogs_FILE main ] start
						 */

						currentVirtualComponent = "talendLogs_FILE";

						currentComponent = "talendLogs_FILE";

						// Main
						// row_talendLogs_LOGS

						if (execStat) {
							runStat.updateStatOnConnection("Main" + iterateId,
									1, 1);
						}

						StringBuilder sb_talendLogs_FILE = new StringBuilder();
						if (row_talendLogs_LOGS.moment != null) {
							sb_talendLogs_FILE.append(FormatterUtils
									.format_Date(row_talendLogs_LOGS.moment,
											"yyyy-MM-dd HH:mm:ss"));
						}
						sb_talendLogs_FILE.append(OUT_DELIM_talendLogs_FILE);
						if (row_talendLogs_LOGS.pid != null) {
							sb_talendLogs_FILE.append(row_talendLogs_LOGS.pid);
						}
						sb_talendLogs_FILE.append(OUT_DELIM_talendLogs_FILE);
						if (row_talendLogs_LOGS.root_pid != null) {
							sb_talendLogs_FILE
									.append(row_talendLogs_LOGS.root_pid);
						}
						sb_talendLogs_FILE.append(OUT_DELIM_talendLogs_FILE);
						if (row_talendLogs_LOGS.father_pid != null) {
							sb_talendLogs_FILE
									.append(row_talendLogs_LOGS.father_pid);
						}
						sb_talendLogs_FILE.append(OUT_DELIM_talendLogs_FILE);
						if (row_talendLogs_LOGS.project != null) {
							sb_talendLogs_FILE
									.append(row_talendLogs_LOGS.project);
						}
						sb_talendLogs_FILE.append(OUT_DELIM_talendLogs_FILE);
						if (row_talendLogs_LOGS.job != null) {
							sb_talendLogs_FILE.append(row_talendLogs_LOGS.job);
						}
						sb_talendLogs_FILE.append(OUT_DELIM_talendLogs_FILE);
						if (row_talendLogs_LOGS.context != null) {
							sb_talendLogs_FILE
									.append(row_talendLogs_LOGS.context);
						}
						sb_talendLogs_FILE.append(OUT_DELIM_talendLogs_FILE);
						if (row_talendLogs_LOGS.priority != null) {
							sb_talendLogs_FILE
									.append(row_talendLogs_LOGS.priority);
						}
						sb_talendLogs_FILE.append(OUT_DELIM_talendLogs_FILE);
						if (row_talendLogs_LOGS.type != null) {
							sb_talendLogs_FILE.append(row_talendLogs_LOGS.type);
						}
						sb_talendLogs_FILE.append(OUT_DELIM_talendLogs_FILE);
						if (row_talendLogs_LOGS.origin != null) {
							sb_talendLogs_FILE
									.append(row_talendLogs_LOGS.origin);
						}
						sb_talendLogs_FILE.append(OUT_DELIM_talendLogs_FILE);
						if (row_talendLogs_LOGS.message != null) {
							sb_talendLogs_FILE
									.append(row_talendLogs_LOGS.message);
						}
						sb_talendLogs_FILE.append(OUT_DELIM_talendLogs_FILE);
						if (row_talendLogs_LOGS.code != null) {
							sb_talendLogs_FILE.append(row_talendLogs_LOGS.code);
						}
						sb_talendLogs_FILE
								.append(OUT_DELIM_ROWSEP_talendLogs_FILE);

						synchronized (multiThreadLockWrite) {
							nb_line_talendLogs_FILE++;
							resourceMap.put("nb_line_talendLogs_FILE",
									nb_line_talendLogs_FILE);

							outtalendLogs_FILE.write(sb_talendLogs_FILE
									.toString());

						}

						tos_count_talendLogs_FILE++;

						/**
						 * [talendLogs_FILE main ] stop
						 */

						/**
						 * [talendLogs_FILE process_data_begin ] start
						 */

						currentVirtualComponent = "talendLogs_FILE";

						currentComponent = "talendLogs_FILE";

						/**
						 * [talendLogs_FILE process_data_begin ] stop
						 */

						/**
						 * [talendLogs_FILE process_data_end ] start
						 */

						currentVirtualComponent = "talendLogs_FILE";

						currentComponent = "talendLogs_FILE";

						/**
						 * [talendLogs_FILE process_data_end ] stop
						 */

						/**
						 * [talendLogs_LOGS process_data_end ] start
						 */

						currentVirtualComponent = "talendLogs_LOGS";

						currentComponent = "talendLogs_LOGS";

						/**
						 * [talendLogs_LOGS process_data_end ] stop
						 */

						/**
						 * [talendLogs_LOGS end ] start
						 */

						currentVirtualComponent = "talendLogs_LOGS";

						currentComponent = "talendLogs_LOGS";

					}
				} catch (Exception e_talendLogs_LOGS) {
					logIgnoredError(
							String.format(
									"talendLogs_LOGS - tLogCatcher failed to process log message(s) due to internal error: %s",
									e_talendLogs_LOGS), e_talendLogs_LOGS);
				}

				ok_Hash.put("talendLogs_LOGS", true);
				end_Hash.put("talendLogs_LOGS", System.currentTimeMillis());

				/**
				 * [talendLogs_LOGS end ] stop
				 */

				/**
				 * [talendLogs_FILE end ] start
				 */

				currentVirtualComponent = "talendLogs_FILE";

				currentComponent = "talendLogs_FILE";

				synchronized (multiThreadLockWrite) {

					if (outtalendLogs_FILE != null) {
						outtalendLogs_FILE.flush();
						outtalendLogs_FILE.close();
					}

					globalMap.put("talendLogs_FILE_NB_LINE",
							nb_line_talendLogs_FILE);
					globalMap.put("talendLogs_FILE_FILE_NAME",
							fileName_talendLogs_FILE);

				}

				resourceMap.put("finish_talendLogs_FILE", true);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("Main" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("talendLogs_FILE", true);
				end_Hash.put("talendLogs_FILE", System.currentTimeMillis());

				/**
				 * [talendLogs_FILE end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [talendLogs_LOGS finally ] start
				 */

				currentVirtualComponent = "talendLogs_LOGS";

				currentComponent = "talendLogs_LOGS";

				/**
				 * [talendLogs_LOGS finally ] stop
				 */

				/**
				 * [talendLogs_FILE finally ] start
				 */

				currentVirtualComponent = "talendLogs_FILE";

				currentComponent = "talendLogs_FILE";

				if (resourceMap.get("finish_talendLogs_FILE") == null) {

					synchronized (multiThreadLockWrite) {

						java.io.Writer outtalendLogs_FILE = (java.io.Writer) resourceMap
								.get("out_talendLogs_FILE");
						if (outtalendLogs_FILE != null) {
							outtalendLogs_FILE.flush();
							outtalendLogs_FILE.close();
						}

					}

				}

				/**
				 * [talendLogs_FILE finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("talendLogs_LOGS_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private SyncInt runningThreadCount = new SyncInt();

	private class SyncInt {
		private int count = 0;

		public synchronized void add(int i) {
			count += i;
		}

		public synchronized int getCount() {
			return count;
		}
	}

	private PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final RFE_ETL RFE_ETLClass = new RFE_ETL();

		int exitCode = RFE_ETLClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket
				// can't open
				System.err.println("The statistics socket port " + portStats
						+ " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}

		try {
			// call job/subjob with an existing context, like:
			// --context=production. if without this parameter, there will use
			// the default context instead.
			java.io.InputStream inContext = RFE_ETL.class.getClassLoader()
					.getResourceAsStream(
							"order_etl/rfe_etl_0_1/contexts/" + contextStr
									+ ".properties");
			if (inContext == null) {
				inContext = RFE_ETL.class.getClassLoader().getResourceAsStream(
						"config/contexts/" + contextStr + ".properties");
			}
			if (inContext != null) {
				// defaultProps is in order to keep the original context value
				defaultProps.load(inContext);
				inContext.close();
				context = new ContextProperties(defaultProps);
			} else if (!isDefaultContext) {
				// print info and job continue to run, for case: context_param
				// is not empty.
				System.err.println("Could not find the context " + contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param
							.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
			context.setContextType("data_warehouse_order_rfe_host", "id_String");

			context.data_warehouse_order_rfe_host = (String) context
					.getProperty("data_warehouse_order_rfe_host");
			context.setContextType("data_warehouse_order_rfe_port", "id_String");

			context.data_warehouse_order_rfe_port = (String) context
					.getProperty("data_warehouse_order_rfe_port");
			context.setContextType("data_warehouse_order_rfe_database",
					"id_String");

			context.data_warehouse_order_rfe_database = (String) context
					.getProperty("data_warehouse_order_rfe_database");
			context.setContextType("data_warehouse_order_rfe_schema",
					"id_String");

			context.data_warehouse_order_rfe_schema = (String) context
					.getProperty("data_warehouse_order_rfe_schema");
			context.setContextType("data_warehouse_order_rfe_username",
					"id_String");

			context.data_warehouse_order_rfe_username = (String) context
					.getProperty("data_warehouse_order_rfe_username");
			context.setContextType("data_warehouse_order_rfe_password",
					"id_String");

			context.data_warehouse_order_rfe_password = (String) context
					.getProperty("data_warehouse_order_rfe_password");
			context.setContextType("data_warehouse_order_dwos_host",
					"id_String");

			context.data_warehouse_order_dwos_host = (String) context
					.getProperty("data_warehouse_order_dwos_host");
			context.setContextType("data_warehouse_order_dwos_port",
					"id_String");

			context.data_warehouse_order_dwos_port = (String) context
					.getProperty("data_warehouse_order_dwos_port");
			context.setContextType("data_warehouse_order_dwos_database",
					"id_String");

			context.data_warehouse_order_dwos_database = (String) context
					.getProperty("data_warehouse_order_dwos_database");
			context.setContextType("data_warehouse_order_dwos_schema",
					"id_String");

			context.data_warehouse_order_dwos_schema = (String) context
					.getProperty("data_warehouse_order_dwos_schema");
			context.setContextType("data_warehouse_order_dwos_username",
					"id_String");

			context.data_warehouse_order_dwos_username = (String) context
					.getProperty("data_warehouse_order_dwos_username");
			context.setContextType("data_warehouse_order_dwos_password",
					"id_String");

			context.data_warehouse_order_dwos_password = (String) context
					.getProperty("data_warehouse_order_dwos_password");
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
			if (parentContextMap.containsKey("data_warehouse_order_rfe_host")) {
				context.data_warehouse_order_rfe_host = (String) parentContextMap
						.get("data_warehouse_order_rfe_host");
			}
			if (parentContextMap.containsKey("data_warehouse_order_rfe_port")) {
				context.data_warehouse_order_rfe_port = (String) parentContextMap
						.get("data_warehouse_order_rfe_port");
			}
			if (parentContextMap
					.containsKey("data_warehouse_order_rfe_database")) {
				context.data_warehouse_order_rfe_database = (String) parentContextMap
						.get("data_warehouse_order_rfe_database");
			}
			if (parentContextMap.containsKey("data_warehouse_order_rfe_schema")) {
				context.data_warehouse_order_rfe_schema = (String) parentContextMap
						.get("data_warehouse_order_rfe_schema");
			}
			if (parentContextMap
					.containsKey("data_warehouse_order_rfe_username")) {
				context.data_warehouse_order_rfe_username = (String) parentContextMap
						.get("data_warehouse_order_rfe_username");
			}
			if (parentContextMap
					.containsKey("data_warehouse_order_rfe_password")) {
				context.data_warehouse_order_rfe_password = (String) parentContextMap
						.get("data_warehouse_order_rfe_password");
			}
			if (parentContextMap.containsKey("data_warehouse_order_dwos_host")) {
				context.data_warehouse_order_dwos_host = (String) parentContextMap
						.get("data_warehouse_order_dwos_host");
			}
			if (parentContextMap.containsKey("data_warehouse_order_dwos_port")) {
				context.data_warehouse_order_dwos_port = (String) parentContextMap
						.get("data_warehouse_order_dwos_port");
			}
			if (parentContextMap
					.containsKey("data_warehouse_order_dwos_database")) {
				context.data_warehouse_order_dwos_database = (String) parentContextMap
						.get("data_warehouse_order_dwos_database");
			}
			if (parentContextMap
					.containsKey("data_warehouse_order_dwos_schema")) {
				context.data_warehouse_order_dwos_schema = (String) parentContextMap
						.get("data_warehouse_order_dwos_schema");
			}
			if (parentContextMap
					.containsKey("data_warehouse_order_dwos_username")) {
				context.data_warehouse_order_dwos_username = (String) parentContextMap
						.get("data_warehouse_order_dwos_username");
			}
			if (parentContextMap
					.containsKey("data_warehouse_order_dwos_password")) {
				context.data_warehouse_order_dwos_password = (String) parentContextMap
						.get("data_warehouse_order_dwos_password");
			}
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil
				.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName,
				jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName,
				parent_part_launcher, Thread.currentThread().getId() + "", "",
				"", "", "",
				resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();
		tStatCatcher_1.addMessage("begin");
		talendStats_STATS.addMessage("begin");

		this.globalResumeTicket = true;// to run tPreJob

		try {
			tStatCatcher_1Process(globalMap);
		} catch (java.lang.Exception e) {
			e.printStackTrace();
		}
		try {
			talendStats_STATSProcess(globalMap);
		} catch (java.lang.Exception e) {
			e.printStackTrace();
		}

		this.globalResumeTicket = false;// to run others jobs
		final Thread launchingThread = Thread.currentThread();
		runningThreadCount.add(1);
		new Thread() {
			public void run() {
				java.util.Map threadRunResultMap = new java.util.HashMap();
				threadRunResultMap.put("errorCode", null);
				threadRunResultMap.put("status", "");
				threadLocal.set(threadRunResultMap);

				try {
					((java.util.Map) threadLocal.get()).put("errorCode", null);
					tFileInputProperties_1Process(globalMap);
					if (!"failure".equals(((java.util.Map) threadLocal.get())
							.get("status"))) {
						((java.util.Map) threadLocal.get())
								.put("status", "end");
					}
				} catch (TalendException e_tFileInputProperties_1) {
					globalMap
							.put("tFileInputProperties_1_SUBPROCESS_STATE", -1);

					e_tFileInputProperties_1.printStackTrace();

				} catch (java.lang.Error e_tFileInputProperties_1) {
					globalMap
							.put("tFileInputProperties_1_SUBPROCESS_STATE", -1);
					((java.util.Map) threadLocal.get())
							.put("status", "failure");
					throw e_tFileInputProperties_1;

				} finally {
					Integer localErrorCode = (Integer) (((java.util.Map) threadLocal
							.get()).get("errorCode"));
					String localStatus = (String) (((java.util.Map) threadLocal
							.get()).get("status"));
					if (localErrorCode != null) {
						if (errorCode == null
								|| localErrorCode.compareTo(errorCode) > 0) {
							errorCode = localErrorCode;
						}
					}
					if (!status.equals("failure")) {
						status = localStatus;
					}

					if ("true".equals(((java.util.Map) threadLocal.get())
							.get("JobInterrupted"))) {
						launchingThread.interrupt();
					}

					runningThreadCount.add(-1);
				}
			}
		}.start();

		boolean interrupted = false;
		while (runningThreadCount.getCount() > 0) {
			try {
				Thread.sleep(10);
			} catch (java.lang.InterruptedException e) {
				interrupted = true;
			} catch (java.lang.Exception e) {
				e.printStackTrace();
			}
		}

		if (interrupted) {
			Thread.currentThread().interrupt();
		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println((endUsedMemory - startUsedMemory)
					+ " bytes memory increase when running : RFE_ETL");
		}
		tStatCatcher_1.addMessage(status == "" ? "end" : status,
				(end - startTime));
		try {
			tStatCatcher_1Process(globalMap);
		} catch (java.lang.Exception e) {
			e.printStackTrace();
		}
		talendStats_STATS.addMessage(status == "" ? "end" : status,
				(end - startTime));
		try {
			talendStats_STATSProcess(globalMap);
		} catch (java.lang.Exception e) {
			e.printStackTrace();
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher,
				Thread.currentThread().getId() + "", "", "" + returnCode, "",
				"", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {
		closeSqlDbConnections();

	}

	private void closeSqlDbConnections() {
		try {
			Object obj_conn;
			obj_conn = globalMap.remove("conn_tDBConnection_1");
			if (null != obj_conn) {
				((java.sql.Connection) obj_conn).close();
			}
		} catch (java.lang.Exception e) {
		}
	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
		connections.put("conn_tDBConnection_1",
				globalMap.get("conn_tDBConnection_1"));

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		}

	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" },
			{ "\\'", "\'" }, { "\\r", "\r" }, { "\\f", "\f" }, { "\\b", "\b" },
			{ "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex,
							index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left
			// into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 795025 characters generated by Talend Open Studio for Data Integration on the
 * December 13, 2019 3:09:38 PM EST
 ************************************************************************************************/

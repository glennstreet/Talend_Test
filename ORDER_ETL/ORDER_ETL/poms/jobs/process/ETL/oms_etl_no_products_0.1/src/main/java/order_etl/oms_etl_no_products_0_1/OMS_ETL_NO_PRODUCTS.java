// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package order_etl.oms_etl_no_products_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")
/**
 * Job: OMS_ETL_NO_PRODUCTS Purpose: <br>
 * Description: Extract data from RUP OMS, PM, and INV source tables and load them into staging tables, including dimension and fact tables. <br>
 * @author gstreet@copyright.com
 * @version 7.1.1.20181026_1147
 * @status 
 */
public class OMS_ETL_NO_PRODUCTS implements TalendJob {

	protected static void logIgnoredError(String message, Throwable cause) {
		System.err.println(message);
		if (cause != null) {
			cause.printStackTrace();
		}

	}

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset
			.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

			if (data_warehouse_order_oms_host != null) {

				this.setProperty("data_warehouse_order_oms_host",
						data_warehouse_order_oms_host.toString());

			}

			if (data_warehouse_order_oms_port != null) {

				this.setProperty("data_warehouse_order_oms_port",
						data_warehouse_order_oms_port.toString());

			}

			if (data_warehouse_order_database != null) {

				this.setProperty("data_warehouse_order_database",
						data_warehouse_order_database.toString());

			}

			if (data_warehouse_order_schema != null) {

				this.setProperty("data_warehouse_order_schema",
						data_warehouse_order_schema.toString());

			}

			if (data_warehouse_order_username != null) {

				this.setProperty("data_warehouse_order_username",
						data_warehouse_order_username.toString());

			}

			if (data_warehouse_order_password != null) {

				this.setProperty("data_warehouse_order_password",
						data_warehouse_order_password.toString());

			}

			if (data_warehouse_order_dwos_host != null) {

				this.setProperty("data_warehouse_order_dwos_host",
						data_warehouse_order_dwos_host.toString());

			}

			if (data_warehouse_order_dwos_port != null) {

				this.setProperty("data_warehouse_order_dwos_port",
						data_warehouse_order_dwos_port.toString());

			}

			if (data_warehouse_order_dwos_database != null) {

				this.setProperty("data_warehouse_order_dwos_database",
						data_warehouse_order_dwos_database.toString());

			}

			if (data_warehouse_order_dwos_schema != null) {

				this.setProperty("data_warehouse_order_dwos_schema",
						data_warehouse_order_dwos_schema.toString());

			}

			if (data_warehouse_order_dwos_username != null) {

				this.setProperty("data_warehouse_order_dwos_username",
						data_warehouse_order_dwos_username.toString());

			}

			if (data_warehouse_order_dwos_password != null) {

				this.setProperty("data_warehouse_order_dwos_password",
						data_warehouse_order_dwos_password.toString());

			}

		}

		public String data_warehouse_order_oms_host;

		public String getData_warehouse_order_oms_host() {
			return this.data_warehouse_order_oms_host;
		}

		public String data_warehouse_order_oms_port;

		public String getData_warehouse_order_oms_port() {
			return this.data_warehouse_order_oms_port;
		}

		public String data_warehouse_order_database;

		public String getData_warehouse_order_database() {
			return this.data_warehouse_order_database;
		}

		public String data_warehouse_order_schema;

		public String getData_warehouse_order_schema() {
			return this.data_warehouse_order_schema;
		}

		public String data_warehouse_order_username;

		public String getData_warehouse_order_username() {
			return this.data_warehouse_order_username;
		}

		public String data_warehouse_order_password;

		public String getData_warehouse_order_password() {
			return this.data_warehouse_order_password;
		}

		public String data_warehouse_order_dwos_host;

		public String getData_warehouse_order_dwos_host() {
			return this.data_warehouse_order_dwos_host;
		}

		public String data_warehouse_order_dwos_port;

		public String getData_warehouse_order_dwos_port() {
			return this.data_warehouse_order_dwos_port;
		}

		public String data_warehouse_order_dwos_database;

		public String getData_warehouse_order_dwos_database() {
			return this.data_warehouse_order_dwos_database;
		}

		public String data_warehouse_order_dwos_schema;

		public String getData_warehouse_order_dwos_schema() {
			return this.data_warehouse_order_dwos_schema;
		}

		public String data_warehouse_order_dwos_username;

		public String getData_warehouse_order_dwos_username() {
			return this.data_warehouse_order_dwos_username;
		}

		public String data_warehouse_order_dwos_password;

		public String getData_warehouse_order_dwos_password() {
			return this.data_warehouse_order_dwos_password;
		}
	}

	private ContextProperties context = new ContextProperties();

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "OMS_ETL_NO_PRODUCTS";
	private final String projectName = "ORDER_ETL";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(
			java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources
				.entrySet()) {
			talendDataSources.put(
					dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry
							.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap
				.put(KEY_DB_DATASOURCES_RAW,
						new java.util.HashMap<String, javax.sql.DataSource>(
								dataSources));
	}

	LogCatcherUtils tLogCatcher_1 = new LogCatcherUtils();
	LogCatcherUtils talendLogs_LOGS = new LogCatcherUtils();
	StatCatcherUtils tStatCatcher_1 = new StatCatcherUtils(
			"_PyUncCHdEeqqYoaG91NGsg", "0.1");
	StatCatcherUtils talendStats_STATS = new StatCatcherUtils(
			"_PyUncCHdEeqqYoaG91NGsg", "0.1");

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
			new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent,
				final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null
						&& currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE",
							getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE",
						getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent
						+ " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					OMS_ETL_NO_PRODUCTS.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass()
							.getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(OMS_ETL_NO_PRODUCTS.this, new Object[] {
									e, currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
						tLogCatcher_1.addMessage("Java Exception",
								currentComponent, 6, e.getClass().getName()
										+ ":" + e.getMessage(), 1);
						talendLogs_LOGS.addMessage("Java Exception",
								currentComponent, 6, e.getClass().getName()
										+ ":" + e.getMessage(), 1);
						try {
							tLogCatcher_1Process(globalMap);
						} finally {
							talendLogs_LOGSProcess(globalMap);
						}
					}
				} catch (TalendException e) {
					// do nothing

				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tFileInputProperties_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		talendStats_STATS.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		talendStats_STATSProcess(globalMap);

		status = "failure";

		tFileInputProperties_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tContextLoad_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		talendStats_STATS.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		talendStats_STATSProcess(globalMap);

		status = "failure";

		tFileInputProperties_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tDBConnection_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		talendStats_STATS.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		talendStats_STATSProcess(globalMap);

		status = "failure";

		tDBConnection_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		talendStats_STATS.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		talendStats_STATSProcess(globalMap);

		status = "failure";

		tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		talendStats_STATS.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		talendStats_STATSProcess(globalMap);

		status = "failure";

		tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_13_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		talendStats_STATS.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		talendStats_STATSProcess(globalMap);

		status = "failure";

		tDBInput_13_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_13_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		talendStats_STATS.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		talendStats_STATSProcess(globalMap);

		status = "failure";

		tDBInput_13_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		talendStats_STATS.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		talendStats_STATSProcess(globalMap);

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		talendStats_STATS.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		talendStats_STATSProcess(globalMap);

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		talendStats_STATS.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		talendStats_STATSProcess(globalMap);

		status = "failure";

		tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		talendStats_STATS.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		talendStats_STATSProcess(globalMap);

		status = "failure";

		tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_12_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		talendStats_STATS.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		talendStats_STATSProcess(globalMap);

		status = "failure";

		tDBInput_12_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_12_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		talendStats_STATS.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		talendStats_STATSProcess(globalMap);

		status = "failure";

		tDBInput_12_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_5_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		talendStats_STATS.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		talendStats_STATSProcess(globalMap);

		status = "failure";

		tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_5_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		talendStats_STATS.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		talendStats_STATSProcess(globalMap);

		status = "failure";

		tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		talendStats_STATS.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		talendStats_STATSProcess(globalMap);

		status = "failure";

		tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		talendStats_STATS.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		talendStats_STATSProcess(globalMap);

		status = "failure";

		tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_6_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		talendStats_STATS.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		talendStats_STATSProcess(globalMap);

		status = "failure";

		tDBInput_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_6_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		talendStats_STATS.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		talendStats_STATSProcess(globalMap);

		status = "failure";

		tDBInput_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_7_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		talendStats_STATS.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		talendStats_STATSProcess(globalMap);

		status = "failure";

		tDBInput_7_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_7_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		talendStats_STATS.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		talendStats_STATSProcess(globalMap);

		status = "failure";

		tDBInput_7_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_14_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		talendStats_STATS.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		talendStats_STATSProcess(globalMap);

		status = "failure";

		tDBInput_14_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_14_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		talendStats_STATS.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		talendStats_STATSProcess(globalMap);

		status = "failure";

		tDBInput_14_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_9_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		talendStats_STATS.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		talendStats_STATSProcess(globalMap);

		status = "failure";

		tDBInput_9_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_9_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		talendStats_STATS.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		talendStats_STATSProcess(globalMap);

		status = "failure";

		tDBInput_9_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_15_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		talendStats_STATS.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		talendStats_STATSProcess(globalMap);

		status = "failure";

		tDBInput_15_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_15_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		talendStats_STATS.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		talendStats_STATSProcess(globalMap);

		status = "failure";

		tDBInput_15_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_17_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		talendStats_STATS.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		talendStats_STATSProcess(globalMap);

		status = "failure";

		tDBInput_17_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_17_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		talendStats_STATS.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		talendStats_STATSProcess(globalMap);

		status = "failure";

		tDBInput_17_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogCatcher_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tStatCatcher_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tStatCatcher_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tStatCatcher_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void talendStats_STATS_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		talendStats_FILE_error(exception, errorComponent, globalMap);

	}

	public void talendStats_FILE_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		talendStats_STATS_onSubJobError(exception, errorComponent, globalMap);
	}

	public void talendLogs_LOGS_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		talendLogs_FILE_error(exception, errorComponent, globalMap);

	}

	public void talendLogs_FILE_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		talendLogs_LOGS_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputProperties_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBConnection_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_2_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_13_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_4_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_12_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_5_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_3_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_6_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_7_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_14_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_9_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_15_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_17_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tLogCatcher_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tStatCatcher_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void talendStats_STATS_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void talendLogs_LOGS_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public static class row17Struct implements
			routines.system.IPersistableRow<row17Struct> {
		final static byte[] commonByteArrayLock_ORDER_ETL_OMS_ETL_NO_PRODUCTS = new byte[0];
		static byte[] commonByteArray_ORDER_ETL_OMS_ETL_NO_PRODUCTS = new byte[0];

		public String key;

		public String getKey() {
			return this.key;
		}

		public String value;

		public String getValue() {
			return this.value;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ORDER_ETL_OMS_ETL_NO_PRODUCTS.length) {
					if (length < 1024
							&& commonByteArray_ORDER_ETL_OMS_ETL_NO_PRODUCTS.length == 0) {
						commonByteArray_ORDER_ETL_OMS_ETL_NO_PRODUCTS = new byte[1024];
					} else {
						commonByteArray_ORDER_ETL_OMS_ETL_NO_PRODUCTS = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ORDER_ETL_OMS_ETL_NO_PRODUCTS, 0,
						length);
				strReturn = new String(
						commonByteArray_ORDER_ETL_OMS_ETL_NO_PRODUCTS, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ORDER_ETL_OMS_ETL_NO_PRODUCTS) {

				try {

					int length = 0;

					this.key = readString(dis);

					this.value = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.key, dos);

				// String

				writeString(this.value, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("key=" + key);
			sb.append(",value=" + value);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row17Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputProperties_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputProperties_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row17Struct row17 = new row17Struct();

				/**
				 * [tContextLoad_1 begin ] start
				 */

				ok_Hash.put("tContextLoad_1", false);
				start_Hash.put("tContextLoad_1", System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tContextLoad_1");
				tStatCatcher_1Process(globalMap);

				talendStats_STATS.addMessage("begin", "tContextLoad_1");
				talendStats_STATSProcess(globalMap);

				currentComponent = "tContextLoad_1";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row17" + iterateId, 0,
								0);

					}
				}

				int tos_count_tContextLoad_1 = 0;

				java.util.List<String> assignList_tContextLoad_1 = new java.util.ArrayList<String>();
				java.util.List<String> newPropertyList_tContextLoad_1 = new java.util.ArrayList<String>();
				java.util.List<String> noAssignList_tContextLoad_1 = new java.util.ArrayList<String>();
				int nb_line_tContextLoad_1 = 0;

				/**
				 * [tContextLoad_1 begin ] stop
				 */

				/**
				 * [tFileInputProperties_1 begin ] start
				 */

				ok_Hash.put("tFileInputProperties_1", false);
				start_Hash.put("tFileInputProperties_1",
						System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tFileInputProperties_1");
				tStatCatcher_1Process(globalMap);

				talendStats_STATS.addMessage("begin", "tFileInputProperties_1");
				talendStats_STATSProcess(globalMap);

				currentComponent = "tFileInputProperties_1";

				int tos_count_tFileInputProperties_1 = 0;

				java.io.File file_tFileInputProperties_1 = new java.io.File(
						"/r01/rup-config/rup-env.properties");
				int nb_line_tFileInputProperties_1 = 0;
				java.util.Properties properties_tFileInputProperties_1 = new java.util.Properties();
				java.io.FileInputStream fis_tFileInputProperties_1 = new java.io.FileInputStream(
						file_tFileInputProperties_1);
				try {
					properties_tFileInputProperties_1
							.load(fis_tFileInputProperties_1);
					java.util.Enumeration enumeration_tFileInputProperties_1 = properties_tFileInputProperties_1
							.propertyNames();
					while (enumeration_tFileInputProperties_1.hasMoreElements()) {
						nb_line_tFileInputProperties_1++;
						row17.key = (String) enumeration_tFileInputProperties_1
								.nextElement();
						row17.value = (String) properties_tFileInputProperties_1
								.getProperty(row17.key);

						/**
						 * [tFileInputProperties_1 begin ] stop
						 */

						/**
						 * [tFileInputProperties_1 main ] start
						 */

						currentComponent = "tFileInputProperties_1";

						tos_count_tFileInputProperties_1++;

						/**
						 * [tFileInputProperties_1 main ] stop
						 */

						/**
						 * [tFileInputProperties_1 process_data_begin ] start
						 */

						currentComponent = "tFileInputProperties_1";

						/**
						 * [tFileInputProperties_1 process_data_begin ] stop
						 */

						/**
						 * [tContextLoad_1 main ] start
						 */

						currentComponent = "tContextLoad_1";

						// row17
						// row17

						if (execStat) {
							runStat.updateStatOnConnection("row17" + iterateId,
									1, 1);
						}

						// ////////////////////////
						String tmp_key_tContextLoad_1 = null;
						String key_tContextLoad_1 = null;
						if (row17.key != null) {
							tmp_key_tContextLoad_1 = row17.key.trim();
							if ((tmp_key_tContextLoad_1.startsWith("#") || tmp_key_tContextLoad_1
									.startsWith("!"))) {
								tmp_key_tContextLoad_1 = null;
							} else {
								row17.key = tmp_key_tContextLoad_1;
							}
						}
						if (row17.key != null) {
							key_tContextLoad_1 = row17.key;
						}
						String value_tContextLoad_1 = null;
						if (row17.value != null) {
							value_tContextLoad_1 = row17.value;
						}

						String currentValue_tContextLoad_1 = value_tContextLoad_1;

						if (tmp_key_tContextLoad_1 != null) {
							try {
								if (key_tContextLoad_1 != null
										&& "data_warehouse_order_oms_host"
												.equals(key_tContextLoad_1)) {
									context.data_warehouse_order_oms_host = value_tContextLoad_1;
								}

								if (key_tContextLoad_1 != null
										&& "data_warehouse_order_oms_port"
												.equals(key_tContextLoad_1)) {
									context.data_warehouse_order_oms_port = value_tContextLoad_1;
								}

								if (key_tContextLoad_1 != null
										&& "data_warehouse_order_database"
												.equals(key_tContextLoad_1)) {
									context.data_warehouse_order_database = value_tContextLoad_1;
								}

								if (key_tContextLoad_1 != null
										&& "data_warehouse_order_schema"
												.equals(key_tContextLoad_1)) {
									context.data_warehouse_order_schema = value_tContextLoad_1;
								}

								if (key_tContextLoad_1 != null
										&& "data_warehouse_order_username"
												.equals(key_tContextLoad_1)) {
									context.data_warehouse_order_username = value_tContextLoad_1;
								}

								if (key_tContextLoad_1 != null
										&& "data_warehouse_order_password"
												.equals(key_tContextLoad_1)) {
									context.data_warehouse_order_password = value_tContextLoad_1;
								}

								if (key_tContextLoad_1 != null
										&& "data_warehouse_order_dwos_host"
												.equals(key_tContextLoad_1)) {
									context.data_warehouse_order_dwos_host = value_tContextLoad_1;
								}

								if (key_tContextLoad_1 != null
										&& "data_warehouse_order_dwos_port"
												.equals(key_tContextLoad_1)) {
									context.data_warehouse_order_dwos_port = value_tContextLoad_1;
								}

								if (key_tContextLoad_1 != null
										&& "data_warehouse_order_dwos_database"
												.equals(key_tContextLoad_1)) {
									context.data_warehouse_order_dwos_database = value_tContextLoad_1;
								}

								if (key_tContextLoad_1 != null
										&& "data_warehouse_order_dwos_schema"
												.equals(key_tContextLoad_1)) {
									context.data_warehouse_order_dwos_schema = value_tContextLoad_1;
								}

								if (key_tContextLoad_1 != null
										&& "data_warehouse_order_dwos_username"
												.equals(key_tContextLoad_1)) {
									context.data_warehouse_order_dwos_username = value_tContextLoad_1;
								}

								if (key_tContextLoad_1 != null
										&& "data_warehouse_order_dwos_password"
												.equals(key_tContextLoad_1)) {
									context.data_warehouse_order_dwos_password = value_tContextLoad_1;
								}

								if (context.getProperty(key_tContextLoad_1) != null) {
									assignList_tContextLoad_1
											.add(key_tContextLoad_1);
								} else {
									newPropertyList_tContextLoad_1
											.add(key_tContextLoad_1);
								}
								if (value_tContextLoad_1 == null) {
									context.setProperty(key_tContextLoad_1, "");
								} else {
									context.setProperty(key_tContextLoad_1,
											value_tContextLoad_1);
								}
							} catch (java.lang.Exception e) {
								System.err
										.println("Setting a value for the key \""
												+ key_tContextLoad_1
												+ "\" has failed. Error message: "
												+ e.getMessage());
							}
							nb_line_tContextLoad_1++;
						}
						// ////////////////////////

						tos_count_tContextLoad_1++;

						/**
						 * [tContextLoad_1 main ] stop
						 */

						/**
						 * [tContextLoad_1 process_data_begin ] start
						 */

						currentComponent = "tContextLoad_1";

						/**
						 * [tContextLoad_1 process_data_begin ] stop
						 */

						/**
						 * [tContextLoad_1 process_data_end ] start
						 */

						currentComponent = "tContextLoad_1";

						/**
						 * [tContextLoad_1 process_data_end ] stop
						 */

						/**
						 * [tFileInputProperties_1 process_data_end ] start
						 */

						currentComponent = "tFileInputProperties_1";

						/**
						 * [tFileInputProperties_1 process_data_end ] stop
						 */

						/**
						 * [tFileInputProperties_1 end ] start
						 */

						currentComponent = "tFileInputProperties_1";

					}
				} finally {
					if (fis_tFileInputProperties_1 != null) {
						fis_tFileInputProperties_1.close();
					}
				}
				globalMap.put("tFileInputProperties_1_NB_LINE",
						nb_line_tFileInputProperties_1);

				ok_Hash.put("tFileInputProperties_1", true);
				end_Hash.put("tFileInputProperties_1",
						System.currentTimeMillis());

				tStatCatcher_1.addMessage(
						"end",
						"tFileInputProperties_1",
						end_Hash.get("tFileInputProperties_1")
								- start_Hash.get("tFileInputProperties_1"));
				tStatCatcher_1Process(globalMap);
				talendStats_STATS.addMessage(
						"end",
						"tFileInputProperties_1",
						end_Hash.get("tFileInputProperties_1")
								- start_Hash.get("tFileInputProperties_1"));
				talendStats_STATSProcess(globalMap);

				/**
				 * [tFileInputProperties_1 end ] stop
				 */

				/**
				 * [tContextLoad_1 end ] start
				 */

				currentComponent = "tContextLoad_1";

				java.util.Enumeration<?> enu_tContextLoad_1 = context
						.propertyNames();
				while (enu_tContextLoad_1.hasMoreElements()) {
					String key_tContextLoad_1 = (String) enu_tContextLoad_1
							.nextElement();
					if (!assignList_tContextLoad_1.contains(key_tContextLoad_1)
							&& !newPropertyList_tContextLoad_1
									.contains(key_tContextLoad_1)) {
						noAssignList_tContextLoad_1.add(key_tContextLoad_1);
					}
				}

				String newPropertyStr_tContextLoad_1 = newPropertyList_tContextLoad_1
						.toString();
				String newProperty_tContextLoad_1 = newPropertyStr_tContextLoad_1
						.substring(1,
								newPropertyStr_tContextLoad_1.length() - 1);

				String noAssignStr_tContextLoad_1 = noAssignList_tContextLoad_1
						.toString();
				String noAssign_tContextLoad_1 = noAssignStr_tContextLoad_1
						.substring(1, noAssignStr_tContextLoad_1.length() - 1);

				globalMap.put("tContextLoad_1_KEY_NOT_INCONTEXT",
						newProperty_tContextLoad_1);
				globalMap.put("tContextLoad_1_KEY_NOT_LOADED",
						noAssign_tContextLoad_1);

				globalMap.put("tContextLoad_1_NB_LINE", nb_line_tContextLoad_1);

				List<String> parametersToEncrypt_tContextLoad_1 = new java.util.ArrayList<String>();

				resumeUtil.addLog("NODE", "NODE:tContextLoad_1", "", Thread
						.currentThread().getId() + "", "", "", "", "",
						resumeUtil.convertToJsonText(context,
								parametersToEncrypt_tContextLoad_1));

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row17" + iterateId, 2,
								0);
					}
				}

				ok_Hash.put("tContextLoad_1", true);
				end_Hash.put("tContextLoad_1", System.currentTimeMillis());

				tStatCatcher_1.addMessage(
						"end",
						"tContextLoad_1",
						end_Hash.get("tContextLoad_1")
								- start_Hash.get("tContextLoad_1"));
				tStatCatcher_1Process(globalMap);
				talendStats_STATS.addMessage(
						"end",
						"tContextLoad_1",
						end_Hash.get("tContextLoad_1")
								- start_Hash.get("tContextLoad_1"));
				talendStats_STATSProcess(globalMap);
				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk14", 0, "ok");
				}
				tDBConnection_1Process(globalMap);

				/**
				 * [tContextLoad_1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputProperties_1 finally ] start
				 */

				currentComponent = "tFileInputProperties_1";

				/**
				 * [tFileInputProperties_1 finally ] stop
				 */

				/**
				 * [tContextLoad_1 finally ] start
				 */

				currentComponent = "tContextLoad_1";

				/**
				 * [tContextLoad_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputProperties_1_SUBPROCESS_STATE", 1);
	}

	public void tDBConnection_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tDBConnection_1 begin ] start
				 */

				ok_Hash.put("tDBConnection_1", false);
				start_Hash.put("tDBConnection_1", System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tDBConnection_1");
				tStatCatcher_1Process(globalMap);

				talendStats_STATS.addMessage("begin", "tDBConnection_1");
				talendStats_STATSProcess(globalMap);

				currentComponent = "tDBConnection_1";

				int tos_count_tDBConnection_1 = 0;

				String url_tDBConnection_1 = "jdbc:postgresql://"
						+ context.data_warehouse_order_oms_host + ":"
						+ context.data_warehouse_order_oms_port + "/"
						+ context.data_warehouse_order_database;
				String dbUser_tDBConnection_1 = context.data_warehouse_order_username;

				final String decryptedPassword_tDBConnection_1 = context.data_warehouse_order_password;
				String dbPwd_tDBConnection_1 = decryptedPassword_tDBConnection_1;

				java.sql.Connection conn_tDBConnection_1 = null;

				java.util.Enumeration<java.sql.Driver> drivers_tDBConnection_1 = java.sql.DriverManager
						.getDrivers();
				while (drivers_tDBConnection_1.hasMoreElements()) {
					java.sql.Driver d_tDBConnection_1 = drivers_tDBConnection_1
							.nextElement();
					java.util.List<String> driverList_tDBConnection_1 = java.util.Arrays
							.<String> asList("com.amazon.redshift.jdbc.Driver",
									"com.amazon.redshift.jdbc41.Driver");
					if (driverList_tDBConnection_1.contains(d_tDBConnection_1
							.getClass().getName())) {
						try {
							java.sql.DriverManager
									.deregisterDriver(d_tDBConnection_1);
							java.sql.DriverManager
									.registerDriver(d_tDBConnection_1);
						} catch (java.lang.Exception e_tDBConnection_1) {
							// do nothing
						}
					}
				}
				String driverClass_tDBConnection_1 = "org.postgresql.Driver";
				java.lang.Class.forName(driverClass_tDBConnection_1);

				conn_tDBConnection_1 = java.sql.DriverManager.getConnection(
						url_tDBConnection_1, dbUser_tDBConnection_1,
						dbPwd_tDBConnection_1);

				globalMap.put("conn_tDBConnection_1", conn_tDBConnection_1);
				if (null != conn_tDBConnection_1) {

					conn_tDBConnection_1.setAutoCommit(false);
				}

				globalMap.put("schema_" + "tDBConnection_1",
						context.data_warehouse_order_schema);

				globalMap
						.put("conn_" + "tDBConnection_1", conn_tDBConnection_1);

				/**
				 * [tDBConnection_1 begin ] stop
				 */

				/**
				 * [tDBConnection_1 main ] start
				 */

				currentComponent = "tDBConnection_1";

				tos_count_tDBConnection_1++;

				/**
				 * [tDBConnection_1 main ] stop
				 */

				/**
				 * [tDBConnection_1 process_data_begin ] start
				 */

				currentComponent = "tDBConnection_1";

				/**
				 * [tDBConnection_1 process_data_begin ] stop
				 */

				/**
				 * [tDBConnection_1 process_data_end ] start
				 */

				currentComponent = "tDBConnection_1";

				/**
				 * [tDBConnection_1 process_data_end ] stop
				 */

				/**
				 * [tDBConnection_1 end ] start
				 */

				currentComponent = "tDBConnection_1";

				ok_Hash.put("tDBConnection_1", true);
				end_Hash.put("tDBConnection_1", System.currentTimeMillis());

				tStatCatcher_1.addMessage(
						"end",
						"tDBConnection_1",
						end_Hash.get("tDBConnection_1")
								- start_Hash.get("tDBConnection_1"));
				tStatCatcher_1Process(globalMap);
				talendStats_STATS.addMessage(
						"end",
						"tDBConnection_1",
						end_Hash.get("tDBConnection_1")
								- start_Hash.get("tDBConnection_1"));
				talendStats_STATSProcess(globalMap);
				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk15", 0, "ok");
				}
				tDBInput_2Process(globalMap);
				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk16", 0, "ok");
				}
				tDBInput_1Process(globalMap);
				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk17", 0, "ok");
				}
				tDBInput_5Process(globalMap);
				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk18", 0, "ok");
				}
				tDBInput_9Process(globalMap);

				/**
				 * [tDBConnection_1 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBConnection_1 finally ] start
				 */

				currentComponent = "tDBConnection_1";

				/**
				 * [tDBConnection_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 1);
	}

	public static class row2Struct implements
			routines.system.IPersistableRow<row2Struct> {
		final static byte[] commonByteArrayLock_ORDER_ETL_OMS_ETL_NO_PRODUCTS = new byte[0];
		static byte[] commonByteArray_ORDER_ETL_OMS_ETL_NO_PRODUCTS = new byte[0];

		public String inv_invoice_uid;

		public String getInv_invoice_uid() {
			return this.inv_invoice_uid;
		}

		public java.util.Date invoice_date;

		public java.util.Date getInvoice_date() {
			return this.invoice_date;
		}

		public String invoice_number;

		public String getInvoice_number() {
			return this.invoice_number;
		}

		public int record_version;

		public int getRecord_version() {
			return this.record_version;
		}

		public String created_by_user;

		public String getCreated_by_user() {
			return this.created_by_user;
		}

		public java.util.Date created_datetime;

		public java.util.Date getCreated_datetime() {
			return this.created_datetime;
		}

		public String updated_by_user;

		public String getUpdated_by_user() {
			return this.updated_by_user;
		}

		public java.util.Date updated_datetime;

		public java.util.Date getUpdated_datetime() {
			return this.updated_datetime;
		}

		public Boolean is_deleted_flag;

		public Boolean getIs_deleted_flag() {
			return this.is_deleted_flag;
		}

		public String invoice_status;

		public String getInvoice_status() {
			return this.invoice_status;
		}

		public java.util.Date invoice_payment_datetime;

		public java.util.Date getInvoice_payment_datetime() {
			return this.invoice_payment_datetime;
		}

		public String ar_account_pref_language;

		public String getAr_account_pref_language() {
			return this.ar_account_pref_language;
		}

		public String invoice_class;

		public String getInvoice_class() {
			return this.invoice_class;
		}

		public BigDecimal total_amount;

		public BigDecimal getTotal_amount() {
			return this.total_amount;
		}

		public BigDecimal tax_amount;

		public BigDecimal getTax_amount() {
			return this.tax_amount;
		}

		public BigDecimal discount_amount;

		public BigDecimal getDiscount_amount() {
			return this.discount_amount;
		}

		public BigDecimal exchange_rate;

		public BigDecimal getExchange_rate() {
			return this.exchange_rate;
		}

		public String org_account_number;

		public String getOrg_account_number() {
			return this.org_account_number;
		}

		public String channel;

		public String getChannel() {
			return this.channel;
		}

		public String currency;

		public String getCurrency() {
			return this.currency;
		}

		public String cart_type;

		public String getCart_type() {
			return this.cart_type;
		}

		public String organization_uid;

		public String getOrganization_uid() {
			return this.organization_uid;
		}

		public String organization_name;

		public String getOrganization_name() {
			return this.organization_name;
		}

		public Boolean is_email_notification_supported_flag;

		public Boolean getIs_email_notification_supported_flag() {
			return this.is_email_notification_supported_flag;
		}

		public BigDecimal total_amount_in_transaction_currency;

		public BigDecimal getTotal_amount_in_transaction_currency() {
			return this.total_amount_in_transaction_currency;
		}

		public BigDecimal original_total_amount_in_transaction_currency;

		public BigDecimal getOriginal_total_amount_in_transaction_currency() {
			return this.original_total_amount_in_transaction_currency;
		}

		public BigDecimal tax_amount_in_transaction_currency;

		public BigDecimal getTax_amount_in_transaction_currency() {
			return this.tax_amount_in_transaction_currency;
		}

		public String inv_batch_uid;

		public String getInv_batch_uid() {
			return this.inv_batch_uid;
		}

		public String inv_gapless_id;

		public String getInv_gapless_id() {
			return this.inv_gapless_id;
		}

		public String dispatcher_status;

		public String getDispatcher_status() {
			return this.dispatcher_status;
		}

		public String delivery_method;

		public String getDelivery_method() {
			return this.delivery_method;
		}

		public String payment_status;

		public String getPayment_status() {
			return this.payment_status;
		}

		public String org_account_uid;

		public String getOrg_account_uid() {
			return this.org_account_uid;
		}

		public java.util.Date dunning_date;

		public java.util.Date getDunning_date() {
			return this.dunning_date;
		}

		public Boolean is_printed;

		public Boolean getIs_printed() {
			return this.is_printed;
		}

		public String dunning_status;

		public String getDunning_status() {
			return this.dunning_status;
		}

		public Integer fail_reprocess_count;

		public Integer getFail_reprocess_count() {
			return this.fail_reprocess_count;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ORDER_ETL_OMS_ETL_NO_PRODUCTS.length) {
					if (length < 1024
							&& commonByteArray_ORDER_ETL_OMS_ETL_NO_PRODUCTS.length == 0) {
						commonByteArray_ORDER_ETL_OMS_ETL_NO_PRODUCTS = new byte[1024];
					} else {
						commonByteArray_ORDER_ETL_OMS_ETL_NO_PRODUCTS = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ORDER_ETL_OMS_ETL_NO_PRODUCTS, 0,
						length);
				strReturn = new String(
						commonByteArray_ORDER_ETL_OMS_ETL_NO_PRODUCTS, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ORDER_ETL_OMS_ETL_NO_PRODUCTS) {

				try {

					int length = 0;

					this.inv_invoice_uid = readString(dis);

					this.invoice_date = readDate(dis);

					this.invoice_number = readString(dis);

					this.record_version = dis.readInt();

					this.created_by_user = readString(dis);

					this.created_datetime = readDate(dis);

					this.updated_by_user = readString(dis);

					this.updated_datetime = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.is_deleted_flag = null;
					} else {
						this.is_deleted_flag = dis.readBoolean();
					}

					this.invoice_status = readString(dis);

					this.invoice_payment_datetime = readDate(dis);

					this.ar_account_pref_language = readString(dis);

					this.invoice_class = readString(dis);

					this.total_amount = (BigDecimal) dis.readObject();

					this.tax_amount = (BigDecimal) dis.readObject();

					this.discount_amount = (BigDecimal) dis.readObject();

					this.exchange_rate = (BigDecimal) dis.readObject();

					this.org_account_number = readString(dis);

					this.channel = readString(dis);

					this.currency = readString(dis);

					this.cart_type = readString(dis);

					this.organization_uid = readString(dis);

					this.organization_name = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.is_email_notification_supported_flag = null;
					} else {
						this.is_email_notification_supported_flag = dis
								.readBoolean();
					}

					this.total_amount_in_transaction_currency = (BigDecimal) dis
							.readObject();

					this.original_total_amount_in_transaction_currency = (BigDecimal) dis
							.readObject();

					this.tax_amount_in_transaction_currency = (BigDecimal) dis
							.readObject();

					this.inv_batch_uid = readString(dis);

					this.inv_gapless_id = readString(dis);

					this.dispatcher_status = readString(dis);

					this.delivery_method = readString(dis);

					this.payment_status = readString(dis);

					this.org_account_uid = readString(dis);

					this.dunning_date = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.is_printed = null;
					} else {
						this.is_printed = dis.readBoolean();
					}

					this.dunning_status = readString(dis);

					this.fail_reprocess_count = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.inv_invoice_uid, dos);

				// java.util.Date

				writeDate(this.invoice_date, dos);

				// String

				writeString(this.invoice_number, dos);

				// int

				dos.writeInt(this.record_version);

				// String

				writeString(this.created_by_user, dos);

				// java.util.Date

				writeDate(this.created_datetime, dos);

				// String

				writeString(this.updated_by_user, dos);

				// java.util.Date

				writeDate(this.updated_datetime, dos);

				// Boolean

				if (this.is_deleted_flag == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.is_deleted_flag);
				}

				// String

				writeString(this.invoice_status, dos);

				// java.util.Date

				writeDate(this.invoice_payment_datetime, dos);

				// String

				writeString(this.ar_account_pref_language, dos);

				// String

				writeString(this.invoice_class, dos);

				// BigDecimal

				dos.writeObject(this.total_amount);

				// BigDecimal

				dos.writeObject(this.tax_amount);

				// BigDecimal

				dos.writeObject(this.discount_amount);

				// BigDecimal

				dos.writeObject(this.exchange_rate);

				// String

				writeString(this.org_account_number, dos);

				// String

				writeString(this.channel, dos);

				// String

				writeString(this.currency, dos);

				// String

				writeString(this.cart_type, dos);

				// String

				writeString(this.organization_uid, dos);

				// String

				writeString(this.organization_name, dos);

				// Boolean

				if (this.is_email_notification_supported_flag == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.is_email_notification_supported_flag);
				}

				// BigDecimal

				dos.writeObject(this.total_amount_in_transaction_currency);

				// BigDecimal

				dos.writeObject(this.original_total_amount_in_transaction_currency);

				// BigDecimal

				dos.writeObject(this.tax_amount_in_transaction_currency);

				// String

				writeString(this.inv_batch_uid, dos);

				// String

				writeString(this.inv_gapless_id, dos);

				// String

				writeString(this.dispatcher_status, dos);

				// String

				writeString(this.delivery_method, dos);

				// String

				writeString(this.payment_status, dos);

				// String

				writeString(this.org_account_uid, dos);

				// java.util.Date

				writeDate(this.dunning_date, dos);

				// Boolean

				if (this.is_printed == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.is_printed);
				}

				// String

				writeString(this.dunning_status, dos);

				// Integer

				writeInteger(this.fail_reprocess_count, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("inv_invoice_uid=" + inv_invoice_uid);
			sb.append(",invoice_date=" + String.valueOf(invoice_date));
			sb.append(",invoice_number=" + invoice_number);
			sb.append(",record_version=" + String.valueOf(record_version));
			sb.append(",created_by_user=" + created_by_user);
			sb.append(",created_datetime=" + String.valueOf(created_datetime));
			sb.append(",updated_by_user=" + updated_by_user);
			sb.append(",updated_datetime=" + String.valueOf(updated_datetime));
			sb.append(",is_deleted_flag=" + String.valueOf(is_deleted_flag));
			sb.append(",invoice_status=" + invoice_status);
			sb.append(",invoice_payment_datetime="
					+ String.valueOf(invoice_payment_datetime));
			sb.append(",ar_account_pref_language=" + ar_account_pref_language);
			sb.append(",invoice_class=" + invoice_class);
			sb.append(",total_amount=" + String.valueOf(total_amount));
			sb.append(",tax_amount=" + String.valueOf(tax_amount));
			sb.append(",discount_amount=" + String.valueOf(discount_amount));
			sb.append(",exchange_rate=" + String.valueOf(exchange_rate));
			sb.append(",org_account_number=" + org_account_number);
			sb.append(",channel=" + channel);
			sb.append(",currency=" + currency);
			sb.append(",cart_type=" + cart_type);
			sb.append(",organization_uid=" + organization_uid);
			sb.append(",organization_name=" + organization_name);
			sb.append(",is_email_notification_supported_flag="
					+ String.valueOf(is_email_notification_supported_flag));
			sb.append(",total_amount_in_transaction_currency="
					+ String.valueOf(total_amount_in_transaction_currency));
			sb.append(",original_total_amount_in_transaction_currency="
					+ String.valueOf(original_total_amount_in_transaction_currency));
			sb.append(",tax_amount_in_transaction_currency="
					+ String.valueOf(tax_amount_in_transaction_currency));
			sb.append(",inv_batch_uid=" + inv_batch_uid);
			sb.append(",inv_gapless_id=" + inv_gapless_id);
			sb.append(",dispatcher_status=" + dispatcher_status);
			sb.append(",delivery_method=" + delivery_method);
			sb.append(",payment_status=" + payment_status);
			sb.append(",org_account_uid=" + org_account_uid);
			sb.append(",dunning_date=" + String.valueOf(dunning_date));
			sb.append(",is_printed=" + String.valueOf(is_printed));
			sb.append(",dunning_status=" + dunning_status);
			sb.append(",fail_reprocess_count="
					+ String.valueOf(fail_reprocess_count));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_2Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDBInput_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row2Struct row2 = new row2Struct();

				/**
				 * [tDBOutput_2 begin ] start
				 */

				ok_Hash.put("tDBOutput_2", false);
				start_Hash.put("tDBOutput_2", System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tDBOutput_2");
				tStatCatcher_1Process(globalMap);

				talendStats_STATS.addMessage("begin", "tDBOutput_2");
				talendStats_STATSProcess(globalMap);

				currentComponent = "tDBOutput_2";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row2" + iterateId, 0, 0);

					}
				}

				int tos_count_tDBOutput_2 = 0;

				String dbschema_tDBOutput_2 = null;
				dbschema_tDBOutput_2 = context.data_warehouse_order_dwos_schema;

				String tableName_tDBOutput_2 = null;
				if (dbschema_tDBOutput_2 == null
						|| dbschema_tDBOutput_2.trim().length() == 0) {
					tableName_tDBOutput_2 = "dwo_inv_invoice";
				} else {
					tableName_tDBOutput_2 = dbschema_tDBOutput_2 + "\".\""
							+ "dwo_inv_invoice";
				}

				int nb_line_tDBOutput_2 = 0;
				int nb_line_update_tDBOutput_2 = 0;
				int nb_line_inserted_tDBOutput_2 = 0;
				int nb_line_deleted_tDBOutput_2 = 0;
				int nb_line_rejected_tDBOutput_2 = 0;

				int deletedCount_tDBOutput_2 = 0;
				int updatedCount_tDBOutput_2 = 0;
				int insertedCount_tDBOutput_2 = 0;
				int rejectedCount_tDBOutput_2 = 0;

				boolean whetherReject_tDBOutput_2 = false;

				java.sql.Connection conn_tDBOutput_2 = null;
				String dbUser_tDBOutput_2 = null;

				java.lang.Class.forName("org.postgresql.Driver");
				String url_tDBOutput_2 = "jdbc:postgresql://"
						+ context.data_warehouse_order_dwos_host + ":"
						+ context.data_warehouse_order_dwos_port + "/"
						+ context.data_warehouse_order_dwos_database;
				dbUser_tDBOutput_2 = context.data_warehouse_order_dwos_username;

				final String decryptedPassword_tDBOutput_2 = context.data_warehouse_order_dwos_password;

				String dbPwd_tDBOutput_2 = decryptedPassword_tDBOutput_2;

				conn_tDBOutput_2 = java.sql.DriverManager.getConnection(
						url_tDBOutput_2, dbUser_tDBOutput_2, dbPwd_tDBOutput_2);

				resourceMap.put("conn_tDBOutput_2", conn_tDBOutput_2);
				conn_tDBOutput_2.setAutoCommit(false);
				int commitEvery_tDBOutput_2 = 10000;
				int commitCounter_tDBOutput_2 = 0;

				int batchSize_tDBOutput_2 = 10000;
				int batchSizeCounter_tDBOutput_2 = 0;

				int count_tDBOutput_2 = 0;
				int rsTruncCountNumber_tDBOutput_2 = 0;
				try (java.sql.Statement stmtTruncCount_tDBOutput_2 = conn_tDBOutput_2
						.createStatement()) {
					try (java.sql.ResultSet rsTruncCount_tDBOutput_2 = stmtTruncCount_tDBOutput_2
							.executeQuery("SELECT COUNT(1) FROM \""
									+ tableName_tDBOutput_2 + "\"")) {
						if (rsTruncCount_tDBOutput_2.next()) {
							rsTruncCountNumber_tDBOutput_2 = rsTruncCount_tDBOutput_2
									.getInt(1);
						}
					}
				}
				try (java.sql.Statement stmtTrunc_tDBOutput_2 = conn_tDBOutput_2
						.createStatement()) {
					stmtTrunc_tDBOutput_2.executeUpdate("TRUNCATE TABLE \""
							+ tableName_tDBOutput_2 + "\"");
					deletedCount_tDBOutput_2 += rsTruncCountNumber_tDBOutput_2;
				}
				String insert_tDBOutput_2 = "INSERT INTO \""
						+ tableName_tDBOutput_2
						+ "\" (\"inv_invoice_uid\",\"invoice_date\",\"invoice_number\",\"record_version\",\"created_by_user\",\"created_datetime\",\"updated_by_user\",\"updated_datetime\",\"is_deleted_flag\",\"invoice_status\",\"invoice_payment_datetime\",\"ar_account_pref_language\",\"invoice_class\",\"total_amount\",\"tax_amount\",\"discount_amount\",\"exchange_rate\",\"org_account_number\",\"channel\",\"currency\",\"cart_type\",\"organization_uid\",\"organization_name\",\"is_email_notification_supported_flag\",\"total_amount_in_transaction_currency\",\"original_total_amount_in_transaction_currency\",\"tax_amount_in_transaction_currency\",\"inv_batch_uid\",\"inv_gapless_id\",\"dispatcher_status\",\"delivery_method\",\"payment_status\",\"org_account_uid\",\"dunning_date\",\"is_printed\",\"dunning_status\",\"fail_reprocess_count\") VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

				java.sql.PreparedStatement pstmt_tDBOutput_2 = conn_tDBOutput_2
						.prepareStatement(insert_tDBOutput_2);
				resourceMap.put("pstmt_tDBOutput_2", pstmt_tDBOutput_2);

				/**
				 * [tDBOutput_2 begin ] stop
				 */

				/**
				 * [tDBInput_2 begin ] start
				 */

				ok_Hash.put("tDBInput_2", false);
				start_Hash.put("tDBInput_2", System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tDBInput_2");
				tStatCatcher_1Process(globalMap);

				talendStats_STATS.addMessage("begin", "tDBInput_2");
				talendStats_STATSProcess(globalMap);

				currentComponent = "tDBInput_2";

				int tos_count_tDBInput_2 = 0;

				int nb_line_tDBInput_2 = 0;
				java.sql.Connection conn_tDBInput_2 = null;
				conn_tDBInput_2 = (java.sql.Connection) globalMap
						.get("conn_tDBConnection_1");

				java.sql.Statement stmt_tDBInput_2 = conn_tDBInput_2
						.createStatement();
				stmt_tDBInput_2.setFetchSize(1000);

				String dbquery_tDBInput_2 = "SELECT *\nFROM  apps.inv_invoice\nWHERE invoice_date > '2017-06-30 23:59:59'";

				globalMap.put("tDBInput_2_QUERY", dbquery_tDBInput_2);
				java.sql.ResultSet rs_tDBInput_2 = null;

				try {
					rs_tDBInput_2 = stmt_tDBInput_2
							.executeQuery(dbquery_tDBInput_2);
					java.sql.ResultSetMetaData rsmd_tDBInput_2 = rs_tDBInput_2
							.getMetaData();
					int colQtyInRs_tDBInput_2 = rsmd_tDBInput_2
							.getColumnCount();

					String tmpContent_tDBInput_2 = null;

					while (rs_tDBInput_2.next()) {
						nb_line_tDBInput_2++;

						if (colQtyInRs_tDBInput_2 < 1) {
							row2.inv_invoice_uid = null;
						} else {

							row2.inv_invoice_uid = routines.system.JDBCUtil
									.getString(rs_tDBInput_2, 1, false);
						}
						if (colQtyInRs_tDBInput_2 < 2) {
							row2.invoice_date = null;
						} else {

							row2.invoice_date = routines.system.JDBCUtil
									.getDate(rs_tDBInput_2, 2);
						}
						if (colQtyInRs_tDBInput_2 < 3) {
							row2.invoice_number = null;
						} else {

							row2.invoice_number = routines.system.JDBCUtil
									.getString(rs_tDBInput_2, 3, false);
						}
						if (colQtyInRs_tDBInput_2 < 4) {
							row2.record_version = 0;
						} else {

							if (rs_tDBInput_2.getObject(4) != null) {
								row2.record_version = rs_tDBInput_2.getInt(4);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_2 < 5) {
							row2.created_by_user = null;
						} else {

							row2.created_by_user = routines.system.JDBCUtil
									.getString(rs_tDBInput_2, 5, false);
						}
						if (colQtyInRs_tDBInput_2 < 6) {
							row2.created_datetime = null;
						} else {

							row2.created_datetime = routines.system.JDBCUtil
									.getDate(rs_tDBInput_2, 6);
						}
						if (colQtyInRs_tDBInput_2 < 7) {
							row2.updated_by_user = null;
						} else {

							row2.updated_by_user = routines.system.JDBCUtil
									.getString(rs_tDBInput_2, 7, false);
						}
						if (colQtyInRs_tDBInput_2 < 8) {
							row2.updated_datetime = null;
						} else {

							row2.updated_datetime = routines.system.JDBCUtil
									.getDate(rs_tDBInput_2, 8);
						}
						if (colQtyInRs_tDBInput_2 < 9) {
							row2.is_deleted_flag = null;
						} else {

							if (rs_tDBInput_2.getObject(9) != null) {
								row2.is_deleted_flag = rs_tDBInput_2
										.getBoolean(9);
							} else {
								row2.is_deleted_flag = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 10) {
							row2.invoice_status = null;
						} else {

							row2.invoice_status = routines.system.JDBCUtil
									.getString(rs_tDBInput_2, 10, false);
						}
						if (colQtyInRs_tDBInput_2 < 11) {
							row2.invoice_payment_datetime = null;
						} else {

							row2.invoice_payment_datetime = routines.system.JDBCUtil
									.getDate(rs_tDBInput_2, 11);
						}
						if (colQtyInRs_tDBInput_2 < 12) {
							row2.ar_account_pref_language = null;
						} else {

							row2.ar_account_pref_language = routines.system.JDBCUtil
									.getString(rs_tDBInput_2, 12, false);
						}
						if (colQtyInRs_tDBInput_2 < 13) {
							row2.invoice_class = null;
						} else {

							row2.invoice_class = routines.system.JDBCUtil
									.getString(rs_tDBInput_2, 13, false);
						}
						if (colQtyInRs_tDBInput_2 < 14) {
							row2.total_amount = null;
						} else {

							if (rs_tDBInput_2.getObject(14) != null) {
								row2.total_amount = rs_tDBInput_2
										.getBigDecimal(14);
							} else {
								row2.total_amount = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 15) {
							row2.tax_amount = null;
						} else {

							if (rs_tDBInput_2.getObject(15) != null) {
								row2.tax_amount = rs_tDBInput_2
										.getBigDecimal(15);
							} else {
								row2.tax_amount = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 16) {
							row2.discount_amount = null;
						} else {

							if (rs_tDBInput_2.getObject(16) != null) {
								row2.discount_amount = rs_tDBInput_2
										.getBigDecimal(16);
							} else {
								row2.discount_amount = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 17) {
							row2.exchange_rate = null;
						} else {

							if (rs_tDBInput_2.getObject(17) != null) {
								row2.exchange_rate = rs_tDBInput_2
										.getBigDecimal(17);
							} else {
								row2.exchange_rate = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 18) {
							row2.org_account_number = null;
						} else {

							row2.org_account_number = routines.system.JDBCUtil
									.getString(rs_tDBInput_2, 18, false);
						}
						if (colQtyInRs_tDBInput_2 < 19) {
							row2.channel = null;
						} else {

							row2.channel = routines.system.JDBCUtil.getString(
									rs_tDBInput_2, 19, false);
						}
						if (colQtyInRs_tDBInput_2 < 20) {
							row2.currency = null;
						} else {

							row2.currency = routines.system.JDBCUtil.getString(
									rs_tDBInput_2, 20, false);
						}
						if (colQtyInRs_tDBInput_2 < 21) {
							row2.cart_type = null;
						} else {

							row2.cart_type = routines.system.JDBCUtil
									.getString(rs_tDBInput_2, 21, false);
						}
						if (colQtyInRs_tDBInput_2 < 22) {
							row2.organization_uid = null;
						} else {

							row2.organization_uid = routines.system.JDBCUtil
									.getString(rs_tDBInput_2, 22, false);
						}
						if (colQtyInRs_tDBInput_2 < 23) {
							row2.organization_name = null;
						} else {

							row2.organization_name = routines.system.JDBCUtil
									.getString(rs_tDBInput_2, 23, false);
						}
						if (colQtyInRs_tDBInput_2 < 24) {
							row2.is_email_notification_supported_flag = null;
						} else {

							if (rs_tDBInput_2.getObject(24) != null) {
								row2.is_email_notification_supported_flag = rs_tDBInput_2
										.getBoolean(24);
							} else {
								row2.is_email_notification_supported_flag = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 25) {
							row2.total_amount_in_transaction_currency = null;
						} else {

							if (rs_tDBInput_2.getObject(25) != null) {
								row2.total_amount_in_transaction_currency = rs_tDBInput_2
										.getBigDecimal(25);
							} else {
								row2.total_amount_in_transaction_currency = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 26) {
							row2.original_total_amount_in_transaction_currency = null;
						} else {

							if (rs_tDBInput_2.getObject(26) != null) {
								row2.original_total_amount_in_transaction_currency = rs_tDBInput_2
										.getBigDecimal(26);
							} else {
								row2.original_total_amount_in_transaction_currency = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 27) {
							row2.tax_amount_in_transaction_currency = null;
						} else {

							if (rs_tDBInput_2.getObject(27) != null) {
								row2.tax_amount_in_transaction_currency = rs_tDBInput_2
										.getBigDecimal(27);
							} else {
								row2.tax_amount_in_transaction_currency = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 28) {
							row2.inv_batch_uid = null;
						} else {

							row2.inv_batch_uid = routines.system.JDBCUtil
									.getString(rs_tDBInput_2, 28, false);
						}
						if (colQtyInRs_tDBInput_2 < 29) {
							row2.inv_gapless_id = null;
						} else {

							row2.inv_gapless_id = routines.system.JDBCUtil
									.getString(rs_tDBInput_2, 29, false);
						}
						if (colQtyInRs_tDBInput_2 < 30) {
							row2.dispatcher_status = null;
						} else {

							row2.dispatcher_status = routines.system.JDBCUtil
									.getString(rs_tDBInput_2, 30, false);
						}
						if (colQtyInRs_tDBInput_2 < 31) {
							row2.delivery_method = null;
						} else {

							row2.delivery_method = routines.system.JDBCUtil
									.getString(rs_tDBInput_2, 31, false);
						}
						if (colQtyInRs_tDBInput_2 < 32) {
							row2.payment_status = null;
						} else {

							row2.payment_status = routines.system.JDBCUtil
									.getString(rs_tDBInput_2, 32, false);
						}
						if (colQtyInRs_tDBInput_2 < 33) {
							row2.org_account_uid = null;
						} else {

							row2.org_account_uid = routines.system.JDBCUtil
									.getString(rs_tDBInput_2, 33, false);
						}
						if (colQtyInRs_tDBInput_2 < 34) {
							row2.dunning_date = null;
						} else {

							row2.dunning_date = routines.system.JDBCUtil
									.getDate(rs_tDBInput_2, 34);
						}
						if (colQtyInRs_tDBInput_2 < 35) {
							row2.is_printed = null;
						} else {

							if (rs_tDBInput_2.getObject(35) != null) {
								row2.is_printed = rs_tDBInput_2.getBoolean(35);
							} else {
								row2.is_printed = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 36) {
							row2.dunning_status = null;
						} else {

							row2.dunning_status = routines.system.JDBCUtil
									.getString(rs_tDBInput_2, 36, false);
						}
						if (colQtyInRs_tDBInput_2 < 37) {
							row2.fail_reprocess_count = null;
						} else {

							if (rs_tDBInput_2.getObject(37) != null) {
								row2.fail_reprocess_count = rs_tDBInput_2
										.getInt(37);
							} else {
								row2.fail_reprocess_count = null;
							}
						}

						/**
						 * [tDBInput_2 begin ] stop
						 */

						/**
						 * [tDBInput_2 main ] start
						 */

						currentComponent = "tDBInput_2";

						tos_count_tDBInput_2++;

						/**
						 * [tDBInput_2 main ] stop
						 */

						/**
						 * [tDBInput_2 process_data_begin ] start
						 */

						currentComponent = "tDBInput_2";

						/**
						 * [tDBInput_2 process_data_begin ] stop
						 */

						/**
						 * [tDBOutput_2 main ] start
						 */

						currentComponent = "tDBOutput_2";

						// row2
						// row2

						if (execStat) {
							runStat.updateStatOnConnection("row2" + iterateId,
									1, 1);
						}

						whetherReject_tDBOutput_2 = false;
						if (row2.inv_invoice_uid == null) {
							pstmt_tDBOutput_2
									.setNull(1, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2
									.setString(1, row2.inv_invoice_uid);
						}

						if (row2.invoice_date != null) {
							pstmt_tDBOutput_2.setTimestamp(
									2,
									new java.sql.Timestamp(row2.invoice_date
											.getTime()));
						} else {
							pstmt_tDBOutput_2.setNull(2,
									java.sql.Types.TIMESTAMP);
						}

						if (row2.invoice_number == null) {
							pstmt_tDBOutput_2
									.setNull(3, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(3, row2.invoice_number);
						}

						pstmt_tDBOutput_2.setInt(4, row2.record_version);

						if (row2.created_by_user == null) {
							pstmt_tDBOutput_2
									.setNull(5, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2
									.setString(5, row2.created_by_user);
						}

						if (row2.created_datetime != null) {
							pstmt_tDBOutput_2.setTimestamp(6,
									new java.sql.Timestamp(
											row2.created_datetime.getTime()));
						} else {
							pstmt_tDBOutput_2.setNull(6,
									java.sql.Types.TIMESTAMP);
						}

						if (row2.updated_by_user == null) {
							pstmt_tDBOutput_2
									.setNull(7, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2
									.setString(7, row2.updated_by_user);
						}

						if (row2.updated_datetime != null) {
							pstmt_tDBOutput_2.setTimestamp(8,
									new java.sql.Timestamp(
											row2.updated_datetime.getTime()));
						} else {
							pstmt_tDBOutput_2.setNull(8,
									java.sql.Types.TIMESTAMP);
						}

						if (row2.is_deleted_flag == null) {
							pstmt_tDBOutput_2
									.setNull(9, java.sql.Types.BOOLEAN);
						} else {
							pstmt_tDBOutput_2.setBoolean(9,
									row2.is_deleted_flag);
						}

						if (row2.invoice_status == null) {
							pstmt_tDBOutput_2.setNull(10,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2
									.setString(10, row2.invoice_status);
						}

						if (row2.invoice_payment_datetime != null) {
							pstmt_tDBOutput_2.setTimestamp(
									11,
									new java.sql.Timestamp(
											row2.invoice_payment_datetime
													.getTime()));
						} else {
							pstmt_tDBOutput_2.setNull(11,
									java.sql.Types.TIMESTAMP);
						}

						if (row2.ar_account_pref_language == null) {
							pstmt_tDBOutput_2.setNull(12,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(12,
									row2.ar_account_pref_language);
						}

						if (row2.invoice_class == null) {
							pstmt_tDBOutput_2.setNull(13,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(13, row2.invoice_class);
						}

						pstmt_tDBOutput_2.setBigDecimal(14, row2.total_amount);

						pstmt_tDBOutput_2.setBigDecimal(15, row2.tax_amount);

						pstmt_tDBOutput_2.setBigDecimal(16,
								row2.discount_amount);

						pstmt_tDBOutput_2.setBigDecimal(17, row2.exchange_rate);

						if (row2.org_account_number == null) {
							pstmt_tDBOutput_2.setNull(18,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(18,
									row2.org_account_number);
						}

						if (row2.channel == null) {
							pstmt_tDBOutput_2.setNull(19,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(19, row2.channel);
						}

						if (row2.currency == null) {
							pstmt_tDBOutput_2.setNull(20,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(20, row2.currency);
						}

						if (row2.cart_type == null) {
							pstmt_tDBOutput_2.setNull(21,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(21, row2.cart_type);
						}

						if (row2.organization_uid == null) {
							pstmt_tDBOutput_2.setNull(22,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(22,
									row2.organization_uid);
						}

						if (row2.organization_name == null) {
							pstmt_tDBOutput_2.setNull(23,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(23,
									row2.organization_name);
						}

						if (row2.is_email_notification_supported_flag == null) {
							pstmt_tDBOutput_2.setNull(24,
									java.sql.Types.BOOLEAN);
						} else {
							pstmt_tDBOutput_2.setBoolean(24,
									row2.is_email_notification_supported_flag);
						}

						pstmt_tDBOutput_2.setBigDecimal(25,
								row2.total_amount_in_transaction_currency);

						pstmt_tDBOutput_2
								.setBigDecimal(
										26,
										row2.original_total_amount_in_transaction_currency);

						pstmt_tDBOutput_2.setBigDecimal(27,
								row2.tax_amount_in_transaction_currency);

						if (row2.inv_batch_uid == null) {
							pstmt_tDBOutput_2.setNull(28,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(28, row2.inv_batch_uid);
						}

						if (row2.inv_gapless_id == null) {
							pstmt_tDBOutput_2.setNull(29,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2
									.setString(29, row2.inv_gapless_id);
						}

						if (row2.dispatcher_status == null) {
							pstmt_tDBOutput_2.setNull(30,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(30,
									row2.dispatcher_status);
						}

						if (row2.delivery_method == null) {
							pstmt_tDBOutput_2.setNull(31,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(31,
									row2.delivery_method);
						}

						if (row2.payment_status == null) {
							pstmt_tDBOutput_2.setNull(32,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2
									.setString(32, row2.payment_status);
						}

						if (row2.org_account_uid == null) {
							pstmt_tDBOutput_2.setNull(33,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(33,
									row2.org_account_uid);
						}

						if (row2.dunning_date != null) {
							pstmt_tDBOutput_2.setTimestamp(
									34,
									new java.sql.Timestamp(row2.dunning_date
											.getTime()));
						} else {
							pstmt_tDBOutput_2.setNull(34,
									java.sql.Types.TIMESTAMP);
						}

						if (row2.is_printed == null) {
							pstmt_tDBOutput_2.setNull(35,
									java.sql.Types.BOOLEAN);
						} else {
							pstmt_tDBOutput_2.setBoolean(35, row2.is_printed);
						}

						if (row2.dunning_status == null) {
							pstmt_tDBOutput_2.setNull(36,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2
									.setString(36, row2.dunning_status);
						}

						if (row2.fail_reprocess_count == null) {
							pstmt_tDBOutput_2.setNull(37,
									java.sql.Types.INTEGER);
						} else {
							pstmt_tDBOutput_2.setInt(37,
									row2.fail_reprocess_count);
						}

						pstmt_tDBOutput_2.addBatch();
						nb_line_tDBOutput_2++;

						batchSizeCounter_tDBOutput_2++;

						if (!whetherReject_tDBOutput_2) {
						}
						if ((batchSize_tDBOutput_2 > 0)
								&& (batchSize_tDBOutput_2 <= batchSizeCounter_tDBOutput_2)) {
							try {
								int countSum_tDBOutput_2 = 0;

								for (int countEach_tDBOutput_2 : pstmt_tDBOutput_2
										.executeBatch()) {
									countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0
											: countEach_tDBOutput_2);
								}

								insertedCount_tDBOutput_2 += countSum_tDBOutput_2;

								batchSizeCounter_tDBOutput_2 = 0;
							} catch (java.sql.BatchUpdateException e_tDBOutput_2) {
								java.sql.SQLException ne_tDBOutput_2 = e_tDBOutput_2
										.getNextException(), sqle_tDBOutput_2 = null;
								String errormessage_tDBOutput_2;
								if (ne_tDBOutput_2 != null) {
									// build new exception to provide the
									// original cause
									sqle_tDBOutput_2 = new java.sql.SQLException(
											e_tDBOutput_2.getMessage()
													+ "\ncaused by: "
													+ ne_tDBOutput_2
															.getMessage(),
											ne_tDBOutput_2.getSQLState(),
											ne_tDBOutput_2.getErrorCode(),
											ne_tDBOutput_2);
									errormessage_tDBOutput_2 = sqle_tDBOutput_2
											.getMessage();
								} else {
									errormessage_tDBOutput_2 = e_tDBOutput_2
											.getMessage();
								}

								int countSum_tDBOutput_2 = 0;
								for (int countEach_tDBOutput_2 : e_tDBOutput_2
										.getUpdateCounts()) {
									countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0
											: countEach_tDBOutput_2);
								}

								insertedCount_tDBOutput_2 += countSum_tDBOutput_2;

								System.err.println(errormessage_tDBOutput_2);

							}
						}

						commitCounter_tDBOutput_2++;
						if (commitEvery_tDBOutput_2 <= commitCounter_tDBOutput_2) {
							if ((batchSize_tDBOutput_2 > 0)
									&& (batchSizeCounter_tDBOutput_2 > 0)) {
								try {
									int countSum_tDBOutput_2 = 0;

									for (int countEach_tDBOutput_2 : pstmt_tDBOutput_2
											.executeBatch()) {
										countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0
												: countEach_tDBOutput_2);
									}

									insertedCount_tDBOutput_2 += countSum_tDBOutput_2;

									batchSizeCounter_tDBOutput_2 = 0;
								} catch (java.sql.BatchUpdateException e_tDBOutput_2) {
									java.sql.SQLException ne_tDBOutput_2 = e_tDBOutput_2
											.getNextException(), sqle_tDBOutput_2 = null;
									String errormessage_tDBOutput_2;
									if (ne_tDBOutput_2 != null) {
										// build new exception to provide the
										// original cause
										sqle_tDBOutput_2 = new java.sql.SQLException(
												e_tDBOutput_2.getMessage()
														+ "\ncaused by: "
														+ ne_tDBOutput_2
																.getMessage(),
												ne_tDBOutput_2.getSQLState(),
												ne_tDBOutput_2.getErrorCode(),
												ne_tDBOutput_2);
										errormessage_tDBOutput_2 = sqle_tDBOutput_2
												.getMessage();
									} else {
										errormessage_tDBOutput_2 = e_tDBOutput_2
												.getMessage();
									}

									int countSum_tDBOutput_2 = 0;
									for (int countEach_tDBOutput_2 : e_tDBOutput_2
											.getUpdateCounts()) {
										countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0
												: countEach_tDBOutput_2);
									}

									insertedCount_tDBOutput_2 += countSum_tDBOutput_2;

									System.err
											.println(errormessage_tDBOutput_2);

								}
							}
							conn_tDBOutput_2.commit();

							commitCounter_tDBOutput_2 = 0;
						}

						tos_count_tDBOutput_2++;

						/**
						 * [tDBOutput_2 main ] stop
						 */

						/**
						 * [tDBOutput_2 process_data_begin ] start
						 */

						currentComponent = "tDBOutput_2";

						/**
						 * [tDBOutput_2 process_data_begin ] stop
						 */

						/**
						 * [tDBOutput_2 process_data_end ] start
						 */

						currentComponent = "tDBOutput_2";

						/**
						 * [tDBOutput_2 process_data_end ] stop
						 */

						/**
						 * [tDBInput_2 process_data_end ] start
						 */

						currentComponent = "tDBInput_2";

						/**
						 * [tDBInput_2 process_data_end ] stop
						 */

						/**
						 * [tDBInput_2 end ] start
						 */

						currentComponent = "tDBInput_2";

					}
				} finally {
					if (rs_tDBInput_2 != null) {
						rs_tDBInput_2.close();
					}
					if (stmt_tDBInput_2 != null) {
						stmt_tDBInput_2.close();
					}
				}
				globalMap.put("tDBInput_2_NB_LINE", nb_line_tDBInput_2);

				ok_Hash.put("tDBInput_2", true);
				end_Hash.put("tDBInput_2", System.currentTimeMillis());

				tStatCatcher_1.addMessage(
						"end",
						"tDBInput_2",
						end_Hash.get("tDBInput_2")
								- start_Hash.get("tDBInput_2"));
				tStatCatcher_1Process(globalMap);
				talendStats_STATS.addMessage(
						"end",
						"tDBInput_2",
						end_Hash.get("tDBInput_2")
								- start_Hash.get("tDBInput_2"));
				talendStats_STATSProcess(globalMap);

				/**
				 * [tDBInput_2 end ] stop
				 */

				/**
				 * [tDBOutput_2 end ] start
				 */

				currentComponent = "tDBOutput_2";

				try {
					int countSum_tDBOutput_2 = 0;
					if (pstmt_tDBOutput_2 != null
							&& batchSizeCounter_tDBOutput_2 > 0) {

						for (int countEach_tDBOutput_2 : pstmt_tDBOutput_2
								.executeBatch()) {
							countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0
									: countEach_tDBOutput_2);
						}

					}

					insertedCount_tDBOutput_2 += countSum_tDBOutput_2;

				} catch (java.sql.BatchUpdateException e_tDBOutput_2) {
					java.sql.SQLException ne_tDBOutput_2 = e_tDBOutput_2
							.getNextException(), sqle_tDBOutput_2 = null;
					String errormessage_tDBOutput_2;
					if (ne_tDBOutput_2 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_2 = new java.sql.SQLException(
								e_tDBOutput_2.getMessage() + "\ncaused by: "
										+ ne_tDBOutput_2.getMessage(),
								ne_tDBOutput_2.getSQLState(),
								ne_tDBOutput_2.getErrorCode(), ne_tDBOutput_2);
						errormessage_tDBOutput_2 = sqle_tDBOutput_2
								.getMessage();
					} else {
						errormessage_tDBOutput_2 = e_tDBOutput_2.getMessage();
					}

					int countSum_tDBOutput_2 = 0;
					for (int countEach_tDBOutput_2 : e_tDBOutput_2
							.getUpdateCounts()) {
						countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0
								: countEach_tDBOutput_2);
					}

					insertedCount_tDBOutput_2 += countSum_tDBOutput_2;

					System.err.println(errormessage_tDBOutput_2);

				}

				if (pstmt_tDBOutput_2 != null) {

					pstmt_tDBOutput_2.close();
					resourceMap.remove("pstmt_tDBOutput_2");
				}
				resourceMap.put("statementClosed_tDBOutput_2", true);

				conn_tDBOutput_2.commit();

				conn_tDBOutput_2.close();

				resourceMap.put("finish_tDBOutput_2", true);

				nb_line_deleted_tDBOutput_2 = nb_line_deleted_tDBOutput_2
						+ deletedCount_tDBOutput_2;
				nb_line_update_tDBOutput_2 = nb_line_update_tDBOutput_2
						+ updatedCount_tDBOutput_2;
				nb_line_inserted_tDBOutput_2 = nb_line_inserted_tDBOutput_2
						+ insertedCount_tDBOutput_2;
				nb_line_rejected_tDBOutput_2 = nb_line_rejected_tDBOutput_2
						+ rejectedCount_tDBOutput_2;

				globalMap.put("tDBOutput_2_NB_LINE", nb_line_tDBOutput_2);
				globalMap.put("tDBOutput_2_NB_LINE_UPDATED",
						nb_line_update_tDBOutput_2);
				globalMap.put("tDBOutput_2_NB_LINE_INSERTED",
						nb_line_inserted_tDBOutput_2);
				globalMap.put("tDBOutput_2_NB_LINE_DELETED",
						nb_line_deleted_tDBOutput_2);
				globalMap.put("tDBOutput_2_NB_LINE_REJECTED",
						nb_line_rejected_tDBOutput_2);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row2" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tDBOutput_2", true);
				end_Hash.put("tDBOutput_2", System.currentTimeMillis());

				tStatCatcher_1.addMessage(
						"end",
						"tDBOutput_2",
						end_Hash.get("tDBOutput_2")
								- start_Hash.get("tDBOutput_2"));
				tStatCatcher_1Process(globalMap);
				talendStats_STATS.addMessage(
						"end",
						"tDBOutput_2",
						end_Hash.get("tDBOutput_2")
								- start_Hash.get("tDBOutput_2"));
				talendStats_STATSProcess(globalMap);
				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tDBInput_13Process(globalMap);

				/**
				 * [tDBOutput_2 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_2 finally ] start
				 */

				currentComponent = "tDBInput_2";

				/**
				 * [tDBInput_2 finally ] stop
				 */

				/**
				 * [tDBOutput_2 finally ] start
				 */

				currentComponent = "tDBOutput_2";

				try {
					if (resourceMap.get("statementClosed_tDBOutput_2") == null) {
						java.sql.PreparedStatement pstmtToClose_tDBOutput_2 = null;
						if ((pstmtToClose_tDBOutput_2 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmt_tDBOutput_2")) != null) {
							pstmtToClose_tDBOutput_2.close();
						}
					}
				} finally {
					if (resourceMap.get("finish_tDBOutput_2") == null) {
						java.sql.Connection ctn_tDBOutput_2 = null;
						if ((ctn_tDBOutput_2 = (java.sql.Connection) resourceMap
								.get("conn_tDBOutput_2")) != null) {
							try {
								ctn_tDBOutput_2.close();
							} catch (java.sql.SQLException sqlEx_tDBOutput_2) {
								String errorMessage_tDBOutput_2 = "failed to close the connection in tDBOutput_2 :"
										+ sqlEx_tDBOutput_2.getMessage();
								System.err.println(errorMessage_tDBOutput_2);
							}
						}
					}
				}

				/**
				 * [tDBOutput_2 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_2_SUBPROCESS_STATE", 1);
	}

	public static class row13Struct implements
			routines.system.IPersistableRow<row13Struct> {
		final static byte[] commonByteArrayLock_ORDER_ETL_OMS_ETL_NO_PRODUCTS = new byte[0];
		static byte[] commonByteArray_ORDER_ETL_OMS_ETL_NO_PRODUCTS = new byte[0];

		public Long dwo_invoice_dimension_uid;

		public Long getDwo_invoice_dimension_uid() {
			return this.dwo_invoice_dimension_uid;
		}

		public String source_system_invoice_uid;

		public String getSource_system_invoice_uid() {
			return this.source_system_invoice_uid;
		}

		public String invoice_number;

		public String getInvoice_number() {
			return this.invoice_number;
		}

		public String invoice_source_system;

		public String getInvoice_source_system() {
			return this.invoice_source_system;
		}

		public java.util.Date invoice_date;

		public java.util.Date getInvoice_date() {
			return this.invoice_date;
		}

		public String invoice_status;

		public String getInvoice_status() {
			return this.invoice_status;
		}

		public java.util.Date invoice_payment_date;

		public java.util.Date getInvoice_payment_date() {
			return this.invoice_payment_date;
		}

		public BigDecimal invoice_total_amount;

		public BigDecimal getInvoice_total_amount() {
			return this.invoice_total_amount;
		}

		public BigDecimal invoice_tax_amount;

		public BigDecimal getInvoice_tax_amount() {
			return this.invoice_tax_amount;
		}

		public BigDecimal invoice_discount_amount;

		public BigDecimal getInvoice_discount_amount() {
			return this.invoice_discount_amount;
		}

		public BigDecimal invoice_exchange_rate;

		public BigDecimal getInvoice_exchange_rate() {
			return this.invoice_exchange_rate;
		}

		public String channel;

		public String getChannel() {
			return this.channel;
		}

		public String currency;

		public String getCurrency() {
			return this.currency;
		}

		public String cart_type;

		public String getCart_type() {
			return this.cart_type;
		}

		public String organization_name;

		public String getOrganization_name() {
			return this.organization_name;
		}

		public BigDecimal total_amount_in_transaction_currency;

		public BigDecimal getTotal_amount_in_transaction_currency() {
			return this.total_amount_in_transaction_currency;
		}

		public BigDecimal original_amount_in_transaction_currency;

		public BigDecimal getOriginal_amount_in_transaction_currency() {
			return this.original_amount_in_transaction_currency;
		}

		public BigDecimal tax_amount_in_transaction_currency;

		public BigDecimal getTax_amount_in_transaction_currency() {
			return this.tax_amount_in_transaction_currency;
		}

		public String payment_status;

		public String getPayment_status() {
			return this.payment_status;
		}

		public String invoice_class;

		public String getInvoice_class() {
			return this.invoice_class;
		}

		public String organization_uid;

		public String getOrganization_uid() {
			return this.organization_uid;
		}

		public java.util.Date created_datetime;

		public java.util.Date getCreated_datetime() {
			return this.created_datetime;
		}

		public String created_by_user;

		public String getCreated_by_user() {
			return this.created_by_user;
		}

		public java.util.Date updated_datetime;

		public java.util.Date getUpdated_datetime() {
			return this.updated_datetime;
		}

		public String updated_by_user;

		public String getUpdated_by_user() {
			return this.updated_by_user;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ORDER_ETL_OMS_ETL_NO_PRODUCTS.length) {
					if (length < 1024
							&& commonByteArray_ORDER_ETL_OMS_ETL_NO_PRODUCTS.length == 0) {
						commonByteArray_ORDER_ETL_OMS_ETL_NO_PRODUCTS = new byte[1024];
					} else {
						commonByteArray_ORDER_ETL_OMS_ETL_NO_PRODUCTS = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ORDER_ETL_OMS_ETL_NO_PRODUCTS, 0,
						length);
				strReturn = new String(
						commonByteArray_ORDER_ETL_OMS_ETL_NO_PRODUCTS, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ORDER_ETL_OMS_ETL_NO_PRODUCTS) {

				try {

					int length = 0;

					length = dis.readByte();
					if (length == -1) {
						this.dwo_invoice_dimension_uid = null;
					} else {
						this.dwo_invoice_dimension_uid = dis.readLong();
					}

					this.source_system_invoice_uid = readString(dis);

					this.invoice_number = readString(dis);

					this.invoice_source_system = readString(dis);

					this.invoice_date = readDate(dis);

					this.invoice_status = readString(dis);

					this.invoice_payment_date = readDate(dis);

					this.invoice_total_amount = (BigDecimal) dis.readObject();

					this.invoice_tax_amount = (BigDecimal) dis.readObject();

					this.invoice_discount_amount = (BigDecimal) dis
							.readObject();

					this.invoice_exchange_rate = (BigDecimal) dis.readObject();

					this.channel = readString(dis);

					this.currency = readString(dis);

					this.cart_type = readString(dis);

					this.organization_name = readString(dis);

					this.total_amount_in_transaction_currency = (BigDecimal) dis
							.readObject();

					this.original_amount_in_transaction_currency = (BigDecimal) dis
							.readObject();

					this.tax_amount_in_transaction_currency = (BigDecimal) dis
							.readObject();

					this.payment_status = readString(dis);

					this.invoice_class = readString(dis);

					this.organization_uid = readString(dis);

					this.created_datetime = readDate(dis);

					this.created_by_user = readString(dis);

					this.updated_datetime = readDate(dis);

					this.updated_by_user = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Long

				if (this.dwo_invoice_dimension_uid == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.dwo_invoice_dimension_uid);
				}

				// String

				writeString(this.source_system_invoice_uid, dos);

				// String

				writeString(this.invoice_number, dos);

				// String

				writeString(this.invoice_source_system, dos);

				// java.util.Date

				writeDate(this.invoice_date, dos);

				// String

				writeString(this.invoice_status, dos);

				// java.util.Date

				writeDate(this.invoice_payment_date, dos);

				// BigDecimal

				dos.writeObject(this.invoice_total_amount);

				// BigDecimal

				dos.writeObject(this.invoice_tax_amount);

				// BigDecimal

				dos.writeObject(this.invoice_discount_amount);

				// BigDecimal

				dos.writeObject(this.invoice_exchange_rate);

				// String

				writeString(this.channel, dos);

				// String

				writeString(this.currency, dos);

				// String

				writeString(this.cart_type, dos);

				// String

				writeString(this.organization_name, dos);

				// BigDecimal

				dos.writeObject(this.total_amount_in_transaction_currency);

				// BigDecimal

				dos.writeObject(this.original_amount_in_transaction_currency);

				// BigDecimal

				dos.writeObject(this.tax_amount_in_transaction_currency);

				// String

				writeString(this.payment_status, dos);

				// String

				writeString(this.invoice_class, dos);

				// String

				writeString(this.organization_uid, dos);

				// java.util.Date

				writeDate(this.created_datetime, dos);

				// String

				writeString(this.created_by_user, dos);

				// java.util.Date

				writeDate(this.updated_datetime, dos);

				// String

				writeString(this.updated_by_user, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("dwo_invoice_dimension_uid="
					+ String.valueOf(dwo_invoice_dimension_uid));
			sb.append(",source_system_invoice_uid=" + source_system_invoice_uid);
			sb.append(",invoice_number=" + invoice_number);
			sb.append(",invoice_source_system=" + invoice_source_system);
			sb.append(",invoice_date=" + String.valueOf(invoice_date));
			sb.append(",invoice_status=" + invoice_status);
			sb.append(",invoice_payment_date="
					+ String.valueOf(invoice_payment_date));
			sb.append(",invoice_total_amount="
					+ String.valueOf(invoice_total_amount));
			sb.append(",invoice_tax_amount="
					+ String.valueOf(invoice_tax_amount));
			sb.append(",invoice_discount_amount="
					+ String.valueOf(invoice_discount_amount));
			sb.append(",invoice_exchange_rate="
					+ String.valueOf(invoice_exchange_rate));
			sb.append(",channel=" + channel);
			sb.append(",currency=" + currency);
			sb.append(",cart_type=" + cart_type);
			sb.append(",organization_name=" + organization_name);
			sb.append(",total_amount_in_transaction_currency="
					+ String.valueOf(total_amount_in_transaction_currency));
			sb.append(",original_amount_in_transaction_currency="
					+ String.valueOf(original_amount_in_transaction_currency));
			sb.append(",tax_amount_in_transaction_currency="
					+ String.valueOf(tax_amount_in_transaction_currency));
			sb.append(",payment_status=" + payment_status);
			sb.append(",invoice_class=" + invoice_class);
			sb.append(",organization_uid=" + organization_uid);
			sb.append(",created_datetime=" + String.valueOf(created_datetime));
			sb.append(",created_by_user=" + created_by_user);
			sb.append(",updated_datetime=" + String.valueOf(updated_datetime));
			sb.append(",updated_by_user=" + updated_by_user);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row13Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_13Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDBInput_13_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row13Struct row13 = new row13Struct();

				/**
				 * [tDBOutput_13 begin ] start
				 */

				ok_Hash.put("tDBOutput_13", false);
				start_Hash.put("tDBOutput_13", System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tDBOutput_13");
				tStatCatcher_1Process(globalMap);

				talendStats_STATS.addMessage("begin", "tDBOutput_13");
				talendStats_STATSProcess(globalMap);

				currentComponent = "tDBOutput_13";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row13" + iterateId, 0,
								0);

					}
				}

				int tos_count_tDBOutput_13 = 0;

				String dbschema_tDBOutput_13 = null;
				dbschema_tDBOutput_13 = context.data_warehouse_order_dwos_schema;

				String tableName_tDBOutput_13 = null;
				if (dbschema_tDBOutput_13 == null
						|| dbschema_tDBOutput_13.trim().length() == 0) {
					tableName_tDBOutput_13 = "dwo_invoice_dimension";
				} else {
					tableName_tDBOutput_13 = dbschema_tDBOutput_13 + "\".\""
							+ "dwo_invoice_dimension";
				}

				int nb_line_tDBOutput_13 = 0;
				int nb_line_update_tDBOutput_13 = 0;
				int nb_line_inserted_tDBOutput_13 = 0;
				int nb_line_deleted_tDBOutput_13 = 0;
				int nb_line_rejected_tDBOutput_13 = 0;

				int deletedCount_tDBOutput_13 = 0;
				int updatedCount_tDBOutput_13 = 0;
				int insertedCount_tDBOutput_13 = 0;
				int rejectedCount_tDBOutput_13 = 0;

				boolean whetherReject_tDBOutput_13 = false;

				java.sql.Connection conn_tDBOutput_13 = null;
				String dbUser_tDBOutput_13 = null;

				java.lang.Class.forName("org.postgresql.Driver");
				String url_tDBOutput_13 = "jdbc:postgresql://"
						+ context.data_warehouse_order_dwos_host + ":"
						+ context.data_warehouse_order_dwos_port + "/"
						+ context.data_warehouse_order_dwos_database;
				dbUser_tDBOutput_13 = context.data_warehouse_order_dwos_username;

				final String decryptedPassword_tDBOutput_13 = context.data_warehouse_order_dwos_password;

				String dbPwd_tDBOutput_13 = decryptedPassword_tDBOutput_13;

				conn_tDBOutput_13 = java.sql.DriverManager.getConnection(
						url_tDBOutput_13, dbUser_tDBOutput_13,
						dbPwd_tDBOutput_13);

				resourceMap.put("conn_tDBOutput_13", conn_tDBOutput_13);
				conn_tDBOutput_13.setAutoCommit(false);
				int commitEvery_tDBOutput_13 = 10000;
				int commitCounter_tDBOutput_13 = 0;

				int batchSize_tDBOutput_13 = 10000;
				int batchSizeCounter_tDBOutput_13 = 0;

				int count_tDBOutput_13 = 0;
				String insert_tDBOutput_13 = "INSERT INTO \""
						+ tableName_tDBOutput_13
						+ "\" (\"dwo_invoice_dimension_uid\",\"source_system_invoice_uid\",\"invoice_number\",\"invoice_source_system\",\"invoice_date\",\"invoice_status\",\"invoice_payment_date\",\"invoice_total_amount\",\"invoice_tax_amount\",\"invoice_discount_amount\",\"invoice_exchange_rate\",\"channel\",\"currency\",\"cart_type\",\"organization_name\",\"total_amount_in_transaction_currency\",\"original_amount_in_transaction_currency\",\"tax_amount_in_transaction_currency\",\"payment_status\",\"invoice_class\",\"organization_uid\",\"created_datetime\",\"created_by_user\",\"updated_datetime\",\"updated_by_user\") VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

				java.sql.PreparedStatement pstmt_tDBOutput_13 = conn_tDBOutput_13
						.prepareStatement(insert_tDBOutput_13);
				resourceMap.put("pstmt_tDBOutput_13", pstmt_tDBOutput_13);

				/**
				 * [tDBOutput_13 begin ] stop
				 */

				/**
				 * [tDBInput_13 begin ] start
				 */

				ok_Hash.put("tDBInput_13", false);
				start_Hash.put("tDBInput_13", System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tDBInput_13");
				tStatCatcher_1Process(globalMap);

				talendStats_STATS.addMessage("begin", "tDBInput_13");
				talendStats_STATSProcess(globalMap);

				currentComponent = "tDBInput_13";

				int tos_count_tDBInput_13 = 0;

				int nb_line_tDBInput_13 = 0;
				java.sql.Connection conn_tDBInput_13 = null;
				String driverClass_tDBInput_13 = "org.postgresql.Driver";
				java.lang.Class.forName(driverClass_tDBInput_13);
				String dbUser_tDBInput_13 = context.data_warehouse_order_dwos_username;

				final String decryptedPassword_tDBInput_13 = context.data_warehouse_order_dwos_password;

				String dbPwd_tDBInput_13 = decryptedPassword_tDBInput_13;

				String url_tDBInput_13 = "jdbc:postgresql://"
						+ context.data_warehouse_order_dwos_host + ":"
						+ context.data_warehouse_order_dwos_port + "/"
						+ context.data_warehouse_order_dwos_database;

				conn_tDBInput_13 = java.sql.DriverManager.getConnection(
						url_tDBInput_13, dbUser_tDBInput_13, dbPwd_tDBInput_13);

				conn_tDBInput_13.setAutoCommit(false);

				java.sql.Statement stmt_tDBInput_13 = conn_tDBInput_13
						.createStatement();
				stmt_tDBInput_13.setFetchSize(1000);

				String dbquery_tDBInput_13 = "SELECT nextval('staging.invoice_dimension_seq') as dwo_invoice_dimension_uid,\n       inv.inv_invoice_uid as source_syst"
						+ "em_invoice_uid,\n       inv.invoice_number as invoice_number,\n       'OMS' as invoice_source_system,\n       inv.invoice_d"
						+ "ate as invoice_date,\n       inv.invoice_status as invoice_status,\n       inv.invoice_payment_datetime as invoice_payment"
						+ "_date,\n       inv.total_amount as invoice_total_amount,\n       inv.tax_amount as invoice_tax_amount,\n       inv.discount"
						+ "_amount as invoice_discount_amount,\n       inv.exchange_rate as invoice_exchange_rate,\n       inv.channel as channel,\n  "
						+ "     inv.currency as currency,\n       inv.cart_type as cart_type,\n       inv.organization_name as organization_name,\n   "
						+ "    inv.total_amount_in_transaction_currency as total_amount_in_transaction_currency,\n       inv.original_total_amount_i"
						+ "n_transaction_currency as original_amount_in_transaction_currency,\n       inv.tax_amount_in_transaction_currency as tax_"
						+ "amount_in_transaction_currency,\n       inv.payment_status as payment_status,\n       inv.invoice_class as invoice_class,\n"
						+ "       inv.organization_uid as organization_uid,\n       inv.created_datetime as created_datetime,\n       inv.created_by_"
						+ "user as created_by_user,\n       inv.updated_datetime as updated_datetime,\n       inv.updated_by_user as updated_by_user\n"
						+ "from staging.dwo_inv_invoice inv\nwhere inv.invoice_date > '2017-06-30 23:59:59'";

				globalMap.put("tDBInput_13_QUERY", dbquery_tDBInput_13);
				java.sql.ResultSet rs_tDBInput_13 = null;

				try {
					rs_tDBInput_13 = stmt_tDBInput_13
							.executeQuery(dbquery_tDBInput_13);
					java.sql.ResultSetMetaData rsmd_tDBInput_13 = rs_tDBInput_13
							.getMetaData();
					int colQtyInRs_tDBInput_13 = rsmd_tDBInput_13
							.getColumnCount();

					String tmpContent_tDBInput_13 = null;

					while (rs_tDBInput_13.next()) {
						nb_line_tDBInput_13++;

						if (colQtyInRs_tDBInput_13 < 1) {
							row13.dwo_invoice_dimension_uid = null;
						} else {

							if (rs_tDBInput_13.getObject(1) != null) {
								row13.dwo_invoice_dimension_uid = rs_tDBInput_13
										.getLong(1);
							} else {
								row13.dwo_invoice_dimension_uid = null;
							}
						}
						if (colQtyInRs_tDBInput_13 < 2) {
							row13.source_system_invoice_uid = null;
						} else {

							row13.source_system_invoice_uid = routines.system.JDBCUtil
									.getString(rs_tDBInput_13, 2, false);
						}
						if (colQtyInRs_tDBInput_13 < 3) {
							row13.invoice_number = null;
						} else {

							row13.invoice_number = routines.system.JDBCUtil
									.getString(rs_tDBInput_13, 3, false);
						}
						if (colQtyInRs_tDBInput_13 < 4) {
							row13.invoice_source_system = null;
						} else {

							row13.invoice_source_system = routines.system.JDBCUtil
									.getString(rs_tDBInput_13, 4, false);
						}
						if (colQtyInRs_tDBInput_13 < 5) {
							row13.invoice_date = null;
						} else {

							row13.invoice_date = routines.system.JDBCUtil
									.getDate(rs_tDBInput_13, 5);
						}
						if (colQtyInRs_tDBInput_13 < 6) {
							row13.invoice_status = null;
						} else {

							row13.invoice_status = routines.system.JDBCUtil
									.getString(rs_tDBInput_13, 6, false);
						}
						if (colQtyInRs_tDBInput_13 < 7) {
							row13.invoice_payment_date = null;
						} else {

							row13.invoice_payment_date = routines.system.JDBCUtil
									.getDate(rs_tDBInput_13, 7);
						}
						if (colQtyInRs_tDBInput_13 < 8) {
							row13.invoice_total_amount = null;
						} else {

							if (rs_tDBInput_13.getObject(8) != null) {
								row13.invoice_total_amount = rs_tDBInput_13
										.getBigDecimal(8);
							} else {
								row13.invoice_total_amount = null;
							}
						}
						if (colQtyInRs_tDBInput_13 < 9) {
							row13.invoice_tax_amount = null;
						} else {

							if (rs_tDBInput_13.getObject(9) != null) {
								row13.invoice_tax_amount = rs_tDBInput_13
										.getBigDecimal(9);
							} else {
								row13.invoice_tax_amount = null;
							}
						}
						if (colQtyInRs_tDBInput_13 < 10) {
							row13.invoice_discount_amount = null;
						} else {

							if (rs_tDBInput_13.getObject(10) != null) {
								row13.invoice_discount_amount = rs_tDBInput_13
										.getBigDecimal(10);
							} else {
								row13.invoice_discount_amount = null;
							}
						}
						if (colQtyInRs_tDBInput_13 < 11) {
							row13.invoice_exchange_rate = null;
						} else {

							if (rs_tDBInput_13.getObject(11) != null) {
								row13.invoice_exchange_rate = rs_tDBInput_13
										.getBigDecimal(11);
							} else {
								row13.invoice_exchange_rate = null;
							}
						}
						if (colQtyInRs_tDBInput_13 < 12) {
							row13.channel = null;
						} else {

							row13.channel = routines.system.JDBCUtil.getString(
									rs_tDBInput_13, 12, false);
						}
						if (colQtyInRs_tDBInput_13 < 13) {
							row13.currency = null;
						} else {

							row13.currency = routines.system.JDBCUtil
									.getString(rs_tDBInput_13, 13, false);
						}
						if (colQtyInRs_tDBInput_13 < 14) {
							row13.cart_type = null;
						} else {

							row13.cart_type = routines.system.JDBCUtil
									.getString(rs_tDBInput_13, 14, false);
						}
						if (colQtyInRs_tDBInput_13 < 15) {
							row13.organization_name = null;
						} else {

							row13.organization_name = routines.system.JDBCUtil
									.getString(rs_tDBInput_13, 15, false);
						}
						if (colQtyInRs_tDBInput_13 < 16) {
							row13.total_amount_in_transaction_currency = null;
						} else {

							if (rs_tDBInput_13.getObject(16) != null) {
								row13.total_amount_in_transaction_currency = rs_tDBInput_13
										.getBigDecimal(16);
							} else {
								row13.total_amount_in_transaction_currency = null;
							}
						}
						if (colQtyInRs_tDBInput_13 < 17) {
							row13.original_amount_in_transaction_currency = null;
						} else {

							if (rs_tDBInput_13.getObject(17) != null) {
								row13.original_amount_in_transaction_currency = rs_tDBInput_13
										.getBigDecimal(17);
							} else {
								row13.original_amount_in_transaction_currency = null;
							}
						}
						if (colQtyInRs_tDBInput_13 < 18) {
							row13.tax_amount_in_transaction_currency = null;
						} else {

							if (rs_tDBInput_13.getObject(18) != null) {
								row13.tax_amount_in_transaction_currency = rs_tDBInput_13
										.getBigDecimal(18);
							} else {
								row13.tax_amount_in_transaction_currency = null;
							}
						}
						if (colQtyInRs_tDBInput_13 < 19) {
							row13.payment_status = null;
						} else {

							row13.payment_status = routines.system.JDBCUtil
									.getString(rs_tDBInput_13, 19, false);
						}
						if (colQtyInRs_tDBInput_13 < 20) {
							row13.invoice_class = null;
						} else {

							row13.invoice_class = routines.system.JDBCUtil
									.getString(rs_tDBInput_13, 20, false);
						}
						if (colQtyInRs_tDBInput_13 < 21) {
							row13.organization_uid = null;
						} else {

							row13.organization_uid = routines.system.JDBCUtil
									.getString(rs_tDBInput_13, 21, false);
						}
						if (colQtyInRs_tDBInput_13 < 22) {
							row13.created_datetime = null;
						} else {

							row13.created_datetime = routines.system.JDBCUtil
									.getDate(rs_tDBInput_13, 22);
						}
						if (colQtyInRs_tDBInput_13 < 23) {
							row13.created_by_user = null;
						} else {

							row13.created_by_user = routines.system.JDBCUtil
									.getString(rs_tDBInput_13, 23, false);
						}
						if (colQtyInRs_tDBInput_13 < 24) {
							row13.updated_datetime = null;
						} else {

							row13.updated_datetime = routines.system.JDBCUtil
									.getDate(rs_tDBInput_13, 24);
						}
						if (colQtyInRs_tDBInput_13 < 25) {
							row13.updated_by_user = null;
						} else {

							row13.updated_by_user = routines.system.JDBCUtil
									.getString(rs_tDBInput_13, 25, false);
						}

						/**
						 * [tDBInput_13 begin ] stop
						 */

						/**
						 * [tDBInput_13 main ] start
						 */

						currentComponent = "tDBInput_13";

						tos_count_tDBInput_13++;

						/**
						 * [tDBInput_13 main ] stop
						 */

						/**
						 * [tDBInput_13 process_data_begin ] start
						 */

						currentComponent = "tDBInput_13";

						/**
						 * [tDBInput_13 process_data_begin ] stop
						 */

						/**
						 * [tDBOutput_13 main ] start
						 */

						currentComponent = "tDBOutput_13";

						// row13
						// row13

						if (execStat) {
							runStat.updateStatOnConnection("row13" + iterateId,
									1, 1);
						}

						whetherReject_tDBOutput_13 = false;
						if (row13.dwo_invoice_dimension_uid == null) {
							pstmt_tDBOutput_13.setNull(1,
									java.sql.Types.INTEGER);
						} else {
							pstmt_tDBOutput_13.setLong(1,
									row13.dwo_invoice_dimension_uid);
						}

						if (row13.source_system_invoice_uid == null) {
							pstmt_tDBOutput_13.setNull(2,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_13.setString(2,
									row13.source_system_invoice_uid);
						}

						if (row13.invoice_number == null) {
							pstmt_tDBOutput_13.setNull(3,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_13.setString(3,
									row13.invoice_number);
						}

						if (row13.invoice_source_system == null) {
							pstmt_tDBOutput_13.setNull(4,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_13.setString(4,
									row13.invoice_source_system);
						}

						if (row13.invoice_date != null) {
							pstmt_tDBOutput_13.setTimestamp(
									5,
									new java.sql.Timestamp(row13.invoice_date
											.getTime()));
						} else {
							pstmt_tDBOutput_13.setNull(5,
									java.sql.Types.TIMESTAMP);
						}

						if (row13.invoice_status == null) {
							pstmt_tDBOutput_13.setNull(6,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_13.setString(6,
									row13.invoice_status);
						}

						if (row13.invoice_payment_date != null) {
							pstmt_tDBOutput_13.setTimestamp(
									7,
									new java.sql.Timestamp(
											row13.invoice_payment_date
													.getTime()));
						} else {
							pstmt_tDBOutput_13.setNull(7,
									java.sql.Types.TIMESTAMP);
						}

						pstmt_tDBOutput_13.setBigDecimal(8,
								row13.invoice_total_amount);

						pstmt_tDBOutput_13.setBigDecimal(9,
								row13.invoice_tax_amount);

						pstmt_tDBOutput_13.setBigDecimal(10,
								row13.invoice_discount_amount);

						pstmt_tDBOutput_13.setBigDecimal(11,
								row13.invoice_exchange_rate);

						if (row13.channel == null) {
							pstmt_tDBOutput_13.setNull(12,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_13.setString(12, row13.channel);
						}

						if (row13.currency == null) {
							pstmt_tDBOutput_13.setNull(13,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_13.setString(13, row13.currency);
						}

						if (row13.cart_type == null) {
							pstmt_tDBOutput_13.setNull(14,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_13.setString(14, row13.cart_type);
						}

						if (row13.organization_name == null) {
							pstmt_tDBOutput_13.setNull(15,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_13.setString(15,
									row13.organization_name);
						}

						pstmt_tDBOutput_13.setBigDecimal(16,
								row13.total_amount_in_transaction_currency);

						pstmt_tDBOutput_13.setBigDecimal(17,
								row13.original_amount_in_transaction_currency);

						pstmt_tDBOutput_13.setBigDecimal(18,
								row13.tax_amount_in_transaction_currency);

						if (row13.payment_status == null) {
							pstmt_tDBOutput_13.setNull(19,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_13.setString(19,
									row13.payment_status);
						}

						if (row13.invoice_class == null) {
							pstmt_tDBOutput_13.setNull(20,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_13.setString(20,
									row13.invoice_class);
						}

						if (row13.organization_uid == null) {
							pstmt_tDBOutput_13.setNull(21,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_13.setString(21,
									row13.organization_uid);
						}

						if (row13.created_datetime != null) {
							pstmt_tDBOutput_13.setTimestamp(22,
									new java.sql.Timestamp(
											row13.created_datetime.getTime()));
						} else {
							pstmt_tDBOutput_13.setNull(22,
									java.sql.Types.TIMESTAMP);
						}

						if (row13.created_by_user == null) {
							pstmt_tDBOutput_13.setNull(23,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_13.setString(23,
									row13.created_by_user);
						}

						if (row13.updated_datetime != null) {
							pstmt_tDBOutput_13.setTimestamp(24,
									new java.sql.Timestamp(
											row13.updated_datetime.getTime()));
						} else {
							pstmt_tDBOutput_13.setNull(24,
									java.sql.Types.TIMESTAMP);
						}

						if (row13.updated_by_user == null) {
							pstmt_tDBOutput_13.setNull(25,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_13.setString(25,
									row13.updated_by_user);
						}

						pstmt_tDBOutput_13.addBatch();
						nb_line_tDBOutput_13++;

						batchSizeCounter_tDBOutput_13++;

						if ((batchSize_tDBOutput_13 > 0)
								&& (batchSize_tDBOutput_13 <= batchSizeCounter_tDBOutput_13)) {
							try {
								int countSum_tDBOutput_13 = 0;

								for (int countEach_tDBOutput_13 : pstmt_tDBOutput_13
										.executeBatch()) {
									countSum_tDBOutput_13 += (countEach_tDBOutput_13 < 0 ? 0
											: countEach_tDBOutput_13);
								}

								insertedCount_tDBOutput_13 += countSum_tDBOutput_13;

								batchSizeCounter_tDBOutput_13 = 0;
							} catch (java.sql.BatchUpdateException e_tDBOutput_13) {
								java.sql.SQLException ne_tDBOutput_13 = e_tDBOutput_13
										.getNextException(), sqle_tDBOutput_13 = null;
								String errormessage_tDBOutput_13;
								if (ne_tDBOutput_13 != null) {
									// build new exception to provide the
									// original cause
									sqle_tDBOutput_13 = new java.sql.SQLException(
											e_tDBOutput_13.getMessage()
													+ "\ncaused by: "
													+ ne_tDBOutput_13
															.getMessage(),
											ne_tDBOutput_13.getSQLState(),
											ne_tDBOutput_13.getErrorCode(),
											ne_tDBOutput_13);
									errormessage_tDBOutput_13 = sqle_tDBOutput_13
											.getMessage();
								} else {
									errormessage_tDBOutput_13 = e_tDBOutput_13
											.getMessage();
								}

								int countSum_tDBOutput_13 = 0;
								for (int countEach_tDBOutput_13 : e_tDBOutput_13
										.getUpdateCounts()) {
									countSum_tDBOutput_13 += (countEach_tDBOutput_13 < 0 ? 0
											: countEach_tDBOutput_13);
								}

								insertedCount_tDBOutput_13 += countSum_tDBOutput_13;

								System.err.println(errormessage_tDBOutput_13);

							}
						}

						commitCounter_tDBOutput_13++;
						if (commitEvery_tDBOutput_13 <= commitCounter_tDBOutput_13) {
							if ((batchSize_tDBOutput_13 > 0)
									&& (batchSizeCounter_tDBOutput_13 > 0)) {
								try {
									int countSum_tDBOutput_13 = 0;

									for (int countEach_tDBOutput_13 : pstmt_tDBOutput_13
											.executeBatch()) {
										countSum_tDBOutput_13 += (countEach_tDBOutput_13 < 0 ? 0
												: countEach_tDBOutput_13);
									}

									insertedCount_tDBOutput_13 += countSum_tDBOutput_13;

									batchSizeCounter_tDBOutput_13 = 0;
								} catch (java.sql.BatchUpdateException e_tDBOutput_13) {
									java.sql.SQLException ne_tDBOutput_13 = e_tDBOutput_13
											.getNextException(), sqle_tDBOutput_13 = null;
									String errormessage_tDBOutput_13;
									if (ne_tDBOutput_13 != null) {
										// build new exception to provide the
										// original cause
										sqle_tDBOutput_13 = new java.sql.SQLException(
												e_tDBOutput_13.getMessage()
														+ "\ncaused by: "
														+ ne_tDBOutput_13
																.getMessage(),
												ne_tDBOutput_13.getSQLState(),
												ne_tDBOutput_13.getErrorCode(),
												ne_tDBOutput_13);
										errormessage_tDBOutput_13 = sqle_tDBOutput_13
												.getMessage();
									} else {
										errormessage_tDBOutput_13 = e_tDBOutput_13
												.getMessage();
									}

									int countSum_tDBOutput_13 = 0;
									for (int countEach_tDBOutput_13 : e_tDBOutput_13
											.getUpdateCounts()) {
										countSum_tDBOutput_13 += (countEach_tDBOutput_13 < 0 ? 0
												: countEach_tDBOutput_13);
									}

									insertedCount_tDBOutput_13 += countSum_tDBOutput_13;

									System.err
											.println(errormessage_tDBOutput_13);

								}
							}
							conn_tDBOutput_13.commit();

							commitCounter_tDBOutput_13 = 0;
						}

						tos_count_tDBOutput_13++;

						/**
						 * [tDBOutput_13 main ] stop
						 */

						/**
						 * [tDBOutput_13 process_data_begin ] start
						 */

						currentComponent = "tDBOutput_13";

						/**
						 * [tDBOutput_13 process_data_begin ] stop
						 */

						/**
						 * [tDBOutput_13 process_data_end ] start
						 */

						currentComponent = "tDBOutput_13";

						/**
						 * [tDBOutput_13 process_data_end ] stop
						 */

						/**
						 * [tDBInput_13 process_data_end ] start
						 */

						currentComponent = "tDBInput_13";

						/**
						 * [tDBInput_13 process_data_end ] stop
						 */

						/**
						 * [tDBInput_13 end ] start
						 */

						currentComponent = "tDBInput_13";

					}
				} finally {
					if (rs_tDBInput_13 != null) {
						rs_tDBInput_13.close();
					}
					if (stmt_tDBInput_13 != null) {
						stmt_tDBInput_13.close();
					}
					if (conn_tDBInput_13 != null
							&& !conn_tDBInput_13.isClosed()) {

						conn_tDBInput_13.commit();

						conn_tDBInput_13.close();

					}

				}
				globalMap.put("tDBInput_13_NB_LINE", nb_line_tDBInput_13);

				ok_Hash.put("tDBInput_13", true);
				end_Hash.put("tDBInput_13", System.currentTimeMillis());

				tStatCatcher_1.addMessage(
						"end",
						"tDBInput_13",
						end_Hash.get("tDBInput_13")
								- start_Hash.get("tDBInput_13"));
				tStatCatcher_1Process(globalMap);
				talendStats_STATS.addMessage(
						"end",
						"tDBInput_13",
						end_Hash.get("tDBInput_13")
								- start_Hash.get("tDBInput_13"));
				talendStats_STATSProcess(globalMap);

				/**
				 * [tDBInput_13 end ] stop
				 */

				/**
				 * [tDBOutput_13 end ] start
				 */

				currentComponent = "tDBOutput_13";

				try {
					int countSum_tDBOutput_13 = 0;
					if (pstmt_tDBOutput_13 != null
							&& batchSizeCounter_tDBOutput_13 > 0) {

						for (int countEach_tDBOutput_13 : pstmt_tDBOutput_13
								.executeBatch()) {
							countSum_tDBOutput_13 += (countEach_tDBOutput_13 < 0 ? 0
									: countEach_tDBOutput_13);
						}

					}

					insertedCount_tDBOutput_13 += countSum_tDBOutput_13;

				} catch (java.sql.BatchUpdateException e_tDBOutput_13) {
					java.sql.SQLException ne_tDBOutput_13 = e_tDBOutput_13
							.getNextException(), sqle_tDBOutput_13 = null;
					String errormessage_tDBOutput_13;
					if (ne_tDBOutput_13 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_13 = new java.sql.SQLException(
								e_tDBOutput_13.getMessage() + "\ncaused by: "
										+ ne_tDBOutput_13.getMessage(),
								ne_tDBOutput_13.getSQLState(),
								ne_tDBOutput_13.getErrorCode(), ne_tDBOutput_13);
						errormessage_tDBOutput_13 = sqle_tDBOutput_13
								.getMessage();
					} else {
						errormessage_tDBOutput_13 = e_tDBOutput_13.getMessage();
					}

					int countSum_tDBOutput_13 = 0;
					for (int countEach_tDBOutput_13 : e_tDBOutput_13
							.getUpdateCounts()) {
						countSum_tDBOutput_13 += (countEach_tDBOutput_13 < 0 ? 0
								: countEach_tDBOutput_13);
					}

					insertedCount_tDBOutput_13 += countSum_tDBOutput_13;

					System.err.println(errormessage_tDBOutput_13);

				}

				if (pstmt_tDBOutput_13 != null) {

					pstmt_tDBOutput_13.close();
					resourceMap.remove("pstmt_tDBOutput_13");
				}
				resourceMap.put("statementClosed_tDBOutput_13", true);

				conn_tDBOutput_13.commit();

				conn_tDBOutput_13.close();

				resourceMap.put("finish_tDBOutput_13", true);

				nb_line_deleted_tDBOutput_13 = nb_line_deleted_tDBOutput_13
						+ deletedCount_tDBOutput_13;
				nb_line_update_tDBOutput_13 = nb_line_update_tDBOutput_13
						+ updatedCount_tDBOutput_13;
				nb_line_inserted_tDBOutput_13 = nb_line_inserted_tDBOutput_13
						+ insertedCount_tDBOutput_13;
				nb_line_rejected_tDBOutput_13 = nb_line_rejected_tDBOutput_13
						+ rejectedCount_tDBOutput_13;

				globalMap.put("tDBOutput_13_NB_LINE", nb_line_tDBOutput_13);
				globalMap.put("tDBOutput_13_NB_LINE_UPDATED",
						nb_line_update_tDBOutput_13);
				globalMap.put("tDBOutput_13_NB_LINE_INSERTED",
						nb_line_inserted_tDBOutput_13);
				globalMap.put("tDBOutput_13_NB_LINE_DELETED",
						nb_line_deleted_tDBOutput_13);
				globalMap.put("tDBOutput_13_NB_LINE_REJECTED",
						nb_line_rejected_tDBOutput_13);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row13" + iterateId, 2,
								0);
					}
				}

				ok_Hash.put("tDBOutput_13", true);
				end_Hash.put("tDBOutput_13", System.currentTimeMillis());

				tStatCatcher_1.addMessage(
						"end",
						"tDBOutput_13",
						end_Hash.get("tDBOutput_13")
								- start_Hash.get("tDBOutput_13"));
				tStatCatcher_1Process(globalMap);
				talendStats_STATS.addMessage(
						"end",
						"tDBOutput_13",
						end_Hash.get("tDBOutput_13")
								- start_Hash.get("tDBOutput_13"));
				talendStats_STATSProcess(globalMap);

				/**
				 * [tDBOutput_13 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_13 finally ] start
				 */

				currentComponent = "tDBInput_13";

				/**
				 * [tDBInput_13 finally ] stop
				 */

				/**
				 * [tDBOutput_13 finally ] start
				 */

				currentComponent = "tDBOutput_13";

				try {
					if (resourceMap.get("statementClosed_tDBOutput_13") == null) {
						java.sql.PreparedStatement pstmtToClose_tDBOutput_13 = null;
						if ((pstmtToClose_tDBOutput_13 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmt_tDBOutput_13")) != null) {
							pstmtToClose_tDBOutput_13.close();
						}
					}
				} finally {
					if (resourceMap.get("finish_tDBOutput_13") == null) {
						java.sql.Connection ctn_tDBOutput_13 = null;
						if ((ctn_tDBOutput_13 = (java.sql.Connection) resourceMap
								.get("conn_tDBOutput_13")) != null) {
							try {
								ctn_tDBOutput_13.close();
							} catch (java.sql.SQLException sqlEx_tDBOutput_13) {
								String errorMessage_tDBOutput_13 = "failed to close the connection in tDBOutput_13 :"
										+ sqlEx_tDBOutput_13.getMessage();
								System.err.println(errorMessage_tDBOutput_13);
							}
						}
					}
				}

				/**
				 * [tDBOutput_13 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_13_SUBPROCESS_STATE", 1);
	}

	public static class row1Struct implements
			routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_ORDER_ETL_OMS_ETL_NO_PRODUCTS = new byte[0];
		static byte[] commonByteArray_ORDER_ETL_OMS_ETL_NO_PRODUCTS = new byte[0];

		public String om_address_uid;

		public String getOm_address_uid() {
			return this.om_address_uid;
		}

		public String street_address_1;

		public String getStreet_address_1() {
			return this.street_address_1;
		}

		public String street_address_2;

		public String getStreet_address_2() {
			return this.street_address_2;
		}

		public String street_address_3;

		public String getStreet_address_3() {
			return this.street_address_3;
		}

		public String city;

		public String getCity() {
			return this.city;
		}

		public String region;

		public String getRegion() {
			return this.region;
		}

		public String postal_code;

		public String getPostal_code() {
			return this.postal_code;
		}

		public String country;

		public String getCountry() {
			return this.country;
		}

		public int record_version;

		public int getRecord_version() {
			return this.record_version;
		}

		public String created_by_user;

		public String getCreated_by_user() {
			return this.created_by_user;
		}

		public java.util.Date created_datetime;

		public java.util.Date getCreated_datetime() {
			return this.created_datetime;
		}

		public String updated_by_user;

		public String getUpdated_by_user() {
			return this.updated_by_user;
		}

		public java.util.Date updated_datetime;

		public java.util.Date getUpdated_datetime() {
			return this.updated_datetime;
		}

		public Boolean is_deleted_flag;

		public Boolean getIs_deleted_flag() {
			return this.is_deleted_flag;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ORDER_ETL_OMS_ETL_NO_PRODUCTS.length) {
					if (length < 1024
							&& commonByteArray_ORDER_ETL_OMS_ETL_NO_PRODUCTS.length == 0) {
						commonByteArray_ORDER_ETL_OMS_ETL_NO_PRODUCTS = new byte[1024];
					} else {
						commonByteArray_ORDER_ETL_OMS_ETL_NO_PRODUCTS = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ORDER_ETL_OMS_ETL_NO_PRODUCTS, 0,
						length);
				strReturn = new String(
						commonByteArray_ORDER_ETL_OMS_ETL_NO_PRODUCTS, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ORDER_ETL_OMS_ETL_NO_PRODUCTS) {

				try {

					int length = 0;

					this.om_address_uid = readString(dis);

					this.street_address_1 = readString(dis);

					this.street_address_2 = readString(dis);

					this.street_address_3 = readString(dis);

					this.city = readString(dis);

					this.region = readString(dis);

					this.postal_code = readString(dis);

					this.country = readString(dis);

					this.record_version = dis.readInt();

					this.created_by_user = readString(dis);

					this.created_datetime = readDate(dis);

					this.updated_by_user = readString(dis);

					this.updated_datetime = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.is_deleted_flag = null;
					} else {
						this.is_deleted_flag = dis.readBoolean();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.om_address_uid, dos);

				// String

				writeString(this.street_address_1, dos);

				// String

				writeString(this.street_address_2, dos);

				// String

				writeString(this.street_address_3, dos);

				// String

				writeString(this.city, dos);

				// String

				writeString(this.region, dos);

				// String

				writeString(this.postal_code, dos);

				// String

				writeString(this.country, dos);

				// int

				dos.writeInt(this.record_version);

				// String

				writeString(this.created_by_user, dos);

				// java.util.Date

				writeDate(this.created_datetime, dos);

				// String

				writeString(this.updated_by_user, dos);

				// java.util.Date

				writeDate(this.updated_datetime, dos);

				// Boolean

				if (this.is_deleted_flag == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.is_deleted_flag);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("om_address_uid=" + om_address_uid);
			sb.append(",street_address_1=" + street_address_1);
			sb.append(",street_address_2=" + street_address_2);
			sb.append(",street_address_3=" + street_address_3);
			sb.append(",city=" + city);
			sb.append(",region=" + region);
			sb.append(",postal_code=" + postal_code);
			sb.append(",country=" + country);
			sb.append(",record_version=" + String.valueOf(record_version));
			sb.append(",created_by_user=" + created_by_user);
			sb.append(",created_datetime=" + String.valueOf(created_datetime));
			sb.append(",updated_by_user=" + updated_by_user);
			sb.append(",updated_datetime=" + String.valueOf(updated_datetime));
			sb.append(",is_deleted_flag=" + String.valueOf(is_deleted_flag));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row1Struct row1 = new row1Struct();

				/**
				 * [tDBOutput_1 begin ] start
				 */

				ok_Hash.put("tDBOutput_1", false);
				start_Hash.put("tDBOutput_1", System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tDBOutput_1");
				tStatCatcher_1Process(globalMap);

				talendStats_STATS.addMessage("begin", "tDBOutput_1");
				talendStats_STATSProcess(globalMap);

				currentComponent = "tDBOutput_1";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row1" + iterateId, 0, 0);

					}
				}

				int tos_count_tDBOutput_1 = 0;

				String dbschema_tDBOutput_1 = null;
				dbschema_tDBOutput_1 = context.data_warehouse_order_dwos_schema;

				String tableName_tDBOutput_1 = null;
				if (dbschema_tDBOutput_1 == null
						|| dbschema_tDBOutput_1.trim().length() == 0) {
					tableName_tDBOutput_1 = "dwo_om_address";
				} else {
					tableName_tDBOutput_1 = dbschema_tDBOutput_1 + "\".\""
							+ "dwo_om_address";
				}

				int nb_line_tDBOutput_1 = 0;
				int nb_line_update_tDBOutput_1 = 0;
				int nb_line_inserted_tDBOutput_1 = 0;
				int nb_line_deleted_tDBOutput_1 = 0;
				int nb_line_rejected_tDBOutput_1 = 0;

				int deletedCount_tDBOutput_1 = 0;
				int updatedCount_tDBOutput_1 = 0;
				int insertedCount_tDBOutput_1 = 0;
				int rejectedCount_tDBOutput_1 = 0;

				boolean whetherReject_tDBOutput_1 = false;

				java.sql.Connection conn_tDBOutput_1 = null;
				String dbUser_tDBOutput_1 = null;

				java.lang.Class.forName("org.postgresql.Driver");
				String url_tDBOutput_1 = "jdbc:postgresql://"
						+ context.data_warehouse_order_dwos_host + ":"
						+ context.data_warehouse_order_dwos_port + "/"
						+ context.data_warehouse_order_dwos_database;
				dbUser_tDBOutput_1 = context.data_warehouse_order_dwos_username;

				final String decryptedPassword_tDBOutput_1 = context.data_warehouse_order_dwos_password;

				String dbPwd_tDBOutput_1 = decryptedPassword_tDBOutput_1;

				conn_tDBOutput_1 = java.sql.DriverManager.getConnection(
						url_tDBOutput_1, dbUser_tDBOutput_1, dbPwd_tDBOutput_1);

				resourceMap.put("conn_tDBOutput_1", conn_tDBOutput_1);
				conn_tDBOutput_1.setAutoCommit(false);
				int commitEvery_tDBOutput_1 = 10000;
				int commitCounter_tDBOutput_1 = 0;

				int batchSize_tDBOutput_1 = 10000;
				int batchSizeCounter_tDBOutput_1 = 0;

				int count_tDBOutput_1 = 0;
				int rsTruncCountNumber_tDBOutput_1 = 0;
				try (java.sql.Statement stmtTruncCount_tDBOutput_1 = conn_tDBOutput_1
						.createStatement()) {
					try (java.sql.ResultSet rsTruncCount_tDBOutput_1 = stmtTruncCount_tDBOutput_1
							.executeQuery("SELECT COUNT(1) FROM \""
									+ tableName_tDBOutput_1 + "\"")) {
						if (rsTruncCount_tDBOutput_1.next()) {
							rsTruncCountNumber_tDBOutput_1 = rsTruncCount_tDBOutput_1
									.getInt(1);
						}
					}
				}
				try (java.sql.Statement stmtTrunc_tDBOutput_1 = conn_tDBOutput_1
						.createStatement()) {
					stmtTrunc_tDBOutput_1.executeUpdate("TRUNCATE TABLE \""
							+ tableName_tDBOutput_1 + "\"");
					deletedCount_tDBOutput_1 += rsTruncCountNumber_tDBOutput_1;
				}
				String insert_tDBOutput_1 = "INSERT INTO \""
						+ tableName_tDBOutput_1
						+ "\" (\"om_address_uid\",\"street_address_1\",\"street_address_2\",\"street_address_3\",\"city\",\"region\",\"postal_code\",\"country\",\"record_version\",\"created_by_user\",\"created_datetime\",\"updated_by_user\",\"updated_datetime\",\"is_deleted_flag\") VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

				java.sql.PreparedStatement pstmt_tDBOutput_1 = conn_tDBOutput_1
						.prepareStatement(insert_tDBOutput_1);
				resourceMap.put("pstmt_tDBOutput_1", pstmt_tDBOutput_1);

				/**
				 * [tDBOutput_1 begin ] stop
				 */

				/**
				 * [tDBInput_1 begin ] start
				 */

				ok_Hash.put("tDBInput_1", false);
				start_Hash.put("tDBInput_1", System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tDBInput_1");
				tStatCatcher_1Process(globalMap);

				talendStats_STATS.addMessage("begin", "tDBInput_1");
				talendStats_STATSProcess(globalMap);

				currentComponent = "tDBInput_1";

				int tos_count_tDBInput_1 = 0;

				int nb_line_tDBInput_1 = 0;
				java.sql.Connection conn_tDBInput_1 = null;
				conn_tDBInput_1 = (java.sql.Connection) globalMap
						.get("conn_tDBConnection_1");

				java.sql.Statement stmt_tDBInput_1 = conn_tDBInput_1
						.createStatement();
				stmt_tDBInput_1.setFetchSize(1000);

				String dbquery_tDBInput_1 = "SELECT *\nFROM apps.om_address";

				globalMap.put("tDBInput_1_QUERY", dbquery_tDBInput_1);
				java.sql.ResultSet rs_tDBInput_1 = null;

				try {
					rs_tDBInput_1 = stmt_tDBInput_1
							.executeQuery(dbquery_tDBInput_1);
					java.sql.ResultSetMetaData rsmd_tDBInput_1 = rs_tDBInput_1
							.getMetaData();
					int colQtyInRs_tDBInput_1 = rsmd_tDBInput_1
							.getColumnCount();

					String tmpContent_tDBInput_1 = null;

					while (rs_tDBInput_1.next()) {
						nb_line_tDBInput_1++;

						if (colQtyInRs_tDBInput_1 < 1) {
							row1.om_address_uid = null;
						} else {

							row1.om_address_uid = routines.system.JDBCUtil
									.getString(rs_tDBInput_1, 1, false);
						}
						if (colQtyInRs_tDBInput_1 < 2) {
							row1.street_address_1 = null;
						} else {

							row1.street_address_1 = routines.system.JDBCUtil
									.getString(rs_tDBInput_1, 2, false);
						}
						if (colQtyInRs_tDBInput_1 < 3) {
							row1.street_address_2 = null;
						} else {

							row1.street_address_2 = routines.system.JDBCUtil
									.getString(rs_tDBInput_1, 3, false);
						}
						if (colQtyInRs_tDBInput_1 < 4) {
							row1.street_address_3 = null;
						} else {

							row1.street_address_3 = routines.system.JDBCUtil
									.getString(rs_tDBInput_1, 4, false);
						}
						if (colQtyInRs_tDBInput_1 < 5) {
							row1.city = null;
						} else {

							row1.city = routines.system.JDBCUtil.getString(
									rs_tDBInput_1, 5, false);
						}
						if (colQtyInRs_tDBInput_1 < 6) {
							row1.region = null;
						} else {

							row1.region = routines.system.JDBCUtil.getString(
									rs_tDBInput_1, 6, false);
						}
						if (colQtyInRs_tDBInput_1 < 7) {
							row1.postal_code = null;
						} else {

							row1.postal_code = routines.system.JDBCUtil
									.getString(rs_tDBInput_1, 7, false);
						}
						if (colQtyInRs_tDBInput_1 < 8) {
							row1.country = null;
						} else {

							row1.country = routines.system.JDBCUtil.getString(
									rs_tDBInput_1, 8, false);
						}
						if (colQtyInRs_tDBInput_1 < 9) {
							row1.record_version = 0;
						} else {

							if (rs_tDBInput_1.getObject(9) != null) {
								row1.record_version = rs_tDBInput_1.getInt(9);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 10) {
							row1.created_by_user = null;
						} else {

							row1.created_by_user = routines.system.JDBCUtil
									.getString(rs_tDBInput_1, 10, false);
						}
						if (colQtyInRs_tDBInput_1 < 11) {
							row1.created_datetime = null;
						} else {

							row1.created_datetime = routines.system.JDBCUtil
									.getDate(rs_tDBInput_1, 11);
						}
						if (colQtyInRs_tDBInput_1 < 12) {
							row1.updated_by_user = null;
						} else {

							row1.updated_by_user = routines.system.JDBCUtil
									.getString(rs_tDBInput_1, 12, false);
						}
						if (colQtyInRs_tDBInput_1 < 13) {
							row1.updated_datetime = null;
						} else {

							row1.updated_datetime = routines.system.JDBCUtil
									.getDate(rs_tDBInput_1, 13);
						}
						if (colQtyInRs_tDBInput_1 < 14) {
							row1.is_deleted_flag = null;
						} else {

							if (rs_tDBInput_1.getObject(14) != null) {
								row1.is_deleted_flag = rs_tDBInput_1
										.getBoolean(14);
							} else {
								row1.is_deleted_flag = null;
							}
						}

						/**
						 * [tDBInput_1 begin ] stop
						 */

						/**
						 * [tDBInput_1 main ] start
						 */

						currentComponent = "tDBInput_1";

						tos_count_tDBInput_1++;

						/**
						 * [tDBInput_1 main ] stop
						 */

						/**
						 * [tDBInput_1 process_data_begin ] start
						 */

						currentComponent = "tDBInput_1";

						/**
						 * [tDBInput_1 process_data_begin ] stop
						 */

						/**
						 * [tDBOutput_1 main ] start
						 */

						currentComponent = "tDBOutput_1";

						// row1
						// row1

						if (execStat) {
							runStat.updateStatOnConnection("row1" + iterateId,
									1, 1);
						}

						whetherReject_tDBOutput_1 = false;
						if (row1.om_address_uid == null) {
							pstmt_tDBOutput_1
									.setNull(1, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(1, row1.om_address_uid);
						}

						if (row1.street_address_1 == null) {
							pstmt_tDBOutput_1
									.setNull(2, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(2,
									row1.street_address_1);
						}

						if (row1.street_address_2 == null) {
							pstmt_tDBOutput_1
									.setNull(3, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(3,
									row1.street_address_2);
						}

						if (row1.street_address_3 == null) {
							pstmt_tDBOutput_1
									.setNull(4, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(4,
									row1.street_address_3);
						}

						if (row1.city == null) {
							pstmt_tDBOutput_1
									.setNull(5, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(5, row1.city);
						}

						if (row1.region == null) {
							pstmt_tDBOutput_1
									.setNull(6, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(6, row1.region);
						}

						if (row1.postal_code == null) {
							pstmt_tDBOutput_1
									.setNull(7, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(7, row1.postal_code);
						}

						if (row1.country == null) {
							pstmt_tDBOutput_1
									.setNull(8, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(8, row1.country);
						}

						pstmt_tDBOutput_1.setInt(9, row1.record_version);

						if (row1.created_by_user == null) {
							pstmt_tDBOutput_1.setNull(10,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(10,
									row1.created_by_user);
						}

						if (row1.created_datetime != null) {
							pstmt_tDBOutput_1.setTimestamp(11,
									new java.sql.Timestamp(
											row1.created_datetime.getTime()));
						} else {
							pstmt_tDBOutput_1.setNull(11,
									java.sql.Types.TIMESTAMP);
						}

						if (row1.updated_by_user == null) {
							pstmt_tDBOutput_1.setNull(12,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(12,
									row1.updated_by_user);
						}

						if (row1.updated_datetime != null) {
							pstmt_tDBOutput_1.setTimestamp(13,
									new java.sql.Timestamp(
											row1.updated_datetime.getTime()));
						} else {
							pstmt_tDBOutput_1.setNull(13,
									java.sql.Types.TIMESTAMP);
						}

						if (row1.is_deleted_flag == null) {
							pstmt_tDBOutput_1.setNull(14,
									java.sql.Types.BOOLEAN);
						} else {
							pstmt_tDBOutput_1.setBoolean(14,
									row1.is_deleted_flag);
						}

						pstmt_tDBOutput_1.addBatch();
						nb_line_tDBOutput_1++;

						batchSizeCounter_tDBOutput_1++;

						if (!whetherReject_tDBOutput_1) {
						}
						if ((batchSize_tDBOutput_1 > 0)
								&& (batchSize_tDBOutput_1 <= batchSizeCounter_tDBOutput_1)) {
							try {
								int countSum_tDBOutput_1 = 0;

								for (int countEach_tDBOutput_1 : pstmt_tDBOutput_1
										.executeBatch()) {
									countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0
											: countEach_tDBOutput_1);
								}

								insertedCount_tDBOutput_1 += countSum_tDBOutput_1;

								batchSizeCounter_tDBOutput_1 = 0;
							} catch (java.sql.BatchUpdateException e_tDBOutput_1) {
								java.sql.SQLException ne_tDBOutput_1 = e_tDBOutput_1
										.getNextException(), sqle_tDBOutput_1 = null;
								String errormessage_tDBOutput_1;
								if (ne_tDBOutput_1 != null) {
									// build new exception to provide the
									// original cause
									sqle_tDBOutput_1 = new java.sql.SQLException(
											e_tDBOutput_1.getMessage()
													+ "\ncaused by: "
													+ ne_tDBOutput_1
															.getMessage(),
											ne_tDBOutput_1.getSQLState(),
											ne_tDBOutput_1.getErrorCode(),
											ne_tDBOutput_1);
									errormessage_tDBOutput_1 = sqle_tDBOutput_1
											.getMessage();
								} else {
									errormessage_tDBOutput_1 = e_tDBOutput_1
											.getMessage();
								}

								int countSum_tDBOutput_1 = 0;
								for (int countEach_tDBOutput_1 : e_tDBOutput_1
										.getUpdateCounts()) {
									countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0
											: countEach_tDBOutput_1);
								}

								insertedCount_tDBOutput_1 += countSum_tDBOutput_1;

								System.err.println(errormessage_tDBOutput_1);

							}
						}

						commitCounter_tDBOutput_1++;
						if (commitEvery_tDBOutput_1 <= commitCounter_tDBOutput_1) {
							if ((batchSize_tDBOutput_1 > 0)
									&& (batchSizeCounter_tDBOutput_1 > 0)) {
								try {
									int countSum_tDBOutput_1 = 0;

									for (int countEach_tDBOutput_1 : pstmt_tDBOutput_1
											.executeBatch()) {
										countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0
												: countEach_tDBOutput_1);
									}

									insertedCount_tDBOutput_1 += countSum_tDBOutput_1;

									batchSizeCounter_tDBOutput_1 = 0;
								} catch (java.sql.BatchUpdateException e_tDBOutput_1) {
									java.sql.SQLException ne_tDBOutput_1 = e_tDBOutput_1
											.getNextException(), sqle_tDBOutput_1 = null;
									String errormessage_tDBOutput_1;
									if (ne_tDBOutput_1 != null) {
										// build new exception to provide the
										// original cause
										sqle_tDBOutput_1 = new java.sql.SQLException(
												e_tDBOutput_1.getMessage()
														+ "\ncaused by: "
														+ ne_tDBOutput_1
																.getMessage(),
												ne_tDBOutput_1.getSQLState(),
												ne_tDBOutput_1.getErrorCode(),
												ne_tDBOutput_1);
										errormessage_tDBOutput_1 = sqle_tDBOutput_1
												.getMessage();
									} else {
										errormessage_tDBOutput_1 = e_tDBOutput_1
												.getMessage();
									}

									int countSum_tDBOutput_1 = 0;
									for (int countEach_tDBOutput_1 : e_tDBOutput_1
											.getUpdateCounts()) {
										countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0
												: countEach_tDBOutput_1);
									}

									insertedCount_tDBOutput_1 += countSum_tDBOutput_1;

									System.err
											.println(errormessage_tDBOutput_1);

								}
							}
							conn_tDBOutput_1.commit();

							commitCounter_tDBOutput_1 = 0;
						}

						tos_count_tDBOutput_1++;

						/**
						 * [tDBOutput_1 main ] stop
						 */

						/**
						 * [tDBOutput_1 process_data_begin ] start
						 */

						currentComponent = "tDBOutput_1";

						/**
						 * [tDBOutput_1 process_data_begin ] stop
						 */

						/**
						 * [tDBOutput_1 process_data_end ] start
						 */

						currentComponent = "tDBOutput_1";

						/**
						 * [tDBOutput_1 process_data_end ] stop
						 */

						/**
						 * [tDBInput_1 process_data_end ] start
						 */

						currentComponent = "tDBInput_1";

						/**
						 * [tDBInput_1 process_data_end ] stop
						 */

						/**
						 * [tDBInput_1 end ] start
						 */

						currentComponent = "tDBInput_1";

					}
				} finally {
					if (rs_tDBInput_1 != null) {
						rs_tDBInput_1.close();
					}
					if (stmt_tDBInput_1 != null) {
						stmt_tDBInput_1.close();
					}
				}
				globalMap.put("tDBInput_1_NB_LINE", nb_line_tDBInput_1);

				ok_Hash.put("tDBInput_1", true);
				end_Hash.put("tDBInput_1", System.currentTimeMillis());

				tStatCatcher_1.addMessage(
						"end",
						"tDBInput_1",
						end_Hash.get("tDBInput_1")
								- start_Hash.get("tDBInput_1"));
				tStatCatcher_1Process(globalMap);
				talendStats_STATS.addMessage(
						"end",
						"tDBInput_1",
						end_Hash.get("tDBInput_1")
								- start_Hash.get("tDBInput_1"));
				talendStats_STATSProcess(globalMap);

				/**
				 * [tDBInput_1 end ] stop
				 */

				/**
				 * [tDBOutput_1 end ] start
				 */

				currentComponent = "tDBOutput_1";

				try {
					int countSum_tDBOutput_1 = 0;
					if (pstmt_tDBOutput_1 != null
							&& batchSizeCounter_tDBOutput_1 > 0) {

						for (int countEach_tDBOutput_1 : pstmt_tDBOutput_1
								.executeBatch()) {
							countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0
									: countEach_tDBOutput_1);
						}

					}

					insertedCount_tDBOutput_1 += countSum_tDBOutput_1;

				} catch (java.sql.BatchUpdateException e_tDBOutput_1) {
					java.sql.SQLException ne_tDBOutput_1 = e_tDBOutput_1
							.getNextException(), sqle_tDBOutput_1 = null;
					String errormessage_tDBOutput_1;
					if (ne_tDBOutput_1 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_1 = new java.sql.SQLException(
								e_tDBOutput_1.getMessage() + "\ncaused by: "
										+ ne_tDBOutput_1.getMessage(),
								ne_tDBOutput_1.getSQLState(),
								ne_tDBOutput_1.getErrorCode(), ne_tDBOutput_1);
						errormessage_tDBOutput_1 = sqle_tDBOutput_1
								.getMessage();
					} else {
						errormessage_tDBOutput_1 = e_tDBOutput_1.getMessage();
					}

					int countSum_tDBOutput_1 = 0;
					for (int countEach_tDBOutput_1 : e_tDBOutput_1
							.getUpdateCounts()) {
						countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0
								: countEach_tDBOutput_1);
					}

					insertedCount_tDBOutput_1 += countSum_tDBOutput_1;

					System.err.println(errormessage_tDBOutput_1);

				}

				if (pstmt_tDBOutput_1 != null) {

					pstmt_tDBOutput_1.close();
					resourceMap.remove("pstmt_tDBOutput_1");
				}
				resourceMap.put("statementClosed_tDBOutput_1", true);

				conn_tDBOutput_1.commit();

				conn_tDBOutput_1.close();

				resourceMap.put("finish_tDBOutput_1", true);

				nb_line_deleted_tDBOutput_1 = nb_line_deleted_tDBOutput_1
						+ deletedCount_tDBOutput_1;
				nb_line_update_tDBOutput_1 = nb_line_update_tDBOutput_1
						+ updatedCount_tDBOutput_1;
				nb_line_inserted_tDBOutput_1 = nb_line_inserted_tDBOutput_1
						+ insertedCount_tDBOutput_1;
				nb_line_rejected_tDBOutput_1 = nb_line_rejected_tDBOutput_1
						+ rejectedCount_tDBOutput_1;

				globalMap.put("tDBOutput_1_NB_LINE", nb_line_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_UPDATED",
						nb_line_update_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_INSERTED",
						nb_line_inserted_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_DELETED",
						nb_line_deleted_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_REJECTED",
						nb_line_rejected_tDBOutput_1);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row1" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tDBOutput_1", true);
				end_Hash.put("tDBOutput_1", System.currentTimeMillis());

				tStatCatcher_1.addMessage(
						"end",
						"tDBOutput_1",
						end_Hash.get("tDBOutput_1")
								- start_Hash.get("tDBOutput_1"));
				tStatCatcher_1Process(globalMap);
				talendStats_STATS.addMessage(
						"end",
						"tDBOutput_1",
						end_Hash.get("tDBOutput_1")
								- start_Hash.get("tDBOutput_1"));
				talendStats_STATSProcess(globalMap);
				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk2", 0, "ok");
				}
				tDBInput_4Process(globalMap);

				/**
				 * [tDBOutput_1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_1 finally ] start
				 */

				currentComponent = "tDBInput_1";

				/**
				 * [tDBInput_1 finally ] stop
				 */

				/**
				 * [tDBOutput_1 finally ] start
				 */

				currentComponent = "tDBOutput_1";

				try {
					if (resourceMap.get("statementClosed_tDBOutput_1") == null) {
						java.sql.PreparedStatement pstmtToClose_tDBOutput_1 = null;
						if ((pstmtToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmt_tDBOutput_1")) != null) {
							pstmtToClose_tDBOutput_1.close();
						}
					}
				} finally {
					if (resourceMap.get("finish_tDBOutput_1") == null) {
						java.sql.Connection ctn_tDBOutput_1 = null;
						if ((ctn_tDBOutput_1 = (java.sql.Connection) resourceMap
								.get("conn_tDBOutput_1")) != null) {
							try {
								ctn_tDBOutput_1.close();
							} catch (java.sql.SQLException sqlEx_tDBOutput_1) {
								String errorMessage_tDBOutput_1 = "failed to close the connection in tDBOutput_1 :"
										+ sqlEx_tDBOutput_1.getMessage();
								System.err.println(errorMessage_tDBOutput_1);
							}
						}
					}
				}

				/**
				 * [tDBOutput_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 1);
	}

	public static class row4Struct implements
			routines.system.IPersistableRow<row4Struct> {
		final static byte[] commonByteArrayLock_ORDER_ETL_OMS_ETL_NO_PRODUCTS = new byte[0];
		static byte[] commonByteArray_ORDER_ETL_OMS_ETL_NO_PRODUCTS = new byte[0];

		public String om_order_header_uid;

		public String getOm_order_header_uid() {
			return this.om_order_header_uid;
		}

		public String om_order_payment_uid;

		public String getOm_order_payment_uid() {
			return this.om_order_payment_uid;
		}

		public String order_number;

		public String getOrder_number() {
			return this.order_number;
		}

		public java.util.Date order_capture_date;

		public java.util.Date getOrder_capture_date() {
			return this.order_capture_date;
		}

		public String buyer_uid;

		public String getBuyer_uid() {
			return this.buyer_uid;
		}

		public String organization_uid;

		public String getOrganization_uid() {
			return this.organization_uid;
		}

		public String organization_name;

		public String getOrganization_name() {
			return this.organization_name;
		}

		public String org_location_uid;

		public String getOrg_location_uid() {
			return this.org_location_uid;
		}

		public String org_location_country_code;

		public String getOrg_location_country_code() {
			return this.org_location_country_code;
		}

		public String org_location_name;

		public String getOrg_location_name() {
			return this.org_location_name;
		}

		public String channel;

		public String getChannel() {
			return this.channel;
		}

		public String po_number;

		public String getPo_number() {
			return this.po_number;
		}

		public String om_taxable_address_uid;

		public String getOm_taxable_address_uid() {
			return this.om_taxable_address_uid;
		}

		public String inv_invoice_uid;

		public String getInv_invoice_uid() {
			return this.inv_invoice_uid;
		}

		public int record_version;

		public int getRecord_version() {
			return this.record_version;
		}

		public String created_by_user;

		public String getCreated_by_user() {
			return this.created_by_user;
		}

		public java.util.Date created_datetime;

		public java.util.Date getCreated_datetime() {
			return this.created_datetime;
		}

		public String updated_by_user;

		public String getUpdated_by_user() {
			return this.updated_by_user;
		}

		public java.util.Date updated_datetime;

		public java.util.Date getUpdated_datetime() {
			return this.updated_datetime;
		}

		public Boolean is_deleted_flag;

		public Boolean getIs_deleted_flag() {
			return this.is_deleted_flag;
		}

		public String buyer_email;

		public String getBuyer_email() {
			return this.buyer_email;
		}

		public String cost_center;

		public String getCost_center() {
			return this.cost_center;
		}

		public String project_code;

		public String getProject_code() {
			return this.project_code;
		}

		public String status_code;

		public String getStatus_code() {
			return this.status_code;
		}

		public String ar_account_number;

		public String getAr_account_number() {
			return this.ar_account_number;
		}

		public String buyer_first_name;

		public String getBuyer_first_name() {
			return this.buyer_first_name;
		}

		public String buyer_last_name;

		public String getBuyer_last_name() {
			return this.buyer_last_name;
		}

		public String licensee_uid;

		public String getLicensee_uid() {
			return this.licensee_uid;
		}

		public String preferred_iso_language_code;

		public String getPreferred_iso_language_code() {
			return this.preferred_iso_language_code;
		}

		public String billing_approval_user;

		public String getBilling_approval_user() {
			return this.billing_approval_user;
		}

		public java.util.Date billing_approval_date;

		public java.util.Date getBilling_approval_date() {
			return this.billing_approval_date;
		}

		public String om_billing_address_uid;

		public String getOm_billing_address_uid() {
			return this.om_billing_address_uid;
		}

		public String cart_type;

		public String getCart_type() {
			return this.cart_type;
		}

		public String external_id;

		public String getExternal_id() {
			return this.external_id;
		}

		public String external_name;

		public String getExternal_name() {
			return this.external_name;
		}

		public String order_source;

		public String getOrder_source() {
			return this.order_source;
		}

		public String external_order_detail_url;

		public String getExternal_order_detail_url() {
			return this.external_order_detail_url;
		}

		public String invoicing_profile_id;

		public String getInvoicing_profile_id() {
			return this.invoicing_profile_id;
		}

		public String billing_email;

		public String getBilling_email() {
			return this.billing_email;
		}

		public String billing_first_name;

		public String getBilling_first_name() {
			return this.billing_first_name;
		}

		public String billing_last_name;

		public String getBilling_last_name() {
			return this.billing_last_name;
		}

		public String billing_company;

		public String getBilling_company() {
			return this.billing_company;
		}

		public String billing_attention_to;

		public String getBilling_attention_to() {
			return this.billing_attention_to;
		}

		public String ar_account_uid;

		public String getAr_account_uid() {
			return this.ar_account_uid;
		}

		public String buyer_identifiers;

		public String getBuyer_identifiers() {
			return this.buyer_identifiers;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ORDER_ETL_OMS_ETL_NO_PRODUCTS.length) {
					if (length < 1024
							&& commonByteArray_ORDER_ETL_OMS_ETL_NO_PRODUCTS.length == 0) {
						commonByteArray_ORDER_ETL_OMS_ETL_NO_PRODUCTS = new byte[1024];
					} else {
						commonByteArray_ORDER_ETL_OMS_ETL_NO_PRODUCTS = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ORDER_ETL_OMS_ETL_NO_PRODUCTS, 0,
						length);
				strReturn = new String(
						commonByteArray_ORDER_ETL_OMS_ETL_NO_PRODUCTS, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ORDER_ETL_OMS_ETL_NO_PRODUCTS) {

				try {

					int length = 0;

					this.om_order_header_uid = readString(dis);

					this.om_order_payment_uid = readString(dis);

					this.order_number = readString(dis);

					this.order_capture_date = readDate(dis);

					this.buyer_uid = readString(dis);

					this.organization_uid = readString(dis);

					this.organization_name = readString(dis);

					this.org_location_uid = readString(dis);

					this.org_location_country_code = readString(dis);

					this.org_location_name = readString(dis);

					this.channel = readString(dis);

					this.po_number = readString(dis);

					this.om_taxable_address_uid = readString(dis);

					this.inv_invoice_uid = readString(dis);

					this.record_version = dis.readInt();

					this.created_by_user = readString(dis);

					this.created_datetime = readDate(dis);

					this.updated_by_user = readString(dis);

					this.updated_datetime = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.is_deleted_flag = null;
					} else {
						this.is_deleted_flag = dis.readBoolean();
					}

					this.buyer_email = readString(dis);

					this.cost_center = readString(dis);

					this.project_code = readString(dis);

					this.status_code = readString(dis);

					this.ar_account_number = readString(dis);

					this.buyer_first_name = readString(dis);

					this.buyer_last_name = readString(dis);

					this.licensee_uid = readString(dis);

					this.preferred_iso_language_code = readString(dis);

					this.billing_approval_user = readString(dis);

					this.billing_approval_date = readDate(dis);

					this.om_billing_address_uid = readString(dis);

					this.cart_type = readString(dis);

					this.external_id = readString(dis);

					this.external_name = readString(dis);

					this.order_source = readString(dis);

					this.external_order_detail_url = readString(dis);

					this.invoicing_profile_id = readString(dis);

					this.billing_email = readString(dis);

					this.billing_first_name = readString(dis);

					this.billing_last_name = readString(dis);

					this.billing_company = readString(dis);

					this.billing_attention_to = readString(dis);

					this.ar_account_uid = readString(dis);

					this.buyer_identifiers = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.om_order_header_uid, dos);

				// String

				writeString(this.om_order_payment_uid, dos);

				// String

				writeString(this.order_number, dos);

				// java.util.Date

				writeDate(this.order_capture_date, dos);

				// String

				writeString(this.buyer_uid, dos);

				// String

				writeString(this.organization_uid, dos);

				// String

				writeString(this.organization_name, dos);

				// String

				writeString(this.org_location_uid, dos);

				// String

				writeString(this.org_location_country_code, dos);

				// String

				writeString(this.org_location_name, dos);

				// String

				writeString(this.channel, dos);

				// String

				writeString(this.po_number, dos);

				// String

				writeString(this.om_taxable_address_uid, dos);

				// String

				writeString(this.inv_invoice_uid, dos);

				// int

				dos.writeInt(this.record_version);

				// String

				writeString(this.created_by_user, dos);

				// java.util.Date

				writeDate(this.created_datetime, dos);

				// String

				writeString(this.updated_by_user, dos);

				// java.util.Date

				writeDate(this.updated_datetime, dos);

				// Boolean

				if (this.is_deleted_flag == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.is_deleted_flag);
				}

				// String

				writeString(this.buyer_email, dos);

				// String

				writeString(this.cost_center, dos);

				// String

				writeString(this.project_code, dos);

				// String

				writeString(this.status_code, dos);

				// String

				writeString(this.ar_account_number, dos);

				// String

				writeString(this.buyer_first_name, dos);

				// String

				writeString(this.buyer_last_name, dos);

				// String

				writeString(this.licensee_uid, dos);

				// String

				writeString(this.preferred_iso_language_code, dos);

				// String

				writeString(this.billing_approval_user, dos);

				// java.util.Date

				writeDate(this.billing_approval_date, dos);

				// String

				writeString(this.om_billing_address_uid, dos);

				// String

				writeString(this.cart_type, dos);

				// String

				writeString(this.external_id, dos);

				// String

				writeString(this.external_name, dos);

				// String

				writeString(this.order_source, dos);

				// String

				writeString(this.external_order_detail_url, dos);

				// String

				writeString(this.invoicing_profile_id, dos);

				// String

				writeString(this.billing_email, dos);

				// String

				writeString(this.billing_first_name, dos);

				// String

				writeString(this.billing_last_name, dos);

				// String

				writeString(this.billing_company, dos);

				// String

				writeString(this.billing_attention_to, dos);

				// String

				writeString(this.ar_account_uid, dos);

				// String

				writeString(this.buyer_identifiers, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("om_order_header_uid=" + om_order_header_uid);
			sb.append(",om_order_payment_uid=" + om_order_payment_uid);
			sb.append(",order_number=" + order_number);
			sb.append(",order_capture_date="
					+ String.valueOf(order_capture_date));
			sb.append(",buyer_uid=" + buyer_uid);
			sb.append(",organization_uid=" + organization_uid);
			sb.append(",organization_name=" + organization_name);
			sb.append(",org_location_uid=" + org_location_uid);
			sb.append(",org_location_country_code=" + org_location_country_code);
			sb.append(",org_location_name=" + org_location_name);
			sb.append(",channel=" + channel);
			sb.append(",po_number=" + po_number);
			sb.append(",om_taxable_address_uid=" + om_taxable_address_uid);
			sb.append(",inv_invoice_uid=" + inv_invoice_uid);
			sb.append(",record_version=" + String.valueOf(record_version));
			sb.append(",created_by_user=" + created_by_user);
			sb.append(",created_datetime=" + String.valueOf(created_datetime));
			sb.append(",updated_by_user=" + updated_by_user);
			sb.append(",updated_datetime=" + String.valueOf(updated_datetime));
			sb.append(",is_deleted_flag=" + String.valueOf(is_deleted_flag));
			sb.append(",buyer_email=" + buyer_email);
			sb.append(",cost_center=" + cost_center);
			sb.append(",project_code=" + project_code);
			sb.append(",status_code=" + status_code);
			sb.append(",ar_account_number=" + ar_account_number);
			sb.append(",buyer_first_name=" + buyer_first_name);
			sb.append(",buyer_last_name=" + buyer_last_name);
			sb.append(",licensee_uid=" + licensee_uid);
			sb.append(",preferred_iso_language_code="
					+ preferred_iso_language_code);
			sb.append(",billing_approval_user=" + billing_approval_user);
			sb.append(",billing_approval_date="
					+ String.valueOf(billing_approval_date));
			sb.append(",om_billing_address_uid=" + om_billing_address_uid);
			sb.append(",cart_type=" + cart_type);
			sb.append(",external_id=" + external_id);
			sb.append(",external_name=" + external_name);
			sb.append(",order_source=" + order_source);
			sb.append(",external_order_detail_url=" + external_order_detail_url);
			sb.append(",invoicing_profile_id=" + invoicing_profile_id);
			sb.append(",billing_email=" + billing_email);
			sb.append(",billing_first_name=" + billing_first_name);
			sb.append(",billing_last_name=" + billing_last_name);
			sb.append(",billing_company=" + billing_company);
			sb.append(",billing_attention_to=" + billing_attention_to);
			sb.append(",ar_account_uid=" + ar_account_uid);
			sb.append(",buyer_identifiers=" + buyer_identifiers);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row4Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_4Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDBInput_4_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row4Struct row4 = new row4Struct();

				/**
				 * [tDBOutput_4 begin ] start
				 */

				ok_Hash.put("tDBOutput_4", false);
				start_Hash.put("tDBOutput_4", System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tDBOutput_4");
				tStatCatcher_1Process(globalMap);

				talendStats_STATS.addMessage("begin", "tDBOutput_4");
				talendStats_STATSProcess(globalMap);

				currentComponent = "tDBOutput_4";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row4" + iterateId, 0, 0);

					}
				}

				int tos_count_tDBOutput_4 = 0;

				String dbschema_tDBOutput_4 = null;
				dbschema_tDBOutput_4 = context.data_warehouse_order_dwos_schema;

				String tableName_tDBOutput_4 = null;
				if (dbschema_tDBOutput_4 == null
						|| dbschema_tDBOutput_4.trim().length() == 0) {
					tableName_tDBOutput_4 = "dwo_om_order_header";
				} else {
					tableName_tDBOutput_4 = dbschema_tDBOutput_4 + "\".\""
							+ "dwo_om_order_header";
				}

				int nb_line_tDBOutput_4 = 0;
				int nb_line_update_tDBOutput_4 = 0;
				int nb_line_inserted_tDBOutput_4 = 0;
				int nb_line_deleted_tDBOutput_4 = 0;
				int nb_line_rejected_tDBOutput_4 = 0;

				int deletedCount_tDBOutput_4 = 0;
				int updatedCount_tDBOutput_4 = 0;
				int insertedCount_tDBOutput_4 = 0;
				int rejectedCount_tDBOutput_4 = 0;

				boolean whetherReject_tDBOutput_4 = false;

				java.sql.Connection conn_tDBOutput_4 = null;
				String dbUser_tDBOutput_4 = null;

				java.lang.Class.forName("org.postgresql.Driver");
				String url_tDBOutput_4 = "jdbc:postgresql://"
						+ context.data_warehouse_order_dwos_host + ":"
						+ context.data_warehouse_order_dwos_port + "/"
						+ context.data_warehouse_order_dwos_database;
				dbUser_tDBOutput_4 = context.data_warehouse_order_dwos_username;

				final String decryptedPassword_tDBOutput_4 = context.data_warehouse_order_dwos_password;

				String dbPwd_tDBOutput_4 = decryptedPassword_tDBOutput_4;

				conn_tDBOutput_4 = java.sql.DriverManager.getConnection(
						url_tDBOutput_4, dbUser_tDBOutput_4, dbPwd_tDBOutput_4);

				resourceMap.put("conn_tDBOutput_4", conn_tDBOutput_4);
				conn_tDBOutput_4.setAutoCommit(false);
				int commitEvery_tDBOutput_4 = 10000;
				int commitCounter_tDBOutput_4 = 0;

				int batchSize_tDBOutput_4 = 10000;
				int batchSizeCounter_tDBOutput_4 = 0;

				int count_tDBOutput_4 = 0;
				int rsTruncCountNumber_tDBOutput_4 = 0;
				try (java.sql.Statement stmtTruncCount_tDBOutput_4 = conn_tDBOutput_4
						.createStatement()) {
					try (java.sql.ResultSet rsTruncCount_tDBOutput_4 = stmtTruncCount_tDBOutput_4
							.executeQuery("SELECT COUNT(1) FROM \""
									+ tableName_tDBOutput_4 + "\"")) {
						if (rsTruncCount_tDBOutput_4.next()) {
							rsTruncCountNumber_tDBOutput_4 = rsTruncCount_tDBOutput_4
									.getInt(1);
						}
					}
				}
				try (java.sql.Statement stmtTrunc_tDBOutput_4 = conn_tDBOutput_4
						.createStatement()) {
					stmtTrunc_tDBOutput_4.executeUpdate("TRUNCATE TABLE \""
							+ tableName_tDBOutput_4 + "\"");
					deletedCount_tDBOutput_4 += rsTruncCountNumber_tDBOutput_4;
				}
				String insert_tDBOutput_4 = "INSERT INTO \""
						+ tableName_tDBOutput_4
						+ "\" (\"om_order_header_uid\",\"om_order_payment_uid\",\"order_number\",\"order_capture_date\",\"buyer_uid\",\"organization_uid\",\"organization_name\",\"org_location_uid\",\"org_location_country_code\",\"org_location_name\",\"channel\",\"po_number\",\"om_taxable_address_uid\",\"inv_invoice_uid\",\"record_version\",\"created_by_user\",\"created_datetime\",\"updated_by_user\",\"updated_datetime\",\"is_deleted_flag\",\"buyer_email\",\"cost_center\",\"project_code\",\"status_code\",\"ar_account_number\",\"buyer_first_name\",\"buyer_last_name\",\"licensee_uid\",\"preferred_iso_language_code\",\"billing_approval_user\",\"billing_approval_date\",\"om_billing_address_uid\",\"cart_type\",\"external_id\",\"external_name\",\"order_source\",\"external_order_detail_url\",\"invoicing_profile_id\",\"billing_email\",\"billing_first_name\",\"billing_last_name\",\"billing_company\",\"billing_attention_to\",\"ar_account_uid\",\"buyer_identifiers\") VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

				java.sql.PreparedStatement pstmt_tDBOutput_4 = conn_tDBOutput_4
						.prepareStatement(insert_tDBOutput_4);
				resourceMap.put("pstmt_tDBOutput_4", pstmt_tDBOutput_4);

				/**
				 * [tDBOutput_4 begin ] stop
				 */

				/**
				 * [tDBInput_4 begin ] start
				 */

				ok_Hash.put("tDBInput_4", false);
				start_Hash.put("tDBInput_4", System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tDBInput_4");
				tStatCatcher_1Process(globalMap);

				talendStats_STATS.addMessage("begin", "tDBInput_4");
				talendStats_STATSProcess(globalMap);

				currentComponent = "tDBInput_4";

				int tos_count_tDBInput_4 = 0;

				int nb_line_tDBInput_4 = 0;
				java.sql.Connection conn_tDBInput_4 = null;
				conn_tDBInput_4 = (java.sql.Connection) globalMap
						.get("conn_tDBConnection_1");

				java.sql.Statement stmt_tDBInput_4 = conn_tDBInput_4
						.createStatement();
				stmt_tDBInput_4.setFetchSize(1000);

				String dbquery_tDBInput_4 = "SELECT *\nFROM apps.om_order_header";

				globalMap.put("tDBInput_4_QUERY", dbquery_tDBInput_4);
				java.sql.ResultSet rs_tDBInput_4 = null;

				try {
					rs_tDBInput_4 = stmt_tDBInput_4
							.executeQuery(dbquery_tDBInput_4);
					java.sql.ResultSetMetaData rsmd_tDBInput_4 = rs_tDBInput_4
							.getMetaData();
					int colQtyInRs_tDBInput_4 = rsmd_tDBInput_4
							.getColumnCount();

					String tmpContent_tDBInput_4 = null;

					while (rs_tDBInput_4.next()) {
						nb_line_tDBInput_4++;

						if (colQtyInRs_tDBInput_4 < 1) {
							row4.om_order_header_uid = null;
						} else {

							row4.om_order_header_uid = routines.system.JDBCUtil
									.getString(rs_tDBInput_4, 1, false);
						}
						if (colQtyInRs_tDBInput_4 < 2) {
							row4.om_order_payment_uid = null;
						} else {

							row4.om_order_payment_uid = routines.system.JDBCUtil
									.getString(rs_tDBInput_4, 2, false);
						}
						if (colQtyInRs_tDBInput_4 < 3) {
							row4.order_number = null;
						} else {

							row4.order_number = routines.system.JDBCUtil
									.getString(rs_tDBInput_4, 3, false);
						}
						if (colQtyInRs_tDBInput_4 < 4) {
							row4.order_capture_date = null;
						} else {

							row4.order_capture_date = routines.system.JDBCUtil
									.getDate(rs_tDBInput_4, 4);
						}
						if (colQtyInRs_tDBInput_4 < 5) {
							row4.buyer_uid = null;
						} else {

							row4.buyer_uid = routines.system.JDBCUtil
									.getString(rs_tDBInput_4, 5, false);
						}
						if (colQtyInRs_tDBInput_4 < 6) {
							row4.organization_uid = null;
						} else {

							row4.organization_uid = routines.system.JDBCUtil
									.getString(rs_tDBInput_4, 6, false);
						}
						if (colQtyInRs_tDBInput_4 < 7) {
							row4.organization_name = null;
						} else {

							row4.organization_name = routines.system.JDBCUtil
									.getString(rs_tDBInput_4, 7, false);
						}
						if (colQtyInRs_tDBInput_4 < 8) {
							row4.org_location_uid = null;
						} else {

							row4.org_location_uid = routines.system.JDBCUtil
									.getString(rs_tDBInput_4, 8, false);
						}
						if (colQtyInRs_tDBInput_4 < 9) {
							row4.org_location_country_code = null;
						} else {

							row4.org_location_country_code = routines.system.JDBCUtil
									.getString(rs_tDBInput_4, 9, false);
						}
						if (colQtyInRs_tDBInput_4 < 10) {
							row4.org_location_name = null;
						} else {

							row4.org_location_name = routines.system.JDBCUtil
									.getString(rs_tDBInput_4, 10, false);
						}
						if (colQtyInRs_tDBInput_4 < 11) {
							row4.channel = null;
						} else {

							row4.channel = routines.system.JDBCUtil.getString(
									rs_tDBInput_4, 11, false);
						}
						if (colQtyInRs_tDBInput_4 < 12) {
							row4.po_number = null;
						} else {

							row4.po_number = routines.system.JDBCUtil
									.getString(rs_tDBInput_4, 12, false);
						}
						if (colQtyInRs_tDBInput_4 < 13) {
							row4.om_taxable_address_uid = null;
						} else {

							row4.om_taxable_address_uid = routines.system.JDBCUtil
									.getString(rs_tDBInput_4, 13, false);
						}
						if (colQtyInRs_tDBInput_4 < 14) {
							row4.inv_invoice_uid = null;
						} else {

							row4.inv_invoice_uid = routines.system.JDBCUtil
									.getString(rs_tDBInput_4, 14, false);
						}
						if (colQtyInRs_tDBInput_4 < 15) {
							row4.record_version = 0;
						} else {

							if (rs_tDBInput_4.getObject(15) != null) {
								row4.record_version = rs_tDBInput_4.getInt(15);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_4 < 16) {
							row4.created_by_user = null;
						} else {

							row4.created_by_user = routines.system.JDBCUtil
									.getString(rs_tDBInput_4, 16, false);
						}
						if (colQtyInRs_tDBInput_4 < 17) {
							row4.created_datetime = null;
						} else {

							row4.created_datetime = routines.system.JDBCUtil
									.getDate(rs_tDBInput_4, 17);
						}
						if (colQtyInRs_tDBInput_4 < 18) {
							row4.updated_by_user = null;
						} else {

							row4.updated_by_user = routines.system.JDBCUtil
									.getString(rs_tDBInput_4, 18, false);
						}
						if (colQtyInRs_tDBInput_4 < 19) {
							row4.updated_datetime = null;
						} else {

							row4.updated_datetime = routines.system.JDBCUtil
									.getDate(rs_tDBInput_4, 19);
						}
						if (colQtyInRs_tDBInput_4 < 20) {
							row4.is_deleted_flag = null;
						} else {

							if (rs_tDBInput_4.getObject(20) != null) {
								row4.is_deleted_flag = rs_tDBInput_4
										.getBoolean(20);
							} else {
								row4.is_deleted_flag = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 21) {
							row4.buyer_email = null;
						} else {

							row4.buyer_email = routines.system.JDBCUtil
									.getString(rs_tDBInput_4, 21, false);
						}
						if (colQtyInRs_tDBInput_4 < 22) {
							row4.cost_center = null;
						} else {

							row4.cost_center = routines.system.JDBCUtil
									.getString(rs_tDBInput_4, 22, false);
						}
						if (colQtyInRs_tDBInput_4 < 23) {
							row4.project_code = null;
						} else {

							row4.project_code = routines.system.JDBCUtil
									.getString(rs_tDBInput_4, 23, false);
						}
						if (colQtyInRs_tDBInput_4 < 24) {
							row4.status_code = null;
						} else {

							row4.status_code = routines.system.JDBCUtil
									.getString(rs_tDBInput_4, 24, false);
						}
						if (colQtyInRs_tDBInput_4 < 25) {
							row4.ar_account_number = null;
						} else {

							row4.ar_account_number = routines.system.JDBCUtil
									.getString(rs_tDBInput_4, 25, false);
						}
						if (colQtyInRs_tDBInput_4 < 26) {
							row4.buyer_first_name = null;
						} else {

							row4.buyer_first_name = routines.system.JDBCUtil
									.getString(rs_tDBInput_4, 26, false);
						}
						if (colQtyInRs_tDBInput_4 < 27) {
							row4.buyer_last_name = null;
						} else {

							row4.buyer_last_name = routines.system.JDBCUtil
									.getString(rs_tDBInput_4, 27, false);
						}
						if (colQtyInRs_tDBInput_4 < 28) {
							row4.licensee_uid = null;
						} else {

							row4.licensee_uid = routines.system.JDBCUtil
									.getString(rs_tDBInput_4, 28, false);
						}
						if (colQtyInRs_tDBInput_4 < 29) {
							row4.preferred_iso_language_code = null;
						} else {

							row4.preferred_iso_language_code = routines.system.JDBCUtil
									.getString(rs_tDBInput_4, 29, false);
						}
						if (colQtyInRs_tDBInput_4 < 30) {
							row4.billing_approval_user = null;
						} else {

							row4.billing_approval_user = routines.system.JDBCUtil
									.getString(rs_tDBInput_4, 30, false);
						}
						if (colQtyInRs_tDBInput_4 < 31) {
							row4.billing_approval_date = null;
						} else {

							row4.billing_approval_date = routines.system.JDBCUtil
									.getDate(rs_tDBInput_4, 31);
						}
						if (colQtyInRs_tDBInput_4 < 32) {
							row4.om_billing_address_uid = null;
						} else {

							row4.om_billing_address_uid = routines.system.JDBCUtil
									.getString(rs_tDBInput_4, 32, false);
						}
						if (colQtyInRs_tDBInput_4 < 33) {
							row4.cart_type = null;
						} else {

							row4.cart_type = routines.system.JDBCUtil
									.getString(rs_tDBInput_4, 33, false);
						}
						if (colQtyInRs_tDBInput_4 < 34) {
							row4.external_id = null;
						} else {

							row4.external_id = routines.system.JDBCUtil
									.getString(rs_tDBInput_4, 34, false);
						}
						if (colQtyInRs_tDBInput_4 < 35) {
							row4.external_name = null;
						} else {

							row4.external_name = routines.system.JDBCUtil
									.getString(rs_tDBInput_4, 35, false);
						}
						if (colQtyInRs_tDBInput_4 < 36) {
							row4.order_source = null;
						} else {

							row4.order_source = routines.system.JDBCUtil
									.getString(rs_tDBInput_4, 36, false);
						}
						if (colQtyInRs_tDBInput_4 < 37) {
							row4.external_order_detail_url = null;
						} else {

							row4.external_order_detail_url = routines.system.JDBCUtil
									.getString(rs_tDBInput_4, 37, false);
						}
						if (colQtyInRs_tDBInput_4 < 38) {
							row4.invoicing_profile_id = null;
						} else {

							row4.invoicing_profile_id = routines.system.JDBCUtil
									.getString(rs_tDBInput_4, 38, false);
						}
						if (colQtyInRs_tDBInput_4 < 39) {
							row4.billing_email = null;
						} else {

							row4.billing_email = routines.system.JDBCUtil
									.getString(rs_tDBInput_4, 39, false);
						}
						if (colQtyInRs_tDBInput_4 < 40) {
							row4.billing_first_name = null;
						} else {

							row4.billing_first_name = routines.system.JDBCUtil
									.getString(rs_tDBInput_4, 40, false);
						}
						if (colQtyInRs_tDBInput_4 < 41) {
							row4.billing_last_name = null;
						} else {

							row4.billing_last_name = routines.system.JDBCUtil
									.getString(rs_tDBInput_4, 41, false);
						}
						if (colQtyInRs_tDBInput_4 < 42) {
							row4.billing_company = null;
						} else {

							row4.billing_company = routines.system.JDBCUtil
									.getString(rs_tDBInput_4, 42, false);
						}
						if (colQtyInRs_tDBInput_4 < 43) {
							row4.billing_attention_to = null;
						} else {

							row4.billing_attention_to = routines.system.JDBCUtil
									.getString(rs_tDBInput_4, 43, false);
						}
						if (colQtyInRs_tDBInput_4 < 44) {
							row4.ar_account_uid = null;
						} else {

							row4.ar_account_uid = routines.system.JDBCUtil
									.getString(rs_tDBInput_4, 44, false);
						}
						if (colQtyInRs_tDBInput_4 < 45) {
							row4.buyer_identifiers = null;
						} else {

							row4.buyer_identifiers = routines.system.JDBCUtil
									.getString(rs_tDBInput_4, 45, false);
						}

						/**
						 * [tDBInput_4 begin ] stop
						 */

						/**
						 * [tDBInput_4 main ] start
						 */

						currentComponent = "tDBInput_4";

						tos_count_tDBInput_4++;

						/**
						 * [tDBInput_4 main ] stop
						 */

						/**
						 * [tDBInput_4 process_data_begin ] start
						 */

						currentComponent = "tDBInput_4";

						/**
						 * [tDBInput_4 process_data_begin ] stop
						 */

						/**
						 * [tDBOutput_4 main ] start
						 */

						currentComponent = "tDBOutput_4";

						// row4
						// row4

						if (execStat) {
							runStat.updateStatOnConnection("row4" + iterateId,
									1, 1);
						}

						whetherReject_tDBOutput_4 = false;
						if (row4.om_order_header_uid == null) {
							pstmt_tDBOutput_4
									.setNull(1, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_4.setString(1,
									row4.om_order_header_uid);
						}

						if (row4.om_order_payment_uid == null) {
							pstmt_tDBOutput_4
									.setNull(2, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_4.setString(2,
									row4.om_order_payment_uid);
						}

						if (row4.order_number == null) {
							pstmt_tDBOutput_4
									.setNull(3, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_4.setString(3, row4.order_number);
						}

						if (row4.order_capture_date != null) {
							pstmt_tDBOutput_4.setTimestamp(4,
									new java.sql.Timestamp(
											row4.order_capture_date.getTime()));
						} else {
							pstmt_tDBOutput_4.setNull(4,
									java.sql.Types.TIMESTAMP);
						}

						if (row4.buyer_uid == null) {
							pstmt_tDBOutput_4
									.setNull(5, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_4.setString(5, row4.buyer_uid);
						}

						if (row4.organization_uid == null) {
							pstmt_tDBOutput_4
									.setNull(6, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_4.setString(6,
									row4.organization_uid);
						}

						if (row4.organization_name == null) {
							pstmt_tDBOutput_4
									.setNull(7, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_4.setString(7,
									row4.organization_name);
						}

						if (row4.org_location_uid == null) {
							pstmt_tDBOutput_4
									.setNull(8, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_4.setString(8,
									row4.org_location_uid);
						}

						if (row4.org_location_country_code == null) {
							pstmt_tDBOutput_4
									.setNull(9, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_4.setString(9,
									row4.org_location_country_code);
						}

						if (row4.org_location_name == null) {
							pstmt_tDBOutput_4.setNull(10,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_4.setString(10,
									row4.org_location_name);
						}

						if (row4.channel == null) {
							pstmt_tDBOutput_4.setNull(11,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_4.setString(11, row4.channel);
						}

						if (row4.po_number == null) {
							pstmt_tDBOutput_4.setNull(12,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_4.setString(12, row4.po_number);
						}

						if (row4.om_taxable_address_uid == null) {
							pstmt_tDBOutput_4.setNull(13,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_4.setString(13,
									row4.om_taxable_address_uid);
						}

						if (row4.inv_invoice_uid == null) {
							pstmt_tDBOutput_4.setNull(14,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_4.setString(14,
									row4.inv_invoice_uid);
						}

						pstmt_tDBOutput_4.setInt(15, row4.record_version);

						if (row4.created_by_user == null) {
							pstmt_tDBOutput_4.setNull(16,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_4.setString(16,
									row4.created_by_user);
						}

						if (row4.created_datetime != null) {
							pstmt_tDBOutput_4.setTimestamp(17,
									new java.sql.Timestamp(
											row4.created_datetime.getTime()));
						} else {
							pstmt_tDBOutput_4.setNull(17,
									java.sql.Types.TIMESTAMP);
						}

						if (row4.updated_by_user == null) {
							pstmt_tDBOutput_4.setNull(18,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_4.setString(18,
									row4.updated_by_user);
						}

						if (row4.updated_datetime != null) {
							pstmt_tDBOutput_4.setTimestamp(19,
									new java.sql.Timestamp(
											row4.updated_datetime.getTime()));
						} else {
							pstmt_tDBOutput_4.setNull(19,
									java.sql.Types.TIMESTAMP);
						}

						if (row4.is_deleted_flag == null) {
							pstmt_tDBOutput_4.setNull(20,
									java.sql.Types.BOOLEAN);
						} else {
							pstmt_tDBOutput_4.setBoolean(20,
									row4.is_deleted_flag);
						}

						if (row4.buyer_email == null) {
							pstmt_tDBOutput_4.setNull(21,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_4.setString(21, row4.buyer_email);
						}

						if (row4.cost_center == null) {
							pstmt_tDBOutput_4.setNull(22,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_4.setString(22, row4.cost_center);
						}

						if (row4.project_code == null) {
							pstmt_tDBOutput_4.setNull(23,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_4.setString(23, row4.project_code);
						}

						if (row4.status_code == null) {
							pstmt_tDBOutput_4.setNull(24,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_4.setString(24, row4.status_code);
						}

						if (row4.ar_account_number == null) {
							pstmt_tDBOutput_4.setNull(25,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_4.setString(25,
									row4.ar_account_number);
						}

						if (row4.buyer_first_name == null) {
							pstmt_tDBOutput_4.setNull(26,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_4.setString(26,
									row4.buyer_first_name);
						}

						if (row4.buyer_last_name == null) {
							pstmt_tDBOutput_4.setNull(27,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_4.setString(27,
									row4.buyer_last_name);
						}

						if (row4.licensee_uid == null) {
							pstmt_tDBOutput_4.setNull(28,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_4.setString(28, row4.licensee_uid);
						}

						if (row4.preferred_iso_language_code == null) {
							pstmt_tDBOutput_4.setNull(29,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_4.setString(29,
									row4.preferred_iso_language_code);
						}

						if (row4.billing_approval_user == null) {
							pstmt_tDBOutput_4.setNull(30,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_4.setString(30,
									row4.billing_approval_user);
						}

						if (row4.billing_approval_date != null) {
							pstmt_tDBOutput_4.setTimestamp(
									31,
									new java.sql.Timestamp(
											row4.billing_approval_date
													.getTime()));
						} else {
							pstmt_tDBOutput_4.setNull(31,
									java.sql.Types.TIMESTAMP);
						}

						if (row4.om_billing_address_uid == null) {
							pstmt_tDBOutput_4.setNull(32,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_4.setString(32,
									row4.om_billing_address_uid);
						}

						if (row4.cart_type == null) {
							pstmt_tDBOutput_4.setNull(33,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_4.setString(33, row4.cart_type);
						}

						if (row4.external_id == null) {
							pstmt_tDBOutput_4.setNull(34,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_4.setString(34, row4.external_id);
						}

						if (row4.external_name == null) {
							pstmt_tDBOutput_4.setNull(35,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_4.setString(35, row4.external_name);
						}

						if (row4.order_source == null) {
							pstmt_tDBOutput_4.setNull(36,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_4.setString(36, row4.order_source);
						}

						if (row4.external_order_detail_url == null) {
							pstmt_tDBOutput_4.setNull(37,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_4.setString(37,
									row4.external_order_detail_url);
						}

						if (row4.invoicing_profile_id == null) {
							pstmt_tDBOutput_4.setNull(38,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_4.setString(38,
									row4.invoicing_profile_id);
						}

						if (row4.billing_email == null) {
							pstmt_tDBOutput_4.setNull(39,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_4.setString(39, row4.billing_email);
						}

						if (row4.billing_first_name == null) {
							pstmt_tDBOutput_4.setNull(40,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_4.setString(40,
									row4.billing_first_name);
						}

						if (row4.billing_last_name == null) {
							pstmt_tDBOutput_4.setNull(41,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_4.setString(41,
									row4.billing_last_name);
						}

						if (row4.billing_company == null) {
							pstmt_tDBOutput_4.setNull(42,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_4.setString(42,
									row4.billing_company);
						}

						if (row4.billing_attention_to == null) {
							pstmt_tDBOutput_4.setNull(43,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_4.setString(43,
									row4.billing_attention_to);
						}

						if (row4.ar_account_uid == null) {
							pstmt_tDBOutput_4.setNull(44,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_4
									.setString(44, row4.ar_account_uid);
						}

						if (row4.buyer_identifiers == null) {
							pstmt_tDBOutput_4.setNull(45,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_4.setString(45,
									row4.buyer_identifiers);
						}

						pstmt_tDBOutput_4.addBatch();
						nb_line_tDBOutput_4++;

						batchSizeCounter_tDBOutput_4++;

						if (!whetherReject_tDBOutput_4) {
						}
						if ((batchSize_tDBOutput_4 > 0)
								&& (batchSize_tDBOutput_4 <= batchSizeCounter_tDBOutput_4)) {
							try {
								int countSum_tDBOutput_4 = 0;

								for (int countEach_tDBOutput_4 : pstmt_tDBOutput_4
										.executeBatch()) {
									countSum_tDBOutput_4 += (countEach_tDBOutput_4 < 0 ? 0
											: countEach_tDBOutput_4);
								}

								insertedCount_tDBOutput_4 += countSum_tDBOutput_4;

								batchSizeCounter_tDBOutput_4 = 0;
							} catch (java.sql.BatchUpdateException e_tDBOutput_4) {
								java.sql.SQLException ne_tDBOutput_4 = e_tDBOutput_4
										.getNextException(), sqle_tDBOutput_4 = null;
								String errormessage_tDBOutput_4;
								if (ne_tDBOutput_4 != null) {
									// build new exception to provide the
									// original cause
									sqle_tDBOutput_4 = new java.sql.SQLException(
											e_tDBOutput_4.getMessage()
													+ "\ncaused by: "
													+ ne_tDBOutput_4
															.getMessage(),
											ne_tDBOutput_4.getSQLState(),
											ne_tDBOutput_4.getErrorCode(),
											ne_tDBOutput_4);
									errormessage_tDBOutput_4 = sqle_tDBOutput_4
											.getMessage();
								} else {
									errormessage_tDBOutput_4 = e_tDBOutput_4
											.getMessage();
								}

								int countSum_tDBOutput_4 = 0;
								for (int countEach_tDBOutput_4 : e_tDBOutput_4
										.getUpdateCounts()) {
									countSum_tDBOutput_4 += (countEach_tDBOutput_4 < 0 ? 0
											: countEach_tDBOutput_4);
								}

								insertedCount_tDBOutput_4 += countSum_tDBOutput_4;

								System.err.println(errormessage_tDBOutput_4);

							}
						}

						commitCounter_tDBOutput_4++;
						if (commitEvery_tDBOutput_4 <= commitCounter_tDBOutput_4) {
							if ((batchSize_tDBOutput_4 > 0)
									&& (batchSizeCounter_tDBOutput_4 > 0)) {
								try {
									int countSum_tDBOutput_4 = 0;

									for (int countEach_tDBOutput_4 : pstmt_tDBOutput_4
											.executeBatch()) {
										countSum_tDBOutput_4 += (countEach_tDBOutput_4 < 0 ? 0
												: countEach_tDBOutput_4);
									}

									insertedCount_tDBOutput_4 += countSum_tDBOutput_4;

									batchSizeCounter_tDBOutput_4 = 0;
								} catch (java.sql.BatchUpdateException e_tDBOutput_4) {
									java.sql.SQLException ne_tDBOutput_4 = e_tDBOutput_4
											.getNextException(), sqle_tDBOutput_4 = null;
									String errormessage_tDBOutput_4;
									if (ne_tDBOutput_4 != null) {
										// build new exception to provide the
										// original cause
										sqle_tDBOutput_4 = new java.sql.SQLException(
												e_tDBOutput_4.getMessage()
														+ "\ncaused by: "
														+ ne_tDBOutput_4
																.getMessage(),
												ne_tDBOutput_4.getSQLState(),
												ne_tDBOutput_4.getErrorCode(),
												ne_tDBOutput_4);
										errormessage_tDBOutput_4 = sqle_tDBOutput_4
												.getMessage();
									} else {
										errormessage_tDBOutput_4 = e_tDBOutput_4
												.getMessage();
									}

									int countSum_tDBOutput_4 = 0;
									for (int countEach_tDBOutput_4 : e_tDBOutput_4
											.getUpdateCounts()) {
										countSum_tDBOutput_4 += (countEach_tDBOutput_4 < 0 ? 0
												: countEach_tDBOutput_4);
									}

									insertedCount_tDBOutput_4 += countSum_tDBOutput_4;

									System.err
											.println(errormessage_tDBOutput_4);

								}
							}
							conn_tDBOutput_4.commit();

							commitCounter_tDBOutput_4 = 0;
						}

						tos_count_tDBOutput_4++;

						/**
						 * [tDBOutput_4 main ] stop
						 */

						/**
						 * [tDBOutput_4 process_data_begin ] start
						 */

						currentComponent = "tDBOutput_4";

						/**
						 * [tDBOutput_4 process_data_begin ] stop
						 */

						/**
						 * [tDBOutput_4 process_data_end ] start
						 */

						currentComponent = "tDBOutput_4";

						/**
						 * [tDBOutput_4 process_data_end ] stop
						 */

						/**
						 * [tDBInput_4 process_data_end ] start
						 */

						currentComponent = "tDBInput_4";

						/**
						 * [tDBInput_4 process_data_end ] stop
						 */

						/**
						 * [tDBInput_4 end ] start
						 */

						currentComponent = "tDBInput_4";

					}
				} finally {
					if (rs_tDBInput_4 != null) {
						rs_tDBInput_4.close();
					}
					if (stmt_tDBInput_4 != null) {
						stmt_tDBInput_4.close();
					}
				}
				globalMap.put("tDBInput_4_NB_LINE", nb_line_tDBInput_4);

				ok_Hash.put("tDBInput_4", true);
				end_Hash.put("tDBInput_4", System.currentTimeMillis());

				tStatCatcher_1.addMessage(
						"end",
						"tDBInput_4",
						end_Hash.get("tDBInput_4")
								- start_Hash.get("tDBInput_4"));
				tStatCatcher_1Process(globalMap);
				talendStats_STATS.addMessage(
						"end",
						"tDBInput_4",
						end_Hash.get("tDBInput_4")
								- start_Hash.get("tDBInput_4"));
				talendStats_STATSProcess(globalMap);

				/**
				 * [tDBInput_4 end ] stop
				 */

				/**
				 * [tDBOutput_4 end ] start
				 */

				currentComponent = "tDBOutput_4";

				try {
					int countSum_tDBOutput_4 = 0;
					if (pstmt_tDBOutput_4 != null
							&& batchSizeCounter_tDBOutput_4 > 0) {

						for (int countEach_tDBOutput_4 : pstmt_tDBOutput_4
								.executeBatch()) {
							countSum_tDBOutput_4 += (countEach_tDBOutput_4 < 0 ? 0
									: countEach_tDBOutput_4);
						}

					}

					insertedCount_tDBOutput_4 += countSum_tDBOutput_4;

				} catch (java.sql.BatchUpdateException e_tDBOutput_4) {
					java.sql.SQLException ne_tDBOutput_4 = e_tDBOutput_4
							.getNextException(), sqle_tDBOutput_4 = null;
					String errormessage_tDBOutput_4;
					if (ne_tDBOutput_4 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_4 = new java.sql.SQLException(
								e_tDBOutput_4.getMessage() + "\ncaused by: "
										+ ne_tDBOutput_4.getMessage(),
								ne_tDBOutput_4.getSQLState(),
								ne_tDBOutput_4.getErrorCode(), ne_tDBOutput_4);
						errormessage_tDBOutput_4 = sqle_tDBOutput_4
								.getMessage();
					} else {
						errormessage_tDBOutput_4 = e_tDBOutput_4.getMessage();
					}

					int countSum_tDBOutput_4 = 0;
					for (int countEach_tDBOutput_4 : e_tDBOutput_4
							.getUpdateCounts()) {
						countSum_tDBOutput_4 += (countEach_tDBOutput_4 < 0 ? 0
								: countEach_tDBOutput_4);
					}

					insertedCount_tDBOutput_4 += countSum_tDBOutput_4;

					System.err.println(errormessage_tDBOutput_4);

				}

				if (pstmt_tDBOutput_4 != null) {

					pstmt_tDBOutput_4.close();
					resourceMap.remove("pstmt_tDBOutput_4");
				}
				resourceMap.put("statementClosed_tDBOutput_4", true);

				conn_tDBOutput_4.commit();

				conn_tDBOutput_4.close();

				resourceMap.put("finish_tDBOutput_4", true);

				nb_line_deleted_tDBOutput_4 = nb_line_deleted_tDBOutput_4
						+ deletedCount_tDBOutput_4;
				nb_line_update_tDBOutput_4 = nb_line_update_tDBOutput_4
						+ updatedCount_tDBOutput_4;
				nb_line_inserted_tDBOutput_4 = nb_line_inserted_tDBOutput_4
						+ insertedCount_tDBOutput_4;
				nb_line_rejected_tDBOutput_4 = nb_line_rejected_tDBOutput_4
						+ rejectedCount_tDBOutput_4;

				globalMap.put("tDBOutput_4_NB_LINE", nb_line_tDBOutput_4);
				globalMap.put("tDBOutput_4_NB_LINE_UPDATED",
						nb_line_update_tDBOutput_4);
				globalMap.put("tDBOutput_4_NB_LINE_INSERTED",
						nb_line_inserted_tDBOutput_4);
				globalMap.put("tDBOutput_4_NB_LINE_DELETED",
						nb_line_deleted_tDBOutput_4);
				globalMap.put("tDBOutput_4_NB_LINE_REJECTED",
						nb_line_rejected_tDBOutput_4);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row4" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tDBOutput_4", true);
				end_Hash.put("tDBOutput_4", System.currentTimeMillis());

				tStatCatcher_1.addMessage(
						"end",
						"tDBOutput_4",
						end_Hash.get("tDBOutput_4")
								- start_Hash.get("tDBOutput_4"));
				tStatCatcher_1Process(globalMap);
				talendStats_STATS.addMessage(
						"end",
						"tDBOutput_4",
						end_Hash.get("tDBOutput_4")
								- start_Hash.get("tDBOutput_4"));
				talendStats_STATSProcess(globalMap);
				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk3", 0, "ok");
				}
				tDBInput_12Process(globalMap);

				/**
				 * [tDBOutput_4 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_4 finally ] start
				 */

				currentComponent = "tDBInput_4";

				/**
				 * [tDBInput_4 finally ] stop
				 */

				/**
				 * [tDBOutput_4 finally ] start
				 */

				currentComponent = "tDBOutput_4";

				try {
					if (resourceMap.get("statementClosed_tDBOutput_4") == null) {
						java.sql.PreparedStatement pstmtToClose_tDBOutput_4 = null;
						if ((pstmtToClose_tDBOutput_4 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmt_tDBOutput_4")) != null) {
							pstmtToClose_tDBOutput_4.close();
						}
					}
				} finally {
					if (resourceMap.get("finish_tDBOutput_4") == null) {
						java.sql.Connection ctn_tDBOutput_4 = null;
						if ((ctn_tDBOutput_4 = (java.sql.Connection) resourceMap
								.get("conn_tDBOutput_4")) != null) {
							try {
								ctn_tDBOutput_4.close();
							} catch (java.sql.SQLException sqlEx_tDBOutput_4) {
								String errorMessage_tDBOutput_4 = "failed to close the connection in tDBOutput_4 :"
										+ sqlEx_tDBOutput_4.getMessage();
								System.err.println(errorMessage_tDBOutput_4);
							}
						}
					}
				}

				/**
				 * [tDBOutput_4 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_4_SUBPROCESS_STATE", 1);
	}

	public static class row12Struct implements
			routines.system.IPersistableRow<row12Struct> {
		final static byte[] commonByteArrayLock_ORDER_ETL_OMS_ETL_NO_PRODUCTS = new byte[0];
		static byte[] commonByteArray_ORDER_ETL_OMS_ETL_NO_PRODUCTS = new byte[0];

		public Long dwo_order_header_dimension_uid;

		public Long getDwo_order_header_dimension_uid() {
			return this.dwo_order_header_dimension_uid;
		}

		public String source_system_order_header_uid;

		public String getSource_system_order_header_uid() {
			return this.source_system_order_header_uid;
		}

		public String order_number;

		public String getOrder_number() {
			return this.order_number;
		}

		public String licensee_oracle_party_number;

		public String getLicensee_oracle_party_number() {
			return this.licensee_oracle_party_number;
		}

		public java.util.Date order_date;

		public java.util.Date getOrder_date() {
			return this.order_date;
		}

		public String order_channel;

		public String getOrder_channel() {
			return this.order_channel;
		}

		public String organization_name;

		public String getOrganization_name() {
			return this.organization_name;
		}

		public String organization_location_country_code;

		public String getOrganization_location_country_code() {
			return this.organization_location_country_code;
		}

		public String organization_location_name;

		public String getOrganization_location_name() {
			return this.organization_location_name;
		}

		public String taxable_city;

		public String getTaxable_city() {
			return this.taxable_city;
		}

		public String taxable_region;

		public String getTaxable_region() {
			return this.taxable_region;
		}

		public String taxable_postal_code;

		public String getTaxable_postal_code() {
			return this.taxable_postal_code;
		}

		public String taxable_country;

		public String getTaxable_country() {
			return this.taxable_country;
		}

		public String order_invoice_uid;

		public String getOrder_invoice_uid() {
			return this.order_invoice_uid;
		}

		public String order_source;

		public String getOrder_source() {
			return this.order_source;
		}

		public java.util.Date created_datetime;

		public java.util.Date getCreated_datetime() {
			return this.created_datetime;
		}

		public String created_by_user;

		public String getCreated_by_user() {
			return this.created_by_user;
		}

		public java.util.Date updated_datetime;

		public java.util.Date getUpdated_datetime() {
			return this.updated_datetime;
		}

		public String updated_by_user;

		public String getUpdated_by_user() {
			return this.updated_by_user;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ORDER_ETL_OMS_ETL_NO_PRODUCTS.length) {
					if (length < 1024
							&& commonByteArray_ORDER_ETL_OMS_ETL_NO_PRODUCTS.length == 0) {
						commonByteArray_ORDER_ETL_OMS_ETL_NO_PRODUCTS = new byte[1024];
					} else {
						commonByteArray_ORDER_ETL_OMS_ETL_NO_PRODUCTS = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ORDER_ETL_OMS_ETL_NO_PRODUCTS, 0,
						length);
				strReturn = new String(
						commonByteArray_ORDER_ETL_OMS_ETL_NO_PRODUCTS, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ORDER_ETL_OMS_ETL_NO_PRODUCTS) {

				try {

					int length = 0;

					length = dis.readByte();
					if (length == -1) {
						this.dwo_order_header_dimension_uid = null;
					} else {
						this.dwo_order_header_dimension_uid = dis.readLong();
					}

					this.source_system_order_header_uid = readString(dis);

					this.order_number = readString(dis);

					this.licensee_oracle_party_number = readString(dis);

					this.order_date = readDate(dis);

					this.order_channel = readString(dis);

					this.organization_name = readString(dis);

					this.organization_location_country_code = readString(dis);

					this.organization_location_name = readString(dis);

					this.taxable_city = readString(dis);

					this.taxable_region = readString(dis);

					this.taxable_postal_code = readString(dis);

					this.taxable_country = readString(dis);

					this.order_invoice_uid = readString(dis);

					this.order_source = readString(dis);

					this.created_datetime = readDate(dis);

					this.created_by_user = readString(dis);

					this.updated_datetime = readDate(dis);

					this.updated_by_user = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Long

				if (this.dwo_order_header_dimension_uid == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.dwo_order_header_dimension_uid);
				}

				// String

				writeString(this.source_system_order_header_uid, dos);

				// String

				writeString(this.order_number, dos);

				// String

				writeString(this.licensee_oracle_party_number, dos);

				// java.util.Date

				writeDate(this.order_date, dos);

				// String

				writeString(this.order_channel, dos);

				// String

				writeString(this.organization_name, dos);

				// String

				writeString(this.organization_location_country_code, dos);

				// String

				writeString(this.organization_location_name, dos);

				// String

				writeString(this.taxable_city, dos);

				// String

				writeString(this.taxable_region, dos);

				// String

				writeString(this.taxable_postal_code, dos);

				// String

				writeString(this.taxable_country, dos);

				// String

				writeString(this.order_invoice_uid, dos);

				// String

				writeString(this.order_source, dos);

				// java.util.Date

				writeDate(this.created_datetime, dos);

				// String

				writeString(this.created_by_user, dos);

				// java.util.Date

				writeDate(this.updated_datetime, dos);

				// String

				writeString(this.updated_by_user, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("dwo_order_header_dimension_uid="
					+ String.valueOf(dwo_order_header_dimension_uid));
			sb.append(",source_system_order_header_uid="
					+ source_system_order_header_uid);
			sb.append(",order_number=" + order_number);
			sb.append(",licensee_oracle_party_number="
					+ licensee_oracle_party_number);
			sb.append(",order_date=" + String.valueOf(order_date));
			sb.append(",order_channel=" + order_channel);
			sb.append(",organization_name=" + organization_name);
			sb.append(",organization_location_country_code="
					+ organization_location_country_code);
			sb.append(",organization_location_name="
					+ organization_location_name);
			sb.append(",taxable_city=" + taxable_city);
			sb.append(",taxable_region=" + taxable_region);
			sb.append(",taxable_postal_code=" + taxable_postal_code);
			sb.append(",taxable_country=" + taxable_country);
			sb.append(",order_invoice_uid=" + order_invoice_uid);
			sb.append(",order_source=" + order_source);
			sb.append(",created_datetime=" + String.valueOf(created_datetime));
			sb.append(",created_by_user=" + created_by_user);
			sb.append(",updated_datetime=" + String.valueOf(updated_datetime));
			sb.append(",updated_by_user=" + updated_by_user);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row12Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_12Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDBInput_12_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row12Struct row12 = new row12Struct();

				/**
				 * [tDBOutput_12 begin ] start
				 */

				ok_Hash.put("tDBOutput_12", false);
				start_Hash.put("tDBOutput_12", System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tDBOutput_12");
				tStatCatcher_1Process(globalMap);

				talendStats_STATS.addMessage("begin", "tDBOutput_12");
				talendStats_STATSProcess(globalMap);

				currentComponent = "tDBOutput_12";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row12" + iterateId, 0,
								0);

					}
				}

				int tos_count_tDBOutput_12 = 0;

				String dbschema_tDBOutput_12 = null;
				dbschema_tDBOutput_12 = context.data_warehouse_order_dwos_schema;

				String tableName_tDBOutput_12 = null;
				if (dbschema_tDBOutput_12 == null
						|| dbschema_tDBOutput_12.trim().length() == 0) {
					tableName_tDBOutput_12 = "dwo_order_header_dimension";
				} else {
					tableName_tDBOutput_12 = dbschema_tDBOutput_12 + "\".\""
							+ "dwo_order_header_dimension";
				}

				int nb_line_tDBOutput_12 = 0;
				int nb_line_update_tDBOutput_12 = 0;
				int nb_line_inserted_tDBOutput_12 = 0;
				int nb_line_deleted_tDBOutput_12 = 0;
				int nb_line_rejected_tDBOutput_12 = 0;

				int deletedCount_tDBOutput_12 = 0;
				int updatedCount_tDBOutput_12 = 0;
				int insertedCount_tDBOutput_12 = 0;
				int rejectedCount_tDBOutput_12 = 0;

				boolean whetherReject_tDBOutput_12 = false;

				java.sql.Connection conn_tDBOutput_12 = null;
				String dbUser_tDBOutput_12 = null;

				java.lang.Class.forName("org.postgresql.Driver");
				String url_tDBOutput_12 = "jdbc:postgresql://"
						+ context.data_warehouse_order_dwos_host + ":"
						+ context.data_warehouse_order_dwos_port + "/"
						+ context.data_warehouse_order_dwos_database;
				dbUser_tDBOutput_12 = context.data_warehouse_order_dwos_username;

				final String decryptedPassword_tDBOutput_12 = context.data_warehouse_order_dwos_password;

				String dbPwd_tDBOutput_12 = decryptedPassword_tDBOutput_12;

				conn_tDBOutput_12 = java.sql.DriverManager.getConnection(
						url_tDBOutput_12, dbUser_tDBOutput_12,
						dbPwd_tDBOutput_12);

				resourceMap.put("conn_tDBOutput_12", conn_tDBOutput_12);
				conn_tDBOutput_12.setAutoCommit(false);
				int commitEvery_tDBOutput_12 = 10000;
				int commitCounter_tDBOutput_12 = 0;

				int batchSize_tDBOutput_12 = 10000;
				int batchSizeCounter_tDBOutput_12 = 0;

				int count_tDBOutput_12 = 0;
				String insert_tDBOutput_12 = "INSERT INTO \""
						+ tableName_tDBOutput_12
						+ "\" (\"dwo_order_header_dimension_uid\",\"source_system_order_header_uid\",\"order_number\",\"licensee_oracle_party_number\",\"order_date\",\"order_channel\",\"organization_name\",\"organization_location_country_code\",\"organization_location_name\",\"taxable_city\",\"taxable_region\",\"taxable_postal_code\",\"taxable_country\",\"order_invoice_uid\",\"order_source\",\"created_datetime\",\"created_by_user\",\"updated_datetime\",\"updated_by_user\") VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

				java.sql.PreparedStatement pstmt_tDBOutput_12 = conn_tDBOutput_12
						.prepareStatement(insert_tDBOutput_12);
				resourceMap.put("pstmt_tDBOutput_12", pstmt_tDBOutput_12);

				/**
				 * [tDBOutput_12 begin ] stop
				 */

				/**
				 * [tDBInput_12 begin ] start
				 */

				ok_Hash.put("tDBInput_12", false);
				start_Hash.put("tDBInput_12", System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tDBInput_12");
				tStatCatcher_1Process(globalMap);

				talendStats_STATS.addMessage("begin", "tDBInput_12");
				talendStats_STATSProcess(globalMap);

				currentComponent = "tDBInput_12";

				int tos_count_tDBInput_12 = 0;

				int nb_line_tDBInput_12 = 0;
				java.sql.Connection conn_tDBInput_12 = null;
				String driverClass_tDBInput_12 = "org.postgresql.Driver";
				java.lang.Class.forName(driverClass_tDBInput_12);
				String dbUser_tDBInput_12 = context.data_warehouse_order_dwos_username;

				final String decryptedPassword_tDBInput_12 = context.data_warehouse_order_dwos_password;

				String dbPwd_tDBInput_12 = decryptedPassword_tDBInput_12;

				String url_tDBInput_12 = "jdbc:postgresql://"
						+ context.data_warehouse_order_dwos_host + ":"
						+ context.data_warehouse_order_dwos_port + "/"
						+ context.data_warehouse_order_dwos_database;

				conn_tDBInput_12 = java.sql.DriverManager.getConnection(
						url_tDBInput_12, dbUser_tDBInput_12, dbPwd_tDBInput_12);

				conn_tDBInput_12.setAutoCommit(false);

				java.sql.Statement stmt_tDBInput_12 = conn_tDBInput_12
						.createStatement();
				stmt_tDBInput_12.setFetchSize(1000);

				String dbquery_tDBInput_12 = "SELECT nextval('staging.order_header_dimension_seq') as dwo_order_header_dimension_uid,\n        oh.om_order_header_uid "
						+ "as source_system_order_header_uid,\n        oh.order_number as order_number,\n        oh.ar_account_uid as licensee_oracle"
						+ "_party_number,\n        oh.order_capture_date as order_date,\n        oh.channel as order_channel,\n        oh.organization"
						+ "_name as organization_name,\n        oh.org_location_country_code as organization_location_country_code,\n        oh.org_l"
						+ "ocation_name as organization_location_name,\n        oa.city as taxable_city,\n        oa.region as taxable_region,\n      "
						+ "  oa.postal_code as taxable_postal_code,\n        oa.country as taxable_country,\n        oh.inv_invoice_uid as order_invo"
						+ "ice_uid,\n        oh.order_source as order_source,\n        oh.created_datetime as created_datetime,\n        oh.created_by"
						+ "_user as created_by_user,\n        oh.updated_datetime as updated_datetime,\n        oh.updated_by_user as updated_by_user"
						+ "\nFROM staging.dwo_om_order_header oh\n   join staging.dwo_om_address oa on oh.om_taxable_address_uid = oa.om_address_uid";

				globalMap.put("tDBInput_12_QUERY", dbquery_tDBInput_12);
				java.sql.ResultSet rs_tDBInput_12 = null;

				try {
					rs_tDBInput_12 = stmt_tDBInput_12
							.executeQuery(dbquery_tDBInput_12);
					java.sql.ResultSetMetaData rsmd_tDBInput_12 = rs_tDBInput_12
							.getMetaData();
					int colQtyInRs_tDBInput_12 = rsmd_tDBInput_12
							.getColumnCount();

					String tmpContent_tDBInput_12 = null;

					while (rs_tDBInput_12.next()) {
						nb_line_tDBInput_12++;

						if (colQtyInRs_tDBInput_12 < 1) {
							row12.dwo_order_header_dimension_uid = null;
						} else {

							if (rs_tDBInput_12.getObject(1) != null) {
								row12.dwo_order_header_dimension_uid = rs_tDBInput_12
										.getLong(1);
							} else {
								row12.dwo_order_header_dimension_uid = null;
							}
						}
						if (colQtyInRs_tDBInput_12 < 2) {
							row12.source_system_order_header_uid = null;
						} else {

							row12.source_system_order_header_uid = routines.system.JDBCUtil
									.getString(rs_tDBInput_12, 2, false);
						}
						if (colQtyInRs_tDBInput_12 < 3) {
							row12.order_number = null;
						} else {

							row12.order_number = routines.system.JDBCUtil
									.getString(rs_tDBInput_12, 3, false);
						}
						if (colQtyInRs_tDBInput_12 < 4) {
							row12.licensee_oracle_party_number = null;
						} else {

							row12.licensee_oracle_party_number = routines.system.JDBCUtil
									.getString(rs_tDBInput_12, 4, false);
						}
						if (colQtyInRs_tDBInput_12 < 5) {
							row12.order_date = null;
						} else {

							row12.order_date = routines.system.JDBCUtil
									.getDate(rs_tDBInput_12, 5);
						}
						if (colQtyInRs_tDBInput_12 < 6) {
							row12.order_channel = null;
						} else {

							row12.order_channel = routines.system.JDBCUtil
									.getString(rs_tDBInput_12, 6, false);
						}
						if (colQtyInRs_tDBInput_12 < 7) {
							row12.organization_name = null;
						} else {

							row12.organization_name = routines.system.JDBCUtil
									.getString(rs_tDBInput_12, 7, false);
						}
						if (colQtyInRs_tDBInput_12 < 8) {
							row12.organization_location_country_code = null;
						} else {

							row12.organization_location_country_code = routines.system.JDBCUtil
									.getString(rs_tDBInput_12, 8, false);
						}
						if (colQtyInRs_tDBInput_12 < 9) {
							row12.organization_location_name = null;
						} else {

							row12.organization_location_name = routines.system.JDBCUtil
									.getString(rs_tDBInput_12, 9, false);
						}
						if (colQtyInRs_tDBInput_12 < 10) {
							row12.taxable_city = null;
						} else {

							row12.taxable_city = routines.system.JDBCUtil
									.getString(rs_tDBInput_12, 10, false);
						}
						if (colQtyInRs_tDBInput_12 < 11) {
							row12.taxable_region = null;
						} else {

							row12.taxable_region = routines.system.JDBCUtil
									.getString(rs_tDBInput_12, 11, false);
						}
						if (colQtyInRs_tDBInput_12 < 12) {
							row12.taxable_postal_code = null;
						} else {

							row12.taxable_postal_code = routines.system.JDBCUtil
									.getString(rs_tDBInput_12, 12, false);
						}
						if (colQtyInRs_tDBInput_12 < 13) {
							row12.taxable_country = null;
						} else {

							row12.taxable_country = routines.system.JDBCUtil
									.getString(rs_tDBInput_12, 13, false);
						}
						if (colQtyInRs_tDBInput_12 < 14) {
							row12.order_invoice_uid = null;
						} else {

							row12.order_invoice_uid = routines.system.JDBCUtil
									.getString(rs_tDBInput_12, 14, false);
						}
						if (colQtyInRs_tDBInput_12 < 15) {
							row12.order_source = null;
						} else {

							row12.order_source = routines.system.JDBCUtil
									.getString(rs_tDBInput_12, 15, false);
						}
						if (colQtyInRs_tDBInput_12 < 16) {
							row12.created_datetime = null;
						} else {

							row12.created_datetime = routines.system.JDBCUtil
									.getDate(rs_tDBInput_12, 16);
						}
						if (colQtyInRs_tDBInput_12 < 17) {
							row12.created_by_user = null;
						} else {

							row12.created_by_user = routines.system.JDBCUtil
									.getString(rs_tDBInput_12, 17, false);
						}
						if (colQtyInRs_tDBInput_12 < 18) {
							row12.updated_datetime = null;
						} else {

							row12.updated_datetime = routines.system.JDBCUtil
									.getDate(rs_tDBInput_12, 18);
						}
						if (colQtyInRs_tDBInput_12 < 19) {
							row12.updated_by_user = null;
						} else {

							row12.updated_by_user = routines.system.JDBCUtil
									.getString(rs_tDBInput_12, 19, false);
						}

						/**
						 * [tDBInput_12 begin ] stop
						 */

						/**
						 * [tDBInput_12 main ] start
						 */

						currentComponent = "tDBInput_12";

						tos_count_tDBInput_12++;

						/**
						 * [tDBInput_12 main ] stop
						 */

						/**
						 * [tDBInput_12 process_data_begin ] start
						 */

						currentComponent = "tDBInput_12";

						/**
						 * [tDBInput_12 process_data_begin ] stop
						 */

						/**
						 * [tDBOutput_12 main ] start
						 */

						currentComponent = "tDBOutput_12";

						// row12
						// row12

						if (execStat) {
							runStat.updateStatOnConnection("row12" + iterateId,
									1, 1);
						}

						whetherReject_tDBOutput_12 = false;
						if (row12.dwo_order_header_dimension_uid == null) {
							pstmt_tDBOutput_12.setNull(1,
									java.sql.Types.INTEGER);
						} else {
							pstmt_tDBOutput_12.setLong(1,
									row12.dwo_order_header_dimension_uid);
						}

						if (row12.source_system_order_header_uid == null) {
							pstmt_tDBOutput_12.setNull(2,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_12.setString(2,
									row12.source_system_order_header_uid);
						}

						if (row12.order_number == null) {
							pstmt_tDBOutput_12.setNull(3,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_12.setString(3, row12.order_number);
						}

						if (row12.licensee_oracle_party_number == null) {
							pstmt_tDBOutput_12.setNull(4,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_12.setString(4,
									row12.licensee_oracle_party_number);
						}

						if (row12.order_date != null) {
							pstmt_tDBOutput_12.setTimestamp(
									5,
									new java.sql.Timestamp(row12.order_date
											.getTime()));
						} else {
							pstmt_tDBOutput_12.setNull(5,
									java.sql.Types.TIMESTAMP);
						}

						if (row12.order_channel == null) {
							pstmt_tDBOutput_12.setNull(6,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_12
									.setString(6, row12.order_channel);
						}

						if (row12.organization_name == null) {
							pstmt_tDBOutput_12.setNull(7,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_12.setString(7,
									row12.organization_name);
						}

						if (row12.organization_location_country_code == null) {
							pstmt_tDBOutput_12.setNull(8,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_12.setString(8,
									row12.organization_location_country_code);
						}

						if (row12.organization_location_name == null) {
							pstmt_tDBOutput_12.setNull(9,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_12.setString(9,
									row12.organization_location_name);
						}

						if (row12.taxable_city == null) {
							pstmt_tDBOutput_12.setNull(10,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_12
									.setString(10, row12.taxable_city);
						}

						if (row12.taxable_region == null) {
							pstmt_tDBOutput_12.setNull(11,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_12.setString(11,
									row12.taxable_region);
						}

						if (row12.taxable_postal_code == null) {
							pstmt_tDBOutput_12.setNull(12,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_12.setString(12,
									row12.taxable_postal_code);
						}

						if (row12.taxable_country == null) {
							pstmt_tDBOutput_12.setNull(13,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_12.setString(13,
									row12.taxable_country);
						}

						if (row12.order_invoice_uid == null) {
							pstmt_tDBOutput_12.setNull(14,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_12.setString(14,
									row12.order_invoice_uid);
						}

						if (row12.order_source == null) {
							pstmt_tDBOutput_12.setNull(15,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_12
									.setString(15, row12.order_source);
						}

						if (row12.created_datetime != null) {
							pstmt_tDBOutput_12.setTimestamp(16,
									new java.sql.Timestamp(
											row12.created_datetime.getTime()));
						} else {
							pstmt_tDBOutput_12.setNull(16,
									java.sql.Types.TIMESTAMP);
						}

						if (row12.created_by_user == null) {
							pstmt_tDBOutput_12.setNull(17,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_12.setString(17,
									row12.created_by_user);
						}

						if (row12.updated_datetime != null) {
							pstmt_tDBOutput_12.setTimestamp(18,
									new java.sql.Timestamp(
											row12.updated_datetime.getTime()));
						} else {
							pstmt_tDBOutput_12.setNull(18,
									java.sql.Types.TIMESTAMP);
						}

						if (row12.updated_by_user == null) {
							pstmt_tDBOutput_12.setNull(19,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_12.setString(19,
									row12.updated_by_user);
						}

						pstmt_tDBOutput_12.addBatch();
						nb_line_tDBOutput_12++;

						batchSizeCounter_tDBOutput_12++;

						if ((batchSize_tDBOutput_12 > 0)
								&& (batchSize_tDBOutput_12 <= batchSizeCounter_tDBOutput_12)) {
							try {
								int countSum_tDBOutput_12 = 0;

								for (int countEach_tDBOutput_12 : pstmt_tDBOutput_12
										.executeBatch()) {
									countSum_tDBOutput_12 += (countEach_tDBOutput_12 < 0 ? 0
											: countEach_tDBOutput_12);
								}

								insertedCount_tDBOutput_12 += countSum_tDBOutput_12;

								batchSizeCounter_tDBOutput_12 = 0;
							} catch (java.sql.BatchUpdateException e_tDBOutput_12) {
								java.sql.SQLException ne_tDBOutput_12 = e_tDBOutput_12
										.getNextException(), sqle_tDBOutput_12 = null;
								String errormessage_tDBOutput_12;
								if (ne_tDBOutput_12 != null) {
									// build new exception to provide the
									// original cause
									sqle_tDBOutput_12 = new java.sql.SQLException(
											e_tDBOutput_12.getMessage()
													+ "\ncaused by: "
													+ ne_tDBOutput_12
															.getMessage(),
											ne_tDBOutput_12.getSQLState(),
											ne_tDBOutput_12.getErrorCode(),
											ne_tDBOutput_12);
									errormessage_tDBOutput_12 = sqle_tDBOutput_12
											.getMessage();
								} else {
									errormessage_tDBOutput_12 = e_tDBOutput_12
											.getMessage();
								}

								int countSum_tDBOutput_12 = 0;
								for (int countEach_tDBOutput_12 : e_tDBOutput_12
										.getUpdateCounts()) {
									countSum_tDBOutput_12 += (countEach_tDBOutput_12 < 0 ? 0
											: countEach_tDBOutput_12);
								}

								insertedCount_tDBOutput_12 += countSum_tDBOutput_12;

								System.err.println(errormessage_tDBOutput_12);

							}
						}

						commitCounter_tDBOutput_12++;
						if (commitEvery_tDBOutput_12 <= commitCounter_tDBOutput_12) {
							if ((batchSize_tDBOutput_12 > 0)
									&& (batchSizeCounter_tDBOutput_12 > 0)) {
								try {
									int countSum_tDBOutput_12 = 0;

									for (int countEach_tDBOutput_12 : pstmt_tDBOutput_12
											.executeBatch()) {
										countSum_tDBOutput_12 += (countEach_tDBOutput_12 < 0 ? 0
												: countEach_tDBOutput_12);
									}

									insertedCount_tDBOutput_12 += countSum_tDBOutput_12;

									batchSizeCounter_tDBOutput_12 = 0;
								} catch (java.sql.BatchUpdateException e_tDBOutput_12) {
									java.sql.SQLException ne_tDBOutput_12 = e_tDBOutput_12
											.getNextException(), sqle_tDBOutput_12 = null;
									String errormessage_tDBOutput_12;
									if (ne_tDBOutput_12 != null) {
										// build new exception to provide the
										// original cause
										sqle_tDBOutput_12 = new java.sql.SQLException(
												e_tDBOutput_12.getMessage()
														+ "\ncaused by: "
														+ ne_tDBOutput_12
																.getMessage(),
												ne_tDBOutput_12.getSQLState(),
												ne_tDBOutput_12.getErrorCode(),
												ne_tDBOutput_12);
										errormessage_tDBOutput_12 = sqle_tDBOutput_12
												.getMessage();
									} else {
										errormessage_tDBOutput_12 = e_tDBOutput_12
												.getMessage();
									}

									int countSum_tDBOutput_12 = 0;
									for (int countEach_tDBOutput_12 : e_tDBOutput_12
											.getUpdateCounts()) {
										countSum_tDBOutput_12 += (countEach_tDBOutput_12 < 0 ? 0
												: countEach_tDBOutput_12);
									}

									insertedCount_tDBOutput_12 += countSum_tDBOutput_12;

									System.err
											.println(errormessage_tDBOutput_12);

								}
							}
							conn_tDBOutput_12.commit();

							commitCounter_tDBOutput_12 = 0;
						}

						tos_count_tDBOutput_12++;

						/**
						 * [tDBOutput_12 main ] stop
						 */

						/**
						 * [tDBOutput_12 process_data_begin ] start
						 */

						currentComponent = "tDBOutput_12";

						/**
						 * [tDBOutput_12 process_data_begin ] stop
						 */

						/**
						 * [tDBOutput_12 process_data_end ] start
						 */

						currentComponent = "tDBOutput_12";

						/**
						 * [tDBOutput_12 process_data_end ] stop
						 */

						/**
						 * [tDBInput_12 process_data_end ] start
						 */

						currentComponent = "tDBInput_12";

						/**
						 * [tDBInput_12 process_data_end ] stop
						 */

						/**
						 * [tDBInput_12 end ] start
						 */

						currentComponent = "tDBInput_12";

					}
				} finally {
					if (rs_tDBInput_12 != null) {
						rs_tDBInput_12.close();
					}
					if (stmt_tDBInput_12 != null) {
						stmt_tDBInput_12.close();
					}
					if (conn_tDBInput_12 != null
							&& !conn_tDBInput_12.isClosed()) {

						conn_tDBInput_12.commit();

						conn_tDBInput_12.close();

					}

				}
				globalMap.put("tDBInput_12_NB_LINE", nb_line_tDBInput_12);

				ok_Hash.put("tDBInput_12", true);
				end_Hash.put("tDBInput_12", System.currentTimeMillis());

				tStatCatcher_1.addMessage(
						"end",
						"tDBInput_12",
						end_Hash.get("tDBInput_12")
								- start_Hash.get("tDBInput_12"));
				tStatCatcher_1Process(globalMap);
				talendStats_STATS.addMessage(
						"end",
						"tDBInput_12",
						end_Hash.get("tDBInput_12")
								- start_Hash.get("tDBInput_12"));
				talendStats_STATSProcess(globalMap);

				/**
				 * [tDBInput_12 end ] stop
				 */

				/**
				 * [tDBOutput_12 end ] start
				 */

				currentComponent = "tDBOutput_12";

				try {
					int countSum_tDBOutput_12 = 0;
					if (pstmt_tDBOutput_12 != null
							&& batchSizeCounter_tDBOutput_12 > 0) {

						for (int countEach_tDBOutput_12 : pstmt_tDBOutput_12
								.executeBatch()) {
							countSum_tDBOutput_12 += (countEach_tDBOutput_12 < 0 ? 0
									: countEach_tDBOutput_12);
						}

					}

					insertedCount_tDBOutput_12 += countSum_tDBOutput_12;

				} catch (java.sql.BatchUpdateException e_tDBOutput_12) {
					java.sql.SQLException ne_tDBOutput_12 = e_tDBOutput_12
							.getNextException(), sqle_tDBOutput_12 = null;
					String errormessage_tDBOutput_12;
					if (ne_tDBOutput_12 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_12 = new java.sql.SQLException(
								e_tDBOutput_12.getMessage() + "\ncaused by: "
										+ ne_tDBOutput_12.getMessage(),
								ne_tDBOutput_12.getSQLState(),
								ne_tDBOutput_12.getErrorCode(), ne_tDBOutput_12);
						errormessage_tDBOutput_12 = sqle_tDBOutput_12
								.getMessage();
					} else {
						errormessage_tDBOutput_12 = e_tDBOutput_12.getMessage();
					}

					int countSum_tDBOutput_12 = 0;
					for (int countEach_tDBOutput_12 : e_tDBOutput_12
							.getUpdateCounts()) {
						countSum_tDBOutput_12 += (countEach_tDBOutput_12 < 0 ? 0
								: countEach_tDBOutput_12);
					}

					insertedCount_tDBOutput_12 += countSum_tDBOutput_12;

					System.err.println(errormessage_tDBOutput_12);

				}

				if (pstmt_tDBOutput_12 != null) {

					pstmt_tDBOutput_12.close();
					resourceMap.remove("pstmt_tDBOutput_12");
				}
				resourceMap.put("statementClosed_tDBOutput_12", true);

				conn_tDBOutput_12.commit();

				conn_tDBOutput_12.close();

				resourceMap.put("finish_tDBOutput_12", true);

				nb_line_deleted_tDBOutput_12 = nb_line_deleted_tDBOutput_12
						+ deletedCount_tDBOutput_12;
				nb_line_update_tDBOutput_12 = nb_line_update_tDBOutput_12
						+ updatedCount_tDBOutput_12;
				nb_line_inserted_tDBOutput_12 = nb_line_inserted_tDBOutput_12
						+ insertedCount_tDBOutput_12;
				nb_line_rejected_tDBOutput_12 = nb_line_rejected_tDBOutput_12
						+ rejectedCount_tDBOutput_12;

				globalMap.put("tDBOutput_12_NB_LINE", nb_line_tDBOutput_12);
				globalMap.put("tDBOutput_12_NB_LINE_UPDATED",
						nb_line_update_tDBOutput_12);
				globalMap.put("tDBOutput_12_NB_LINE_INSERTED",
						nb_line_inserted_tDBOutput_12);
				globalMap.put("tDBOutput_12_NB_LINE_DELETED",
						nb_line_deleted_tDBOutput_12);
				globalMap.put("tDBOutput_12_NB_LINE_REJECTED",
						nb_line_rejected_tDBOutput_12);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row12" + iterateId, 2,
								0);
					}
				}

				ok_Hash.put("tDBOutput_12", true);
				end_Hash.put("tDBOutput_12", System.currentTimeMillis());

				tStatCatcher_1.addMessage(
						"end",
						"tDBOutput_12",
						end_Hash.get("tDBOutput_12")
								- start_Hash.get("tDBOutput_12"));
				tStatCatcher_1Process(globalMap);
				talendStats_STATS.addMessage(
						"end",
						"tDBOutput_12",
						end_Hash.get("tDBOutput_12")
								- start_Hash.get("tDBOutput_12"));
				talendStats_STATSProcess(globalMap);

				/**
				 * [tDBOutput_12 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_12 finally ] start
				 */

				currentComponent = "tDBInput_12";

				/**
				 * [tDBInput_12 finally ] stop
				 */

				/**
				 * [tDBOutput_12 finally ] start
				 */

				currentComponent = "tDBOutput_12";

				try {
					if (resourceMap.get("statementClosed_tDBOutput_12") == null) {
						java.sql.PreparedStatement pstmtToClose_tDBOutput_12 = null;
						if ((pstmtToClose_tDBOutput_12 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmt_tDBOutput_12")) != null) {
							pstmtToClose_tDBOutput_12.close();
						}
					}
				} finally {
					if (resourceMap.get("finish_tDBOutput_12") == null) {
						java.sql.Connection ctn_tDBOutput_12 = null;
						if ((ctn_tDBOutput_12 = (java.sql.Connection) resourceMap
								.get("conn_tDBOutput_12")) != null) {
							try {
								ctn_tDBOutput_12.close();
							} catch (java.sql.SQLException sqlEx_tDBOutput_12) {
								String errorMessage_tDBOutput_12 = "failed to close the connection in tDBOutput_12 :"
										+ sqlEx_tDBOutput_12.getMessage();
								System.err.println(errorMessage_tDBOutput_12);
							}
						}
					}
				}

				/**
				 * [tDBOutput_12 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_12_SUBPROCESS_STATE", 1);
	}

	public static class row5Struct implements
			routines.system.IPersistableRow<row5Struct> {
		final static byte[] commonByteArrayLock_ORDER_ETL_OMS_ETL_NO_PRODUCTS = new byte[0];
		static byte[] commonByteArray_ORDER_ETL_OMS_ETL_NO_PRODUCTS = new byte[0];

		public String om_order_item_uid;

		public String getOm_order_item_uid() {
			return this.om_order_item_uid;
		}

		public String om_order_header_uid;

		public String getOm_order_header_uid() {
			return this.om_order_header_uid;
		}

		public String om_order_item_fees_uid;

		public String getOm_order_item_fees_uid() {
			return this.om_order_item_fees_uid;
		}

		public Integer item_sequence_id;

		public Integer getItem_sequence_id() {
			return this.item_sequence_id;
		}

		public String ror_account_number;

		public String getRor_account_number() {
			return this.ror_account_number;
		}

		public String ror_name;

		public String getRor_name() {
			return this.ror_name;
		}

		public String ror_uid;

		public String getRor_uid() {
			return this.ror_uid;
		}

		public String payee_account_number;

		public String getPayee_account_number() {
			return this.payee_account_number;
		}

		public String payee_name;

		public String getPayee_name() {
			return this.payee_name;
		}

		public String payee_uid;

		public String getPayee_uid() {
			return this.payee_uid;
		}

		public String product_name;

		public String getProduct_name() {
			return this.product_name;
		}

		public Long item_quantity;

		public Long getItem_quantity() {
			return this.item_quantity;
		}

		public String content_document_id;

		public String getContent_document_id() {
			return this.content_document_id;
		}

		public String content_title;

		public String getContent_title() {
			return this.content_title;
		}

		public String content_publication_title;

		public String getContent_publication_title() {
			return this.content_publication_title;
		}

		public String content_publisher;

		public String getContent_publisher() {
			return this.content_publisher;
		}

		public int record_version;

		public int getRecord_version() {
			return this.record_version;
		}

		public String created_by_user;

		public String getCreated_by_user() {
			return this.created_by_user;
		}

		public java.util.Date created_datetime;

		public java.util.Date getCreated_datetime() {
			return this.created_datetime;
		}

		public String updated_by_user;

		public String getUpdated_by_user() {
			return this.updated_by_user;
		}

		public java.util.Date updated_datetime;

		public java.util.Date getUpdated_datetime() {
			return this.updated_datetime;
		}

		public Boolean is_deleted_flag;

		public Boolean getIs_deleted_flag() {
			return this.is_deleted_flag;
		}

		public String item_status_code;

		public String getItem_status_code() {
			return this.item_status_code;
		}

		public String unit_type;

		public String getUnit_type() {
			return this.unit_type;
		}

		public Boolean is_download_included;

		public Boolean getIs_download_included() {
			return this.is_download_included;
		}

		public String authors;

		public String getAuthors() {
			return this.authors;
		}

		public String work_uid;

		public String getWork_uid() {
			return this.work_uid;
		}

		public String content_metadata;

		public String getContent_metadata() {
			return this.content_metadata;
		}

		public String previous_status_code;

		public String getPrevious_status_code() {
			return this.previous_status_code;
		}

		public String content_standard_number;

		public String getContent_standard_number() {
			return this.content_standard_number;
		}

		public Integer duration;

		public Integer getDuration() {
			return this.duration;
		}

		public String content_standard_number_type;

		public String getContent_standard_number_type() {
			return this.content_standard_number_type;
		}

		public String standard_number_type;

		public String getStandard_number_type() {
			return this.standard_number_type;
		}

		public String standard_number;

		public String getStandard_number() {
			return this.standard_number;
		}

		public String duration_display;

		public String getDuration_display() {
			return this.duration_display;
		}

		public String content_publisher_name;

		public String getContent_publisher_name() {
			return this.content_publisher_name;
		}

		public java.util.Date document_delivery_date;

		public java.util.Date getDocument_delivery_date() {
			return this.document_delivery_date;
		}

		public String external_order_id;

		public String getExternal_order_id() {
			return this.external_order_id;
		}

		public String promo_code_type;

		public String getPromo_code_type() {
			return this.promo_code_type;
		}

		public String promo_code;

		public String getPromo_code() {
			return this.promo_code;
		}

		public String rights_distribution_sent_status;

		public String getRights_distribution_sent_status() {
			return this.rights_distribution_sent_status;
		}

		public String crm_error_reason;

		public String getCrm_error_reason() {
			return this.crm_error_reason;
		}

		public String publication_metadata;

		public String getPublication_metadata() {
			return this.publication_metadata;
		}

		public String publication_work_id;

		public String getPublication_work_id() {
			return this.publication_work_id;
		}

		public String external_comment;

		public String getExternal_comment() {
			return this.external_comment;
		}

		public String right_qualified_statement;

		public String getRight_qualified_statement() {
			return this.right_qualified_statement;
		}

		public String product_family;

		public String getProduct_family() {
			return this.product_family;
		}

		public String product_name_description;

		public String getProduct_name_description() {
			return this.product_name_description;
		}

		public String order_item_details;

		public String getOrder_item_details() {
			return this.order_item_details;
		}

		public java.util.Date check_date;

		public java.util.Date getCheck_date() {
			return this.check_date;
		}

		public String check_number;

		public String getCheck_number() {
			return this.check_number;
		}

		public java.util.Date period_end_date;

		public java.util.Date getPeriod_end_date() {
			return this.period_end_date;
		}

		public java.util.Date publication_date;

		public java.util.Date getPublication_date() {
			return this.publication_date;
		}

		public String ror_tax_id;

		public String getRor_tax_id() {
			return this.ror_tax_id;
		}

		public String article_identifiers;

		public String getArticle_identifiers() {
			return this.article_identifiers;
		}

		public String om_shipping_address_uid;

		public String getOm_shipping_address_uid() {
			return this.om_shipping_address_uid;
		}

		public String shipping_addressee_name;

		public String getShipping_addressee_name() {
			return this.shipping_addressee_name;
		}

		public String shipping_attention_to;

		public String getShipping_attention_to() {
			return this.shipping_attention_to;
		}

		public String content_source;

		public String getContent_source() {
			return this.content_source;
		}

		public String content_platform;

		public String getContent_platform() {
			return this.content_platform;
		}

		public String om_distribution_group_uid;

		public String getOm_distribution_group_uid() {
			return this.om_distribution_group_uid;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ORDER_ETL_OMS_ETL_NO_PRODUCTS.length) {
					if (length < 1024
							&& commonByteArray_ORDER_ETL_OMS_ETL_NO_PRODUCTS.length == 0) {
						commonByteArray_ORDER_ETL_OMS_ETL_NO_PRODUCTS = new byte[1024];
					} else {
						commonByteArray_ORDER_ETL_OMS_ETL_NO_PRODUCTS = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ORDER_ETL_OMS_ETL_NO_PRODUCTS, 0,
						length);
				strReturn = new String(
						commonByteArray_ORDER_ETL_OMS_ETL_NO_PRODUCTS, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ORDER_ETL_OMS_ETL_NO_PRODUCTS) {

				try {

					int length = 0;

					this.om_order_item_uid = readString(dis);

					this.om_order_header_uid = readString(dis);

					this.om_order_item_fees_uid = readString(dis);

					this.item_sequence_id = readInteger(dis);

					this.ror_account_number = readString(dis);

					this.ror_name = readString(dis);

					this.ror_uid = readString(dis);

					this.payee_account_number = readString(dis);

					this.payee_name = readString(dis);

					this.payee_uid = readString(dis);

					this.product_name = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.item_quantity = null;
					} else {
						this.item_quantity = dis.readLong();
					}

					this.content_document_id = readString(dis);

					this.content_title = readString(dis);

					this.content_publication_title = readString(dis);

					this.content_publisher = readString(dis);

					this.record_version = dis.readInt();

					this.created_by_user = readString(dis);

					this.created_datetime = readDate(dis);

					this.updated_by_user = readString(dis);

					this.updated_datetime = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.is_deleted_flag = null;
					} else {
						this.is_deleted_flag = dis.readBoolean();
					}

					this.item_status_code = readString(dis);

					this.unit_type = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.is_download_included = null;
					} else {
						this.is_download_included = dis.readBoolean();
					}

					this.authors = readString(dis);

					this.work_uid = readString(dis);

					this.content_metadata = readString(dis);

					this.previous_status_code = readString(dis);

					this.content_standard_number = readString(dis);

					this.duration = readInteger(dis);

					this.content_standard_number_type = readString(dis);

					this.standard_number_type = readString(dis);

					this.standard_number = readString(dis);

					this.duration_display = readString(dis);

					this.content_publisher_name = readString(dis);

					this.document_delivery_date = readDate(dis);

					this.external_order_id = readString(dis);

					this.promo_code_type = readString(dis);

					this.promo_code = readString(dis);

					this.rights_distribution_sent_status = readString(dis);

					this.crm_error_reason = readString(dis);

					this.publication_metadata = readString(dis);

					this.publication_work_id = readString(dis);

					this.external_comment = readString(dis);

					this.right_qualified_statement = readString(dis);

					this.product_family = readString(dis);

					this.product_name_description = readString(dis);

					this.order_item_details = readString(dis);

					this.check_date = readDate(dis);

					this.check_number = readString(dis);

					this.period_end_date = readDate(dis);

					this.publication_date = readDate(dis);

					this.ror_tax_id = readString(dis);

					this.article_identifiers = readString(dis);

					this.om_shipping_address_uid = readString(dis);

					this.shipping_addressee_name = readString(dis);

					this.shipping_attention_to = readString(dis);

					this.content_source = readString(dis);

					this.content_platform = readString(dis);

					this.om_distribution_group_uid = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.om_order_item_uid, dos);

				// String

				writeString(this.om_order_header_uid, dos);

				// String

				writeString(this.om_order_item_fees_uid, dos);

				// Integer

				writeInteger(this.item_sequence_id, dos);

				// String

				writeString(this.ror_account_number, dos);

				// String

				writeString(this.ror_name, dos);

				// String

				writeString(this.ror_uid, dos);

				// String

				writeString(this.payee_account_number, dos);

				// String

				writeString(this.payee_name, dos);

				// String

				writeString(this.payee_uid, dos);

				// String

				writeString(this.product_name, dos);

				// Long

				if (this.item_quantity == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.item_quantity);
				}

				// String

				writeString(this.content_document_id, dos);

				// String

				writeString(this.content_title, dos);

				// String

				writeString(this.content_publication_title, dos);

				// String

				writeString(this.content_publisher, dos);

				// int

				dos.writeInt(this.record_version);

				// String

				writeString(this.created_by_user, dos);

				// java.util.Date

				writeDate(this.created_datetime, dos);

				// String

				writeString(this.updated_by_user, dos);

				// java.util.Date

				writeDate(this.updated_datetime, dos);

				// Boolean

				if (this.is_deleted_flag == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.is_deleted_flag);
				}

				// String

				writeString(this.item_status_code, dos);

				// String

				writeString(this.unit_type, dos);

				// Boolean

				if (this.is_download_included == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.is_download_included);
				}

				// String

				writeString(this.authors, dos);

				// String

				writeString(this.work_uid, dos);

				// String

				writeString(this.content_metadata, dos);

				// String

				writeString(this.previous_status_code, dos);

				// String

				writeString(this.content_standard_number, dos);

				// Integer

				writeInteger(this.duration, dos);

				// String

				writeString(this.content_standard_number_type, dos);

				// String

				writeString(this.standard_number_type, dos);

				// String

				writeString(this.standard_number, dos);

				// String

				writeString(this.duration_display, dos);

				// String

				writeString(this.content_publisher_name, dos);

				// java.util.Date

				writeDate(this.document_delivery_date, dos);

				// String

				writeString(this.external_order_id, dos);

				// String

				writeString(this.promo_code_type, dos);

				// String

				writeString(this.promo_code, dos);

				// String

				writeString(this.rights_distribution_sent_status, dos);

				// String

				writeString(this.crm_error_reason, dos);

				// String

				writeString(this.publication_metadata, dos);

				// String

				writeString(this.publication_work_id, dos);

				// String

				writeString(this.external_comment, dos);

				// String

				writeString(this.right_qualified_statement, dos);

				// String

				writeString(this.product_family, dos);

				// String

				writeString(this.product_name_description, dos);

				// String

				writeString(this.order_item_details, dos);

				// java.util.Date

				writeDate(this.check_date, dos);

				// String

				writeString(this.check_number, dos);

				// java.util.Date

				writeDate(this.period_end_date, dos);

				// java.util.Date

				writeDate(this.publication_date, dos);

				// String

				writeString(this.ror_tax_id, dos);

				// String

				writeString(this.article_identifiers, dos);

				// String

				writeString(this.om_shipping_address_uid, dos);

				// String

				writeString(this.shipping_addressee_name, dos);

				// String

				writeString(this.shipping_attention_to, dos);

				// String

				writeString(this.content_source, dos);

				// String

				writeString(this.content_platform, dos);

				// String

				writeString(this.om_distribution_group_uid, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("om_order_item_uid=" + om_order_item_uid);
			sb.append(",om_order_header_uid=" + om_order_header_uid);
			sb.append(",om_order_item_fees_uid=" + om_order_item_fees_uid);
			sb.append(",item_sequence_id=" + String.valueOf(item_sequence_id));
			sb.append(",ror_account_number=" + ror_account_number);
			sb.append(",ror_name=" + ror_name);
			sb.append(",ror_uid=" + ror_uid);
			sb.append(",payee_account_number=" + payee_account_number);
			sb.append(",payee_name=" + payee_name);
			sb.append(",payee_uid=" + payee_uid);
			sb.append(",product_name=" + product_name);
			sb.append(",item_quantity=" + String.valueOf(item_quantity));
			sb.append(",content_document_id=" + content_document_id);
			sb.append(",content_title=" + content_title);
			sb.append(",content_publication_title=" + content_publication_title);
			sb.append(",content_publisher=" + content_publisher);
			sb.append(",record_version=" + String.valueOf(record_version));
			sb.append(",created_by_user=" + created_by_user);
			sb.append(",created_datetime=" + String.valueOf(created_datetime));
			sb.append(",updated_by_user=" + updated_by_user);
			sb.append(",updated_datetime=" + String.valueOf(updated_datetime));
			sb.append(",is_deleted_flag=" + String.valueOf(is_deleted_flag));
			sb.append(",item_status_code=" + item_status_code);
			sb.append(",unit_type=" + unit_type);
			sb.append(",is_download_included="
					+ String.valueOf(is_download_included));
			sb.append(",authors=" + authors);
			sb.append(",work_uid=" + work_uid);
			sb.append(",content_metadata=" + content_metadata);
			sb.append(",previous_status_code=" + previous_status_code);
			sb.append(",content_standard_number=" + content_standard_number);
			sb.append(",duration=" + String.valueOf(duration));
			sb.append(",content_standard_number_type="
					+ content_standard_number_type);
			sb.append(",standard_number_type=" + standard_number_type);
			sb.append(",standard_number=" + standard_number);
			sb.append(",duration_display=" + duration_display);
			sb.append(",content_publisher_name=" + content_publisher_name);
			sb.append(",document_delivery_date="
					+ String.valueOf(document_delivery_date));
			sb.append(",external_order_id=" + external_order_id);
			sb.append(",promo_code_type=" + promo_code_type);
			sb.append(",promo_code=" + promo_code);
			sb.append(",rights_distribution_sent_status="
					+ rights_distribution_sent_status);
			sb.append(",crm_error_reason=" + crm_error_reason);
			sb.append(",publication_metadata=" + publication_metadata);
			sb.append(",publication_work_id=" + publication_work_id);
			sb.append(",external_comment=" + external_comment);
			sb.append(",right_qualified_statement=" + right_qualified_statement);
			sb.append(",product_family=" + product_family);
			sb.append(",product_name_description=" + product_name_description);
			sb.append(",order_item_details=" + order_item_details);
			sb.append(",check_date=" + String.valueOf(check_date));
			sb.append(",check_number=" + check_number);
			sb.append(",period_end_date=" + String.valueOf(period_end_date));
			sb.append(",publication_date=" + String.valueOf(publication_date));
			sb.append(",ror_tax_id=" + ror_tax_id);
			sb.append(",article_identifiers=" + article_identifiers);
			sb.append(",om_shipping_address_uid=" + om_shipping_address_uid);
			sb.append(",shipping_addressee_name=" + shipping_addressee_name);
			sb.append(",shipping_attention_to=" + shipping_attention_to);
			sb.append(",content_source=" + content_source);
			sb.append(",content_platform=" + content_platform);
			sb.append(",om_distribution_group_uid=" + om_distribution_group_uid);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row5Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_5Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDBInput_5_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row5Struct row5 = new row5Struct();

				/**
				 * [tDBOutput_5 begin ] start
				 */

				ok_Hash.put("tDBOutput_5", false);
				start_Hash.put("tDBOutput_5", System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tDBOutput_5");
				tStatCatcher_1Process(globalMap);

				talendStats_STATS.addMessage("begin", "tDBOutput_5");
				talendStats_STATSProcess(globalMap);

				currentComponent = "tDBOutput_5";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row5" + iterateId, 0, 0);

					}
				}

				int tos_count_tDBOutput_5 = 0;

				String dbschema_tDBOutput_5 = null;
				dbschema_tDBOutput_5 = context.data_warehouse_order_dwos_schema;

				String tableName_tDBOutput_5 = null;
				if (dbschema_tDBOutput_5 == null
						|| dbschema_tDBOutput_5.trim().length() == 0) {
					tableName_tDBOutput_5 = "dwo_om_order_item";
				} else {
					tableName_tDBOutput_5 = dbschema_tDBOutput_5 + "\".\""
							+ "dwo_om_order_item";
				}

				int nb_line_tDBOutput_5 = 0;
				int nb_line_update_tDBOutput_5 = 0;
				int nb_line_inserted_tDBOutput_5 = 0;
				int nb_line_deleted_tDBOutput_5 = 0;
				int nb_line_rejected_tDBOutput_5 = 0;

				int deletedCount_tDBOutput_5 = 0;
				int updatedCount_tDBOutput_5 = 0;
				int insertedCount_tDBOutput_5 = 0;
				int rejectedCount_tDBOutput_5 = 0;

				boolean whetherReject_tDBOutput_5 = false;

				java.sql.Connection conn_tDBOutput_5 = null;
				String dbUser_tDBOutput_5 = null;

				java.lang.Class.forName("org.postgresql.Driver");
				String url_tDBOutput_5 = "jdbc:postgresql://"
						+ context.data_warehouse_order_dwos_host + ":"
						+ context.data_warehouse_order_dwos_port + "/"
						+ context.data_warehouse_order_dwos_database;
				dbUser_tDBOutput_5 = context.data_warehouse_order_dwos_username;

				final String decryptedPassword_tDBOutput_5 = context.data_warehouse_order_dwos_password;

				String dbPwd_tDBOutput_5 = decryptedPassword_tDBOutput_5;

				conn_tDBOutput_5 = java.sql.DriverManager.getConnection(
						url_tDBOutput_5, dbUser_tDBOutput_5, dbPwd_tDBOutput_5);

				resourceMap.put("conn_tDBOutput_5", conn_tDBOutput_5);
				conn_tDBOutput_5.setAutoCommit(false);
				int commitEvery_tDBOutput_5 = 10000;
				int commitCounter_tDBOutput_5 = 0;

				int batchSize_tDBOutput_5 = 10000;
				int batchSizeCounter_tDBOutput_5 = 0;

				int count_tDBOutput_5 = 0;
				int rsTruncCountNumber_tDBOutput_5 = 0;
				try (java.sql.Statement stmtTruncCount_tDBOutput_5 = conn_tDBOutput_5
						.createStatement()) {
					try (java.sql.ResultSet rsTruncCount_tDBOutput_5 = stmtTruncCount_tDBOutput_5
							.executeQuery("SELECT COUNT(1) FROM \""
									+ tableName_tDBOutput_5 + "\"")) {
						if (rsTruncCount_tDBOutput_5.next()) {
							rsTruncCountNumber_tDBOutput_5 = rsTruncCount_tDBOutput_5
									.getInt(1);
						}
					}
				}
				try (java.sql.Statement stmtTrunc_tDBOutput_5 = conn_tDBOutput_5
						.createStatement()) {
					stmtTrunc_tDBOutput_5.executeUpdate("TRUNCATE TABLE \""
							+ tableName_tDBOutput_5 + "\"");
					deletedCount_tDBOutput_5 += rsTruncCountNumber_tDBOutput_5;
				}
				String insert_tDBOutput_5 = "INSERT INTO \""
						+ tableName_tDBOutput_5
						+ "\" (\"om_order_item_uid\",\"om_order_header_uid\",\"om_order_item_fees_uid\",\"item_sequence_id\",\"ror_account_number\",\"ror_name\",\"ror_uid\",\"payee_account_number\",\"payee_name\",\"payee_uid\",\"product_name\",\"item_quantity\",\"content_document_id\",\"content_title\",\"content_publication_title\",\"content_publisher\",\"record_version\",\"created_by_user\",\"created_datetime\",\"updated_by_user\",\"updated_datetime\",\"is_deleted_flag\",\"item_status_code\",\"unit_type\",\"is_download_included\",\"authors\",\"work_uid\",\"content_metadata\",\"previous_status_code\",\"content_standard_number\",\"duration\",\"content_standard_number_type\",\"standard_number_type\",\"standard_number\",\"duration_display\",\"content_publisher_name\",\"document_delivery_date\",\"external_order_id\",\"promo_code_type\",\"promo_code\",\"rights_distribution_sent_status\",\"crm_error_reason\",\"publication_metadata\",\"publication_work_id\",\"external_comment\",\"right_qualified_statement\",\"product_family\",\"product_name_description\",\"order_item_details\",\"check_date\",\"check_number\",\"period_end_date\",\"publication_date\",\"ror_tax_id\",\"article_identifiers\",\"om_shipping_address_uid\",\"shipping_addressee_name\",\"shipping_attention_to\",\"content_source\",\"content_platform\",\"om_distribution_group_uid\") VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

				java.sql.PreparedStatement pstmt_tDBOutput_5 = conn_tDBOutput_5
						.prepareStatement(insert_tDBOutput_5);
				resourceMap.put("pstmt_tDBOutput_5", pstmt_tDBOutput_5);

				/**
				 * [tDBOutput_5 begin ] stop
				 */

				/**
				 * [tDBInput_5 begin ] start
				 */

				ok_Hash.put("tDBInput_5", false);
				start_Hash.put("tDBInput_5", System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tDBInput_5");
				tStatCatcher_1Process(globalMap);

				talendStats_STATS.addMessage("begin", "tDBInput_5");
				talendStats_STATSProcess(globalMap);

				currentComponent = "tDBInput_5";

				int tos_count_tDBInput_5 = 0;

				int nb_line_tDBInput_5 = 0;
				java.sql.Connection conn_tDBInput_5 = null;
				conn_tDBInput_5 = (java.sql.Connection) globalMap
						.get("conn_tDBConnection_1");

				java.sql.Statement stmt_tDBInput_5 = conn_tDBInput_5
						.createStatement();
				stmt_tDBInput_5.setFetchSize(1000);

				String dbquery_tDBInput_5 = "SELECT *\nFROM apps.om_order_item";

				globalMap.put("tDBInput_5_QUERY", dbquery_tDBInput_5);
				java.sql.ResultSet rs_tDBInput_5 = null;

				try {
					rs_tDBInput_5 = stmt_tDBInput_5
							.executeQuery(dbquery_tDBInput_5);
					java.sql.ResultSetMetaData rsmd_tDBInput_5 = rs_tDBInput_5
							.getMetaData();
					int colQtyInRs_tDBInput_5 = rsmd_tDBInput_5
							.getColumnCount();

					String tmpContent_tDBInput_5 = null;

					while (rs_tDBInput_5.next()) {
						nb_line_tDBInput_5++;

						if (colQtyInRs_tDBInput_5 < 1) {
							row5.om_order_item_uid = null;
						} else {

							row5.om_order_item_uid = routines.system.JDBCUtil
									.getString(rs_tDBInput_5, 1, false);
						}
						if (colQtyInRs_tDBInput_5 < 2) {
							row5.om_order_header_uid = null;
						} else {

							row5.om_order_header_uid = routines.system.JDBCUtil
									.getString(rs_tDBInput_5, 2, false);
						}
						if (colQtyInRs_tDBInput_5 < 3) {
							row5.om_order_item_fees_uid = null;
						} else {

							row5.om_order_item_fees_uid = routines.system.JDBCUtil
									.getString(rs_tDBInput_5, 3, false);
						}
						if (colQtyInRs_tDBInput_5 < 4) {
							row5.item_sequence_id = null;
						} else {

							if (rs_tDBInput_5.getObject(4) != null) {
								row5.item_sequence_id = rs_tDBInput_5.getInt(4);
							} else {
								row5.item_sequence_id = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 5) {
							row5.ror_account_number = null;
						} else {

							row5.ror_account_number = routines.system.JDBCUtil
									.getString(rs_tDBInput_5, 5, false);
						}
						if (colQtyInRs_tDBInput_5 < 6) {
							row5.ror_name = null;
						} else {

							row5.ror_name = routines.system.JDBCUtil.getString(
									rs_tDBInput_5, 6, false);
						}
						if (colQtyInRs_tDBInput_5 < 7) {
							row5.ror_uid = null;
						} else {

							row5.ror_uid = routines.system.JDBCUtil.getString(
									rs_tDBInput_5, 7, false);
						}
						if (colQtyInRs_tDBInput_5 < 8) {
							row5.payee_account_number = null;
						} else {

							row5.payee_account_number = routines.system.JDBCUtil
									.getString(rs_tDBInput_5, 8, false);
						}
						if (colQtyInRs_tDBInput_5 < 9) {
							row5.payee_name = null;
						} else {

							row5.payee_name = routines.system.JDBCUtil
									.getString(rs_tDBInput_5, 9, false);
						}
						if (colQtyInRs_tDBInput_5 < 10) {
							row5.payee_uid = null;
						} else {

							row5.payee_uid = routines.system.JDBCUtil
									.getString(rs_tDBInput_5, 10, false);
						}
						if (colQtyInRs_tDBInput_5 < 11) {
							row5.product_name = null;
						} else {

							row5.product_name = routines.system.JDBCUtil
									.getString(rs_tDBInput_5, 11, false);
						}
						if (colQtyInRs_tDBInput_5 < 12) {
							row5.item_quantity = null;
						} else {

							if (rs_tDBInput_5.getObject(12) != null) {
								row5.item_quantity = rs_tDBInput_5.getLong(12);
							} else {
								row5.item_quantity = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 13) {
							row5.content_document_id = null;
						} else {

							row5.content_document_id = routines.system.JDBCUtil
									.getString(rs_tDBInput_5, 13, false);
						}
						if (colQtyInRs_tDBInput_5 < 14) {
							row5.content_title = null;
						} else {

							row5.content_title = routines.system.JDBCUtil
									.getString(rs_tDBInput_5, 14, false);
						}
						if (colQtyInRs_tDBInput_5 < 15) {
							row5.content_publication_title = null;
						} else {

							row5.content_publication_title = routines.system.JDBCUtil
									.getString(rs_tDBInput_5, 15, false);
						}
						if (colQtyInRs_tDBInput_5 < 16) {
							row5.content_publisher = null;
						} else {

							row5.content_publisher = routines.system.JDBCUtil
									.getString(rs_tDBInput_5, 16, false);
						}
						if (colQtyInRs_tDBInput_5 < 17) {
							row5.record_version = 0;
						} else {

							if (rs_tDBInput_5.getObject(17) != null) {
								row5.record_version = rs_tDBInput_5.getInt(17);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_5 < 18) {
							row5.created_by_user = null;
						} else {

							row5.created_by_user = routines.system.JDBCUtil
									.getString(rs_tDBInput_5, 18, false);
						}
						if (colQtyInRs_tDBInput_5 < 19) {
							row5.created_datetime = null;
						} else {

							row5.created_datetime = routines.system.JDBCUtil
									.getDate(rs_tDBInput_5, 19);
						}
						if (colQtyInRs_tDBInput_5 < 20) {
							row5.updated_by_user = null;
						} else {

							row5.updated_by_user = routines.system.JDBCUtil
									.getString(rs_tDBInput_5, 20, false);
						}
						if (colQtyInRs_tDBInput_5 < 21) {
							row5.updated_datetime = null;
						} else {

							row5.updated_datetime = routines.system.JDBCUtil
									.getDate(rs_tDBInput_5, 21);
						}
						if (colQtyInRs_tDBInput_5 < 22) {
							row5.is_deleted_flag = null;
						} else {

							if (rs_tDBInput_5.getObject(22) != null) {
								row5.is_deleted_flag = rs_tDBInput_5
										.getBoolean(22);
							} else {
								row5.is_deleted_flag = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 23) {
							row5.item_status_code = null;
						} else {

							row5.item_status_code = routines.system.JDBCUtil
									.getString(rs_tDBInput_5, 23, false);
						}
						if (colQtyInRs_tDBInput_5 < 24) {
							row5.unit_type = null;
						} else {

							row5.unit_type = routines.system.JDBCUtil
									.getString(rs_tDBInput_5, 24, false);
						}
						if (colQtyInRs_tDBInput_5 < 25) {
							row5.is_download_included = null;
						} else {

							if (rs_tDBInput_5.getObject(25) != null) {
								row5.is_download_included = rs_tDBInput_5
										.getBoolean(25);
							} else {
								row5.is_download_included = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 26) {
							row5.authors = null;
						} else {

							row5.authors = routines.system.JDBCUtil.getString(
									rs_tDBInput_5, 26, false);
						}
						if (colQtyInRs_tDBInput_5 < 27) {
							row5.work_uid = null;
						} else {

							row5.work_uid = routines.system.JDBCUtil.getString(
									rs_tDBInput_5, 27, false);
						}
						if (colQtyInRs_tDBInput_5 < 28) {
							row5.content_metadata = null;
						} else {

							row5.content_metadata = routines.system.JDBCUtil
									.getString(rs_tDBInput_5, 28, false);
						}
						if (colQtyInRs_tDBInput_5 < 29) {
							row5.previous_status_code = null;
						} else {

							row5.previous_status_code = routines.system.JDBCUtil
									.getString(rs_tDBInput_5, 29, false);
						}
						if (colQtyInRs_tDBInput_5 < 30) {
							row5.content_standard_number = null;
						} else {

							row5.content_standard_number = routines.system.JDBCUtil
									.getString(rs_tDBInput_5, 30, false);
						}
						if (colQtyInRs_tDBInput_5 < 31) {
							row5.duration = null;
						} else {

							if (rs_tDBInput_5.getObject(31) != null) {
								row5.duration = rs_tDBInput_5.getInt(31);
							} else {
								row5.duration = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 32) {
							row5.content_standard_number_type = null;
						} else {

							row5.content_standard_number_type = routines.system.JDBCUtil
									.getString(rs_tDBInput_5, 32, false);
						}
						if (colQtyInRs_tDBInput_5 < 33) {
							row5.standard_number_type = null;
						} else {

							row5.standard_number_type = routines.system.JDBCUtil
									.getString(rs_tDBInput_5, 33, false);
						}
						if (colQtyInRs_tDBInput_5 < 34) {
							row5.standard_number = null;
						} else {

							row5.standard_number = routines.system.JDBCUtil
									.getString(rs_tDBInput_5, 34, false);
						}
						if (colQtyInRs_tDBInput_5 < 35) {
							row5.duration_display = null;
						} else {

							row5.duration_display = routines.system.JDBCUtil
									.getString(rs_tDBInput_5, 35, false);
						}
						if (colQtyInRs_tDBInput_5 < 36) {
							row5.content_publisher_name = null;
						} else {

							row5.content_publisher_name = routines.system.JDBCUtil
									.getString(rs_tDBInput_5, 36, false);
						}
						if (colQtyInRs_tDBInput_5 < 37) {
							row5.document_delivery_date = null;
						} else {

							row5.document_delivery_date = routines.system.JDBCUtil
									.getDate(rs_tDBInput_5, 37);
						}
						if (colQtyInRs_tDBInput_5 < 38) {
							row5.external_order_id = null;
						} else {

							row5.external_order_id = routines.system.JDBCUtil
									.getString(rs_tDBInput_5, 38, false);
						}
						if (colQtyInRs_tDBInput_5 < 39) {
							row5.promo_code_type = null;
						} else {

							row5.promo_code_type = routines.system.JDBCUtil
									.getString(rs_tDBInput_5, 39, false);
						}
						if (colQtyInRs_tDBInput_5 < 40) {
							row5.promo_code = null;
						} else {

							row5.promo_code = routines.system.JDBCUtil
									.getString(rs_tDBInput_5, 40, false);
						}
						if (colQtyInRs_tDBInput_5 < 41) {
							row5.rights_distribution_sent_status = null;
						} else {

							row5.rights_distribution_sent_status = routines.system.JDBCUtil
									.getString(rs_tDBInput_5, 41, false);
						}
						if (colQtyInRs_tDBInput_5 < 42) {
							row5.crm_error_reason = null;
						} else {

							row5.crm_error_reason = routines.system.JDBCUtil
									.getString(rs_tDBInput_5, 42, false);
						}
						if (colQtyInRs_tDBInput_5 < 43) {
							row5.publication_metadata = null;
						} else {

							row5.publication_metadata = routines.system.JDBCUtil
									.getString(rs_tDBInput_5, 43, false);
						}
						if (colQtyInRs_tDBInput_5 < 44) {
							row5.publication_work_id = null;
						} else {

							row5.publication_work_id = routines.system.JDBCUtil
									.getString(rs_tDBInput_5, 44, false);
						}
						if (colQtyInRs_tDBInput_5 < 45) {
							row5.external_comment = null;
						} else {

							row5.external_comment = routines.system.JDBCUtil
									.getString(rs_tDBInput_5, 45, false);
						}
						if (colQtyInRs_tDBInput_5 < 46) {
							row5.right_qualified_statement = null;
						} else {

							row5.right_qualified_statement = routines.system.JDBCUtil
									.getString(rs_tDBInput_5, 46, false);
						}
						if (colQtyInRs_tDBInput_5 < 47) {
							row5.product_family = null;
						} else {

							row5.product_family = routines.system.JDBCUtil
									.getString(rs_tDBInput_5, 47, false);
						}
						if (colQtyInRs_tDBInput_5 < 48) {
							row5.product_name_description = null;
						} else {

							row5.product_name_description = routines.system.JDBCUtil
									.getString(rs_tDBInput_5, 48, false);
						}
						if (colQtyInRs_tDBInput_5 < 49) {
							row5.order_item_details = null;
						} else {

							row5.order_item_details = routines.system.JDBCUtil
									.getString(rs_tDBInput_5, 49, false);
						}
						if (colQtyInRs_tDBInput_5 < 50) {
							row5.check_date = null;
						} else {

							row5.check_date = routines.system.JDBCUtil.getDate(
									rs_tDBInput_5, 50);
						}
						if (colQtyInRs_tDBInput_5 < 51) {
							row5.check_number = null;
						} else {

							row5.check_number = routines.system.JDBCUtil
									.getString(rs_tDBInput_5, 51, false);
						}
						if (colQtyInRs_tDBInput_5 < 52) {
							row5.period_end_date = null;
						} else {

							row5.period_end_date = routines.system.JDBCUtil
									.getDate(rs_tDBInput_5, 52);
						}
						if (colQtyInRs_tDBInput_5 < 53) {
							row5.publication_date = null;
						} else {

							row5.publication_date = routines.system.JDBCUtil
									.getDate(rs_tDBInput_5, 53);
						}
						if (colQtyInRs_tDBInput_5 < 54) {
							row5.ror_tax_id = null;
						} else {

							row5.ror_tax_id = routines.system.JDBCUtil
									.getString(rs_tDBInput_5, 54, false);
						}
						if (colQtyInRs_tDBInput_5 < 55) {
							row5.article_identifiers = null;
						} else {

							row5.article_identifiers = routines.system.JDBCUtil
									.getString(rs_tDBInput_5, 55, false);
						}
						if (colQtyInRs_tDBInput_5 < 56) {
							row5.om_shipping_address_uid = null;
						} else {

							row5.om_shipping_address_uid = routines.system.JDBCUtil
									.getString(rs_tDBInput_5, 56, false);
						}
						if (colQtyInRs_tDBInput_5 < 57) {
							row5.shipping_addressee_name = null;
						} else {

							row5.shipping_addressee_name = routines.system.JDBCUtil
									.getString(rs_tDBInput_5, 57, false);
						}
						if (colQtyInRs_tDBInput_5 < 58) {
							row5.shipping_attention_to = null;
						} else {

							row5.shipping_attention_to = routines.system.JDBCUtil
									.getString(rs_tDBInput_5, 58, false);
						}
						if (colQtyInRs_tDBInput_5 < 59) {
							row5.content_source = null;
						} else {

							row5.content_source = routines.system.JDBCUtil
									.getString(rs_tDBInput_5, 59, false);
						}
						if (colQtyInRs_tDBInput_5 < 60) {
							row5.content_platform = null;
						} else {

							row5.content_platform = routines.system.JDBCUtil
									.getString(rs_tDBInput_5, 60, false);
						}
						if (colQtyInRs_tDBInput_5 < 61) {
							row5.om_distribution_group_uid = null;
						} else {

							row5.om_distribution_group_uid = routines.system.JDBCUtil
									.getString(rs_tDBInput_5, 61, false);
						}

						/**
						 * [tDBInput_5 begin ] stop
						 */

						/**
						 * [tDBInput_5 main ] start
						 */

						currentComponent = "tDBInput_5";

						tos_count_tDBInput_5++;

						/**
						 * [tDBInput_5 main ] stop
						 */

						/**
						 * [tDBInput_5 process_data_begin ] start
						 */

						currentComponent = "tDBInput_5";

						/**
						 * [tDBInput_5 process_data_begin ] stop
						 */

						/**
						 * [tDBOutput_5 main ] start
						 */

						currentComponent = "tDBOutput_5";

						// row5
						// row5

						if (execStat) {
							runStat.updateStatOnConnection("row5" + iterateId,
									1, 1);
						}

						whetherReject_tDBOutput_5 = false;
						if (row5.om_order_item_uid == null) {
							pstmt_tDBOutput_5
									.setNull(1, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_5.setString(1,
									row5.om_order_item_uid);
						}

						if (row5.om_order_header_uid == null) {
							pstmt_tDBOutput_5
									.setNull(2, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_5.setString(2,
									row5.om_order_header_uid);
						}

						if (row5.om_order_item_fees_uid == null) {
							pstmt_tDBOutput_5
									.setNull(3, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_5.setString(3,
									row5.om_order_item_fees_uid);
						}

						if (row5.item_sequence_id == null) {
							pstmt_tDBOutput_5
									.setNull(4, java.sql.Types.INTEGER);
						} else {
							pstmt_tDBOutput_5.setInt(4, row5.item_sequence_id);
						}

						if (row5.ror_account_number == null) {
							pstmt_tDBOutput_5
									.setNull(5, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_5.setString(5,
									row5.ror_account_number);
						}

						if (row5.ror_name == null) {
							pstmt_tDBOutput_5
									.setNull(6, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_5.setString(6, row5.ror_name);
						}

						if (row5.ror_uid == null) {
							pstmt_tDBOutput_5
									.setNull(7, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_5.setString(7, row5.ror_uid);
						}

						if (row5.payee_account_number == null) {
							pstmt_tDBOutput_5
									.setNull(8, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_5.setString(8,
									row5.payee_account_number);
						}

						if (row5.payee_name == null) {
							pstmt_tDBOutput_5
									.setNull(9, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_5.setString(9, row5.payee_name);
						}

						if (row5.payee_uid == null) {
							pstmt_tDBOutput_5.setNull(10,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_5.setString(10, row5.payee_uid);
						}

						if (row5.product_name == null) {
							pstmt_tDBOutput_5.setNull(11,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_5.setString(11, row5.product_name);
						}

						if (row5.item_quantity == null) {
							pstmt_tDBOutput_5.setNull(12,
									java.sql.Types.INTEGER);
						} else {
							pstmt_tDBOutput_5.setLong(12, row5.item_quantity);
						}

						if (row5.content_document_id == null) {
							pstmt_tDBOutput_5.setNull(13,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_5.setString(13,
									row5.content_document_id);
						}

						if (row5.content_title == null) {
							pstmt_tDBOutput_5.setNull(14,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_5.setString(14, row5.content_title);
						}

						if (row5.content_publication_title == null) {
							pstmt_tDBOutput_5.setNull(15,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_5.setString(15,
									row5.content_publication_title);
						}

						if (row5.content_publisher == null) {
							pstmt_tDBOutput_5.setNull(16,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_5.setString(16,
									row5.content_publisher);
						}

						pstmt_tDBOutput_5.setInt(17, row5.record_version);

						if (row5.created_by_user == null) {
							pstmt_tDBOutput_5.setNull(18,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_5.setString(18,
									row5.created_by_user);
						}

						if (row5.created_datetime != null) {
							pstmt_tDBOutput_5.setTimestamp(19,
									new java.sql.Timestamp(
											row5.created_datetime.getTime()));
						} else {
							pstmt_tDBOutput_5.setNull(19,
									java.sql.Types.TIMESTAMP);
						}

						if (row5.updated_by_user == null) {
							pstmt_tDBOutput_5.setNull(20,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_5.setString(20,
									row5.updated_by_user);
						}

						if (row5.updated_datetime != null) {
							pstmt_tDBOutput_5.setTimestamp(21,
									new java.sql.Timestamp(
											row5.updated_datetime.getTime()));
						} else {
							pstmt_tDBOutput_5.setNull(21,
									java.sql.Types.TIMESTAMP);
						}

						if (row5.is_deleted_flag == null) {
							pstmt_tDBOutput_5.setNull(22,
									java.sql.Types.BOOLEAN);
						} else {
							pstmt_tDBOutput_5.setBoolean(22,
									row5.is_deleted_flag);
						}

						if (row5.item_status_code == null) {
							pstmt_tDBOutput_5.setNull(23,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_5.setString(23,
									row5.item_status_code);
						}

						if (row5.unit_type == null) {
							pstmt_tDBOutput_5.setNull(24,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_5.setString(24, row5.unit_type);
						}

						if (row5.is_download_included == null) {
							pstmt_tDBOutput_5.setNull(25,
									java.sql.Types.BOOLEAN);
						} else {
							pstmt_tDBOutput_5.setBoolean(25,
									row5.is_download_included);
						}

						if (row5.authors == null) {
							pstmt_tDBOutput_5.setNull(26,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_5.setString(26, row5.authors);
						}

						if (row5.work_uid == null) {
							pstmt_tDBOutput_5.setNull(27,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_5.setString(27, row5.work_uid);
						}

						if (row5.content_metadata == null) {
							pstmt_tDBOutput_5.setNull(28,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_5.setString(28,
									row5.content_metadata);
						}

						if (row5.previous_status_code == null) {
							pstmt_tDBOutput_5.setNull(29,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_5.setString(29,
									row5.previous_status_code);
						}

						if (row5.content_standard_number == null) {
							pstmt_tDBOutput_5.setNull(30,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_5.setString(30,
									row5.content_standard_number);
						}

						if (row5.duration == null) {
							pstmt_tDBOutput_5.setNull(31,
									java.sql.Types.INTEGER);
						} else {
							pstmt_tDBOutput_5.setInt(31, row5.duration);
						}

						if (row5.content_standard_number_type == null) {
							pstmt_tDBOutput_5.setNull(32,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_5.setString(32,
									row5.content_standard_number_type);
						}

						if (row5.standard_number_type == null) {
							pstmt_tDBOutput_5.setNull(33,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_5.setString(33,
									row5.standard_number_type);
						}

						if (row5.standard_number == null) {
							pstmt_tDBOutput_5.setNull(34,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_5.setString(34,
									row5.standard_number);
						}

						if (row5.duration_display == null) {
							pstmt_tDBOutput_5.setNull(35,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_5.setString(35,
									row5.duration_display);
						}

						if (row5.content_publisher_name == null) {
							pstmt_tDBOutput_5.setNull(36,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_5.setString(36,
									row5.content_publisher_name);
						}

						if (row5.document_delivery_date != null) {
							pstmt_tDBOutput_5.setTimestamp(
									37,
									new java.sql.Timestamp(
											row5.document_delivery_date
													.getTime()));
						} else {
							pstmt_tDBOutput_5.setNull(37,
									java.sql.Types.TIMESTAMP);
						}

						if (row5.external_order_id == null) {
							pstmt_tDBOutput_5.setNull(38,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_5.setString(38,
									row5.external_order_id);
						}

						if (row5.promo_code_type == null) {
							pstmt_tDBOutput_5.setNull(39,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_5.setString(39,
									row5.promo_code_type);
						}

						if (row5.promo_code == null) {
							pstmt_tDBOutput_5.setNull(40,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_5.setString(40, row5.promo_code);
						}

						if (row5.rights_distribution_sent_status == null) {
							pstmt_tDBOutput_5.setNull(41,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_5.setString(41,
									row5.rights_distribution_sent_status);
						}

						if (row5.crm_error_reason == null) {
							pstmt_tDBOutput_5.setNull(42,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_5.setString(42,
									row5.crm_error_reason);
						}

						if (row5.publication_metadata == null) {
							pstmt_tDBOutput_5.setNull(43,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_5.setString(43,
									row5.publication_metadata);
						}

						if (row5.publication_work_id == null) {
							pstmt_tDBOutput_5.setNull(44,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_5.setString(44,
									row5.publication_work_id);
						}

						if (row5.external_comment == null) {
							pstmt_tDBOutput_5.setNull(45,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_5.setString(45,
									row5.external_comment);
						}

						if (row5.right_qualified_statement == null) {
							pstmt_tDBOutput_5.setNull(46,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_5.setString(46,
									row5.right_qualified_statement);
						}

						if (row5.product_family == null) {
							pstmt_tDBOutput_5.setNull(47,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_5
									.setString(47, row5.product_family);
						}

						if (row5.product_name_description == null) {
							pstmt_tDBOutput_5.setNull(48,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_5.setString(48,
									row5.product_name_description);
						}

						if (row5.order_item_details == null) {
							pstmt_tDBOutput_5.setNull(49,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_5.setString(49,
									row5.order_item_details);
						}

						if (row5.check_date != null) {
							pstmt_tDBOutput_5.setTimestamp(
									50,
									new java.sql.Timestamp(row5.check_date
											.getTime()));
						} else {
							pstmt_tDBOutput_5.setNull(50,
									java.sql.Types.TIMESTAMP);
						}

						if (row5.check_number == null) {
							pstmt_tDBOutput_5.setNull(51,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_5.setString(51, row5.check_number);
						}

						if (row5.period_end_date != null) {
							pstmt_tDBOutput_5.setTimestamp(
									52,
									new java.sql.Timestamp(row5.period_end_date
											.getTime()));
						} else {
							pstmt_tDBOutput_5.setNull(52,
									java.sql.Types.TIMESTAMP);
						}

						if (row5.publication_date != null) {
							pstmt_tDBOutput_5.setTimestamp(53,
									new java.sql.Timestamp(
											row5.publication_date.getTime()));
						} else {
							pstmt_tDBOutput_5.setNull(53,
									java.sql.Types.TIMESTAMP);
						}

						if (row5.ror_tax_id == null) {
							pstmt_tDBOutput_5.setNull(54,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_5.setString(54, row5.ror_tax_id);
						}

						if (row5.article_identifiers == null) {
							pstmt_tDBOutput_5.setNull(55,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_5.setString(55,
									row5.article_identifiers);
						}

						if (row5.om_shipping_address_uid == null) {
							pstmt_tDBOutput_5.setNull(56,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_5.setString(56,
									row5.om_shipping_address_uid);
						}

						if (row5.shipping_addressee_name == null) {
							pstmt_tDBOutput_5.setNull(57,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_5.setString(57,
									row5.shipping_addressee_name);
						}

						if (row5.shipping_attention_to == null) {
							pstmt_tDBOutput_5.setNull(58,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_5.setString(58,
									row5.shipping_attention_to);
						}

						if (row5.content_source == null) {
							pstmt_tDBOutput_5.setNull(59,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_5
									.setString(59, row5.content_source);
						}

						if (row5.content_platform == null) {
							pstmt_tDBOutput_5.setNull(60,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_5.setString(60,
									row5.content_platform);
						}

						if (row5.om_distribution_group_uid == null) {
							pstmt_tDBOutput_5.setNull(61,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_5.setString(61,
									row5.om_distribution_group_uid);
						}

						pstmt_tDBOutput_5.addBatch();
						nb_line_tDBOutput_5++;

						batchSizeCounter_tDBOutput_5++;

						if (!whetherReject_tDBOutput_5) {
						}
						if ((batchSize_tDBOutput_5 > 0)
								&& (batchSize_tDBOutput_5 <= batchSizeCounter_tDBOutput_5)) {
							try {
								int countSum_tDBOutput_5 = 0;

								for (int countEach_tDBOutput_5 : pstmt_tDBOutput_5
										.executeBatch()) {
									countSum_tDBOutput_5 += (countEach_tDBOutput_5 < 0 ? 0
											: countEach_tDBOutput_5);
								}

								insertedCount_tDBOutput_5 += countSum_tDBOutput_5;

								batchSizeCounter_tDBOutput_5 = 0;
							} catch (java.sql.BatchUpdateException e_tDBOutput_5) {
								java.sql.SQLException ne_tDBOutput_5 = e_tDBOutput_5
										.getNextException(), sqle_tDBOutput_5 = null;
								String errormessage_tDBOutput_5;
								if (ne_tDBOutput_5 != null) {
									// build new exception to provide the
									// original cause
									sqle_tDBOutput_5 = new java.sql.SQLException(
											e_tDBOutput_5.getMessage()
													+ "\ncaused by: "
													+ ne_tDBOutput_5
															.getMessage(),
											ne_tDBOutput_5.getSQLState(),
											ne_tDBOutput_5.getErrorCode(),
											ne_tDBOutput_5);
									errormessage_tDBOutput_5 = sqle_tDBOutput_5
											.getMessage();
								} else {
									errormessage_tDBOutput_5 = e_tDBOutput_5
											.getMessage();
								}

								int countSum_tDBOutput_5 = 0;
								for (int countEach_tDBOutput_5 : e_tDBOutput_5
										.getUpdateCounts()) {
									countSum_tDBOutput_5 += (countEach_tDBOutput_5 < 0 ? 0
											: countEach_tDBOutput_5);
								}

								insertedCount_tDBOutput_5 += countSum_tDBOutput_5;

								System.err.println(errormessage_tDBOutput_5);

							}
						}

						commitCounter_tDBOutput_5++;
						if (commitEvery_tDBOutput_5 <= commitCounter_tDBOutput_5) {
							if ((batchSize_tDBOutput_5 > 0)
									&& (batchSizeCounter_tDBOutput_5 > 0)) {
								try {
									int countSum_tDBOutput_5 = 0;

									for (int countEach_tDBOutput_5 : pstmt_tDBOutput_5
											.executeBatch()) {
										countSum_tDBOutput_5 += (countEach_tDBOutput_5 < 0 ? 0
												: countEach_tDBOutput_5);
									}

									insertedCount_tDBOutput_5 += countSum_tDBOutput_5;

									batchSizeCounter_tDBOutput_5 = 0;
								} catch (java.sql.BatchUpdateException e_tDBOutput_5) {
									java.sql.SQLException ne_tDBOutput_5 = e_tDBOutput_5
											.getNextException(), sqle_tDBOutput_5 = null;
									String errormessage_tDBOutput_5;
									if (ne_tDBOutput_5 != null) {
										// build new exception to provide the
										// original cause
										sqle_tDBOutput_5 = new java.sql.SQLException(
												e_tDBOutput_5.getMessage()
														+ "\ncaused by: "
														+ ne_tDBOutput_5
																.getMessage(),
												ne_tDBOutput_5.getSQLState(),
												ne_tDBOutput_5.getErrorCode(),
												ne_tDBOutput_5);
										errormessage_tDBOutput_5 = sqle_tDBOutput_5
												.getMessage();
									} else {
										errormessage_tDBOutput_5 = e_tDBOutput_5
												.getMessage();
									}

									int countSum_tDBOutput_5 = 0;
									for (int countEach_tDBOutput_5 : e_tDBOutput_5
											.getUpdateCounts()) {
										countSum_tDBOutput_5 += (countEach_tDBOutput_5 < 0 ? 0
												: countEach_tDBOutput_5);
									}

									insertedCount_tDBOutput_5 += countSum_tDBOutput_5;

									System.err
											.println(errormessage_tDBOutput_5);

								}
							}
							conn_tDBOutput_5.commit();

							commitCounter_tDBOutput_5 = 0;
						}

						tos_count_tDBOutput_5++;

						/**
						 * [tDBOutput_5 main ] stop
						 */

						/**
						 * [tDBOutput_5 process_data_begin ] start
						 */

						currentComponent = "tDBOutput_5";

						/**
						 * [tDBOutput_5 process_data_begin ] stop
						 */

						/**
						 * [tDBOutput_5 process_data_end ] start
						 */

						currentComponent = "tDBOutput_5";

						/**
						 * [tDBOutput_5 process_data_end ] stop
						 */

						/**
						 * [tDBInput_5 process_data_end ] start
						 */

						currentComponent = "tDBInput_5";

						/**
						 * [tDBInput_5 process_data_end ] stop
						 */

						/**
						 * [tDBInput_5 end ] start
						 */

						currentComponent = "tDBInput_5";

					}
				} finally {
					if (rs_tDBInput_5 != null) {
						rs_tDBInput_5.close();
					}
					if (stmt_tDBInput_5 != null) {
						stmt_tDBInput_5.close();
					}
				}
				globalMap.put("tDBInput_5_NB_LINE", nb_line_tDBInput_5);

				ok_Hash.put("tDBInput_5", true);
				end_Hash.put("tDBInput_5", System.currentTimeMillis());

				tStatCatcher_1.addMessage(
						"end",
						"tDBInput_5",
						end_Hash.get("tDBInput_5")
								- start_Hash.get("tDBInput_5"));
				tStatCatcher_1Process(globalMap);
				talendStats_STATS.addMessage(
						"end",
						"tDBInput_5",
						end_Hash.get("tDBInput_5")
								- start_Hash.get("tDBInput_5"));
				talendStats_STATSProcess(globalMap);

				/**
				 * [tDBInput_5 end ] stop
				 */

				/**
				 * [tDBOutput_5 end ] start
				 */

				currentComponent = "tDBOutput_5";

				try {
					int countSum_tDBOutput_5 = 0;
					if (pstmt_tDBOutput_5 != null
							&& batchSizeCounter_tDBOutput_5 > 0) {

						for (int countEach_tDBOutput_5 : pstmt_tDBOutput_5
								.executeBatch()) {
							countSum_tDBOutput_5 += (countEach_tDBOutput_5 < 0 ? 0
									: countEach_tDBOutput_5);
						}

					}

					insertedCount_tDBOutput_5 += countSum_tDBOutput_5;

				} catch (java.sql.BatchUpdateException e_tDBOutput_5) {
					java.sql.SQLException ne_tDBOutput_5 = e_tDBOutput_5
							.getNextException(), sqle_tDBOutput_5 = null;
					String errormessage_tDBOutput_5;
					if (ne_tDBOutput_5 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_5 = new java.sql.SQLException(
								e_tDBOutput_5.getMessage() + "\ncaused by: "
										+ ne_tDBOutput_5.getMessage(),
								ne_tDBOutput_5.getSQLState(),
								ne_tDBOutput_5.getErrorCode(), ne_tDBOutput_5);
						errormessage_tDBOutput_5 = sqle_tDBOutput_5
								.getMessage();
					} else {
						errormessage_tDBOutput_5 = e_tDBOutput_5.getMessage();
					}

					int countSum_tDBOutput_5 = 0;
					for (int countEach_tDBOutput_5 : e_tDBOutput_5
							.getUpdateCounts()) {
						countSum_tDBOutput_5 += (countEach_tDBOutput_5 < 0 ? 0
								: countEach_tDBOutput_5);
					}

					insertedCount_tDBOutput_5 += countSum_tDBOutput_5;

					System.err.println(errormessage_tDBOutput_5);

				}

				if (pstmt_tDBOutput_5 != null) {

					pstmt_tDBOutput_5.close();
					resourceMap.remove("pstmt_tDBOutput_5");
				}
				resourceMap.put("statementClosed_tDBOutput_5", true);

				conn_tDBOutput_5.commit();

				conn_tDBOutput_5.close();

				resourceMap.put("finish_tDBOutput_5", true);

				nb_line_deleted_tDBOutput_5 = nb_line_deleted_tDBOutput_5
						+ deletedCount_tDBOutput_5;
				nb_line_update_tDBOutput_5 = nb_line_update_tDBOutput_5
						+ updatedCount_tDBOutput_5;
				nb_line_inserted_tDBOutput_5 = nb_line_inserted_tDBOutput_5
						+ insertedCount_tDBOutput_5;
				nb_line_rejected_tDBOutput_5 = nb_line_rejected_tDBOutput_5
						+ rejectedCount_tDBOutput_5;

				globalMap.put("tDBOutput_5_NB_LINE", nb_line_tDBOutput_5);
				globalMap.put("tDBOutput_5_NB_LINE_UPDATED",
						nb_line_update_tDBOutput_5);
				globalMap.put("tDBOutput_5_NB_LINE_INSERTED",
						nb_line_inserted_tDBOutput_5);
				globalMap.put("tDBOutput_5_NB_LINE_DELETED",
						nb_line_deleted_tDBOutput_5);
				globalMap.put("tDBOutput_5_NB_LINE_REJECTED",
						nb_line_rejected_tDBOutput_5);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row5" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tDBOutput_5", true);
				end_Hash.put("tDBOutput_5", System.currentTimeMillis());

				tStatCatcher_1.addMessage(
						"end",
						"tDBOutput_5",
						end_Hash.get("tDBOutput_5")
								- start_Hash.get("tDBOutput_5"));
				tStatCatcher_1Process(globalMap);
				talendStats_STATS.addMessage(
						"end",
						"tDBOutput_5",
						end_Hash.get("tDBOutput_5")
								- start_Hash.get("tDBOutput_5"));
				talendStats_STATSProcess(globalMap);
				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk4", 0, "ok");
				}
				tDBInput_3Process(globalMap);

				/**
				 * [tDBOutput_5 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_5 finally ] start
				 */

				currentComponent = "tDBInput_5";

				/**
				 * [tDBInput_5 finally ] stop
				 */

				/**
				 * [tDBOutput_5 finally ] start
				 */

				currentComponent = "tDBOutput_5";

				try {
					if (resourceMap.get("statementClosed_tDBOutput_5") == null) {
						java.sql.PreparedStatement pstmtToClose_tDBOutput_5 = null;
						if ((pstmtToClose_tDBOutput_5 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmt_tDBOutput_5")) != null) {
							pstmtToClose_tDBOutput_5.close();
						}
					}
				} finally {
					if (resourceMap.get("finish_tDBOutput_5") == null) {
						java.sql.Connection ctn_tDBOutput_5 = null;
						if ((ctn_tDBOutput_5 = (java.sql.Connection) resourceMap
								.get("conn_tDBOutput_5")) != null) {
							try {
								ctn_tDBOutput_5.close();
							} catch (java.sql.SQLException sqlEx_tDBOutput_5) {
								String errorMessage_tDBOutput_5 = "failed to close the connection in tDBOutput_5 :"
										+ sqlEx_tDBOutput_5.getMessage();
								System.err.println(errorMessage_tDBOutput_5);
							}
						}
					}
				}

				/**
				 * [tDBOutput_5 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_5_SUBPROCESS_STATE", 1);
	}

	public static class row3Struct implements
			routines.system.IPersistableRow<row3Struct> {
		final static byte[] commonByteArrayLock_ORDER_ETL_OMS_ETL_NO_PRODUCTS = new byte[0];
		static byte[] commonByteArray_ORDER_ETL_OMS_ETL_NO_PRODUCTS = new byte[0];

		public String om_distribution_uid;

		public String getOm_distribution_uid() {
			return this.om_distribution_uid;
		}

		public String om_order_item_uid;

		public String getOm_order_item_uid() {
			return this.om_order_item_uid;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ORDER_ETL_OMS_ETL_NO_PRODUCTS.length) {
					if (length < 1024
							&& commonByteArray_ORDER_ETL_OMS_ETL_NO_PRODUCTS.length == 0) {
						commonByteArray_ORDER_ETL_OMS_ETL_NO_PRODUCTS = new byte[1024];
					} else {
						commonByteArray_ORDER_ETL_OMS_ETL_NO_PRODUCTS = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ORDER_ETL_OMS_ETL_NO_PRODUCTS, 0,
						length);
				strReturn = new String(
						commonByteArray_ORDER_ETL_OMS_ETL_NO_PRODUCTS, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ORDER_ETL_OMS_ETL_NO_PRODUCTS) {

				try {

					int length = 0;

					this.om_distribution_uid = readString(dis);

					this.om_order_item_uid = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.om_distribution_uid, dos);

				// String

				writeString(this.om_order_item_uid, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("om_distribution_uid=" + om_distribution_uid);
			sb.append(",om_order_item_uid=" + om_order_item_uid);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_3Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDBInput_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row3Struct row3 = new row3Struct();

				/**
				 * [tDBOutput_3 begin ] start
				 */

				ok_Hash.put("tDBOutput_3", false);
				start_Hash.put("tDBOutput_3", System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tDBOutput_3");
				tStatCatcher_1Process(globalMap);

				talendStats_STATS.addMessage("begin", "tDBOutput_3");
				talendStats_STATSProcess(globalMap);

				currentComponent = "tDBOutput_3";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row3" + iterateId, 0, 0);

					}
				}

				int tos_count_tDBOutput_3 = 0;

				String dbschema_tDBOutput_3 = null;
				dbschema_tDBOutput_3 = context.data_warehouse_order_dwos_schema;

				String tableName_tDBOutput_3 = null;
				if (dbschema_tDBOutput_3 == null
						|| dbschema_tDBOutput_3.trim().length() == 0) {
					tableName_tDBOutput_3 = "dwo_om_item_distribution";
				} else {
					tableName_tDBOutput_3 = dbschema_tDBOutput_3 + "\".\""
							+ "dwo_om_item_distribution";
				}

				int nb_line_tDBOutput_3 = 0;
				int nb_line_update_tDBOutput_3 = 0;
				int nb_line_inserted_tDBOutput_3 = 0;
				int nb_line_deleted_tDBOutput_3 = 0;
				int nb_line_rejected_tDBOutput_3 = 0;

				int deletedCount_tDBOutput_3 = 0;
				int updatedCount_tDBOutput_3 = 0;
				int insertedCount_tDBOutput_3 = 0;
				int rejectedCount_tDBOutput_3 = 0;

				boolean whetherReject_tDBOutput_3 = false;

				java.sql.Connection conn_tDBOutput_3 = null;
				String dbUser_tDBOutput_3 = null;

				java.lang.Class.forName("org.postgresql.Driver");
				String url_tDBOutput_3 = "jdbc:postgresql://"
						+ context.data_warehouse_order_dwos_host + ":"
						+ context.data_warehouse_order_dwos_port + "/"
						+ context.data_warehouse_order_dwos_database;
				dbUser_tDBOutput_3 = context.data_warehouse_order_dwos_username;

				final String decryptedPassword_tDBOutput_3 = context.data_warehouse_order_dwos_password;

				String dbPwd_tDBOutput_3 = decryptedPassword_tDBOutput_3;

				conn_tDBOutput_3 = java.sql.DriverManager.getConnection(
						url_tDBOutput_3, dbUser_tDBOutput_3, dbPwd_tDBOutput_3);

				resourceMap.put("conn_tDBOutput_3", conn_tDBOutput_3);
				conn_tDBOutput_3.setAutoCommit(false);
				int commitEvery_tDBOutput_3 = 10000;
				int commitCounter_tDBOutput_3 = 0;

				int batchSize_tDBOutput_3 = 10000;
				int batchSizeCounter_tDBOutput_3 = 0;

				int count_tDBOutput_3 = 0;
				int rsTruncCountNumber_tDBOutput_3 = 0;
				try (java.sql.Statement stmtTruncCount_tDBOutput_3 = conn_tDBOutput_3
						.createStatement()) {
					try (java.sql.ResultSet rsTruncCount_tDBOutput_3 = stmtTruncCount_tDBOutput_3
							.executeQuery("SELECT COUNT(1) FROM \""
									+ tableName_tDBOutput_3 + "\"")) {
						if (rsTruncCount_tDBOutput_3.next()) {
							rsTruncCountNumber_tDBOutput_3 = rsTruncCount_tDBOutput_3
									.getInt(1);
						}
					}
				}
				try (java.sql.Statement stmtTrunc_tDBOutput_3 = conn_tDBOutput_3
						.createStatement()) {
					stmtTrunc_tDBOutput_3.executeUpdate("TRUNCATE TABLE \""
							+ tableName_tDBOutput_3 + "\"");
					deletedCount_tDBOutput_3 += rsTruncCountNumber_tDBOutput_3;
				}
				String insert_tDBOutput_3 = "INSERT INTO \""
						+ tableName_tDBOutput_3
						+ "\" (\"om_distribution_uid\",\"om_order_item_uid\") VALUES (?,?)";

				java.sql.PreparedStatement pstmt_tDBOutput_3 = conn_tDBOutput_3
						.prepareStatement(insert_tDBOutput_3);
				resourceMap.put("pstmt_tDBOutput_3", pstmt_tDBOutput_3);

				/**
				 * [tDBOutput_3 begin ] stop
				 */

				/**
				 * [tDBInput_3 begin ] start
				 */

				ok_Hash.put("tDBInput_3", false);
				start_Hash.put("tDBInput_3", System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tDBInput_3");
				tStatCatcher_1Process(globalMap);

				talendStats_STATS.addMessage("begin", "tDBInput_3");
				talendStats_STATSProcess(globalMap);

				currentComponent = "tDBInput_3";

				int tos_count_tDBInput_3 = 0;

				int nb_line_tDBInput_3 = 0;
				java.sql.Connection conn_tDBInput_3 = null;
				conn_tDBInput_3 = (java.sql.Connection) globalMap
						.get("conn_tDBConnection_1");

				java.sql.Statement stmt_tDBInput_3 = conn_tDBInput_3
						.createStatement();
				stmt_tDBInput_3.setFetchSize(1000);

				String dbquery_tDBInput_3 = "SELECT *\nFROM apps.om_item_distribution";

				globalMap.put("tDBInput_3_QUERY", dbquery_tDBInput_3);
				java.sql.ResultSet rs_tDBInput_3 = null;

				try {
					rs_tDBInput_3 = stmt_tDBInput_3
							.executeQuery(dbquery_tDBInput_3);
					java.sql.ResultSetMetaData rsmd_tDBInput_3 = rs_tDBInput_3
							.getMetaData();
					int colQtyInRs_tDBInput_3 = rsmd_tDBInput_3
							.getColumnCount();

					String tmpContent_tDBInput_3 = null;

					while (rs_tDBInput_3.next()) {
						nb_line_tDBInput_3++;

						if (colQtyInRs_tDBInput_3 < 1) {
							row3.om_distribution_uid = null;
						} else {

							row3.om_distribution_uid = routines.system.JDBCUtil
									.getString(rs_tDBInput_3, 1, false);
						}
						if (colQtyInRs_tDBInput_3 < 2) {
							row3.om_order_item_uid = null;
						} else {

							row3.om_order_item_uid = routines.system.JDBCUtil
									.getString(rs_tDBInput_3, 2, false);
						}

						/**
						 * [tDBInput_3 begin ] stop
						 */

						/**
						 * [tDBInput_3 main ] start
						 */

						currentComponent = "tDBInput_3";

						tos_count_tDBInput_3++;

						/**
						 * [tDBInput_3 main ] stop
						 */

						/**
						 * [tDBInput_3 process_data_begin ] start
						 */

						currentComponent = "tDBInput_3";

						/**
						 * [tDBInput_3 process_data_begin ] stop
						 */

						/**
						 * [tDBOutput_3 main ] start
						 */

						currentComponent = "tDBOutput_3";

						// row3
						// row3

						if (execStat) {
							runStat.updateStatOnConnection("row3" + iterateId,
									1, 1);
						}

						whetherReject_tDBOutput_3 = false;
						if (row3.om_distribution_uid == null) {
							pstmt_tDBOutput_3
									.setNull(1, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_3.setString(1,
									row3.om_distribution_uid);
						}

						if (row3.om_order_item_uid == null) {
							pstmt_tDBOutput_3
									.setNull(2, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_3.setString(2,
									row3.om_order_item_uid);
						}

						pstmt_tDBOutput_3.addBatch();
						nb_line_tDBOutput_3++;

						batchSizeCounter_tDBOutput_3++;

						if (!whetherReject_tDBOutput_3) {
						}
						if ((batchSize_tDBOutput_3 > 0)
								&& (batchSize_tDBOutput_3 <= batchSizeCounter_tDBOutput_3)) {
							try {
								int countSum_tDBOutput_3 = 0;

								for (int countEach_tDBOutput_3 : pstmt_tDBOutput_3
										.executeBatch()) {
									countSum_tDBOutput_3 += (countEach_tDBOutput_3 < 0 ? 0
											: countEach_tDBOutput_3);
								}

								insertedCount_tDBOutput_3 += countSum_tDBOutput_3;

								batchSizeCounter_tDBOutput_3 = 0;
							} catch (java.sql.BatchUpdateException e_tDBOutput_3) {
								java.sql.SQLException ne_tDBOutput_3 = e_tDBOutput_3
										.getNextException(), sqle_tDBOutput_3 = null;
								String errormessage_tDBOutput_3;
								if (ne_tDBOutput_3 != null) {
									// build new exception to provide the
									// original cause
									sqle_tDBOutput_3 = new java.sql.SQLException(
											e_tDBOutput_3.getMessage()
													+ "\ncaused by: "
													+ ne_tDBOutput_3
															.getMessage(),
											ne_tDBOutput_3.getSQLState(),
											ne_tDBOutput_3.getErrorCode(),
											ne_tDBOutput_3);
									errormessage_tDBOutput_3 = sqle_tDBOutput_3
											.getMessage();
								} else {
									errormessage_tDBOutput_3 = e_tDBOutput_3
											.getMessage();
								}

								int countSum_tDBOutput_3 = 0;
								for (int countEach_tDBOutput_3 : e_tDBOutput_3
										.getUpdateCounts()) {
									countSum_tDBOutput_3 += (countEach_tDBOutput_3 < 0 ? 0
											: countEach_tDBOutput_3);
								}

								insertedCount_tDBOutput_3 += countSum_tDBOutput_3;

								System.err.println(errormessage_tDBOutput_3);

							}
						}

						commitCounter_tDBOutput_3++;
						if (commitEvery_tDBOutput_3 <= commitCounter_tDBOutput_3) {
							if ((batchSize_tDBOutput_3 > 0)
									&& (batchSizeCounter_tDBOutput_3 > 0)) {
								try {
									int countSum_tDBOutput_3 = 0;

									for (int countEach_tDBOutput_3 : pstmt_tDBOutput_3
											.executeBatch()) {
										countSum_tDBOutput_3 += (countEach_tDBOutput_3 < 0 ? 0
												: countEach_tDBOutput_3);
									}

									insertedCount_tDBOutput_3 += countSum_tDBOutput_3;

									batchSizeCounter_tDBOutput_3 = 0;
								} catch (java.sql.BatchUpdateException e_tDBOutput_3) {
									java.sql.SQLException ne_tDBOutput_3 = e_tDBOutput_3
											.getNextException(), sqle_tDBOutput_3 = null;
									String errormessage_tDBOutput_3;
									if (ne_tDBOutput_3 != null) {
										// build new exception to provide the
										// original cause
										sqle_tDBOutput_3 = new java.sql.SQLException(
												e_tDBOutput_3.getMessage()
														+ "\ncaused by: "
														+ ne_tDBOutput_3
																.getMessage(),
												ne_tDBOutput_3.getSQLState(),
												ne_tDBOutput_3.getErrorCode(),
												ne_tDBOutput_3);
										errormessage_tDBOutput_3 = sqle_tDBOutput_3
												.getMessage();
									} else {
										errormessage_tDBOutput_3 = e_tDBOutput_3
												.getMessage();
									}

									int countSum_tDBOutput_3 = 0;
									for (int countEach_tDBOutput_3 : e_tDBOutput_3
											.getUpdateCounts()) {
										countSum_tDBOutput_3 += (countEach_tDBOutput_3 < 0 ? 0
												: countEach_tDBOutput_3);
									}

									insertedCount_tDBOutput_3 += countSum_tDBOutput_3;

									System.err
											.println(errormessage_tDBOutput_3);

								}
							}
							conn_tDBOutput_3.commit();

							commitCounter_tDBOutput_3 = 0;
						}

						tos_count_tDBOutput_3++;

						/**
						 * [tDBOutput_3 main ] stop
						 */

						/**
						 * [tDBOutput_3 process_data_begin ] start
						 */

						currentComponent = "tDBOutput_3";

						/**
						 * [tDBOutput_3 process_data_begin ] stop
						 */

						/**
						 * [tDBOutput_3 process_data_end ] start
						 */

						currentComponent = "tDBOutput_3";

						/**
						 * [tDBOutput_3 process_data_end ] stop
						 */

						/**
						 * [tDBInput_3 process_data_end ] start
						 */

						currentComponent = "tDBInput_3";

						/**
						 * [tDBInput_3 process_data_end ] stop
						 */

						/**
						 * [tDBInput_3 end ] start
						 */

						currentComponent = "tDBInput_3";

					}
				} finally {
					if (rs_tDBInput_3 != null) {
						rs_tDBInput_3.close();
					}
					if (stmt_tDBInput_3 != null) {
						stmt_tDBInput_3.close();
					}
				}
				globalMap.put("tDBInput_3_NB_LINE", nb_line_tDBInput_3);

				ok_Hash.put("tDBInput_3", true);
				end_Hash.put("tDBInput_3", System.currentTimeMillis());

				tStatCatcher_1.addMessage(
						"end",
						"tDBInput_3",
						end_Hash.get("tDBInput_3")
								- start_Hash.get("tDBInput_3"));
				tStatCatcher_1Process(globalMap);
				talendStats_STATS.addMessage(
						"end",
						"tDBInput_3",
						end_Hash.get("tDBInput_3")
								- start_Hash.get("tDBInput_3"));
				talendStats_STATSProcess(globalMap);

				/**
				 * [tDBInput_3 end ] stop
				 */

				/**
				 * [tDBOutput_3 end ] start
				 */

				currentComponent = "tDBOutput_3";

				try {
					int countSum_tDBOutput_3 = 0;
					if (pstmt_tDBOutput_3 != null
							&& batchSizeCounter_tDBOutput_3 > 0) {

						for (int countEach_tDBOutput_3 : pstmt_tDBOutput_3
								.executeBatch()) {
							countSum_tDBOutput_3 += (countEach_tDBOutput_3 < 0 ? 0
									: countEach_tDBOutput_3);
						}

					}

					insertedCount_tDBOutput_3 += countSum_tDBOutput_3;

				} catch (java.sql.BatchUpdateException e_tDBOutput_3) {
					java.sql.SQLException ne_tDBOutput_3 = e_tDBOutput_3
							.getNextException(), sqle_tDBOutput_3 = null;
					String errormessage_tDBOutput_3;
					if (ne_tDBOutput_3 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_3 = new java.sql.SQLException(
								e_tDBOutput_3.getMessage() + "\ncaused by: "
										+ ne_tDBOutput_3.getMessage(),
								ne_tDBOutput_3.getSQLState(),
								ne_tDBOutput_3.getErrorCode(), ne_tDBOutput_3);
						errormessage_tDBOutput_3 = sqle_tDBOutput_3
								.getMessage();
					} else {
						errormessage_tDBOutput_3 = e_tDBOutput_3.getMessage();
					}

					int countSum_tDBOutput_3 = 0;
					for (int countEach_tDBOutput_3 : e_tDBOutput_3
							.getUpdateCounts()) {
						countSum_tDBOutput_3 += (countEach_tDBOutput_3 < 0 ? 0
								: countEach_tDBOutput_3);
					}

					insertedCount_tDBOutput_3 += countSum_tDBOutput_3;

					System.err.println(errormessage_tDBOutput_3);

				}

				if (pstmt_tDBOutput_3 != null) {

					pstmt_tDBOutput_3.close();
					resourceMap.remove("pstmt_tDBOutput_3");
				}
				resourceMap.put("statementClosed_tDBOutput_3", true);

				conn_tDBOutput_3.commit();

				conn_tDBOutput_3.close();

				resourceMap.put("finish_tDBOutput_3", true);

				nb_line_deleted_tDBOutput_3 = nb_line_deleted_tDBOutput_3
						+ deletedCount_tDBOutput_3;
				nb_line_update_tDBOutput_3 = nb_line_update_tDBOutput_3
						+ updatedCount_tDBOutput_3;
				nb_line_inserted_tDBOutput_3 = nb_line_inserted_tDBOutput_3
						+ insertedCount_tDBOutput_3;
				nb_line_rejected_tDBOutput_3 = nb_line_rejected_tDBOutput_3
						+ rejectedCount_tDBOutput_3;

				globalMap.put("tDBOutput_3_NB_LINE", nb_line_tDBOutput_3);
				globalMap.put("tDBOutput_3_NB_LINE_UPDATED",
						nb_line_update_tDBOutput_3);
				globalMap.put("tDBOutput_3_NB_LINE_INSERTED",
						nb_line_inserted_tDBOutput_3);
				globalMap.put("tDBOutput_3_NB_LINE_DELETED",
						nb_line_deleted_tDBOutput_3);
				globalMap.put("tDBOutput_3_NB_LINE_REJECTED",
						nb_line_rejected_tDBOutput_3);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row3" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tDBOutput_3", true);
				end_Hash.put("tDBOutput_3", System.currentTimeMillis());

				tStatCatcher_1.addMessage(
						"end",
						"tDBOutput_3",
						end_Hash.get("tDBOutput_3")
								- start_Hash.get("tDBOutput_3"));
				tStatCatcher_1Process(globalMap);
				talendStats_STATS.addMessage(
						"end",
						"tDBOutput_3",
						end_Hash.get("tDBOutput_3")
								- start_Hash.get("tDBOutput_3"));
				talendStats_STATSProcess(globalMap);
				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk5", 0, "ok");
				}
				tDBInput_6Process(globalMap);

				/**
				 * [tDBOutput_3 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_3 finally ] start
				 */

				currentComponent = "tDBInput_3";

				/**
				 * [tDBInput_3 finally ] stop
				 */

				/**
				 * [tDBOutput_3 finally ] start
				 */

				currentComponent = "tDBOutput_3";

				try {
					if (resourceMap.get("statementClosed_tDBOutput_3") == null) {
						java.sql.PreparedStatement pstmtToClose_tDBOutput_3 = null;
						if ((pstmtToClose_tDBOutput_3 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmt_tDBOutput_3")) != null) {
							pstmtToClose_tDBOutput_3.close();
						}
					}
				} finally {
					if (resourceMap.get("finish_tDBOutput_3") == null) {
						java.sql.Connection ctn_tDBOutput_3 = null;
						if ((ctn_tDBOutput_3 = (java.sql.Connection) resourceMap
								.get("conn_tDBOutput_3")) != null) {
							try {
								ctn_tDBOutput_3.close();
							} catch (java.sql.SQLException sqlEx_tDBOutput_3) {
								String errorMessage_tDBOutput_3 = "failed to close the connection in tDBOutput_3 :"
										+ sqlEx_tDBOutput_3.getMessage();
								System.err.println(errorMessage_tDBOutput_3);
							}
						}
					}
				}

				/**
				 * [tDBOutput_3 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_3_SUBPROCESS_STATE", 1);
	}

	public static class row6Struct implements
			routines.system.IPersistableRow<row6Struct> {
		final static byte[] commonByteArrayLock_ORDER_ETL_OMS_ETL_NO_PRODUCTS = new byte[0];
		static byte[] commonByteArray_ORDER_ETL_OMS_ETL_NO_PRODUCTS = new byte[0];

		public String om_order_item_fees_uid;

		public String getOm_order_item_fees_uid() {
			return this.om_order_item_fees_uid;
		}

		public BigDecimal total_amount;

		public BigDecimal getTotal_amount() {
			return this.total_amount;
		}

		public BigDecimal royalty_amount;

		public BigDecimal getRoyalty_amount() {
			return this.royalty_amount;
		}

		public BigDecimal ccc_fee_amount;

		public BigDecimal getCcc_fee_amount() {
			return this.ccc_fee_amount;
		}

		public BigDecimal licensee_fee_amount;

		public BigDecimal getLicensee_fee_amount() {
			return this.licensee_fee_amount;
		}

		public BigDecimal reprint_amount;

		public BigDecimal getReprint_amount() {
			return this.reprint_amount;
		}

		public BigDecimal shipping_amount;

		public BigDecimal getShipping_amount() {
			return this.shipping_amount;
		}

		public BigDecimal tax_amount;

		public BigDecimal getTax_amount() {
			return this.tax_amount;
		}

		public String rights_holder_price_currency_code;

		public String getRights_holder_price_currency_code() {
			return this.rights_holder_price_currency_code;
		}

		public String transaction_currency_code;

		public String getTransaction_currency_code() {
			return this.transaction_currency_code;
		}

		public BigDecimal currency_exchange_rate_to_price_list;

		public BigDecimal getCurrency_exchange_rate_to_price_list() {
			return this.currency_exchange_rate_to_price_list;
		}

		public java.util.Date currency_exchange_rate_date;

		public java.util.Date getCurrency_exchange_rate_date() {
			return this.currency_exchange_rate_date;
		}

		public int record_version;

		public int getRecord_version() {
			return this.record_version;
		}

		public String created_by_user;

		public String getCreated_by_user() {
			return this.created_by_user;
		}

		public java.util.Date created_datetime;

		public java.util.Date getCreated_datetime() {
			return this.created_datetime;
		}

		public String updated_by_user;

		public String getUpdated_by_user() {
			return this.updated_by_user;
		}

		public java.util.Date updated_datetime;

		public java.util.Date getUpdated_datetime() {
			return this.updated_datetime;
		}

		public Boolean is_deleted_flag;

		public Boolean getIs_deleted_flag() {
			return this.is_deleted_flag;
		}

		public BigDecimal ccc_fee_discount;

		public BigDecimal getCcc_fee_discount() {
			return this.ccc_fee_discount;
		}

		public BigDecimal licensee_fee_discount;

		public BigDecimal getLicensee_fee_discount() {
			return this.licensee_fee_discount;
		}

		public BigDecimal royalty_fee_discount;

		public BigDecimal getRoyalty_fee_discount() {
			return this.royalty_fee_discount;
		}

		public String pricing_model;

		public String getPricing_model() {
			return this.pricing_model;
		}

		public String ps_service_plan_uid;

		public String getPs_service_plan_uid() {
			return this.ps_service_plan_uid;
		}

		public Boolean is_distributable;

		public Boolean getIs_distributable() {
			return this.is_distributable;
		}

		public String tax_company_code;

		public String getTax_company_code() {
			return this.tax_company_code;
		}

		public BigDecimal total_amount_in_transaction_currency;

		public BigDecimal getTotal_amount_in_transaction_currency() {
			return this.total_amount_in_transaction_currency;
		}

		public BigDecimal original_total_amount_in_transaction_currency;

		public BigDecimal getOriginal_total_amount_in_transaction_currency() {
			return this.original_total_amount_in_transaction_currency;
		}

		public BigDecimal tax_amount_in_transaction_currency;

		public BigDecimal getTax_amount_in_transaction_currency() {
			return this.tax_amount_in_transaction_currency;
		}

		public String om_origin_tax_address_uid;

		public String getOm_origin_tax_address_uid() {
			return this.om_origin_tax_address_uid;
		}

		public BigDecimal original_total_amount;

		public BigDecimal getOriginal_total_amount() {
			return this.original_total_amount;
		}

		public BigDecimal adjustment_amount;

		public BigDecimal getAdjustment_amount() {
			return this.adjustment_amount;
		}

		public String avalara_external_reference_id;

		public String getAvalara_external_reference_id() {
			return this.avalara_external_reference_id;
		}

		public String formatted_tax_id;

		public String getFormatted_tax_id() {
			return this.formatted_tax_id;
		}

		public BigDecimal tax_rate;

		public BigDecimal getTax_rate() {
			return this.tax_rate;
		}

		public BigDecimal currency_exchange_rate_txn_to_rh;

		public BigDecimal getCurrency_exchange_rate_txn_to_rh() {
			return this.currency_exchange_rate_txn_to_rh;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ORDER_ETL_OMS_ETL_NO_PRODUCTS.length) {
					if (length < 1024
							&& commonByteArray_ORDER_ETL_OMS_ETL_NO_PRODUCTS.length == 0) {
						commonByteArray_ORDER_ETL_OMS_ETL_NO_PRODUCTS = new byte[1024];
					} else {
						commonByteArray_ORDER_ETL_OMS_ETL_NO_PRODUCTS = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ORDER_ETL_OMS_ETL_NO_PRODUCTS, 0,
						length);
				strReturn = new String(
						commonByteArray_ORDER_ETL_OMS_ETL_NO_PRODUCTS, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ORDER_ETL_OMS_ETL_NO_PRODUCTS) {

				try {

					int length = 0;

					this.om_order_item_fees_uid = readString(dis);

					this.total_amount = (BigDecimal) dis.readObject();

					this.royalty_amount = (BigDecimal) dis.readObject();

					this.ccc_fee_amount = (BigDecimal) dis.readObject();

					this.licensee_fee_amount = (BigDecimal) dis.readObject();

					this.reprint_amount = (BigDecimal) dis.readObject();

					this.shipping_amount = (BigDecimal) dis.readObject();

					this.tax_amount = (BigDecimal) dis.readObject();

					this.rights_holder_price_currency_code = readString(dis);

					this.transaction_currency_code = readString(dis);

					this.currency_exchange_rate_to_price_list = (BigDecimal) dis
							.readObject();

					this.currency_exchange_rate_date = readDate(dis);

					this.record_version = dis.readInt();

					this.created_by_user = readString(dis);

					this.created_datetime = readDate(dis);

					this.updated_by_user = readString(dis);

					this.updated_datetime = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.is_deleted_flag = null;
					} else {
						this.is_deleted_flag = dis.readBoolean();
					}

					this.ccc_fee_discount = (BigDecimal) dis.readObject();

					this.licensee_fee_discount = (BigDecimal) dis.readObject();

					this.royalty_fee_discount = (BigDecimal) dis.readObject();

					this.pricing_model = readString(dis);

					this.ps_service_plan_uid = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.is_distributable = null;
					} else {
						this.is_distributable = dis.readBoolean();
					}

					this.tax_company_code = readString(dis);

					this.total_amount_in_transaction_currency = (BigDecimal) dis
							.readObject();

					this.original_total_amount_in_transaction_currency = (BigDecimal) dis
							.readObject();

					this.tax_amount_in_transaction_currency = (BigDecimal) dis
							.readObject();

					this.om_origin_tax_address_uid = readString(dis);

					this.original_total_amount = (BigDecimal) dis.readObject();

					this.adjustment_amount = (BigDecimal) dis.readObject();

					this.avalara_external_reference_id = readString(dis);

					this.formatted_tax_id = readString(dis);

					this.tax_rate = (BigDecimal) dis.readObject();

					this.currency_exchange_rate_txn_to_rh = (BigDecimal) dis
							.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.om_order_item_fees_uid, dos);

				// BigDecimal

				dos.writeObject(this.total_amount);

				// BigDecimal

				dos.writeObject(this.royalty_amount);

				// BigDecimal

				dos.writeObject(this.ccc_fee_amount);

				// BigDecimal

				dos.writeObject(this.licensee_fee_amount);

				// BigDecimal

				dos.writeObject(this.reprint_amount);

				// BigDecimal

				dos.writeObject(this.shipping_amount);

				// BigDecimal

				dos.writeObject(this.tax_amount);

				// String

				writeString(this.rights_holder_price_currency_code, dos);

				// String

				writeString(this.transaction_currency_code, dos);

				// BigDecimal

				dos.writeObject(this.currency_exchange_rate_to_price_list);

				// java.util.Date

				writeDate(this.currency_exchange_rate_date, dos);

				// int

				dos.writeInt(this.record_version);

				// String

				writeString(this.created_by_user, dos);

				// java.util.Date

				writeDate(this.created_datetime, dos);

				// String

				writeString(this.updated_by_user, dos);

				// java.util.Date

				writeDate(this.updated_datetime, dos);

				// Boolean

				if (this.is_deleted_flag == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.is_deleted_flag);
				}

				// BigDecimal

				dos.writeObject(this.ccc_fee_discount);

				// BigDecimal

				dos.writeObject(this.licensee_fee_discount);

				// BigDecimal

				dos.writeObject(this.royalty_fee_discount);

				// String

				writeString(this.pricing_model, dos);

				// String

				writeString(this.ps_service_plan_uid, dos);

				// Boolean

				if (this.is_distributable == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.is_distributable);
				}

				// String

				writeString(this.tax_company_code, dos);

				// BigDecimal

				dos.writeObject(this.total_amount_in_transaction_currency);

				// BigDecimal

				dos.writeObject(this.original_total_amount_in_transaction_currency);

				// BigDecimal

				dos.writeObject(this.tax_amount_in_transaction_currency);

				// String

				writeString(this.om_origin_tax_address_uid, dos);

				// BigDecimal

				dos.writeObject(this.original_total_amount);

				// BigDecimal

				dos.writeObject(this.adjustment_amount);

				// String

				writeString(this.avalara_external_reference_id, dos);

				// String

				writeString(this.formatted_tax_id, dos);

				// BigDecimal

				dos.writeObject(this.tax_rate);

				// BigDecimal

				dos.writeObject(this.currency_exchange_rate_txn_to_rh);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("om_order_item_fees_uid=" + om_order_item_fees_uid);
			sb.append(",total_amount=" + String.valueOf(total_amount));
			sb.append(",royalty_amount=" + String.valueOf(royalty_amount));
			sb.append(",ccc_fee_amount=" + String.valueOf(ccc_fee_amount));
			sb.append(",licensee_fee_amount="
					+ String.valueOf(licensee_fee_amount));
			sb.append(",reprint_amount=" + String.valueOf(reprint_amount));
			sb.append(",shipping_amount=" + String.valueOf(shipping_amount));
			sb.append(",tax_amount=" + String.valueOf(tax_amount));
			sb.append(",rights_holder_price_currency_code="
					+ rights_holder_price_currency_code);
			sb.append(",transaction_currency_code=" + transaction_currency_code);
			sb.append(",currency_exchange_rate_to_price_list="
					+ String.valueOf(currency_exchange_rate_to_price_list));
			sb.append(",currency_exchange_rate_date="
					+ String.valueOf(currency_exchange_rate_date));
			sb.append(",record_version=" + String.valueOf(record_version));
			sb.append(",created_by_user=" + created_by_user);
			sb.append(",created_datetime=" + String.valueOf(created_datetime));
			sb.append(",updated_by_user=" + updated_by_user);
			sb.append(",updated_datetime=" + String.valueOf(updated_datetime));
			sb.append(",is_deleted_flag=" + String.valueOf(is_deleted_flag));
			sb.append(",ccc_fee_discount=" + String.valueOf(ccc_fee_discount));
			sb.append(",licensee_fee_discount="
					+ String.valueOf(licensee_fee_discount));
			sb.append(",royalty_fee_discount="
					+ String.valueOf(royalty_fee_discount));
			sb.append(",pricing_model=" + pricing_model);
			sb.append(",ps_service_plan_uid=" + ps_service_plan_uid);
			sb.append(",is_distributable=" + String.valueOf(is_distributable));
			sb.append(",tax_company_code=" + tax_company_code);
			sb.append(",total_amount_in_transaction_currency="
					+ String.valueOf(total_amount_in_transaction_currency));
			sb.append(",original_total_amount_in_transaction_currency="
					+ String.valueOf(original_total_amount_in_transaction_currency));
			sb.append(",tax_amount_in_transaction_currency="
					+ String.valueOf(tax_amount_in_transaction_currency));
			sb.append(",om_origin_tax_address_uid=" + om_origin_tax_address_uid);
			sb.append(",original_total_amount="
					+ String.valueOf(original_total_amount));
			sb.append(",adjustment_amount=" + String.valueOf(adjustment_amount));
			sb.append(",avalara_external_reference_id="
					+ avalara_external_reference_id);
			sb.append(",formatted_tax_id=" + formatted_tax_id);
			sb.append(",tax_rate=" + String.valueOf(tax_rate));
			sb.append(",currency_exchange_rate_txn_to_rh="
					+ String.valueOf(currency_exchange_rate_txn_to_rh));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row6Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_6Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDBInput_6_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row6Struct row6 = new row6Struct();

				/**
				 * [tDBOutput_6 begin ] start
				 */

				ok_Hash.put("tDBOutput_6", false);
				start_Hash.put("tDBOutput_6", System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tDBOutput_6");
				tStatCatcher_1Process(globalMap);

				talendStats_STATS.addMessage("begin", "tDBOutput_6");
				talendStats_STATSProcess(globalMap);

				currentComponent = "tDBOutput_6";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row6" + iterateId, 0, 0);

					}
				}

				int tos_count_tDBOutput_6 = 0;

				String dbschema_tDBOutput_6 = null;
				dbschema_tDBOutput_6 = context.data_warehouse_order_dwos_schema;

				String tableName_tDBOutput_6 = null;
				if (dbschema_tDBOutput_6 == null
						|| dbschema_tDBOutput_6.trim().length() == 0) {
					tableName_tDBOutput_6 = "dwo_om_order_item_fees";
				} else {
					tableName_tDBOutput_6 = dbschema_tDBOutput_6 + "\".\""
							+ "dwo_om_order_item_fees";
				}

				int nb_line_tDBOutput_6 = 0;
				int nb_line_update_tDBOutput_6 = 0;
				int nb_line_inserted_tDBOutput_6 = 0;
				int nb_line_deleted_tDBOutput_6 = 0;
				int nb_line_rejected_tDBOutput_6 = 0;

				int deletedCount_tDBOutput_6 = 0;
				int updatedCount_tDBOutput_6 = 0;
				int insertedCount_tDBOutput_6 = 0;
				int rejectedCount_tDBOutput_6 = 0;

				boolean whetherReject_tDBOutput_6 = false;

				java.sql.Connection conn_tDBOutput_6 = null;
				String dbUser_tDBOutput_6 = null;

				java.lang.Class.forName("org.postgresql.Driver");
				String url_tDBOutput_6 = "jdbc:postgresql://"
						+ context.data_warehouse_order_dwos_host + ":"
						+ context.data_warehouse_order_dwos_port + "/"
						+ context.data_warehouse_order_dwos_database;
				dbUser_tDBOutput_6 = context.data_warehouse_order_dwos_username;

				final String decryptedPassword_tDBOutput_6 = context.data_warehouse_order_dwos_password;

				String dbPwd_tDBOutput_6 = decryptedPassword_tDBOutput_6;

				conn_tDBOutput_6 = java.sql.DriverManager.getConnection(
						url_tDBOutput_6, dbUser_tDBOutput_6, dbPwd_tDBOutput_6);

				resourceMap.put("conn_tDBOutput_6", conn_tDBOutput_6);
				conn_tDBOutput_6.setAutoCommit(false);
				int commitEvery_tDBOutput_6 = 10000;
				int commitCounter_tDBOutput_6 = 0;

				int batchSize_tDBOutput_6 = 10000;
				int batchSizeCounter_tDBOutput_6 = 0;

				int count_tDBOutput_6 = 0;
				int rsTruncCountNumber_tDBOutput_6 = 0;
				try (java.sql.Statement stmtTruncCount_tDBOutput_6 = conn_tDBOutput_6
						.createStatement()) {
					try (java.sql.ResultSet rsTruncCount_tDBOutput_6 = stmtTruncCount_tDBOutput_6
							.executeQuery("SELECT COUNT(1) FROM \""
									+ tableName_tDBOutput_6 + "\"")) {
						if (rsTruncCount_tDBOutput_6.next()) {
							rsTruncCountNumber_tDBOutput_6 = rsTruncCount_tDBOutput_6
									.getInt(1);
						}
					}
				}
				try (java.sql.Statement stmtTrunc_tDBOutput_6 = conn_tDBOutput_6
						.createStatement()) {
					stmtTrunc_tDBOutput_6.executeUpdate("TRUNCATE TABLE \""
							+ tableName_tDBOutput_6 + "\"");
					deletedCount_tDBOutput_6 += rsTruncCountNumber_tDBOutput_6;
				}
				String insert_tDBOutput_6 = "INSERT INTO \""
						+ tableName_tDBOutput_6
						+ "\" (\"om_order_item_fees_uid\",\"total_amount\",\"royalty_amount\",\"ccc_fee_amount\",\"licensee_fee_amount\",\"reprint_amount\",\"shipping_amount\",\"tax_amount\",\"rights_holder_price_currency_code\",\"transaction_currency_code\",\"currency_exchange_rate_to_price_list\",\"currency_exchange_rate_date\",\"record_version\",\"created_by_user\",\"created_datetime\",\"updated_by_user\",\"updated_datetime\",\"is_deleted_flag\",\"ccc_fee_discount\",\"licensee_fee_discount\",\"royalty_fee_discount\",\"pricing_model\",\"ps_service_plan_uid\",\"is_distributable\",\"tax_company_code\",\"total_amount_in_transaction_currency\",\"original_total_amount_in_transaction_currency\",\"tax_amount_in_transaction_currency\",\"om_origin_tax_address_uid\",\"original_total_amount\",\"adjustment_amount\",\"avalara_external_reference_id\",\"formatted_tax_id\",\"tax_rate\",\"currency_exchange_rate_txn_to_rh\") VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

				java.sql.PreparedStatement pstmt_tDBOutput_6 = conn_tDBOutput_6
						.prepareStatement(insert_tDBOutput_6);
				resourceMap.put("pstmt_tDBOutput_6", pstmt_tDBOutput_6);

				/**
				 * [tDBOutput_6 begin ] stop
				 */

				/**
				 * [tDBInput_6 begin ] start
				 */

				ok_Hash.put("tDBInput_6", false);
				start_Hash.put("tDBInput_6", System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tDBInput_6");
				tStatCatcher_1Process(globalMap);

				talendStats_STATS.addMessage("begin", "tDBInput_6");
				talendStats_STATSProcess(globalMap);

				currentComponent = "tDBInput_6";

				int tos_count_tDBInput_6 = 0;

				int nb_line_tDBInput_6 = 0;
				java.sql.Connection conn_tDBInput_6 = null;
				conn_tDBInput_6 = (java.sql.Connection) globalMap
						.get("conn_tDBConnection_1");

				java.sql.Statement stmt_tDBInput_6 = conn_tDBInput_6
						.createStatement();
				stmt_tDBInput_6.setFetchSize(1000);

				String dbquery_tDBInput_6 = "SELECT *\nFROM apps.om_order_item_fees";

				globalMap.put("tDBInput_6_QUERY", dbquery_tDBInput_6);
				java.sql.ResultSet rs_tDBInput_6 = null;

				try {
					rs_tDBInput_6 = stmt_tDBInput_6
							.executeQuery(dbquery_tDBInput_6);
					java.sql.ResultSetMetaData rsmd_tDBInput_6 = rs_tDBInput_6
							.getMetaData();
					int colQtyInRs_tDBInput_6 = rsmd_tDBInput_6
							.getColumnCount();

					String tmpContent_tDBInput_6 = null;

					while (rs_tDBInput_6.next()) {
						nb_line_tDBInput_6++;

						if (colQtyInRs_tDBInput_6 < 1) {
							row6.om_order_item_fees_uid = null;
						} else {

							row6.om_order_item_fees_uid = routines.system.JDBCUtil
									.getString(rs_tDBInput_6, 1, false);
						}
						if (colQtyInRs_tDBInput_6 < 2) {
							row6.total_amount = null;
						} else {

							if (rs_tDBInput_6.getObject(2) != null) {
								row6.total_amount = rs_tDBInput_6
										.getBigDecimal(2);
							} else {
								row6.total_amount = null;
							}
						}
						if (colQtyInRs_tDBInput_6 < 3) {
							row6.royalty_amount = null;
						} else {

							if (rs_tDBInput_6.getObject(3) != null) {
								row6.royalty_amount = rs_tDBInput_6
										.getBigDecimal(3);
							} else {
								row6.royalty_amount = null;
							}
						}
						if (colQtyInRs_tDBInput_6 < 4) {
							row6.ccc_fee_amount = null;
						} else {

							if (rs_tDBInput_6.getObject(4) != null) {
								row6.ccc_fee_amount = rs_tDBInput_6
										.getBigDecimal(4);
							} else {
								row6.ccc_fee_amount = null;
							}
						}
						if (colQtyInRs_tDBInput_6 < 5) {
							row6.licensee_fee_amount = null;
						} else {

							if (rs_tDBInput_6.getObject(5) != null) {
								row6.licensee_fee_amount = rs_tDBInput_6
										.getBigDecimal(5);
							} else {
								row6.licensee_fee_amount = null;
							}
						}
						if (colQtyInRs_tDBInput_6 < 6) {
							row6.reprint_amount = null;
						} else {

							if (rs_tDBInput_6.getObject(6) != null) {
								row6.reprint_amount = rs_tDBInput_6
										.getBigDecimal(6);
							} else {
								row6.reprint_amount = null;
							}
						}
						if (colQtyInRs_tDBInput_6 < 7) {
							row6.shipping_amount = null;
						} else {

							if (rs_tDBInput_6.getObject(7) != null) {
								row6.shipping_amount = rs_tDBInput_6
										.getBigDecimal(7);
							} else {
								row6.shipping_amount = null;
							}
						}
						if (colQtyInRs_tDBInput_6 < 8) {
							row6.tax_amount = null;
						} else {

							if (rs_tDBInput_6.getObject(8) != null) {
								row6.tax_amount = rs_tDBInput_6
										.getBigDecimal(8);
							} else {
								row6.tax_amount = null;
							}
						}
						if (colQtyInRs_tDBInput_6 < 9) {
							row6.rights_holder_price_currency_code = null;
						} else {

							row6.rights_holder_price_currency_code = routines.system.JDBCUtil
									.getString(rs_tDBInput_6, 9, false);
						}
						if (colQtyInRs_tDBInput_6 < 10) {
							row6.transaction_currency_code = null;
						} else {

							row6.transaction_currency_code = routines.system.JDBCUtil
									.getString(rs_tDBInput_6, 10, false);
						}
						if (colQtyInRs_tDBInput_6 < 11) {
							row6.currency_exchange_rate_to_price_list = null;
						} else {

							if (rs_tDBInput_6.getObject(11) != null) {
								row6.currency_exchange_rate_to_price_list = rs_tDBInput_6
										.getBigDecimal(11);
							} else {
								row6.currency_exchange_rate_to_price_list = null;
							}
						}
						if (colQtyInRs_tDBInput_6 < 12) {
							row6.currency_exchange_rate_date = null;
						} else {

							row6.currency_exchange_rate_date = routines.system.JDBCUtil
									.getDate(rs_tDBInput_6, 12);
						}
						if (colQtyInRs_tDBInput_6 < 13) {
							row6.record_version = 0;
						} else {

							if (rs_tDBInput_6.getObject(13) != null) {
								row6.record_version = rs_tDBInput_6.getInt(13);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_6 < 14) {
							row6.created_by_user = null;
						} else {

							row6.created_by_user = routines.system.JDBCUtil
									.getString(rs_tDBInput_6, 14, false);
						}
						if (colQtyInRs_tDBInput_6 < 15) {
							row6.created_datetime = null;
						} else {

							row6.created_datetime = routines.system.JDBCUtil
									.getDate(rs_tDBInput_6, 15);
						}
						if (colQtyInRs_tDBInput_6 < 16) {
							row6.updated_by_user = null;
						} else {

							row6.updated_by_user = routines.system.JDBCUtil
									.getString(rs_tDBInput_6, 16, false);
						}
						if (colQtyInRs_tDBInput_6 < 17) {
							row6.updated_datetime = null;
						} else {

							row6.updated_datetime = routines.system.JDBCUtil
									.getDate(rs_tDBInput_6, 17);
						}
						if (colQtyInRs_tDBInput_6 < 18) {
							row6.is_deleted_flag = null;
						} else {

							if (rs_tDBInput_6.getObject(18) != null) {
								row6.is_deleted_flag = rs_tDBInput_6
										.getBoolean(18);
							} else {
								row6.is_deleted_flag = null;
							}
						}
						if (colQtyInRs_tDBInput_6 < 19) {
							row6.ccc_fee_discount = null;
						} else {

							if (rs_tDBInput_6.getObject(19) != null) {
								row6.ccc_fee_discount = rs_tDBInput_6
										.getBigDecimal(19);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_6 < 20) {
							row6.licensee_fee_discount = null;
						} else {

							if (rs_tDBInput_6.getObject(20) != null) {
								row6.licensee_fee_discount = rs_tDBInput_6
										.getBigDecimal(20);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_6 < 21) {
							row6.royalty_fee_discount = null;
						} else {

							if (rs_tDBInput_6.getObject(21) != null) {
								row6.royalty_fee_discount = rs_tDBInput_6
										.getBigDecimal(21);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_6 < 22) {
							row6.pricing_model = null;
						} else {

							row6.pricing_model = routines.system.JDBCUtil
									.getString(rs_tDBInput_6, 22, false);
						}
						if (colQtyInRs_tDBInput_6 < 23) {
							row6.ps_service_plan_uid = null;
						} else {

							row6.ps_service_plan_uid = routines.system.JDBCUtil
									.getString(rs_tDBInput_6, 23, false);
						}
						if (colQtyInRs_tDBInput_6 < 24) {
							row6.is_distributable = null;
						} else {

							if (rs_tDBInput_6.getObject(24) != null) {
								row6.is_distributable = rs_tDBInput_6
										.getBoolean(24);
							} else {
								row6.is_distributable = null;
							}
						}
						if (colQtyInRs_tDBInput_6 < 25) {
							row6.tax_company_code = null;
						} else {

							row6.tax_company_code = routines.system.JDBCUtil
									.getString(rs_tDBInput_6, 25, false);
						}
						if (colQtyInRs_tDBInput_6 < 26) {
							row6.total_amount_in_transaction_currency = null;
						} else {

							if (rs_tDBInput_6.getObject(26) != null) {
								row6.total_amount_in_transaction_currency = rs_tDBInput_6
										.getBigDecimal(26);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_6 < 27) {
							row6.original_total_amount_in_transaction_currency = null;
						} else {

							if (rs_tDBInput_6.getObject(27) != null) {
								row6.original_total_amount_in_transaction_currency = rs_tDBInput_6
										.getBigDecimal(27);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_6 < 28) {
							row6.tax_amount_in_transaction_currency = null;
						} else {

							if (rs_tDBInput_6.getObject(28) != null) {
								row6.tax_amount_in_transaction_currency = rs_tDBInput_6
										.getBigDecimal(28);
							} else {
								row6.tax_amount_in_transaction_currency = null;
							}
						}
						if (colQtyInRs_tDBInput_6 < 29) {
							row6.om_origin_tax_address_uid = null;
						} else {

							row6.om_origin_tax_address_uid = routines.system.JDBCUtil
									.getString(rs_tDBInput_6, 29, false);
						}
						if (colQtyInRs_tDBInput_6 < 30) {
							row6.original_total_amount = null;
						} else {

							if (rs_tDBInput_6.getObject(30) != null) {
								row6.original_total_amount = rs_tDBInput_6
										.getBigDecimal(30);
							} else {
								row6.original_total_amount = null;
							}
						}
						if (colQtyInRs_tDBInput_6 < 31) {
							row6.adjustment_amount = null;
						} else {

							if (rs_tDBInput_6.getObject(31) != null) {
								row6.adjustment_amount = rs_tDBInput_6
										.getBigDecimal(31);
							} else {
								row6.adjustment_amount = null;
							}
						}
						if (colQtyInRs_tDBInput_6 < 32) {
							row6.avalara_external_reference_id = null;
						} else {

							row6.avalara_external_reference_id = routines.system.JDBCUtil
									.getString(rs_tDBInput_6, 32, false);
						}
						if (colQtyInRs_tDBInput_6 < 33) {
							row6.formatted_tax_id = null;
						} else {

							row6.formatted_tax_id = routines.system.JDBCUtil
									.getString(rs_tDBInput_6, 33, false);
						}
						if (colQtyInRs_tDBInput_6 < 34) {
							row6.tax_rate = null;
						} else {

							if (rs_tDBInput_6.getObject(34) != null) {
								row6.tax_rate = rs_tDBInput_6.getBigDecimal(34);
							} else {
								row6.tax_rate = null;
							}
						}
						if (colQtyInRs_tDBInput_6 < 35) {
							row6.currency_exchange_rate_txn_to_rh = null;
						} else {

							if (rs_tDBInput_6.getObject(35) != null) {
								row6.currency_exchange_rate_txn_to_rh = rs_tDBInput_6
										.getBigDecimal(35);
							} else {
								row6.currency_exchange_rate_txn_to_rh = null;
							}
						}

						/**
						 * [tDBInput_6 begin ] stop
						 */

						/**
						 * [tDBInput_6 main ] start
						 */

						currentComponent = "tDBInput_6";

						tos_count_tDBInput_6++;

						/**
						 * [tDBInput_6 main ] stop
						 */

						/**
						 * [tDBInput_6 process_data_begin ] start
						 */

						currentComponent = "tDBInput_6";

						/**
						 * [tDBInput_6 process_data_begin ] stop
						 */

						/**
						 * [tDBOutput_6 main ] start
						 */

						currentComponent = "tDBOutput_6";

						// row6
						// row6

						if (execStat) {
							runStat.updateStatOnConnection("row6" + iterateId,
									1, 1);
						}

						whetherReject_tDBOutput_6 = false;
						if (row6.om_order_item_fees_uid == null) {
							pstmt_tDBOutput_6
									.setNull(1, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_6.setString(1,
									row6.om_order_item_fees_uid);
						}

						pstmt_tDBOutput_6.setBigDecimal(2, row6.total_amount);

						pstmt_tDBOutput_6.setBigDecimal(3, row6.royalty_amount);

						pstmt_tDBOutput_6.setBigDecimal(4, row6.ccc_fee_amount);

						pstmt_tDBOutput_6.setBigDecimal(5,
								row6.licensee_fee_amount);

						pstmt_tDBOutput_6.setBigDecimal(6, row6.reprint_amount);

						pstmt_tDBOutput_6
								.setBigDecimal(7, row6.shipping_amount);

						pstmt_tDBOutput_6.setBigDecimal(8, row6.tax_amount);

						if (row6.rights_holder_price_currency_code == null) {
							pstmt_tDBOutput_6
									.setNull(9, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_6.setString(9,
									row6.rights_holder_price_currency_code);
						}

						if (row6.transaction_currency_code == null) {
							pstmt_tDBOutput_6.setNull(10,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_6.setString(10,
									row6.transaction_currency_code);
						}

						pstmt_tDBOutput_6.setBigDecimal(11,
								row6.currency_exchange_rate_to_price_list);

						if (row6.currency_exchange_rate_date != null) {
							pstmt_tDBOutput_6.setTimestamp(
									12,
									new java.sql.Timestamp(
											row6.currency_exchange_rate_date
													.getTime()));
						} else {
							pstmt_tDBOutput_6.setNull(12,
									java.sql.Types.TIMESTAMP);
						}

						pstmt_tDBOutput_6.setInt(13, row6.record_version);

						if (row6.created_by_user == null) {
							pstmt_tDBOutput_6.setNull(14,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_6.setString(14,
									row6.created_by_user);
						}

						if (row6.created_datetime != null) {
							pstmt_tDBOutput_6.setTimestamp(15,
									new java.sql.Timestamp(
											row6.created_datetime.getTime()));
						} else {
							pstmt_tDBOutput_6.setNull(15,
									java.sql.Types.TIMESTAMP);
						}

						if (row6.updated_by_user == null) {
							pstmt_tDBOutput_6.setNull(16,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_6.setString(16,
									row6.updated_by_user);
						}

						if (row6.updated_datetime != null) {
							pstmt_tDBOutput_6.setTimestamp(17,
									new java.sql.Timestamp(
											row6.updated_datetime.getTime()));
						} else {
							pstmt_tDBOutput_6.setNull(17,
									java.sql.Types.TIMESTAMP);
						}

						if (row6.is_deleted_flag == null) {
							pstmt_tDBOutput_6.setNull(18,
									java.sql.Types.BOOLEAN);
						} else {
							pstmt_tDBOutput_6.setBoolean(18,
									row6.is_deleted_flag);
						}

						pstmt_tDBOutput_6.setBigDecimal(19,
								row6.ccc_fee_discount);

						pstmt_tDBOutput_6.setBigDecimal(20,
								row6.licensee_fee_discount);

						pstmt_tDBOutput_6.setBigDecimal(21,
								row6.royalty_fee_discount);

						if (row6.pricing_model == null) {
							pstmt_tDBOutput_6.setNull(22,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_6.setString(22, row6.pricing_model);
						}

						if (row6.ps_service_plan_uid == null) {
							pstmt_tDBOutput_6.setNull(23,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_6.setString(23,
									row6.ps_service_plan_uid);
						}

						if (row6.is_distributable == null) {
							pstmt_tDBOutput_6.setNull(24,
									java.sql.Types.BOOLEAN);
						} else {
							pstmt_tDBOutput_6.setBoolean(24,
									row6.is_distributable);
						}

						if (row6.tax_company_code == null) {
							pstmt_tDBOutput_6.setNull(25,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_6.setString(25,
									row6.tax_company_code);
						}

						pstmt_tDBOutput_6.setBigDecimal(26,
								row6.total_amount_in_transaction_currency);

						pstmt_tDBOutput_6
								.setBigDecimal(
										27,
										row6.original_total_amount_in_transaction_currency);

						pstmt_tDBOutput_6.setBigDecimal(28,
								row6.tax_amount_in_transaction_currency);

						if (row6.om_origin_tax_address_uid == null) {
							pstmt_tDBOutput_6.setNull(29,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_6.setString(29,
									row6.om_origin_tax_address_uid);
						}

						pstmt_tDBOutput_6.setBigDecimal(30,
								row6.original_total_amount);

						pstmt_tDBOutput_6.setBigDecimal(31,
								row6.adjustment_amount);

						if (row6.avalara_external_reference_id == null) {
							pstmt_tDBOutput_6.setNull(32,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_6.setString(32,
									row6.avalara_external_reference_id);
						}

						if (row6.formatted_tax_id == null) {
							pstmt_tDBOutput_6.setNull(33,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_6.setString(33,
									row6.formatted_tax_id);
						}

						pstmt_tDBOutput_6.setBigDecimal(34, row6.tax_rate);

						pstmt_tDBOutput_6.setBigDecimal(35,
								row6.currency_exchange_rate_txn_to_rh);

						pstmt_tDBOutput_6.addBatch();
						nb_line_tDBOutput_6++;

						batchSizeCounter_tDBOutput_6++;

						if (!whetherReject_tDBOutput_6) {
						}
						if ((batchSize_tDBOutput_6 > 0)
								&& (batchSize_tDBOutput_6 <= batchSizeCounter_tDBOutput_6)) {
							try {
								int countSum_tDBOutput_6 = 0;

								for (int countEach_tDBOutput_6 : pstmt_tDBOutput_6
										.executeBatch()) {
									countSum_tDBOutput_6 += (countEach_tDBOutput_6 < 0 ? 0
											: countEach_tDBOutput_6);
								}

								insertedCount_tDBOutput_6 += countSum_tDBOutput_6;

								batchSizeCounter_tDBOutput_6 = 0;
							} catch (java.sql.BatchUpdateException e_tDBOutput_6) {
								java.sql.SQLException ne_tDBOutput_6 = e_tDBOutput_6
										.getNextException(), sqle_tDBOutput_6 = null;
								String errormessage_tDBOutput_6;
								if (ne_tDBOutput_6 != null) {
									// build new exception to provide the
									// original cause
									sqle_tDBOutput_6 = new java.sql.SQLException(
											e_tDBOutput_6.getMessage()
													+ "\ncaused by: "
													+ ne_tDBOutput_6
															.getMessage(),
											ne_tDBOutput_6.getSQLState(),
											ne_tDBOutput_6.getErrorCode(),
											ne_tDBOutput_6);
									errormessage_tDBOutput_6 = sqle_tDBOutput_6
											.getMessage();
								} else {
									errormessage_tDBOutput_6 = e_tDBOutput_6
											.getMessage();
								}

								int countSum_tDBOutput_6 = 0;
								for (int countEach_tDBOutput_6 : e_tDBOutput_6
										.getUpdateCounts()) {
									countSum_tDBOutput_6 += (countEach_tDBOutput_6 < 0 ? 0
											: countEach_tDBOutput_6);
								}

								insertedCount_tDBOutput_6 += countSum_tDBOutput_6;

								System.err.println(errormessage_tDBOutput_6);

							}
						}

						commitCounter_tDBOutput_6++;
						if (commitEvery_tDBOutput_6 <= commitCounter_tDBOutput_6) {
							if ((batchSize_tDBOutput_6 > 0)
									&& (batchSizeCounter_tDBOutput_6 > 0)) {
								try {
									int countSum_tDBOutput_6 = 0;

									for (int countEach_tDBOutput_6 : pstmt_tDBOutput_6
											.executeBatch()) {
										countSum_tDBOutput_6 += (countEach_tDBOutput_6 < 0 ? 0
												: countEach_tDBOutput_6);
									}

									insertedCount_tDBOutput_6 += countSum_tDBOutput_6;

									batchSizeCounter_tDBOutput_6 = 0;
								} catch (java.sql.BatchUpdateException e_tDBOutput_6) {
									java.sql.SQLException ne_tDBOutput_6 = e_tDBOutput_6
											.getNextException(), sqle_tDBOutput_6 = null;
									String errormessage_tDBOutput_6;
									if (ne_tDBOutput_6 != null) {
										// build new exception to provide the
										// original cause
										sqle_tDBOutput_6 = new java.sql.SQLException(
												e_tDBOutput_6.getMessage()
														+ "\ncaused by: "
														+ ne_tDBOutput_6
																.getMessage(),
												ne_tDBOutput_6.getSQLState(),
												ne_tDBOutput_6.getErrorCode(),
												ne_tDBOutput_6);
										errormessage_tDBOutput_6 = sqle_tDBOutput_6
												.getMessage();
									} else {
										errormessage_tDBOutput_6 = e_tDBOutput_6
												.getMessage();
									}

									int countSum_tDBOutput_6 = 0;
									for (int countEach_tDBOutput_6 : e_tDBOutput_6
											.getUpdateCounts()) {
										countSum_tDBOutput_6 += (countEach_tDBOutput_6 < 0 ? 0
												: countEach_tDBOutput_6);
									}

									insertedCount_tDBOutput_6 += countSum_tDBOutput_6;

									System.err
											.println(errormessage_tDBOutput_6);

								}
							}
							conn_tDBOutput_6.commit();

							commitCounter_tDBOutput_6 = 0;
						}

						tos_count_tDBOutput_6++;

						/**
						 * [tDBOutput_6 main ] stop
						 */

						/**
						 * [tDBOutput_6 process_data_begin ] start
						 */

						currentComponent = "tDBOutput_6";

						/**
						 * [tDBOutput_6 process_data_begin ] stop
						 */

						/**
						 * [tDBOutput_6 process_data_end ] start
						 */

						currentComponent = "tDBOutput_6";

						/**
						 * [tDBOutput_6 process_data_end ] stop
						 */

						/**
						 * [tDBInput_6 process_data_end ] start
						 */

						currentComponent = "tDBInput_6";

						/**
						 * [tDBInput_6 process_data_end ] stop
						 */

						/**
						 * [tDBInput_6 end ] start
						 */

						currentComponent = "tDBInput_6";

					}
				} finally {
					if (rs_tDBInput_6 != null) {
						rs_tDBInput_6.close();
					}
					if (stmt_tDBInput_6 != null) {
						stmt_tDBInput_6.close();
					}
				}
				globalMap.put("tDBInput_6_NB_LINE", nb_line_tDBInput_6);

				ok_Hash.put("tDBInput_6", true);
				end_Hash.put("tDBInput_6", System.currentTimeMillis());

				tStatCatcher_1.addMessage(
						"end",
						"tDBInput_6",
						end_Hash.get("tDBInput_6")
								- start_Hash.get("tDBInput_6"));
				tStatCatcher_1Process(globalMap);
				talendStats_STATS.addMessage(
						"end",
						"tDBInput_6",
						end_Hash.get("tDBInput_6")
								- start_Hash.get("tDBInput_6"));
				talendStats_STATSProcess(globalMap);

				/**
				 * [tDBInput_6 end ] stop
				 */

				/**
				 * [tDBOutput_6 end ] start
				 */

				currentComponent = "tDBOutput_6";

				try {
					int countSum_tDBOutput_6 = 0;
					if (pstmt_tDBOutput_6 != null
							&& batchSizeCounter_tDBOutput_6 > 0) {

						for (int countEach_tDBOutput_6 : pstmt_tDBOutput_6
								.executeBatch()) {
							countSum_tDBOutput_6 += (countEach_tDBOutput_6 < 0 ? 0
									: countEach_tDBOutput_6);
						}

					}

					insertedCount_tDBOutput_6 += countSum_tDBOutput_6;

				} catch (java.sql.BatchUpdateException e_tDBOutput_6) {
					java.sql.SQLException ne_tDBOutput_6 = e_tDBOutput_6
							.getNextException(), sqle_tDBOutput_6 = null;
					String errormessage_tDBOutput_6;
					if (ne_tDBOutput_6 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_6 = new java.sql.SQLException(
								e_tDBOutput_6.getMessage() + "\ncaused by: "
										+ ne_tDBOutput_6.getMessage(),
								ne_tDBOutput_6.getSQLState(),
								ne_tDBOutput_6.getErrorCode(), ne_tDBOutput_6);
						errormessage_tDBOutput_6 = sqle_tDBOutput_6
								.getMessage();
					} else {
						errormessage_tDBOutput_6 = e_tDBOutput_6.getMessage();
					}

					int countSum_tDBOutput_6 = 0;
					for (int countEach_tDBOutput_6 : e_tDBOutput_6
							.getUpdateCounts()) {
						countSum_tDBOutput_6 += (countEach_tDBOutput_6 < 0 ? 0
								: countEach_tDBOutput_6);
					}

					insertedCount_tDBOutput_6 += countSum_tDBOutput_6;

					System.err.println(errormessage_tDBOutput_6);

				}

				if (pstmt_tDBOutput_6 != null) {

					pstmt_tDBOutput_6.close();
					resourceMap.remove("pstmt_tDBOutput_6");
				}
				resourceMap.put("statementClosed_tDBOutput_6", true);

				conn_tDBOutput_6.commit();

				conn_tDBOutput_6.close();

				resourceMap.put("finish_tDBOutput_6", true);

				nb_line_deleted_tDBOutput_6 = nb_line_deleted_tDBOutput_6
						+ deletedCount_tDBOutput_6;
				nb_line_update_tDBOutput_6 = nb_line_update_tDBOutput_6
						+ updatedCount_tDBOutput_6;
				nb_line_inserted_tDBOutput_6 = nb_line_inserted_tDBOutput_6
						+ insertedCount_tDBOutput_6;
				nb_line_rejected_tDBOutput_6 = nb_line_rejected_tDBOutput_6
						+ rejectedCount_tDBOutput_6;

				globalMap.put("tDBOutput_6_NB_LINE", nb_line_tDBOutput_6);
				globalMap.put("tDBOutput_6_NB_LINE_UPDATED",
						nb_line_update_tDBOutput_6);
				globalMap.put("tDBOutput_6_NB_LINE_INSERTED",
						nb_line_inserted_tDBOutput_6);
				globalMap.put("tDBOutput_6_NB_LINE_DELETED",
						nb_line_deleted_tDBOutput_6);
				globalMap.put("tDBOutput_6_NB_LINE_REJECTED",
						nb_line_rejected_tDBOutput_6);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row6" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tDBOutput_6", true);
				end_Hash.put("tDBOutput_6", System.currentTimeMillis());

				tStatCatcher_1.addMessage(
						"end",
						"tDBOutput_6",
						end_Hash.get("tDBOutput_6")
								- start_Hash.get("tDBOutput_6"));
				tStatCatcher_1Process(globalMap);
				talendStats_STATS.addMessage(
						"end",
						"tDBOutput_6",
						end_Hash.get("tDBOutput_6")
								- start_Hash.get("tDBOutput_6"));
				talendStats_STATSProcess(globalMap);
				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk6", 0, "ok");
				}
				tDBInput_7Process(globalMap);

				/**
				 * [tDBOutput_6 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_6 finally ] start
				 */

				currentComponent = "tDBInput_6";

				/**
				 * [tDBInput_6 finally ] stop
				 */

				/**
				 * [tDBOutput_6 finally ] start
				 */

				currentComponent = "tDBOutput_6";

				try {
					if (resourceMap.get("statementClosed_tDBOutput_6") == null) {
						java.sql.PreparedStatement pstmtToClose_tDBOutput_6 = null;
						if ((pstmtToClose_tDBOutput_6 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmt_tDBOutput_6")) != null) {
							pstmtToClose_tDBOutput_6.close();
						}
					}
				} finally {
					if (resourceMap.get("finish_tDBOutput_6") == null) {
						java.sql.Connection ctn_tDBOutput_6 = null;
						if ((ctn_tDBOutput_6 = (java.sql.Connection) resourceMap
								.get("conn_tDBOutput_6")) != null) {
							try {
								ctn_tDBOutput_6.close();
							} catch (java.sql.SQLException sqlEx_tDBOutput_6) {
								String errorMessage_tDBOutput_6 = "failed to close the connection in tDBOutput_6 :"
										+ sqlEx_tDBOutput_6.getMessage();
								System.err.println(errorMessage_tDBOutput_6);
							}
						}
					}
				}

				/**
				 * [tDBOutput_6 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_6_SUBPROCESS_STATE", 1);
	}

	public static class row7Struct implements
			routines.system.IPersistableRow<row7Struct> {
		final static byte[] commonByteArrayLock_ORDER_ETL_OMS_ETL_NO_PRODUCTS = new byte[0];
		static byte[] commonByteArray_ORDER_ETL_OMS_ETL_NO_PRODUCTS = new byte[0];

		public String om_order_item_tax_details_uid;

		public String getOm_order_item_tax_details_uid() {
			return this.om_order_item_tax_details_uid;
		}

		public String om_order_item_fees_uid;

		public String getOm_order_item_fees_uid() {
			return this.om_order_item_fees_uid;
		}

		public String country;

		public String getCountry() {
			return this.country;
		}

		public String juris_name;

		public String getJuris_name() {
			return this.juris_name;
		}

		public String juris_type;

		public String getJuris_type() {
			return this.juris_type;
		}

		public BigDecimal rate;

		public BigDecimal getRate() {
			return this.rate;
		}

		public String region;

		public String getRegion() {
			return this.region;
		}

		public BigDecimal tax;

		public BigDecimal getTax() {
			return this.tax;
		}

		public String tax_name;

		public String getTax_name() {
			return this.tax_name;
		}

		public int record_version;

		public int getRecord_version() {
			return this.record_version;
		}

		public String created_by_user;

		public String getCreated_by_user() {
			return this.created_by_user;
		}

		public java.util.Date created_datetime;

		public java.util.Date getCreated_datetime() {
			return this.created_datetime;
		}

		public String updated_by_user;

		public String getUpdated_by_user() {
			return this.updated_by_user;
		}

		public java.util.Date updated_datetime;

		public java.util.Date getUpdated_datetime() {
			return this.updated_datetime;
		}

		public Boolean is_deleted_flag;

		public Boolean getIs_deleted_flag() {
			return this.is_deleted_flag;
		}

		public Boolean tax_pass_through;

		public Boolean getTax_pass_through() {
			return this.tax_pass_through;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ORDER_ETL_OMS_ETL_NO_PRODUCTS.length) {
					if (length < 1024
							&& commonByteArray_ORDER_ETL_OMS_ETL_NO_PRODUCTS.length == 0) {
						commonByteArray_ORDER_ETL_OMS_ETL_NO_PRODUCTS = new byte[1024];
					} else {
						commonByteArray_ORDER_ETL_OMS_ETL_NO_PRODUCTS = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ORDER_ETL_OMS_ETL_NO_PRODUCTS, 0,
						length);
				strReturn = new String(
						commonByteArray_ORDER_ETL_OMS_ETL_NO_PRODUCTS, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ORDER_ETL_OMS_ETL_NO_PRODUCTS) {

				try {

					int length = 0;

					this.om_order_item_tax_details_uid = readString(dis);

					this.om_order_item_fees_uid = readString(dis);

					this.country = readString(dis);

					this.juris_name = readString(dis);

					this.juris_type = readString(dis);

					this.rate = (BigDecimal) dis.readObject();

					this.region = readString(dis);

					this.tax = (BigDecimal) dis.readObject();

					this.tax_name = readString(dis);

					this.record_version = dis.readInt();

					this.created_by_user = readString(dis);

					this.created_datetime = readDate(dis);

					this.updated_by_user = readString(dis);

					this.updated_datetime = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.is_deleted_flag = null;
					} else {
						this.is_deleted_flag = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.tax_pass_through = null;
					} else {
						this.tax_pass_through = dis.readBoolean();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.om_order_item_tax_details_uid, dos);

				// String

				writeString(this.om_order_item_fees_uid, dos);

				// String

				writeString(this.country, dos);

				// String

				writeString(this.juris_name, dos);

				// String

				writeString(this.juris_type, dos);

				// BigDecimal

				dos.writeObject(this.rate);

				// String

				writeString(this.region, dos);

				// BigDecimal

				dos.writeObject(this.tax);

				// String

				writeString(this.tax_name, dos);

				// int

				dos.writeInt(this.record_version);

				// String

				writeString(this.created_by_user, dos);

				// java.util.Date

				writeDate(this.created_datetime, dos);

				// String

				writeString(this.updated_by_user, dos);

				// java.util.Date

				writeDate(this.updated_datetime, dos);

				// Boolean

				if (this.is_deleted_flag == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.is_deleted_flag);
				}

				// Boolean

				if (this.tax_pass_through == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.tax_pass_through);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("om_order_item_tax_details_uid="
					+ om_order_item_tax_details_uid);
			sb.append(",om_order_item_fees_uid=" + om_order_item_fees_uid);
			sb.append(",country=" + country);
			sb.append(",juris_name=" + juris_name);
			sb.append(",juris_type=" + juris_type);
			sb.append(",rate=" + String.valueOf(rate));
			sb.append(",region=" + region);
			sb.append(",tax=" + String.valueOf(tax));
			sb.append(",tax_name=" + tax_name);
			sb.append(",record_version=" + String.valueOf(record_version));
			sb.append(",created_by_user=" + created_by_user);
			sb.append(",created_datetime=" + String.valueOf(created_datetime));
			sb.append(",updated_by_user=" + updated_by_user);
			sb.append(",updated_datetime=" + String.valueOf(updated_datetime));
			sb.append(",is_deleted_flag=" + String.valueOf(is_deleted_flag));
			sb.append(",tax_pass_through=" + String.valueOf(tax_pass_through));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row7Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_7Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDBInput_7_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row7Struct row7 = new row7Struct();

				/**
				 * [tDBOutput_7 begin ] start
				 */

				ok_Hash.put("tDBOutput_7", false);
				start_Hash.put("tDBOutput_7", System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tDBOutput_7");
				tStatCatcher_1Process(globalMap);

				talendStats_STATS.addMessage("begin", "tDBOutput_7");
				talendStats_STATSProcess(globalMap);

				currentComponent = "tDBOutput_7";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row7" + iterateId, 0, 0);

					}
				}

				int tos_count_tDBOutput_7 = 0;

				String dbschema_tDBOutput_7 = null;
				dbschema_tDBOutput_7 = context.data_warehouse_order_dwos_schema;

				String tableName_tDBOutput_7 = null;
				if (dbschema_tDBOutput_7 == null
						|| dbschema_tDBOutput_7.trim().length() == 0) {
					tableName_tDBOutput_7 = "dwo_om_order_item_tax_details";
				} else {
					tableName_tDBOutput_7 = dbschema_tDBOutput_7 + "\".\""
							+ "dwo_om_order_item_tax_details";
				}

				int nb_line_tDBOutput_7 = 0;
				int nb_line_update_tDBOutput_7 = 0;
				int nb_line_inserted_tDBOutput_7 = 0;
				int nb_line_deleted_tDBOutput_7 = 0;
				int nb_line_rejected_tDBOutput_7 = 0;

				int deletedCount_tDBOutput_7 = 0;
				int updatedCount_tDBOutput_7 = 0;
				int insertedCount_tDBOutput_7 = 0;
				int rejectedCount_tDBOutput_7 = 0;

				boolean whetherReject_tDBOutput_7 = false;

				java.sql.Connection conn_tDBOutput_7 = null;
				String dbUser_tDBOutput_7 = null;

				java.lang.Class.forName("org.postgresql.Driver");
				String url_tDBOutput_7 = "jdbc:postgresql://"
						+ context.data_warehouse_order_dwos_host + ":"
						+ context.data_warehouse_order_dwos_port + "/"
						+ context.data_warehouse_order_dwos_database;
				dbUser_tDBOutput_7 = context.data_warehouse_order_dwos_username;

				final String decryptedPassword_tDBOutput_7 = context.data_warehouse_order_dwos_password;

				String dbPwd_tDBOutput_7 = decryptedPassword_tDBOutput_7;

				conn_tDBOutput_7 = java.sql.DriverManager.getConnection(
						url_tDBOutput_7, dbUser_tDBOutput_7, dbPwd_tDBOutput_7);

				resourceMap.put("conn_tDBOutput_7", conn_tDBOutput_7);
				conn_tDBOutput_7.setAutoCommit(false);
				int commitEvery_tDBOutput_7 = 10000;
				int commitCounter_tDBOutput_7 = 0;

				int batchSize_tDBOutput_7 = 10000;
				int batchSizeCounter_tDBOutput_7 = 0;

				int count_tDBOutput_7 = 0;
				int rsTruncCountNumber_tDBOutput_7 = 0;
				try (java.sql.Statement stmtTruncCount_tDBOutput_7 = conn_tDBOutput_7
						.createStatement()) {
					try (java.sql.ResultSet rsTruncCount_tDBOutput_7 = stmtTruncCount_tDBOutput_7
							.executeQuery("SELECT COUNT(1) FROM \""
									+ tableName_tDBOutput_7 + "\"")) {
						if (rsTruncCount_tDBOutput_7.next()) {
							rsTruncCountNumber_tDBOutput_7 = rsTruncCount_tDBOutput_7
									.getInt(1);
						}
					}
				}
				try (java.sql.Statement stmtTrunc_tDBOutput_7 = conn_tDBOutput_7
						.createStatement()) {
					stmtTrunc_tDBOutput_7.executeUpdate("TRUNCATE TABLE \""
							+ tableName_tDBOutput_7 + "\"");
					deletedCount_tDBOutput_7 += rsTruncCountNumber_tDBOutput_7;
				}
				String insert_tDBOutput_7 = "INSERT INTO \""
						+ tableName_tDBOutput_7
						+ "\" (\"om_order_item_tax_details_uid\",\"om_order_item_fees_uid\",\"country\",\"juris_name\",\"juris_type\",\"rate\",\"region\",\"tax\",\"tax_name\",\"record_version\",\"created_by_user\",\"created_datetime\",\"updated_by_user\",\"updated_datetime\",\"is_deleted_flag\",\"tax_pass_through\") VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

				java.sql.PreparedStatement pstmt_tDBOutput_7 = conn_tDBOutput_7
						.prepareStatement(insert_tDBOutput_7);
				resourceMap.put("pstmt_tDBOutput_7", pstmt_tDBOutput_7);

				/**
				 * [tDBOutput_7 begin ] stop
				 */

				/**
				 * [tDBInput_7 begin ] start
				 */

				ok_Hash.put("tDBInput_7", false);
				start_Hash.put("tDBInput_7", System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tDBInput_7");
				tStatCatcher_1Process(globalMap);

				talendStats_STATS.addMessage("begin", "tDBInput_7");
				talendStats_STATSProcess(globalMap);

				currentComponent = "tDBInput_7";

				int tos_count_tDBInput_7 = 0;

				int nb_line_tDBInput_7 = 0;
				java.sql.Connection conn_tDBInput_7 = null;
				conn_tDBInput_7 = (java.sql.Connection) globalMap
						.get("conn_tDBConnection_1");

				java.sql.Statement stmt_tDBInput_7 = conn_tDBInput_7
						.createStatement();
				stmt_tDBInput_7.setFetchSize(1000);

				String dbquery_tDBInput_7 = "SELECT *\nFROM  apps.om_order_item_tax_details";

				globalMap.put("tDBInput_7_QUERY", dbquery_tDBInput_7);
				java.sql.ResultSet rs_tDBInput_7 = null;

				try {
					rs_tDBInput_7 = stmt_tDBInput_7
							.executeQuery(dbquery_tDBInput_7);
					java.sql.ResultSetMetaData rsmd_tDBInput_7 = rs_tDBInput_7
							.getMetaData();
					int colQtyInRs_tDBInput_7 = rsmd_tDBInput_7
							.getColumnCount();

					String tmpContent_tDBInput_7 = null;

					while (rs_tDBInput_7.next()) {
						nb_line_tDBInput_7++;

						if (colQtyInRs_tDBInput_7 < 1) {
							row7.om_order_item_tax_details_uid = null;
						} else {

							row7.om_order_item_tax_details_uid = routines.system.JDBCUtil
									.getString(rs_tDBInput_7, 1, false);
						}
						if (colQtyInRs_tDBInput_7 < 2) {
							row7.om_order_item_fees_uid = null;
						} else {

							row7.om_order_item_fees_uid = routines.system.JDBCUtil
									.getString(rs_tDBInput_7, 2, false);
						}
						if (colQtyInRs_tDBInput_7 < 3) {
							row7.country = null;
						} else {

							row7.country = routines.system.JDBCUtil.getString(
									rs_tDBInput_7, 3, false);
						}
						if (colQtyInRs_tDBInput_7 < 4) {
							row7.juris_name = null;
						} else {

							row7.juris_name = routines.system.JDBCUtil
									.getString(rs_tDBInput_7, 4, false);
						}
						if (colQtyInRs_tDBInput_7 < 5) {
							row7.juris_type = null;
						} else {

							row7.juris_type = routines.system.JDBCUtil
									.getString(rs_tDBInput_7, 5, false);
						}
						if (colQtyInRs_tDBInput_7 < 6) {
							row7.rate = null;
						} else {

							if (rs_tDBInput_7.getObject(6) != null) {
								row7.rate = rs_tDBInput_7.getBigDecimal(6);
							} else {
								row7.rate = null;
							}
						}
						if (colQtyInRs_tDBInput_7 < 7) {
							row7.region = null;
						} else {

							row7.region = routines.system.JDBCUtil.getString(
									rs_tDBInput_7, 7, false);
						}
						if (colQtyInRs_tDBInput_7 < 8) {
							row7.tax = null;
						} else {

							if (rs_tDBInput_7.getObject(8) != null) {
								row7.tax = rs_tDBInput_7.getBigDecimal(8);
							} else {
								row7.tax = null;
							}
						}
						if (colQtyInRs_tDBInput_7 < 9) {
							row7.tax_name = null;
						} else {

							row7.tax_name = routines.system.JDBCUtil.getString(
									rs_tDBInput_7, 9, false);
						}
						if (colQtyInRs_tDBInput_7 < 10) {
							row7.record_version = 0;
						} else {

							if (rs_tDBInput_7.getObject(10) != null) {
								row7.record_version = rs_tDBInput_7.getInt(10);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_7 < 11) {
							row7.created_by_user = null;
						} else {

							row7.created_by_user = routines.system.JDBCUtil
									.getString(rs_tDBInput_7, 11, false);
						}
						if (colQtyInRs_tDBInput_7 < 12) {
							row7.created_datetime = null;
						} else {

							row7.created_datetime = routines.system.JDBCUtil
									.getDate(rs_tDBInput_7, 12);
						}
						if (colQtyInRs_tDBInput_7 < 13) {
							row7.updated_by_user = null;
						} else {

							row7.updated_by_user = routines.system.JDBCUtil
									.getString(rs_tDBInput_7, 13, false);
						}
						if (colQtyInRs_tDBInput_7 < 14) {
							row7.updated_datetime = null;
						} else {

							row7.updated_datetime = routines.system.JDBCUtil
									.getDate(rs_tDBInput_7, 14);
						}
						if (colQtyInRs_tDBInput_7 < 15) {
							row7.is_deleted_flag = null;
						} else {

							if (rs_tDBInput_7.getObject(15) != null) {
								row7.is_deleted_flag = rs_tDBInput_7
										.getBoolean(15);
							} else {
								row7.is_deleted_flag = null;
							}
						}
						if (colQtyInRs_tDBInput_7 < 16) {
							row7.tax_pass_through = null;
						} else {

							if (rs_tDBInput_7.getObject(16) != null) {
								row7.tax_pass_through = rs_tDBInput_7
										.getBoolean(16);
							} else {
								row7.tax_pass_through = null;
							}
						}

						/**
						 * [tDBInput_7 begin ] stop
						 */

						/**
						 * [tDBInput_7 main ] start
						 */

						currentComponent = "tDBInput_7";

						tos_count_tDBInput_7++;

						/**
						 * [tDBInput_7 main ] stop
						 */

						/**
						 * [tDBInput_7 process_data_begin ] start
						 */

						currentComponent = "tDBInput_7";

						/**
						 * [tDBInput_7 process_data_begin ] stop
						 */

						/**
						 * [tDBOutput_7 main ] start
						 */

						currentComponent = "tDBOutput_7";

						// row7
						// row7

						if (execStat) {
							runStat.updateStatOnConnection("row7" + iterateId,
									1, 1);
						}

						whetherReject_tDBOutput_7 = false;
						if (row7.om_order_item_tax_details_uid == null) {
							pstmt_tDBOutput_7
									.setNull(1, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_7.setString(1,
									row7.om_order_item_tax_details_uid);
						}

						if (row7.om_order_item_fees_uid == null) {
							pstmt_tDBOutput_7
									.setNull(2, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_7.setString(2,
									row7.om_order_item_fees_uid);
						}

						if (row7.country == null) {
							pstmt_tDBOutput_7
									.setNull(3, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_7.setString(3, row7.country);
						}

						if (row7.juris_name == null) {
							pstmt_tDBOutput_7
									.setNull(4, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_7.setString(4, row7.juris_name);
						}

						if (row7.juris_type == null) {
							pstmt_tDBOutput_7
									.setNull(5, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_7.setString(5, row7.juris_type);
						}

						pstmt_tDBOutput_7.setBigDecimal(6, row7.rate);

						if (row7.region == null) {
							pstmt_tDBOutput_7
									.setNull(7, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_7.setString(7, row7.region);
						}

						pstmt_tDBOutput_7.setBigDecimal(8, row7.tax);

						if (row7.tax_name == null) {
							pstmt_tDBOutput_7
									.setNull(9, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_7.setString(9, row7.tax_name);
						}

						pstmt_tDBOutput_7.setInt(10, row7.record_version);

						if (row7.created_by_user == null) {
							pstmt_tDBOutput_7.setNull(11,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_7.setString(11,
									row7.created_by_user);
						}

						if (row7.created_datetime != null) {
							pstmt_tDBOutput_7.setTimestamp(12,
									new java.sql.Timestamp(
											row7.created_datetime.getTime()));
						} else {
							pstmt_tDBOutput_7.setNull(12,
									java.sql.Types.TIMESTAMP);
						}

						if (row7.updated_by_user == null) {
							pstmt_tDBOutput_7.setNull(13,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_7.setString(13,
									row7.updated_by_user);
						}

						if (row7.updated_datetime != null) {
							pstmt_tDBOutput_7.setTimestamp(14,
									new java.sql.Timestamp(
											row7.updated_datetime.getTime()));
						} else {
							pstmt_tDBOutput_7.setNull(14,
									java.sql.Types.TIMESTAMP);
						}

						if (row7.is_deleted_flag == null) {
							pstmt_tDBOutput_7.setNull(15,
									java.sql.Types.BOOLEAN);
						} else {
							pstmt_tDBOutput_7.setBoolean(15,
									row7.is_deleted_flag);
						}

						if (row7.tax_pass_through == null) {
							pstmt_tDBOutput_7.setNull(16,
									java.sql.Types.BOOLEAN);
						} else {
							pstmt_tDBOutput_7.setBoolean(16,
									row7.tax_pass_through);
						}

						pstmt_tDBOutput_7.addBatch();
						nb_line_tDBOutput_7++;

						batchSizeCounter_tDBOutput_7++;

						if (!whetherReject_tDBOutput_7) {
						}
						if ((batchSize_tDBOutput_7 > 0)
								&& (batchSize_tDBOutput_7 <= batchSizeCounter_tDBOutput_7)) {
							try {
								int countSum_tDBOutput_7 = 0;

								for (int countEach_tDBOutput_7 : pstmt_tDBOutput_7
										.executeBatch()) {
									countSum_tDBOutput_7 += (countEach_tDBOutput_7 < 0 ? 0
											: countEach_tDBOutput_7);
								}

								insertedCount_tDBOutput_7 += countSum_tDBOutput_7;

								batchSizeCounter_tDBOutput_7 = 0;
							} catch (java.sql.BatchUpdateException e_tDBOutput_7) {
								java.sql.SQLException ne_tDBOutput_7 = e_tDBOutput_7
										.getNextException(), sqle_tDBOutput_7 = null;
								String errormessage_tDBOutput_7;
								if (ne_tDBOutput_7 != null) {
									// build new exception to provide the
									// original cause
									sqle_tDBOutput_7 = new java.sql.SQLException(
											e_tDBOutput_7.getMessage()
													+ "\ncaused by: "
													+ ne_tDBOutput_7
															.getMessage(),
											ne_tDBOutput_7.getSQLState(),
											ne_tDBOutput_7.getErrorCode(),
											ne_tDBOutput_7);
									errormessage_tDBOutput_7 = sqle_tDBOutput_7
											.getMessage();
								} else {
									errormessage_tDBOutput_7 = e_tDBOutput_7
											.getMessage();
								}

								int countSum_tDBOutput_7 = 0;
								for (int countEach_tDBOutput_7 : e_tDBOutput_7
										.getUpdateCounts()) {
									countSum_tDBOutput_7 += (countEach_tDBOutput_7 < 0 ? 0
											: countEach_tDBOutput_7);
								}

								insertedCount_tDBOutput_7 += countSum_tDBOutput_7;

								System.err.println(errormessage_tDBOutput_7);

							}
						}

						commitCounter_tDBOutput_7++;
						if (commitEvery_tDBOutput_7 <= commitCounter_tDBOutput_7) {
							if ((batchSize_tDBOutput_7 > 0)
									&& (batchSizeCounter_tDBOutput_7 > 0)) {
								try {
									int countSum_tDBOutput_7 = 0;

									for (int countEach_tDBOutput_7 : pstmt_tDBOutput_7
											.executeBatch()) {
										countSum_tDBOutput_7 += (countEach_tDBOutput_7 < 0 ? 0
												: countEach_tDBOutput_7);
									}

									insertedCount_tDBOutput_7 += countSum_tDBOutput_7;

									batchSizeCounter_tDBOutput_7 = 0;
								} catch (java.sql.BatchUpdateException e_tDBOutput_7) {
									java.sql.SQLException ne_tDBOutput_7 = e_tDBOutput_7
											.getNextException(), sqle_tDBOutput_7 = null;
									String errormessage_tDBOutput_7;
									if (ne_tDBOutput_7 != null) {
										// build new exception to provide the
										// original cause
										sqle_tDBOutput_7 = new java.sql.SQLException(
												e_tDBOutput_7.getMessage()
														+ "\ncaused by: "
														+ ne_tDBOutput_7
																.getMessage(),
												ne_tDBOutput_7.getSQLState(),
												ne_tDBOutput_7.getErrorCode(),
												ne_tDBOutput_7);
										errormessage_tDBOutput_7 = sqle_tDBOutput_7
												.getMessage();
									} else {
										errormessage_tDBOutput_7 = e_tDBOutput_7
												.getMessage();
									}

									int countSum_tDBOutput_7 = 0;
									for (int countEach_tDBOutput_7 : e_tDBOutput_7
											.getUpdateCounts()) {
										countSum_tDBOutput_7 += (countEach_tDBOutput_7 < 0 ? 0
												: countEach_tDBOutput_7);
									}

									insertedCount_tDBOutput_7 += countSum_tDBOutput_7;

									System.err
											.println(errormessage_tDBOutput_7);

								}
							}
							conn_tDBOutput_7.commit();

							commitCounter_tDBOutput_7 = 0;
						}

						tos_count_tDBOutput_7++;

						/**
						 * [tDBOutput_7 main ] stop
						 */

						/**
						 * [tDBOutput_7 process_data_begin ] start
						 */

						currentComponent = "tDBOutput_7";

						/**
						 * [tDBOutput_7 process_data_begin ] stop
						 */

						/**
						 * [tDBOutput_7 process_data_end ] start
						 */

						currentComponent = "tDBOutput_7";

						/**
						 * [tDBOutput_7 process_data_end ] stop
						 */

						/**
						 * [tDBInput_7 process_data_end ] start
						 */

						currentComponent = "tDBInput_7";

						/**
						 * [tDBInput_7 process_data_end ] stop
						 */

						/**
						 * [tDBInput_7 end ] start
						 */

						currentComponent = "tDBInput_7";

					}
				} finally {
					if (rs_tDBInput_7 != null) {
						rs_tDBInput_7.close();
					}
					if (stmt_tDBInput_7 != null) {
						stmt_tDBInput_7.close();
					}
				}
				globalMap.put("tDBInput_7_NB_LINE", nb_line_tDBInput_7);

				ok_Hash.put("tDBInput_7", true);
				end_Hash.put("tDBInput_7", System.currentTimeMillis());

				tStatCatcher_1.addMessage(
						"end",
						"tDBInput_7",
						end_Hash.get("tDBInput_7")
								- start_Hash.get("tDBInput_7"));
				tStatCatcher_1Process(globalMap);
				talendStats_STATS.addMessage(
						"end",
						"tDBInput_7",
						end_Hash.get("tDBInput_7")
								- start_Hash.get("tDBInput_7"));
				talendStats_STATSProcess(globalMap);

				/**
				 * [tDBInput_7 end ] stop
				 */

				/**
				 * [tDBOutput_7 end ] start
				 */

				currentComponent = "tDBOutput_7";

				try {
					int countSum_tDBOutput_7 = 0;
					if (pstmt_tDBOutput_7 != null
							&& batchSizeCounter_tDBOutput_7 > 0) {

						for (int countEach_tDBOutput_7 : pstmt_tDBOutput_7
								.executeBatch()) {
							countSum_tDBOutput_7 += (countEach_tDBOutput_7 < 0 ? 0
									: countEach_tDBOutput_7);
						}

					}

					insertedCount_tDBOutput_7 += countSum_tDBOutput_7;

				} catch (java.sql.BatchUpdateException e_tDBOutput_7) {
					java.sql.SQLException ne_tDBOutput_7 = e_tDBOutput_7
							.getNextException(), sqle_tDBOutput_7 = null;
					String errormessage_tDBOutput_7;
					if (ne_tDBOutput_7 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_7 = new java.sql.SQLException(
								e_tDBOutput_7.getMessage() + "\ncaused by: "
										+ ne_tDBOutput_7.getMessage(),
								ne_tDBOutput_7.getSQLState(),
								ne_tDBOutput_7.getErrorCode(), ne_tDBOutput_7);
						errormessage_tDBOutput_7 = sqle_tDBOutput_7
								.getMessage();
					} else {
						errormessage_tDBOutput_7 = e_tDBOutput_7.getMessage();
					}

					int countSum_tDBOutput_7 = 0;
					for (int countEach_tDBOutput_7 : e_tDBOutput_7
							.getUpdateCounts()) {
						countSum_tDBOutput_7 += (countEach_tDBOutput_7 < 0 ? 0
								: countEach_tDBOutput_7);
					}

					insertedCount_tDBOutput_7 += countSum_tDBOutput_7;

					System.err.println(errormessage_tDBOutput_7);

				}

				if (pstmt_tDBOutput_7 != null) {

					pstmt_tDBOutput_7.close();
					resourceMap.remove("pstmt_tDBOutput_7");
				}
				resourceMap.put("statementClosed_tDBOutput_7", true);

				conn_tDBOutput_7.commit();

				conn_tDBOutput_7.close();

				resourceMap.put("finish_tDBOutput_7", true);

				nb_line_deleted_tDBOutput_7 = nb_line_deleted_tDBOutput_7
						+ deletedCount_tDBOutput_7;
				nb_line_update_tDBOutput_7 = nb_line_update_tDBOutput_7
						+ updatedCount_tDBOutput_7;
				nb_line_inserted_tDBOutput_7 = nb_line_inserted_tDBOutput_7
						+ insertedCount_tDBOutput_7;
				nb_line_rejected_tDBOutput_7 = nb_line_rejected_tDBOutput_7
						+ rejectedCount_tDBOutput_7;

				globalMap.put("tDBOutput_7_NB_LINE", nb_line_tDBOutput_7);
				globalMap.put("tDBOutput_7_NB_LINE_UPDATED",
						nb_line_update_tDBOutput_7);
				globalMap.put("tDBOutput_7_NB_LINE_INSERTED",
						nb_line_inserted_tDBOutput_7);
				globalMap.put("tDBOutput_7_NB_LINE_DELETED",
						nb_line_deleted_tDBOutput_7);
				globalMap.put("tDBOutput_7_NB_LINE_REJECTED",
						nb_line_rejected_tDBOutput_7);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row7" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tDBOutput_7", true);
				end_Hash.put("tDBOutput_7", System.currentTimeMillis());

				tStatCatcher_1.addMessage(
						"end",
						"tDBOutput_7",
						end_Hash.get("tDBOutput_7")
								- start_Hash.get("tDBOutput_7"));
				tStatCatcher_1Process(globalMap);
				talendStats_STATS.addMessage(
						"end",
						"tDBOutput_7",
						end_Hash.get("tDBOutput_7")
								- start_Hash.get("tDBOutput_7"));
				talendStats_STATSProcess(globalMap);
				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk7", 0, "ok");
				}
				tDBInput_14Process(globalMap);

				/**
				 * [tDBOutput_7 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_7 finally ] start
				 */

				currentComponent = "tDBInput_7";

				/**
				 * [tDBInput_7 finally ] stop
				 */

				/**
				 * [tDBOutput_7 finally ] start
				 */

				currentComponent = "tDBOutput_7";

				try {
					if (resourceMap.get("statementClosed_tDBOutput_7") == null) {
						java.sql.PreparedStatement pstmtToClose_tDBOutput_7 = null;
						if ((pstmtToClose_tDBOutput_7 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmt_tDBOutput_7")) != null) {
							pstmtToClose_tDBOutput_7.close();
						}
					}
				} finally {
					if (resourceMap.get("finish_tDBOutput_7") == null) {
						java.sql.Connection ctn_tDBOutput_7 = null;
						if ((ctn_tDBOutput_7 = (java.sql.Connection) resourceMap
								.get("conn_tDBOutput_7")) != null) {
							try {
								ctn_tDBOutput_7.close();
							} catch (java.sql.SQLException sqlEx_tDBOutput_7) {
								String errorMessage_tDBOutput_7 = "failed to close the connection in tDBOutput_7 :"
										+ sqlEx_tDBOutput_7.getMessage();
								System.err.println(errorMessage_tDBOutput_7);
							}
						}
					}
				}

				/**
				 * [tDBOutput_7 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_7_SUBPROCESS_STATE", 1);
	}

	public static class row14Struct implements
			routines.system.IPersistableRow<row14Struct> {
		final static byte[] commonByteArrayLock_ORDER_ETL_OMS_ETL_NO_PRODUCTS = new byte[0];
		static byte[] commonByteArray_ORDER_ETL_OMS_ETL_NO_PRODUCTS = new byte[0];

		public Long dwo_order_detail_dimension_uid;

		public Long getDwo_order_detail_dimension_uid() {
			return this.dwo_order_detail_dimension_uid;
		}

		public String source_system_order_detail_uid;

		public String getSource_system_order_detail_uid() {
			return this.source_system_order_detail_uid;
		}

		public String dwo_order_header_dimension_uid;

		public String getDwo_order_header_dimension_uid() {
			return this.dwo_order_header_dimension_uid;
		}

		public String rightsholder_on_record_account_number;

		public String getRightsholder_on_record_account_number() {
			return this.rightsholder_on_record_account_number;
		}

		public String rightsholder_on_record_name;

		public String getRightsholder_on_record_name() {
			return this.rightsholder_on_record_name;
		}

		public String product_name;

		public String getProduct_name() {
			return this.product_name;
		}

		public String product_code;

		public String getProduct_code() {
			return this.product_code;
		}

		public String product_family;

		public String getProduct_family() {
			return this.product_family;
		}

		public Long number_of_units;

		public Long getNumber_of_units() {
			return this.number_of_units;
		}

		public String unit_type;

		public String getUnit_type() {
			return this.unit_type;
		}

		public String publication_title;

		public String getPublication_title() {
			return this.publication_title;
		}

		public String item_status_code;

		public String getItem_status_code() {
			return this.item_status_code;
		}

		public String distribution_event_id;

		public String getDistribution_event_id() {
			return this.distribution_event_id;
		}

		public String source_of_content;

		public String getSource_of_content() {
			return this.source_of_content;
		}

		public Boolean tax_pass_through_flag;

		public Boolean getTax_pass_through_flag() {
			return this.tax_pass_through_flag;
		}

		public String publication_work_identifier;

		public String getPublication_work_identifier() {
			return this.publication_work_identifier;
		}

		public java.util.Date created_datetime;

		public java.util.Date getCreated_datetime() {
			return this.created_datetime;
		}

		public String created_by_user;

		public String getCreated_by_user() {
			return this.created_by_user;
		}

		public java.util.Date updated_datetime;

		public java.util.Date getUpdated_datetime() {
			return this.updated_datetime;
		}

		public String updated_by_user;

		public String getUpdated_by_user() {
			return this.updated_by_user;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ORDER_ETL_OMS_ETL_NO_PRODUCTS.length) {
					if (length < 1024
							&& commonByteArray_ORDER_ETL_OMS_ETL_NO_PRODUCTS.length == 0) {
						commonByteArray_ORDER_ETL_OMS_ETL_NO_PRODUCTS = new byte[1024];
					} else {
						commonByteArray_ORDER_ETL_OMS_ETL_NO_PRODUCTS = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ORDER_ETL_OMS_ETL_NO_PRODUCTS, 0,
						length);
				strReturn = new String(
						commonByteArray_ORDER_ETL_OMS_ETL_NO_PRODUCTS, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ORDER_ETL_OMS_ETL_NO_PRODUCTS) {

				try {

					int length = 0;

					length = dis.readByte();
					if (length == -1) {
						this.dwo_order_detail_dimension_uid = null;
					} else {
						this.dwo_order_detail_dimension_uid = dis.readLong();
					}

					this.source_system_order_detail_uid = readString(dis);

					this.dwo_order_header_dimension_uid = readString(dis);

					this.rightsholder_on_record_account_number = readString(dis);

					this.rightsholder_on_record_name = readString(dis);

					this.product_name = readString(dis);

					this.product_code = readString(dis);

					this.product_family = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.number_of_units = null;
					} else {
						this.number_of_units = dis.readLong();
					}

					this.unit_type = readString(dis);

					this.publication_title = readString(dis);

					this.item_status_code = readString(dis);

					this.distribution_event_id = readString(dis);

					this.source_of_content = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.tax_pass_through_flag = null;
					} else {
						this.tax_pass_through_flag = dis.readBoolean();
					}

					this.publication_work_identifier = readString(dis);

					this.created_datetime = readDate(dis);

					this.created_by_user = readString(dis);

					this.updated_datetime = readDate(dis);

					this.updated_by_user = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Long

				if (this.dwo_order_detail_dimension_uid == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.dwo_order_detail_dimension_uid);
				}

				// String

				writeString(this.source_system_order_detail_uid, dos);

				// String

				writeString(this.dwo_order_header_dimension_uid, dos);

				// String

				writeString(this.rightsholder_on_record_account_number, dos);

				// String

				writeString(this.rightsholder_on_record_name, dos);

				// String

				writeString(this.product_name, dos);

				// String

				writeString(this.product_code, dos);

				// String

				writeString(this.product_family, dos);

				// Long

				if (this.number_of_units == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.number_of_units);
				}

				// String

				writeString(this.unit_type, dos);

				// String

				writeString(this.publication_title, dos);

				// String

				writeString(this.item_status_code, dos);

				// String

				writeString(this.distribution_event_id, dos);

				// String

				writeString(this.source_of_content, dos);

				// Boolean

				if (this.tax_pass_through_flag == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.tax_pass_through_flag);
				}

				// String

				writeString(this.publication_work_identifier, dos);

				// java.util.Date

				writeDate(this.created_datetime, dos);

				// String

				writeString(this.created_by_user, dos);

				// java.util.Date

				writeDate(this.updated_datetime, dos);

				// String

				writeString(this.updated_by_user, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("dwo_order_detail_dimension_uid="
					+ String.valueOf(dwo_order_detail_dimension_uid));
			sb.append(",source_system_order_detail_uid="
					+ source_system_order_detail_uid);
			sb.append(",dwo_order_header_dimension_uid="
					+ dwo_order_header_dimension_uid);
			sb.append(",rightsholder_on_record_account_number="
					+ rightsholder_on_record_account_number);
			sb.append(",rightsholder_on_record_name="
					+ rightsholder_on_record_name);
			sb.append(",product_name=" + product_name);
			sb.append(",product_code=" + product_code);
			sb.append(",product_family=" + product_family);
			sb.append(",number_of_units=" + String.valueOf(number_of_units));
			sb.append(",unit_type=" + unit_type);
			sb.append(",publication_title=" + publication_title);
			sb.append(",item_status_code=" + item_status_code);
			sb.append(",distribution_event_id=" + distribution_event_id);
			sb.append(",source_of_content=" + source_of_content);
			sb.append(",tax_pass_through_flag="
					+ String.valueOf(tax_pass_through_flag));
			sb.append(",publication_work_identifier="
					+ publication_work_identifier);
			sb.append(",created_datetime=" + String.valueOf(created_datetime));
			sb.append(",created_by_user=" + created_by_user);
			sb.append(",updated_datetime=" + String.valueOf(updated_datetime));
			sb.append(",updated_by_user=" + updated_by_user);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row14Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_14Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDBInput_14_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row14Struct row14 = new row14Struct();

				/**
				 * [tDBOutput_14 begin ] start
				 */

				ok_Hash.put("tDBOutput_14", false);
				start_Hash.put("tDBOutput_14", System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tDBOutput_14");
				tStatCatcher_1Process(globalMap);

				talendStats_STATS.addMessage("begin", "tDBOutput_14");
				talendStats_STATSProcess(globalMap);

				currentComponent = "tDBOutput_14";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row14" + iterateId, 0,
								0);

					}
				}

				int tos_count_tDBOutput_14 = 0;

				String dbschema_tDBOutput_14 = null;
				dbschema_tDBOutput_14 = context.data_warehouse_order_dwos_schema;

				String tableName_tDBOutput_14 = null;
				if (dbschema_tDBOutput_14 == null
						|| dbschema_tDBOutput_14.trim().length() == 0) {
					tableName_tDBOutput_14 = "dwo_order_detail_dimension";
				} else {
					tableName_tDBOutput_14 = dbschema_tDBOutput_14 + "\".\""
							+ "dwo_order_detail_dimension";
				}

				int nb_line_tDBOutput_14 = 0;
				int nb_line_update_tDBOutput_14 = 0;
				int nb_line_inserted_tDBOutput_14 = 0;
				int nb_line_deleted_tDBOutput_14 = 0;
				int nb_line_rejected_tDBOutput_14 = 0;

				int deletedCount_tDBOutput_14 = 0;
				int updatedCount_tDBOutput_14 = 0;
				int insertedCount_tDBOutput_14 = 0;
				int rejectedCount_tDBOutput_14 = 0;

				boolean whetherReject_tDBOutput_14 = false;

				java.sql.Connection conn_tDBOutput_14 = null;
				String dbUser_tDBOutput_14 = null;

				java.lang.Class.forName("org.postgresql.Driver");
				String url_tDBOutput_14 = "jdbc:postgresql://"
						+ context.data_warehouse_order_dwos_host + ":"
						+ context.data_warehouse_order_dwos_port + "/"
						+ context.data_warehouse_order_dwos_database;
				dbUser_tDBOutput_14 = context.data_warehouse_order_dwos_username;

				final String decryptedPassword_tDBOutput_14 = context.data_warehouse_order_dwos_password;

				String dbPwd_tDBOutput_14 = decryptedPassword_tDBOutput_14;

				conn_tDBOutput_14 = java.sql.DriverManager.getConnection(
						url_tDBOutput_14, dbUser_tDBOutput_14,
						dbPwd_tDBOutput_14);

				resourceMap.put("conn_tDBOutput_14", conn_tDBOutput_14);
				conn_tDBOutput_14.setAutoCommit(false);
				int commitEvery_tDBOutput_14 = 10000;
				int commitCounter_tDBOutput_14 = 0;

				int batchSize_tDBOutput_14 = 10000;
				int batchSizeCounter_tDBOutput_14 = 0;

				int count_tDBOutput_14 = 0;
				String insert_tDBOutput_14 = "INSERT INTO \""
						+ tableName_tDBOutput_14
						+ "\" (\"dwo_order_detail_dimension_uid\",\"source_system_order_detail_uid\",\"dwo_order_header_dimension_uid\",\"rightsholder_on_record_account_number\",\"rightsholder_on_record_name\",\"product_name\",\"product_code\",\"product_family\",\"number_of_units\",\"unit_type\",\"publication_title\",\"item_status_code\",\"distribution_event_id\",\"source_of_content\",\"tax_pass_through_flag\",\"publication_work_identifier\",\"created_datetime\",\"created_by_user\",\"updated_datetime\",\"updated_by_user\") VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

				java.sql.PreparedStatement pstmt_tDBOutput_14 = conn_tDBOutput_14
						.prepareStatement(insert_tDBOutput_14);
				resourceMap.put("pstmt_tDBOutput_14", pstmt_tDBOutput_14);

				/**
				 * [tDBOutput_14 begin ] stop
				 */

				/**
				 * [tDBInput_14 begin ] start
				 */

				ok_Hash.put("tDBInput_14", false);
				start_Hash.put("tDBInput_14", System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tDBInput_14");
				tStatCatcher_1Process(globalMap);

				talendStats_STATS.addMessage("begin", "tDBInput_14");
				talendStats_STATSProcess(globalMap);

				currentComponent = "tDBInput_14";

				int tos_count_tDBInput_14 = 0;

				int nb_line_tDBInput_14 = 0;
				java.sql.Connection conn_tDBInput_14 = null;
				String driverClass_tDBInput_14 = "org.postgresql.Driver";
				java.lang.Class.forName(driverClass_tDBInput_14);
				String dbUser_tDBInput_14 = context.data_warehouse_order_dwos_username;

				final String decryptedPassword_tDBInput_14 = context.data_warehouse_order_dwos_password;

				String dbPwd_tDBInput_14 = decryptedPassword_tDBInput_14;

				String url_tDBInput_14 = "jdbc:postgresql://"
						+ context.data_warehouse_order_dwos_host + ":"
						+ context.data_warehouse_order_dwos_port + "/"
						+ context.data_warehouse_order_dwos_database;

				conn_tDBInput_14 = java.sql.DriverManager.getConnection(
						url_tDBInput_14, dbUser_tDBInput_14, dbPwd_tDBInput_14);

				conn_tDBInput_14.setAutoCommit(false);

				java.sql.Statement stmt_tDBInput_14 = conn_tDBInput_14
						.createStatement();
				stmt_tDBInput_14.setFetchSize(1000);

				String dbquery_tDBInput_14 = "SELECT nextval('staging.order_detail_dimension_seq') as dwo_order_detail_dimension_uid,\n       i.om_order_item_uid as s"
						+ "ource_system_order_detail_uid,\n       i.om_order_header_uid as dwo_order_header_dimension_uid,\n       i.ror_account_numb"
						+ "er as rightsholder_on_record_account_number,\n       i.ror_name as rightsholder_on_record_name,\n       i.product_name as "
						+ "product_name,\n       i.product_name_description as product_code,\n       i.product_family as product_family,\n       i.ite"
						+ "m_quantity as number_of_units,\n       i.unit_type as unit_type,\n       i.content_publication_title as publication_title,"
						+ "\n       i.item_status_code as item_status_code,\n       id.om_distribution_uid as distribution_event_id,\n       i.content"
						+ "_source as source_of_content,\n       itd.tax_pass_through as tax_pass_through_flag,\n       i.work_uid as publication_wor"
						+ "k_identifier,\n       i.created_datetime as created_datetime,\n       i.created_by_user as created_by_user,\n       i.updat"
						+ "ed_datetime as updated_datetime,\n       i.updated_by_user as updated_by_user\nfrom staging.dwo_om_order_item i\nleft outer"
						+ " join staging.dwo_om_item_distribution id on id.om_order_item_uid = i.om_order_item_uid\nleft outer join staging.dwo_om_o"
						+ "rder_item_fees if on if.om_order_item_fees_uid = i.om_order_item_fees_uid\nleft outer join staging.dwo_om_order_item_tax_"
						+ "details itd on itd.om_order_item_fees_uid = if.om_order_item_fees_uid";

				globalMap.put("tDBInput_14_QUERY", dbquery_tDBInput_14);
				java.sql.ResultSet rs_tDBInput_14 = null;

				try {
					rs_tDBInput_14 = stmt_tDBInput_14
							.executeQuery(dbquery_tDBInput_14);
					java.sql.ResultSetMetaData rsmd_tDBInput_14 = rs_tDBInput_14
							.getMetaData();
					int colQtyInRs_tDBInput_14 = rsmd_tDBInput_14
							.getColumnCount();

					String tmpContent_tDBInput_14 = null;

					while (rs_tDBInput_14.next()) {
						nb_line_tDBInput_14++;

						if (colQtyInRs_tDBInput_14 < 1) {
							row14.dwo_order_detail_dimension_uid = null;
						} else {

							if (rs_tDBInput_14.getObject(1) != null) {
								row14.dwo_order_detail_dimension_uid = rs_tDBInput_14
										.getLong(1);
							} else {
								row14.dwo_order_detail_dimension_uid = null;
							}
						}
						if (colQtyInRs_tDBInput_14 < 2) {
							row14.source_system_order_detail_uid = null;
						} else {

							row14.source_system_order_detail_uid = routines.system.JDBCUtil
									.getString(rs_tDBInput_14, 2, false);
						}
						if (colQtyInRs_tDBInput_14 < 3) {
							row14.dwo_order_header_dimension_uid = null;
						} else {

							row14.dwo_order_header_dimension_uid = routines.system.JDBCUtil
									.getString(rs_tDBInput_14, 3, false);
						}
						if (colQtyInRs_tDBInput_14 < 4) {
							row14.rightsholder_on_record_account_number = null;
						} else {

							row14.rightsholder_on_record_account_number = routines.system.JDBCUtil
									.getString(rs_tDBInput_14, 4, false);
						}
						if (colQtyInRs_tDBInput_14 < 5) {
							row14.rightsholder_on_record_name = null;
						} else {

							row14.rightsholder_on_record_name = routines.system.JDBCUtil
									.getString(rs_tDBInput_14, 5, false);
						}
						if (colQtyInRs_tDBInput_14 < 6) {
							row14.product_name = null;
						} else {

							row14.product_name = routines.system.JDBCUtil
									.getString(rs_tDBInput_14, 6, false);
						}
						if (colQtyInRs_tDBInput_14 < 7) {
							row14.product_code = null;
						} else {

							row14.product_code = routines.system.JDBCUtil
									.getString(rs_tDBInput_14, 7, false);
						}
						if (colQtyInRs_tDBInput_14 < 8) {
							row14.product_family = null;
						} else {

							row14.product_family = routines.system.JDBCUtil
									.getString(rs_tDBInput_14, 8, false);
						}
						if (colQtyInRs_tDBInput_14 < 9) {
							row14.number_of_units = null;
						} else {

							if (rs_tDBInput_14.getObject(9) != null) {
								row14.number_of_units = rs_tDBInput_14
										.getLong(9);
							} else {
								row14.number_of_units = null;
							}
						}
						if (colQtyInRs_tDBInput_14 < 10) {
							row14.unit_type = null;
						} else {

							row14.unit_type = routines.system.JDBCUtil
									.getString(rs_tDBInput_14, 10, false);
						}
						if (colQtyInRs_tDBInput_14 < 11) {
							row14.publication_title = null;
						} else {

							row14.publication_title = routines.system.JDBCUtil
									.getString(rs_tDBInput_14, 11, false);
						}
						if (colQtyInRs_tDBInput_14 < 12) {
							row14.item_status_code = null;
						} else {

							row14.item_status_code = routines.system.JDBCUtil
									.getString(rs_tDBInput_14, 12, false);
						}
						if (colQtyInRs_tDBInput_14 < 13) {
							row14.distribution_event_id = null;
						} else {

							row14.distribution_event_id = routines.system.JDBCUtil
									.getString(rs_tDBInput_14, 13, false);
						}
						if (colQtyInRs_tDBInput_14 < 14) {
							row14.source_of_content = null;
						} else {

							row14.source_of_content = routines.system.JDBCUtil
									.getString(rs_tDBInput_14, 14, false);
						}
						if (colQtyInRs_tDBInput_14 < 15) {
							row14.tax_pass_through_flag = null;
						} else {

							if (rs_tDBInput_14.getObject(15) != null) {
								row14.tax_pass_through_flag = rs_tDBInput_14
										.getBoolean(15);
							} else {
								row14.tax_pass_through_flag = null;
							}
						}
						if (colQtyInRs_tDBInput_14 < 16) {
							row14.publication_work_identifier = null;
						} else {

							row14.publication_work_identifier = routines.system.JDBCUtil
									.getString(rs_tDBInput_14, 16, false);
						}
						if (colQtyInRs_tDBInput_14 < 17) {
							row14.created_datetime = null;
						} else {

							row14.created_datetime = routines.system.JDBCUtil
									.getDate(rs_tDBInput_14, 17);
						}
						if (colQtyInRs_tDBInput_14 < 18) {
							row14.created_by_user = null;
						} else {

							row14.created_by_user = routines.system.JDBCUtil
									.getString(rs_tDBInput_14, 18, false);
						}
						if (colQtyInRs_tDBInput_14 < 19) {
							row14.updated_datetime = null;
						} else {

							row14.updated_datetime = routines.system.JDBCUtil
									.getDate(rs_tDBInput_14, 19);
						}
						if (colQtyInRs_tDBInput_14 < 20) {
							row14.updated_by_user = null;
						} else {

							row14.updated_by_user = routines.system.JDBCUtil
									.getString(rs_tDBInput_14, 20, false);
						}

						/**
						 * [tDBInput_14 begin ] stop
						 */

						/**
						 * [tDBInput_14 main ] start
						 */

						currentComponent = "tDBInput_14";

						tos_count_tDBInput_14++;

						/**
						 * [tDBInput_14 main ] stop
						 */

						/**
						 * [tDBInput_14 process_data_begin ] start
						 */

						currentComponent = "tDBInput_14";

						/**
						 * [tDBInput_14 process_data_begin ] stop
						 */

						/**
						 * [tDBOutput_14 main ] start
						 */

						currentComponent = "tDBOutput_14";

						// row14
						// row14

						if (execStat) {
							runStat.updateStatOnConnection("row14" + iterateId,
									1, 1);
						}

						whetherReject_tDBOutput_14 = false;
						if (row14.dwo_order_detail_dimension_uid == null) {
							pstmt_tDBOutput_14.setNull(1,
									java.sql.Types.INTEGER);
						} else {
							pstmt_tDBOutput_14.setLong(1,
									row14.dwo_order_detail_dimension_uid);
						}

						if (row14.source_system_order_detail_uid == null) {
							pstmt_tDBOutput_14.setNull(2,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_14.setString(2,
									row14.source_system_order_detail_uid);
						}

						if (row14.dwo_order_header_dimension_uid == null) {
							pstmt_tDBOutput_14.setNull(3,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_14.setString(3,
									row14.dwo_order_header_dimension_uid);
						}

						if (row14.rightsholder_on_record_account_number == null) {
							pstmt_tDBOutput_14.setNull(4,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_14
									.setString(
											4,
											row14.rightsholder_on_record_account_number);
						}

						if (row14.rightsholder_on_record_name == null) {
							pstmt_tDBOutput_14.setNull(5,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_14.setString(5,
									row14.rightsholder_on_record_name);
						}

						if (row14.product_name == null) {
							pstmt_tDBOutput_14.setNull(6,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_14.setString(6, row14.product_name);
						}

						if (row14.product_code == null) {
							pstmt_tDBOutput_14.setNull(7,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_14.setString(7, row14.product_code);
						}

						if (row14.product_family == null) {
							pstmt_tDBOutput_14.setNull(8,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_14.setString(8,
									row14.product_family);
						}

						if (row14.number_of_units == null) {
							pstmt_tDBOutput_14.setNull(9,
									java.sql.Types.INTEGER);
						} else {
							pstmt_tDBOutput_14
									.setLong(9, row14.number_of_units);
						}

						if (row14.unit_type == null) {
							pstmt_tDBOutput_14.setNull(10,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_14.setString(10, row14.unit_type);
						}

						if (row14.publication_title == null) {
							pstmt_tDBOutput_14.setNull(11,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_14.setString(11,
									row14.publication_title);
						}

						if (row14.item_status_code == null) {
							pstmt_tDBOutput_14.setNull(12,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_14.setString(12,
									row14.item_status_code);
						}

						if (row14.distribution_event_id == null) {
							pstmt_tDBOutput_14.setNull(13,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_14.setString(13,
									row14.distribution_event_id);
						}

						if (row14.source_of_content == null) {
							pstmt_tDBOutput_14.setNull(14,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_14.setString(14,
									row14.source_of_content);
						}

						if (row14.tax_pass_through_flag == null) {
							pstmt_tDBOutput_14.setNull(15,
									java.sql.Types.BOOLEAN);
						} else {
							pstmt_tDBOutput_14.setBoolean(15,
									row14.tax_pass_through_flag);
						}

						if (row14.publication_work_identifier == null) {
							pstmt_tDBOutput_14.setNull(16,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_14.setString(16,
									row14.publication_work_identifier);
						}

						if (row14.created_datetime != null) {
							pstmt_tDBOutput_14.setTimestamp(17,
									new java.sql.Timestamp(
											row14.created_datetime.getTime()));
						} else {
							pstmt_tDBOutput_14.setNull(17,
									java.sql.Types.TIMESTAMP);
						}

						if (row14.created_by_user == null) {
							pstmt_tDBOutput_14.setNull(18,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_14.setString(18,
									row14.created_by_user);
						}

						if (row14.updated_datetime != null) {
							pstmt_tDBOutput_14.setTimestamp(19,
									new java.sql.Timestamp(
											row14.updated_datetime.getTime()));
						} else {
							pstmt_tDBOutput_14.setNull(19,
									java.sql.Types.TIMESTAMP);
						}

						if (row14.updated_by_user == null) {
							pstmt_tDBOutput_14.setNull(20,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_14.setString(20,
									row14.updated_by_user);
						}

						pstmt_tDBOutput_14.addBatch();
						nb_line_tDBOutput_14++;

						batchSizeCounter_tDBOutput_14++;

						if ((batchSize_tDBOutput_14 > 0)
								&& (batchSize_tDBOutput_14 <= batchSizeCounter_tDBOutput_14)) {
							try {
								int countSum_tDBOutput_14 = 0;

								for (int countEach_tDBOutput_14 : pstmt_tDBOutput_14
										.executeBatch()) {
									countSum_tDBOutput_14 += (countEach_tDBOutput_14 < 0 ? 0
											: countEach_tDBOutput_14);
								}

								insertedCount_tDBOutput_14 += countSum_tDBOutput_14;

								batchSizeCounter_tDBOutput_14 = 0;
							} catch (java.sql.BatchUpdateException e_tDBOutput_14) {
								java.sql.SQLException ne_tDBOutput_14 = e_tDBOutput_14
										.getNextException(), sqle_tDBOutput_14 = null;
								String errormessage_tDBOutput_14;
								if (ne_tDBOutput_14 != null) {
									// build new exception to provide the
									// original cause
									sqle_tDBOutput_14 = new java.sql.SQLException(
											e_tDBOutput_14.getMessage()
													+ "\ncaused by: "
													+ ne_tDBOutput_14
															.getMessage(),
											ne_tDBOutput_14.getSQLState(),
											ne_tDBOutput_14.getErrorCode(),
											ne_tDBOutput_14);
									errormessage_tDBOutput_14 = sqle_tDBOutput_14
											.getMessage();
								} else {
									errormessage_tDBOutput_14 = e_tDBOutput_14
											.getMessage();
								}

								int countSum_tDBOutput_14 = 0;
								for (int countEach_tDBOutput_14 : e_tDBOutput_14
										.getUpdateCounts()) {
									countSum_tDBOutput_14 += (countEach_tDBOutput_14 < 0 ? 0
											: countEach_tDBOutput_14);
								}

								insertedCount_tDBOutput_14 += countSum_tDBOutput_14;

								System.err.println(errormessage_tDBOutput_14);

							}
						}

						commitCounter_tDBOutput_14++;
						if (commitEvery_tDBOutput_14 <= commitCounter_tDBOutput_14) {
							if ((batchSize_tDBOutput_14 > 0)
									&& (batchSizeCounter_tDBOutput_14 > 0)) {
								try {
									int countSum_tDBOutput_14 = 0;

									for (int countEach_tDBOutput_14 : pstmt_tDBOutput_14
											.executeBatch()) {
										countSum_tDBOutput_14 += (countEach_tDBOutput_14 < 0 ? 0
												: countEach_tDBOutput_14);
									}

									insertedCount_tDBOutput_14 += countSum_tDBOutput_14;

									batchSizeCounter_tDBOutput_14 = 0;
								} catch (java.sql.BatchUpdateException e_tDBOutput_14) {
									java.sql.SQLException ne_tDBOutput_14 = e_tDBOutput_14
											.getNextException(), sqle_tDBOutput_14 = null;
									String errormessage_tDBOutput_14;
									if (ne_tDBOutput_14 != null) {
										// build new exception to provide the
										// original cause
										sqle_tDBOutput_14 = new java.sql.SQLException(
												e_tDBOutput_14.getMessage()
														+ "\ncaused by: "
														+ ne_tDBOutput_14
																.getMessage(),
												ne_tDBOutput_14.getSQLState(),
												ne_tDBOutput_14.getErrorCode(),
												ne_tDBOutput_14);
										errormessage_tDBOutput_14 = sqle_tDBOutput_14
												.getMessage();
									} else {
										errormessage_tDBOutput_14 = e_tDBOutput_14
												.getMessage();
									}

									int countSum_tDBOutput_14 = 0;
									for (int countEach_tDBOutput_14 : e_tDBOutput_14
											.getUpdateCounts()) {
										countSum_tDBOutput_14 += (countEach_tDBOutput_14 < 0 ? 0
												: countEach_tDBOutput_14);
									}

									insertedCount_tDBOutput_14 += countSum_tDBOutput_14;

									System.err
											.println(errormessage_tDBOutput_14);

								}
							}
							conn_tDBOutput_14.commit();

							commitCounter_tDBOutput_14 = 0;
						}

						tos_count_tDBOutput_14++;

						/**
						 * [tDBOutput_14 main ] stop
						 */

						/**
						 * [tDBOutput_14 process_data_begin ] start
						 */

						currentComponent = "tDBOutput_14";

						/**
						 * [tDBOutput_14 process_data_begin ] stop
						 */

						/**
						 * [tDBOutput_14 process_data_end ] start
						 */

						currentComponent = "tDBOutput_14";

						/**
						 * [tDBOutput_14 process_data_end ] stop
						 */

						/**
						 * [tDBInput_14 process_data_end ] start
						 */

						currentComponent = "tDBInput_14";

						/**
						 * [tDBInput_14 process_data_end ] stop
						 */

						/**
						 * [tDBInput_14 end ] start
						 */

						currentComponent = "tDBInput_14";

					}
				} finally {
					if (rs_tDBInput_14 != null) {
						rs_tDBInput_14.close();
					}
					if (stmt_tDBInput_14 != null) {
						stmt_tDBInput_14.close();
					}
					if (conn_tDBInput_14 != null
							&& !conn_tDBInput_14.isClosed()) {

						conn_tDBInput_14.commit();

						conn_tDBInput_14.close();

					}

				}
				globalMap.put("tDBInput_14_NB_LINE", nb_line_tDBInput_14);

				ok_Hash.put("tDBInput_14", true);
				end_Hash.put("tDBInput_14", System.currentTimeMillis());

				tStatCatcher_1.addMessage(
						"end",
						"tDBInput_14",
						end_Hash.get("tDBInput_14")
								- start_Hash.get("tDBInput_14"));
				tStatCatcher_1Process(globalMap);
				talendStats_STATS.addMessage(
						"end",
						"tDBInput_14",
						end_Hash.get("tDBInput_14")
								- start_Hash.get("tDBInput_14"));
				talendStats_STATSProcess(globalMap);

				/**
				 * [tDBInput_14 end ] stop
				 */

				/**
				 * [tDBOutput_14 end ] start
				 */

				currentComponent = "tDBOutput_14";

				try {
					int countSum_tDBOutput_14 = 0;
					if (pstmt_tDBOutput_14 != null
							&& batchSizeCounter_tDBOutput_14 > 0) {

						for (int countEach_tDBOutput_14 : pstmt_tDBOutput_14
								.executeBatch()) {
							countSum_tDBOutput_14 += (countEach_tDBOutput_14 < 0 ? 0
									: countEach_tDBOutput_14);
						}

					}

					insertedCount_tDBOutput_14 += countSum_tDBOutput_14;

				} catch (java.sql.BatchUpdateException e_tDBOutput_14) {
					java.sql.SQLException ne_tDBOutput_14 = e_tDBOutput_14
							.getNextException(), sqle_tDBOutput_14 = null;
					String errormessage_tDBOutput_14;
					if (ne_tDBOutput_14 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_14 = new java.sql.SQLException(
								e_tDBOutput_14.getMessage() + "\ncaused by: "
										+ ne_tDBOutput_14.getMessage(),
								ne_tDBOutput_14.getSQLState(),
								ne_tDBOutput_14.getErrorCode(), ne_tDBOutput_14);
						errormessage_tDBOutput_14 = sqle_tDBOutput_14
								.getMessage();
					} else {
						errormessage_tDBOutput_14 = e_tDBOutput_14.getMessage();
					}

					int countSum_tDBOutput_14 = 0;
					for (int countEach_tDBOutput_14 : e_tDBOutput_14
							.getUpdateCounts()) {
						countSum_tDBOutput_14 += (countEach_tDBOutput_14 < 0 ? 0
								: countEach_tDBOutput_14);
					}

					insertedCount_tDBOutput_14 += countSum_tDBOutput_14;

					System.err.println(errormessage_tDBOutput_14);

				}

				if (pstmt_tDBOutput_14 != null) {

					pstmt_tDBOutput_14.close();
					resourceMap.remove("pstmt_tDBOutput_14");
				}
				resourceMap.put("statementClosed_tDBOutput_14", true);

				conn_tDBOutput_14.commit();

				conn_tDBOutput_14.close();

				resourceMap.put("finish_tDBOutput_14", true);

				nb_line_deleted_tDBOutput_14 = nb_line_deleted_tDBOutput_14
						+ deletedCount_tDBOutput_14;
				nb_line_update_tDBOutput_14 = nb_line_update_tDBOutput_14
						+ updatedCount_tDBOutput_14;
				nb_line_inserted_tDBOutput_14 = nb_line_inserted_tDBOutput_14
						+ insertedCount_tDBOutput_14;
				nb_line_rejected_tDBOutput_14 = nb_line_rejected_tDBOutput_14
						+ rejectedCount_tDBOutput_14;

				globalMap.put("tDBOutput_14_NB_LINE", nb_line_tDBOutput_14);
				globalMap.put("tDBOutput_14_NB_LINE_UPDATED",
						nb_line_update_tDBOutput_14);
				globalMap.put("tDBOutput_14_NB_LINE_INSERTED",
						nb_line_inserted_tDBOutput_14);
				globalMap.put("tDBOutput_14_NB_LINE_DELETED",
						nb_line_deleted_tDBOutput_14);
				globalMap.put("tDBOutput_14_NB_LINE_REJECTED",
						nb_line_rejected_tDBOutput_14);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row14" + iterateId, 2,
								0);
					}
				}

				ok_Hash.put("tDBOutput_14", true);
				end_Hash.put("tDBOutput_14", System.currentTimeMillis());

				tStatCatcher_1.addMessage(
						"end",
						"tDBOutput_14",
						end_Hash.get("tDBOutput_14")
								- start_Hash.get("tDBOutput_14"));
				tStatCatcher_1Process(globalMap);
				talendStats_STATS.addMessage(
						"end",
						"tDBOutput_14",
						end_Hash.get("tDBOutput_14")
								- start_Hash.get("tDBOutput_14"));
				talendStats_STATSProcess(globalMap);

				/**
				 * [tDBOutput_14 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_14 finally ] start
				 */

				currentComponent = "tDBInput_14";

				/**
				 * [tDBInput_14 finally ] stop
				 */

				/**
				 * [tDBOutput_14 finally ] start
				 */

				currentComponent = "tDBOutput_14";

				try {
					if (resourceMap.get("statementClosed_tDBOutput_14") == null) {
						java.sql.PreparedStatement pstmtToClose_tDBOutput_14 = null;
						if ((pstmtToClose_tDBOutput_14 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmt_tDBOutput_14")) != null) {
							pstmtToClose_tDBOutput_14.close();
						}
					}
				} finally {
					if (resourceMap.get("finish_tDBOutput_14") == null) {
						java.sql.Connection ctn_tDBOutput_14 = null;
						if ((ctn_tDBOutput_14 = (java.sql.Connection) resourceMap
								.get("conn_tDBOutput_14")) != null) {
							try {
								ctn_tDBOutput_14.close();
							} catch (java.sql.SQLException sqlEx_tDBOutput_14) {
								String errorMessage_tDBOutput_14 = "failed to close the connection in tDBOutput_14 :"
										+ sqlEx_tDBOutput_14.getMessage();
								System.err.println(errorMessage_tDBOutput_14);
							}
						}
					}
				}

				/**
				 * [tDBOutput_14 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_14_SUBPROCESS_STATE", 1);
	}

	public static class row9Struct implements
			routines.system.IPersistableRow<row9Struct> {
		final static byte[] commonByteArrayLock_ORDER_ETL_OMS_ETL_NO_PRODUCTS = new byte[0];
		static byte[] commonByteArray_ORDER_ETL_OMS_ETL_NO_PRODUCTS = new byte[0];

		public String pm_organization_uid;

		public String getPm_organization_uid() {
			return this.pm_organization_uid;
		}

		public String name;

		public String getName() {
			return this.name;
		}

		public String external_organization_key;

		public String getExternal_organization_key() {
			return this.external_organization_key;
		}

		public String external_organization_source;

		public String getExternal_organization_source() {
			return this.external_organization_source;
		}

		public String default_organization_account_uid;

		public String getDefault_organization_account_uid() {
			return this.default_organization_account_uid;
		}

		public String default_organization_location_uid;

		public String getDefault_organization_location_uid() {
			return this.default_organization_location_uid;
		}

		public String parent_organization_uid;

		public String getParent_organization_uid() {
			return this.parent_organization_uid;
		}

		public String pm_license_channel_uid;

		public String getPm_license_channel_uid() {
			return this.pm_license_channel_uid;
		}

		public String created_by_user;

		public String getCreated_by_user() {
			return this.created_by_user;
		}

		public java.util.Date created_datetime;

		public java.util.Date getCreated_datetime() {
			return this.created_datetime;
		}

		public String updated_by_user;

		public String getUpdated_by_user() {
			return this.updated_by_user;
		}

		public java.util.Date updated_datetime;

		public java.util.Date getUpdated_datetime() {
			return this.updated_datetime;
		}

		public int record_version;

		public int getRecord_version() {
			return this.record_version;
		}

		public String pm_organization_type_uid;

		public String getPm_organization_type_uid() {
			return this.pm_organization_type_uid;
		}

		public String logo_uri;

		public String getLogo_uri() {
			return this.logo_uri;
		}

		public String notes;

		public String getNotes() {
			return this.notes;
		}

		public Boolean not_for_profit;

		public Boolean getNot_for_profit() {
			return this.not_for_profit;
		}

		public Boolean disabled_flag;

		public Boolean getDisabled_flag() {
			return this.disabled_flag;
		}

		public Boolean article_search_allowed;

		public Boolean getArticle_search_allowed() {
			return this.article_search_allowed;
		}

		public String contact_email;

		public String getContact_email() {
			return this.contact_email;
		}

		public String pubget_identifier;

		public String getPubget_identifier() {
			return this.pubget_identifier;
		}

		public String default_iso_currency_code;

		public String getDefault_iso_currency_code() {
			return this.default_iso_currency_code;
		}

		public String default_iso_language_code;

		public String getDefault_iso_language_code() {
			return this.default_iso_language_code;
		}

		public String content_services_publisher_uid;

		public String getContent_services_publisher_uid() {
			return this.content_services_publisher_uid;
		}

		public String rightslink_publisher_id;

		public String getRightslink_publisher_id() {
			return this.rightslink_publisher_id;
		}

		public Boolean permission_direct_linking;

		public Boolean getPermission_direct_linking() {
			return this.permission_direct_linking;
		}

		public Boolean request_article_from_library_flag;

		public Boolean getRequest_article_from_library_flag() {
			return this.request_article_from_library_flag;
		}

		public String request_article_email;

		public String getRequest_article_email() {
			return this.request_article_email;
		}

		public Boolean agreement_manager_flag;

		public Boolean getAgreement_manager_flag() {
			return this.agreement_manager_flag;
		}

		public String tax_identification_number;

		public String getTax_identification_number() {
			return this.tax_identification_number;
		}

		public String tax_address_line1;

		public String getTax_address_line1() {
			return this.tax_address_line1;
		}

		public String tax_address_line2;

		public String getTax_address_line2() {
			return this.tax_address_line2;
		}

		public String tax_address_line3;

		public String getTax_address_line3() {
			return this.tax_address_line3;
		}

		public String tax_address_city;

		public String getTax_address_city() {
			return this.tax_address_city;
		}

		public String tax_address_state;

		public String getTax_address_state() {
			return this.tax_address_state;
		}

		public String tax_address_country;

		public String getTax_address_country() {
			return this.tax_address_country;
		}

		public String tax_address_zip_code;

		public String getTax_address_zip_code() {
			return this.tax_address_zip_code;
		}

		public String cc_email;

		public String getCc_email() {
			return this.cc_email;
		}

		public String white_label_host;

		public String getWhite_label_host() {
			return this.white_label_host;
		}

		public String tdm_customer_es_servers;

		public String getTdm_customer_es_servers() {
			return this.tdm_customer_es_servers;
		}

		public String tdm_customer_es_cluster;

		public String getTdm_customer_es_cluster() {
			return this.tdm_customer_es_cluster;
		}

		public String tdm_customer_es_index;

		public String getTdm_customer_es_index() {
			return this.tdm_customer_es_index;
		}

		public String pm_organization_sub_type;

		public String getPm_organization_sub_type() {
			return this.pm_organization_sub_type;
		}

		public String alternate_primary_identifier;

		public String getAlternate_primary_identifier() {
			return this.alternate_primary_identifier;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ORDER_ETL_OMS_ETL_NO_PRODUCTS.length) {
					if (length < 1024
							&& commonByteArray_ORDER_ETL_OMS_ETL_NO_PRODUCTS.length == 0) {
						commonByteArray_ORDER_ETL_OMS_ETL_NO_PRODUCTS = new byte[1024];
					} else {
						commonByteArray_ORDER_ETL_OMS_ETL_NO_PRODUCTS = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ORDER_ETL_OMS_ETL_NO_PRODUCTS, 0,
						length);
				strReturn = new String(
						commonByteArray_ORDER_ETL_OMS_ETL_NO_PRODUCTS, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ORDER_ETL_OMS_ETL_NO_PRODUCTS) {

				try {

					int length = 0;

					this.pm_organization_uid = readString(dis);

					this.name = readString(dis);

					this.external_organization_key = readString(dis);

					this.external_organization_source = readString(dis);

					this.default_organization_account_uid = readString(dis);

					this.default_organization_location_uid = readString(dis);

					this.parent_organization_uid = readString(dis);

					this.pm_license_channel_uid = readString(dis);

					this.created_by_user = readString(dis);

					this.created_datetime = readDate(dis);

					this.updated_by_user = readString(dis);

					this.updated_datetime = readDate(dis);

					this.record_version = dis.readInt();

					this.pm_organization_type_uid = readString(dis);

					this.logo_uri = readString(dis);

					this.notes = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.not_for_profit = null;
					} else {
						this.not_for_profit = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.disabled_flag = null;
					} else {
						this.disabled_flag = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.article_search_allowed = null;
					} else {
						this.article_search_allowed = dis.readBoolean();
					}

					this.contact_email = readString(dis);

					this.pubget_identifier = readString(dis);

					this.default_iso_currency_code = readString(dis);

					this.default_iso_language_code = readString(dis);

					this.content_services_publisher_uid = readString(dis);

					this.rightslink_publisher_id = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.permission_direct_linking = null;
					} else {
						this.permission_direct_linking = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.request_article_from_library_flag = null;
					} else {
						this.request_article_from_library_flag = dis
								.readBoolean();
					}

					this.request_article_email = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.agreement_manager_flag = null;
					} else {
						this.agreement_manager_flag = dis.readBoolean();
					}

					this.tax_identification_number = readString(dis);

					this.tax_address_line1 = readString(dis);

					this.tax_address_line2 = readString(dis);

					this.tax_address_line3 = readString(dis);

					this.tax_address_city = readString(dis);

					this.tax_address_state = readString(dis);

					this.tax_address_country = readString(dis);

					this.tax_address_zip_code = readString(dis);

					this.cc_email = readString(dis);

					this.white_label_host = readString(dis);

					this.tdm_customer_es_servers = readString(dis);

					this.tdm_customer_es_cluster = readString(dis);

					this.tdm_customer_es_index = readString(dis);

					this.pm_organization_sub_type = readString(dis);

					this.alternate_primary_identifier = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.pm_organization_uid, dos);

				// String

				writeString(this.name, dos);

				// String

				writeString(this.external_organization_key, dos);

				// String

				writeString(this.external_organization_source, dos);

				// String

				writeString(this.default_organization_account_uid, dos);

				// String

				writeString(this.default_organization_location_uid, dos);

				// String

				writeString(this.parent_organization_uid, dos);

				// String

				writeString(this.pm_license_channel_uid, dos);

				// String

				writeString(this.created_by_user, dos);

				// java.util.Date

				writeDate(this.created_datetime, dos);

				// String

				writeString(this.updated_by_user, dos);

				// java.util.Date

				writeDate(this.updated_datetime, dos);

				// int

				dos.writeInt(this.record_version);

				// String

				writeString(this.pm_organization_type_uid, dos);

				// String

				writeString(this.logo_uri, dos);

				// String

				writeString(this.notes, dos);

				// Boolean

				if (this.not_for_profit == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.not_for_profit);
				}

				// Boolean

				if (this.disabled_flag == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.disabled_flag);
				}

				// Boolean

				if (this.article_search_allowed == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.article_search_allowed);
				}

				// String

				writeString(this.contact_email, dos);

				// String

				writeString(this.pubget_identifier, dos);

				// String

				writeString(this.default_iso_currency_code, dos);

				// String

				writeString(this.default_iso_language_code, dos);

				// String

				writeString(this.content_services_publisher_uid, dos);

				// String

				writeString(this.rightslink_publisher_id, dos);

				// Boolean

				if (this.permission_direct_linking == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.permission_direct_linking);
				}

				// Boolean

				if (this.request_article_from_library_flag == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.request_article_from_library_flag);
				}

				// String

				writeString(this.request_article_email, dos);

				// Boolean

				if (this.agreement_manager_flag == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.agreement_manager_flag);
				}

				// String

				writeString(this.tax_identification_number, dos);

				// String

				writeString(this.tax_address_line1, dos);

				// String

				writeString(this.tax_address_line2, dos);

				// String

				writeString(this.tax_address_line3, dos);

				// String

				writeString(this.tax_address_city, dos);

				// String

				writeString(this.tax_address_state, dos);

				// String

				writeString(this.tax_address_country, dos);

				// String

				writeString(this.tax_address_zip_code, dos);

				// String

				writeString(this.cc_email, dos);

				// String

				writeString(this.white_label_host, dos);

				// String

				writeString(this.tdm_customer_es_servers, dos);

				// String

				writeString(this.tdm_customer_es_cluster, dos);

				// String

				writeString(this.tdm_customer_es_index, dos);

				// String

				writeString(this.pm_organization_sub_type, dos);

				// String

				writeString(this.alternate_primary_identifier, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("pm_organization_uid=" + pm_organization_uid);
			sb.append(",name=" + name);
			sb.append(",external_organization_key=" + external_organization_key);
			sb.append(",external_organization_source="
					+ external_organization_source);
			sb.append(",default_organization_account_uid="
					+ default_organization_account_uid);
			sb.append(",default_organization_location_uid="
					+ default_organization_location_uid);
			sb.append(",parent_organization_uid=" + parent_organization_uid);
			sb.append(",pm_license_channel_uid=" + pm_license_channel_uid);
			sb.append(",created_by_user=" + created_by_user);
			sb.append(",created_datetime=" + String.valueOf(created_datetime));
			sb.append(",updated_by_user=" + updated_by_user);
			sb.append(",updated_datetime=" + String.valueOf(updated_datetime));
			sb.append(",record_version=" + String.valueOf(record_version));
			sb.append(",pm_organization_type_uid=" + pm_organization_type_uid);
			sb.append(",logo_uri=" + logo_uri);
			sb.append(",notes=" + notes);
			sb.append(",not_for_profit=" + String.valueOf(not_for_profit));
			sb.append(",disabled_flag=" + String.valueOf(disabled_flag));
			sb.append(",article_search_allowed="
					+ String.valueOf(article_search_allowed));
			sb.append(",contact_email=" + contact_email);
			sb.append(",pubget_identifier=" + pubget_identifier);
			sb.append(",default_iso_currency_code=" + default_iso_currency_code);
			sb.append(",default_iso_language_code=" + default_iso_language_code);
			sb.append(",content_services_publisher_uid="
					+ content_services_publisher_uid);
			sb.append(",rightslink_publisher_id=" + rightslink_publisher_id);
			sb.append(",permission_direct_linking="
					+ String.valueOf(permission_direct_linking));
			sb.append(",request_article_from_library_flag="
					+ String.valueOf(request_article_from_library_flag));
			sb.append(",request_article_email=" + request_article_email);
			sb.append(",agreement_manager_flag="
					+ String.valueOf(agreement_manager_flag));
			sb.append(",tax_identification_number=" + tax_identification_number);
			sb.append(",tax_address_line1=" + tax_address_line1);
			sb.append(",tax_address_line2=" + tax_address_line2);
			sb.append(",tax_address_line3=" + tax_address_line3);
			sb.append(",tax_address_city=" + tax_address_city);
			sb.append(",tax_address_state=" + tax_address_state);
			sb.append(",tax_address_country=" + tax_address_country);
			sb.append(",tax_address_zip_code=" + tax_address_zip_code);
			sb.append(",cc_email=" + cc_email);
			sb.append(",white_label_host=" + white_label_host);
			sb.append(",tdm_customer_es_servers=" + tdm_customer_es_servers);
			sb.append(",tdm_customer_es_cluster=" + tdm_customer_es_cluster);
			sb.append(",tdm_customer_es_index=" + tdm_customer_es_index);
			sb.append(",pm_organization_sub_type=" + pm_organization_sub_type);
			sb.append(",alternate_primary_identifier="
					+ alternate_primary_identifier);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row9Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_9Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDBInput_9_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row9Struct row9 = new row9Struct();

				/**
				 * [tDBOutput_9 begin ] start
				 */

				ok_Hash.put("tDBOutput_9", false);
				start_Hash.put("tDBOutput_9", System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tDBOutput_9");
				tStatCatcher_1Process(globalMap);

				talendStats_STATS.addMessage("begin", "tDBOutput_9");
				talendStats_STATSProcess(globalMap);

				currentComponent = "tDBOutput_9";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row9" + iterateId, 0, 0);

					}
				}

				int tos_count_tDBOutput_9 = 0;

				String dbschema_tDBOutput_9 = null;
				dbschema_tDBOutput_9 = context.data_warehouse_order_dwos_schema;

				String tableName_tDBOutput_9 = null;
				if (dbschema_tDBOutput_9 == null
						|| dbschema_tDBOutput_9.trim().length() == 0) {
					tableName_tDBOutput_9 = "dwo_pm_organization";
				} else {
					tableName_tDBOutput_9 = dbschema_tDBOutput_9 + "\".\""
							+ "dwo_pm_organization";
				}

				int nb_line_tDBOutput_9 = 0;
				int nb_line_update_tDBOutput_9 = 0;
				int nb_line_inserted_tDBOutput_9 = 0;
				int nb_line_deleted_tDBOutput_9 = 0;
				int nb_line_rejected_tDBOutput_9 = 0;

				int deletedCount_tDBOutput_9 = 0;
				int updatedCount_tDBOutput_9 = 0;
				int insertedCount_tDBOutput_9 = 0;
				int rejectedCount_tDBOutput_9 = 0;

				boolean whetherReject_tDBOutput_9 = false;

				java.sql.Connection conn_tDBOutput_9 = null;
				String dbUser_tDBOutput_9 = null;

				java.lang.Class.forName("org.postgresql.Driver");
				String url_tDBOutput_9 = "jdbc:postgresql://"
						+ context.data_warehouse_order_dwos_host + ":"
						+ context.data_warehouse_order_dwos_port + "/"
						+ context.data_warehouse_order_dwos_database;
				dbUser_tDBOutput_9 = context.data_warehouse_order_dwos_username;

				final String decryptedPassword_tDBOutput_9 = context.data_warehouse_order_dwos_password;

				String dbPwd_tDBOutput_9 = decryptedPassword_tDBOutput_9;

				conn_tDBOutput_9 = java.sql.DriverManager.getConnection(
						url_tDBOutput_9, dbUser_tDBOutput_9, dbPwd_tDBOutput_9);

				resourceMap.put("conn_tDBOutput_9", conn_tDBOutput_9);
				conn_tDBOutput_9.setAutoCommit(false);
				int commitEvery_tDBOutput_9 = 10000;
				int commitCounter_tDBOutput_9 = 0;

				int batchSize_tDBOutput_9 = 10000;
				int batchSizeCounter_tDBOutput_9 = 0;

				int count_tDBOutput_9 = 0;
				int rsTruncCountNumber_tDBOutput_9 = 0;
				try (java.sql.Statement stmtTruncCount_tDBOutput_9 = conn_tDBOutput_9
						.createStatement()) {
					try (java.sql.ResultSet rsTruncCount_tDBOutput_9 = stmtTruncCount_tDBOutput_9
							.executeQuery("SELECT COUNT(1) FROM \""
									+ tableName_tDBOutput_9 + "\"")) {
						if (rsTruncCount_tDBOutput_9.next()) {
							rsTruncCountNumber_tDBOutput_9 = rsTruncCount_tDBOutput_9
									.getInt(1);
						}
					}
				}
				try (java.sql.Statement stmtTrunc_tDBOutput_9 = conn_tDBOutput_9
						.createStatement()) {
					stmtTrunc_tDBOutput_9.executeUpdate("TRUNCATE TABLE \""
							+ tableName_tDBOutput_9 + "\"");
					deletedCount_tDBOutput_9 += rsTruncCountNumber_tDBOutput_9;
				}
				String insert_tDBOutput_9 = "INSERT INTO \""
						+ tableName_tDBOutput_9
						+ "\" (\"pm_organization_uid\",\"name\",\"external_organization_key\",\"external_organization_source\",\"default_organization_account_uid\",\"default_organization_location_uid\",\"parent_organization_uid\",\"pm_license_channel_uid\",\"created_by_user\",\"created_datetime\",\"updated_by_user\",\"updated_datetime\",\"record_version\",\"pm_organization_type_uid\",\"logo_uri\",\"notes\",\"not_for_profit\",\"disabled_flag\",\"article_search_allowed\",\"contact_email\",\"pubget_identifier\",\"default_iso_currency_code\",\"default_iso_language_code\",\"content_services_publisher_uid\",\"rightslink_publisher_id\",\"permission_direct_linking\",\"request_article_from_library_flag\",\"request_article_email\",\"agreement_manager_flag\",\"tax_identification_number\",\"tax_address_line1\",\"tax_address_line2\",\"tax_address_line3\",\"tax_address_city\",\"tax_address_state\",\"tax_address_country\",\"tax_address_zip_code\",\"cc_email\",\"white_label_host\",\"tdm_customer_es_servers\",\"tdm_customer_es_cluster\",\"tdm_customer_es_index\",\"pm_organization_sub_type\",\"alternate_primary_identifier\") VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

				java.sql.PreparedStatement pstmt_tDBOutput_9 = conn_tDBOutput_9
						.prepareStatement(insert_tDBOutput_9);
				resourceMap.put("pstmt_tDBOutput_9", pstmt_tDBOutput_9);

				/**
				 * [tDBOutput_9 begin ] stop
				 */

				/**
				 * [tDBInput_9 begin ] start
				 */

				ok_Hash.put("tDBInput_9", false);
				start_Hash.put("tDBInput_9", System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tDBInput_9");
				tStatCatcher_1Process(globalMap);

				talendStats_STATS.addMessage("begin", "tDBInput_9");
				talendStats_STATSProcess(globalMap);

				currentComponent = "tDBInput_9";

				int tos_count_tDBInput_9 = 0;

				int nb_line_tDBInput_9 = 0;
				java.sql.Connection conn_tDBInput_9 = null;
				conn_tDBInput_9 = (java.sql.Connection) globalMap
						.get("conn_tDBConnection_1");

				java.sql.Statement stmt_tDBInput_9 = conn_tDBInput_9
						.createStatement();
				stmt_tDBInput_9.setFetchSize(1000);

				String dbquery_tDBInput_9 = "SELECT *\nFROM  apps.pm_organization";

				globalMap.put("tDBInput_9_QUERY", dbquery_tDBInput_9);
				java.sql.ResultSet rs_tDBInput_9 = null;

				try {
					rs_tDBInput_9 = stmt_tDBInput_9
							.executeQuery(dbquery_tDBInput_9);
					java.sql.ResultSetMetaData rsmd_tDBInput_9 = rs_tDBInput_9
							.getMetaData();
					int colQtyInRs_tDBInput_9 = rsmd_tDBInput_9
							.getColumnCount();

					String tmpContent_tDBInput_9 = null;

					while (rs_tDBInput_9.next()) {
						nb_line_tDBInput_9++;

						if (colQtyInRs_tDBInput_9 < 1) {
							row9.pm_organization_uid = null;
						} else {

							row9.pm_organization_uid = routines.system.JDBCUtil
									.getString(rs_tDBInput_9, 1, false);
						}
						if (colQtyInRs_tDBInput_9 < 2) {
							row9.name = null;
						} else {

							row9.name = routines.system.JDBCUtil.getString(
									rs_tDBInput_9, 2, false);
						}
						if (colQtyInRs_tDBInput_9 < 3) {
							row9.external_organization_key = null;
						} else {

							row9.external_organization_key = routines.system.JDBCUtil
									.getString(rs_tDBInput_9, 3, false);
						}
						if (colQtyInRs_tDBInput_9 < 4) {
							row9.external_organization_source = null;
						} else {

							row9.external_organization_source = routines.system.JDBCUtil
									.getString(rs_tDBInput_9, 4, false);
						}
						if (colQtyInRs_tDBInput_9 < 5) {
							row9.default_organization_account_uid = null;
						} else {

							row9.default_organization_account_uid = routines.system.JDBCUtil
									.getString(rs_tDBInput_9, 5, false);
						}
						if (colQtyInRs_tDBInput_9 < 6) {
							row9.default_organization_location_uid = null;
						} else {

							row9.default_organization_location_uid = routines.system.JDBCUtil
									.getString(rs_tDBInput_9, 6, false);
						}
						if (colQtyInRs_tDBInput_9 < 7) {
							row9.parent_organization_uid = null;
						} else {

							row9.parent_organization_uid = routines.system.JDBCUtil
									.getString(rs_tDBInput_9, 7, false);
						}
						if (colQtyInRs_tDBInput_9 < 8) {
							row9.pm_license_channel_uid = null;
						} else {

							row9.pm_license_channel_uid = routines.system.JDBCUtil
									.getString(rs_tDBInput_9, 8, false);
						}
						if (colQtyInRs_tDBInput_9 < 9) {
							row9.created_by_user = null;
						} else {

							row9.created_by_user = routines.system.JDBCUtil
									.getString(rs_tDBInput_9, 9, false);
						}
						if (colQtyInRs_tDBInput_9 < 10) {
							row9.created_datetime = null;
						} else {

							row9.created_datetime = routines.system.JDBCUtil
									.getDate(rs_tDBInput_9, 10);
						}
						if (colQtyInRs_tDBInput_9 < 11) {
							row9.updated_by_user = null;
						} else {

							row9.updated_by_user = routines.system.JDBCUtil
									.getString(rs_tDBInput_9, 11, false);
						}
						if (colQtyInRs_tDBInput_9 < 12) {
							row9.updated_datetime = null;
						} else {

							row9.updated_datetime = routines.system.JDBCUtil
									.getDate(rs_tDBInput_9, 12);
						}
						if (colQtyInRs_tDBInput_9 < 13) {
							row9.record_version = 0;
						} else {

							if (rs_tDBInput_9.getObject(13) != null) {
								row9.record_version = rs_tDBInput_9.getInt(13);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_9 < 14) {
							row9.pm_organization_type_uid = null;
						} else {

							row9.pm_organization_type_uid = routines.system.JDBCUtil
									.getString(rs_tDBInput_9, 14, false);
						}
						if (colQtyInRs_tDBInput_9 < 15) {
							row9.logo_uri = null;
						} else {

							row9.logo_uri = routines.system.JDBCUtil.getString(
									rs_tDBInput_9, 15, false);
						}
						if (colQtyInRs_tDBInput_9 < 16) {
							row9.notes = null;
						} else {

							row9.notes = routines.system.JDBCUtil.getString(
									rs_tDBInput_9, 16, false);
						}
						if (colQtyInRs_tDBInput_9 < 17) {
							row9.not_for_profit = null;
						} else {

							if (rs_tDBInput_9.getObject(17) != null) {
								row9.not_for_profit = rs_tDBInput_9
										.getBoolean(17);
							} else {
								row9.not_for_profit = null;
							}
						}
						if (colQtyInRs_tDBInput_9 < 18) {
							row9.disabled_flag = null;
						} else {

							if (rs_tDBInput_9.getObject(18) != null) {
								row9.disabled_flag = rs_tDBInput_9
										.getBoolean(18);
							} else {
								row9.disabled_flag = null;
							}
						}
						if (colQtyInRs_tDBInput_9 < 19) {
							row9.article_search_allowed = null;
						} else {

							if (rs_tDBInput_9.getObject(19) != null) {
								row9.article_search_allowed = rs_tDBInput_9
										.getBoolean(19);
							} else {
								row9.article_search_allowed = null;
							}
						}
						if (colQtyInRs_tDBInput_9 < 20) {
							row9.contact_email = null;
						} else {

							row9.contact_email = routines.system.JDBCUtil
									.getString(rs_tDBInput_9, 20, false);
						}
						if (colQtyInRs_tDBInput_9 < 21) {
							row9.pubget_identifier = null;
						} else {

							row9.pubget_identifier = routines.system.JDBCUtil
									.getString(rs_tDBInput_9, 21, false);
						}
						if (colQtyInRs_tDBInput_9 < 22) {
							row9.default_iso_currency_code = null;
						} else {

							row9.default_iso_currency_code = routines.system.JDBCUtil
									.getString(rs_tDBInput_9, 22, false);
						}
						if (colQtyInRs_tDBInput_9 < 23) {
							row9.default_iso_language_code = null;
						} else {

							row9.default_iso_language_code = routines.system.JDBCUtil
									.getString(rs_tDBInput_9, 23, false);
						}
						if (colQtyInRs_tDBInput_9 < 24) {
							row9.content_services_publisher_uid = null;
						} else {

							row9.content_services_publisher_uid = routines.system.JDBCUtil
									.getString(rs_tDBInput_9, 24, false);
						}
						if (colQtyInRs_tDBInput_9 < 25) {
							row9.rightslink_publisher_id = null;
						} else {

							row9.rightslink_publisher_id = routines.system.JDBCUtil
									.getString(rs_tDBInput_9, 25, false);
						}
						if (colQtyInRs_tDBInput_9 < 26) {
							row9.permission_direct_linking = null;
						} else {

							if (rs_tDBInput_9.getObject(26) != null) {
								row9.permission_direct_linking = rs_tDBInput_9
										.getBoolean(26);
							} else {
								row9.permission_direct_linking = null;
							}
						}
						if (colQtyInRs_tDBInput_9 < 27) {
							row9.request_article_from_library_flag = null;
						} else {

							if (rs_tDBInput_9.getObject(27) != null) {
								row9.request_article_from_library_flag = rs_tDBInput_9
										.getBoolean(27);
							} else {
								row9.request_article_from_library_flag = null;
							}
						}
						if (colQtyInRs_tDBInput_9 < 28) {
							row9.request_article_email = null;
						} else {

							row9.request_article_email = routines.system.JDBCUtil
									.getString(rs_tDBInput_9, 28, false);
						}
						if (colQtyInRs_tDBInput_9 < 29) {
							row9.agreement_manager_flag = null;
						} else {

							if (rs_tDBInput_9.getObject(29) != null) {
								row9.agreement_manager_flag = rs_tDBInput_9
										.getBoolean(29);
							} else {
								row9.agreement_manager_flag = null;
							}
						}
						if (colQtyInRs_tDBInput_9 < 30) {
							row9.tax_identification_number = null;
						} else {

							row9.tax_identification_number = routines.system.JDBCUtil
									.getString(rs_tDBInput_9, 30, false);
						}
						if (colQtyInRs_tDBInput_9 < 31) {
							row9.tax_address_line1 = null;
						} else {

							row9.tax_address_line1 = routines.system.JDBCUtil
									.getString(rs_tDBInput_9, 31, false);
						}
						if (colQtyInRs_tDBInput_9 < 32) {
							row9.tax_address_line2 = null;
						} else {

							row9.tax_address_line2 = routines.system.JDBCUtil
									.getString(rs_tDBInput_9, 32, false);
						}
						if (colQtyInRs_tDBInput_9 < 33) {
							row9.tax_address_line3 = null;
						} else {

							row9.tax_address_line3 = routines.system.JDBCUtil
									.getString(rs_tDBInput_9, 33, false);
						}
						if (colQtyInRs_tDBInput_9 < 34) {
							row9.tax_address_city = null;
						} else {

							row9.tax_address_city = routines.system.JDBCUtil
									.getString(rs_tDBInput_9, 34, false);
						}
						if (colQtyInRs_tDBInput_9 < 35) {
							row9.tax_address_state = null;
						} else {

							row9.tax_address_state = routines.system.JDBCUtil
									.getString(rs_tDBInput_9, 35, false);
						}
						if (colQtyInRs_tDBInput_9 < 36) {
							row9.tax_address_country = null;
						} else {

							row9.tax_address_country = routines.system.JDBCUtil
									.getString(rs_tDBInput_9, 36, false);
						}
						if (colQtyInRs_tDBInput_9 < 37) {
							row9.tax_address_zip_code = null;
						} else {

							row9.tax_address_zip_code = routines.system.JDBCUtil
									.getString(rs_tDBInput_9, 37, false);
						}
						if (colQtyInRs_tDBInput_9 < 38) {
							row9.cc_email = null;
						} else {

							row9.cc_email = routines.system.JDBCUtil.getString(
									rs_tDBInput_9, 38, false);
						}
						if (colQtyInRs_tDBInput_9 < 39) {
							row9.white_label_host = null;
						} else {

							row9.white_label_host = routines.system.JDBCUtil
									.getString(rs_tDBInput_9, 39, false);
						}
						if (colQtyInRs_tDBInput_9 < 40) {
							row9.tdm_customer_es_servers = null;
						} else {

							row9.tdm_customer_es_servers = routines.system.JDBCUtil
									.getString(rs_tDBInput_9, 40, false);
						}
						if (colQtyInRs_tDBInput_9 < 41) {
							row9.tdm_customer_es_cluster = null;
						} else {

							row9.tdm_customer_es_cluster = routines.system.JDBCUtil
									.getString(rs_tDBInput_9, 41, false);
						}
						if (colQtyInRs_tDBInput_9 < 42) {
							row9.tdm_customer_es_index = null;
						} else {

							row9.tdm_customer_es_index = routines.system.JDBCUtil
									.getString(rs_tDBInput_9, 42, false);
						}
						if (colQtyInRs_tDBInput_9 < 43) {
							row9.pm_organization_sub_type = null;
						} else {

							row9.pm_organization_sub_type = routines.system.JDBCUtil
									.getString(rs_tDBInput_9, 43, false);
						}
						if (colQtyInRs_tDBInput_9 < 44) {
							row9.alternate_primary_identifier = null;
						} else {

							row9.alternate_primary_identifier = routines.system.JDBCUtil
									.getString(rs_tDBInput_9, 44, false);
						}

						/**
						 * [tDBInput_9 begin ] stop
						 */

						/**
						 * [tDBInput_9 main ] start
						 */

						currentComponent = "tDBInput_9";

						tos_count_tDBInput_9++;

						/**
						 * [tDBInput_9 main ] stop
						 */

						/**
						 * [tDBInput_9 process_data_begin ] start
						 */

						currentComponent = "tDBInput_9";

						/**
						 * [tDBInput_9 process_data_begin ] stop
						 */

						/**
						 * [tDBOutput_9 main ] start
						 */

						currentComponent = "tDBOutput_9";

						// row9
						// row9

						if (execStat) {
							runStat.updateStatOnConnection("row9" + iterateId,
									1, 1);
						}

						whetherReject_tDBOutput_9 = false;
						if (row9.pm_organization_uid == null) {
							pstmt_tDBOutput_9
									.setNull(1, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_9.setString(1,
									row9.pm_organization_uid);
						}

						if (row9.name == null) {
							pstmt_tDBOutput_9
									.setNull(2, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_9.setString(2, row9.name);
						}

						if (row9.external_organization_key == null) {
							pstmt_tDBOutput_9
									.setNull(3, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_9.setString(3,
									row9.external_organization_key);
						}

						if (row9.external_organization_source == null) {
							pstmt_tDBOutput_9
									.setNull(4, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_9.setString(4,
									row9.external_organization_source);
						}

						if (row9.default_organization_account_uid == null) {
							pstmt_tDBOutput_9
									.setNull(5, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_9.setString(5,
									row9.default_organization_account_uid);
						}

						if (row9.default_organization_location_uid == null) {
							pstmt_tDBOutput_9
									.setNull(6, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_9.setString(6,
									row9.default_organization_location_uid);
						}

						if (row9.parent_organization_uid == null) {
							pstmt_tDBOutput_9
									.setNull(7, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_9.setString(7,
									row9.parent_organization_uid);
						}

						if (row9.pm_license_channel_uid == null) {
							pstmt_tDBOutput_9
									.setNull(8, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_9.setString(8,
									row9.pm_license_channel_uid);
						}

						if (row9.created_by_user == null) {
							pstmt_tDBOutput_9
									.setNull(9, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_9
									.setString(9, row9.created_by_user);
						}

						if (row9.created_datetime != null) {
							pstmt_tDBOutput_9.setTimestamp(10,
									new java.sql.Timestamp(
											row9.created_datetime.getTime()));
						} else {
							pstmt_tDBOutput_9.setNull(10,
									java.sql.Types.TIMESTAMP);
						}

						if (row9.updated_by_user == null) {
							pstmt_tDBOutput_9.setNull(11,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_9.setString(11,
									row9.updated_by_user);
						}

						if (row9.updated_datetime != null) {
							pstmt_tDBOutput_9.setTimestamp(12,
									new java.sql.Timestamp(
											row9.updated_datetime.getTime()));
						} else {
							pstmt_tDBOutput_9.setNull(12,
									java.sql.Types.TIMESTAMP);
						}

						pstmt_tDBOutput_9.setInt(13, row9.record_version);

						if (row9.pm_organization_type_uid == null) {
							pstmt_tDBOutput_9.setNull(14,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_9.setString(14,
									row9.pm_organization_type_uid);
						}

						if (row9.logo_uri == null) {
							pstmt_tDBOutput_9.setNull(15,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_9.setString(15, row9.logo_uri);
						}

						if (row9.notes == null) {
							pstmt_tDBOutput_9.setNull(16,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_9.setString(16, row9.notes);
						}

						if (row9.not_for_profit == null) {
							pstmt_tDBOutput_9.setNull(17,
									java.sql.Types.BOOLEAN);
						} else {
							pstmt_tDBOutput_9.setBoolean(17,
									row9.not_for_profit);
						}

						if (row9.disabled_flag == null) {
							pstmt_tDBOutput_9.setNull(18,
									java.sql.Types.BOOLEAN);
						} else {
							pstmt_tDBOutput_9
									.setBoolean(18, row9.disabled_flag);
						}

						if (row9.article_search_allowed == null) {
							pstmt_tDBOutput_9.setNull(19,
									java.sql.Types.BOOLEAN);
						} else {
							pstmt_tDBOutput_9.setBoolean(19,
									row9.article_search_allowed);
						}

						if (row9.contact_email == null) {
							pstmt_tDBOutput_9.setNull(20,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_9.setString(20, row9.contact_email);
						}

						if (row9.pubget_identifier == null) {
							pstmt_tDBOutput_9.setNull(21,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_9.setString(21,
									row9.pubget_identifier);
						}

						if (row9.default_iso_currency_code == null) {
							pstmt_tDBOutput_9.setNull(22,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_9.setString(22,
									row9.default_iso_currency_code);
						}

						if (row9.default_iso_language_code == null) {
							pstmt_tDBOutput_9.setNull(23,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_9.setString(23,
									row9.default_iso_language_code);
						}

						if (row9.content_services_publisher_uid == null) {
							pstmt_tDBOutput_9.setNull(24,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_9.setString(24,
									row9.content_services_publisher_uid);
						}

						if (row9.rightslink_publisher_id == null) {
							pstmt_tDBOutput_9.setNull(25,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_9.setString(25,
									row9.rightslink_publisher_id);
						}

						if (row9.permission_direct_linking == null) {
							pstmt_tDBOutput_9.setNull(26,
									java.sql.Types.BOOLEAN);
						} else {
							pstmt_tDBOutput_9.setBoolean(26,
									row9.permission_direct_linking);
						}

						if (row9.request_article_from_library_flag == null) {
							pstmt_tDBOutput_9.setNull(27,
									java.sql.Types.BOOLEAN);
						} else {
							pstmt_tDBOutput_9.setBoolean(27,
									row9.request_article_from_library_flag);
						}

						if (row9.request_article_email == null) {
							pstmt_tDBOutput_9.setNull(28,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_9.setString(28,
									row9.request_article_email);
						}

						if (row9.agreement_manager_flag == null) {
							pstmt_tDBOutput_9.setNull(29,
									java.sql.Types.BOOLEAN);
						} else {
							pstmt_tDBOutput_9.setBoolean(29,
									row9.agreement_manager_flag);
						}

						if (row9.tax_identification_number == null) {
							pstmt_tDBOutput_9.setNull(30,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_9.setString(30,
									row9.tax_identification_number);
						}

						if (row9.tax_address_line1 == null) {
							pstmt_tDBOutput_9.setNull(31,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_9.setString(31,
									row9.tax_address_line1);
						}

						if (row9.tax_address_line2 == null) {
							pstmt_tDBOutput_9.setNull(32,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_9.setString(32,
									row9.tax_address_line2);
						}

						if (row9.tax_address_line3 == null) {
							pstmt_tDBOutput_9.setNull(33,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_9.setString(33,
									row9.tax_address_line3);
						}

						if (row9.tax_address_city == null) {
							pstmt_tDBOutput_9.setNull(34,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_9.setString(34,
									row9.tax_address_city);
						}

						if (row9.tax_address_state == null) {
							pstmt_tDBOutput_9.setNull(35,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_9.setString(35,
									row9.tax_address_state);
						}

						if (row9.tax_address_country == null) {
							pstmt_tDBOutput_9.setNull(36,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_9.setString(36,
									row9.tax_address_country);
						}

						if (row9.tax_address_zip_code == null) {
							pstmt_tDBOutput_9.setNull(37,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_9.setString(37,
									row9.tax_address_zip_code);
						}

						if (row9.cc_email == null) {
							pstmt_tDBOutput_9.setNull(38,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_9.setString(38, row9.cc_email);
						}

						if (row9.white_label_host == null) {
							pstmt_tDBOutput_9.setNull(39,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_9.setString(39,
									row9.white_label_host);
						}

						if (row9.tdm_customer_es_servers == null) {
							pstmt_tDBOutput_9.setNull(40,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_9.setString(40,
									row9.tdm_customer_es_servers);
						}

						if (row9.tdm_customer_es_cluster == null) {
							pstmt_tDBOutput_9.setNull(41,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_9.setString(41,
									row9.tdm_customer_es_cluster);
						}

						if (row9.tdm_customer_es_index == null) {
							pstmt_tDBOutput_9.setNull(42,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_9.setString(42,
									row9.tdm_customer_es_index);
						}

						if (row9.pm_organization_sub_type == null) {
							pstmt_tDBOutput_9.setNull(43,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_9.setString(43,
									row9.pm_organization_sub_type);
						}

						if (row9.alternate_primary_identifier == null) {
							pstmt_tDBOutput_9.setNull(44,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_9.setString(44,
									row9.alternate_primary_identifier);
						}

						pstmt_tDBOutput_9.addBatch();
						nb_line_tDBOutput_9++;

						batchSizeCounter_tDBOutput_9++;

						if (!whetherReject_tDBOutput_9) {
						}
						if ((batchSize_tDBOutput_9 > 0)
								&& (batchSize_tDBOutput_9 <= batchSizeCounter_tDBOutput_9)) {
							try {
								int countSum_tDBOutput_9 = 0;

								for (int countEach_tDBOutput_9 : pstmt_tDBOutput_9
										.executeBatch()) {
									countSum_tDBOutput_9 += (countEach_tDBOutput_9 < 0 ? 0
											: countEach_tDBOutput_9);
								}

								insertedCount_tDBOutput_9 += countSum_tDBOutput_9;

								batchSizeCounter_tDBOutput_9 = 0;
							} catch (java.sql.BatchUpdateException e_tDBOutput_9) {
								java.sql.SQLException ne_tDBOutput_9 = e_tDBOutput_9
										.getNextException(), sqle_tDBOutput_9 = null;
								String errormessage_tDBOutput_9;
								if (ne_tDBOutput_9 != null) {
									// build new exception to provide the
									// original cause
									sqle_tDBOutput_9 = new java.sql.SQLException(
											e_tDBOutput_9.getMessage()
													+ "\ncaused by: "
													+ ne_tDBOutput_9
															.getMessage(),
											ne_tDBOutput_9.getSQLState(),
											ne_tDBOutput_9.getErrorCode(),
											ne_tDBOutput_9);
									errormessage_tDBOutput_9 = sqle_tDBOutput_9
											.getMessage();
								} else {
									errormessage_tDBOutput_9 = e_tDBOutput_9
											.getMessage();
								}

								int countSum_tDBOutput_9 = 0;
								for (int countEach_tDBOutput_9 : e_tDBOutput_9
										.getUpdateCounts()) {
									countSum_tDBOutput_9 += (countEach_tDBOutput_9 < 0 ? 0
											: countEach_tDBOutput_9);
								}

								insertedCount_tDBOutput_9 += countSum_tDBOutput_9;

								System.err.println(errormessage_tDBOutput_9);

							}
						}

						commitCounter_tDBOutput_9++;
						if (commitEvery_tDBOutput_9 <= commitCounter_tDBOutput_9) {
							if ((batchSize_tDBOutput_9 > 0)
									&& (batchSizeCounter_tDBOutput_9 > 0)) {
								try {
									int countSum_tDBOutput_9 = 0;

									for (int countEach_tDBOutput_9 : pstmt_tDBOutput_9
											.executeBatch()) {
										countSum_tDBOutput_9 += (countEach_tDBOutput_9 < 0 ? 0
												: countEach_tDBOutput_9);
									}

									insertedCount_tDBOutput_9 += countSum_tDBOutput_9;

									batchSizeCounter_tDBOutput_9 = 0;
								} catch (java.sql.BatchUpdateException e_tDBOutput_9) {
									java.sql.SQLException ne_tDBOutput_9 = e_tDBOutput_9
											.getNextException(), sqle_tDBOutput_9 = null;
									String errormessage_tDBOutput_9;
									if (ne_tDBOutput_9 != null) {
										// build new exception to provide the
										// original cause
										sqle_tDBOutput_9 = new java.sql.SQLException(
												e_tDBOutput_9.getMessage()
														+ "\ncaused by: "
														+ ne_tDBOutput_9
																.getMessage(),
												ne_tDBOutput_9.getSQLState(),
												ne_tDBOutput_9.getErrorCode(),
												ne_tDBOutput_9);
										errormessage_tDBOutput_9 = sqle_tDBOutput_9
												.getMessage();
									} else {
										errormessage_tDBOutput_9 = e_tDBOutput_9
												.getMessage();
									}

									int countSum_tDBOutput_9 = 0;
									for (int countEach_tDBOutput_9 : e_tDBOutput_9
											.getUpdateCounts()) {
										countSum_tDBOutput_9 += (countEach_tDBOutput_9 < 0 ? 0
												: countEach_tDBOutput_9);
									}

									insertedCount_tDBOutput_9 += countSum_tDBOutput_9;

									System.err
											.println(errormessage_tDBOutput_9);

								}
							}
							conn_tDBOutput_9.commit();

							commitCounter_tDBOutput_9 = 0;
						}

						tos_count_tDBOutput_9++;

						/**
						 * [tDBOutput_9 main ] stop
						 */

						/**
						 * [tDBOutput_9 process_data_begin ] start
						 */

						currentComponent = "tDBOutput_9";

						/**
						 * [tDBOutput_9 process_data_begin ] stop
						 */

						/**
						 * [tDBOutput_9 process_data_end ] start
						 */

						currentComponent = "tDBOutput_9";

						/**
						 * [tDBOutput_9 process_data_end ] stop
						 */

						/**
						 * [tDBInput_9 process_data_end ] start
						 */

						currentComponent = "tDBInput_9";

						/**
						 * [tDBInput_9 process_data_end ] stop
						 */

						/**
						 * [tDBInput_9 end ] start
						 */

						currentComponent = "tDBInput_9";

					}
				} finally {
					if (rs_tDBInput_9 != null) {
						rs_tDBInput_9.close();
					}
					if (stmt_tDBInput_9 != null) {
						stmt_tDBInput_9.close();
					}
				}
				globalMap.put("tDBInput_9_NB_LINE", nb_line_tDBInput_9);

				ok_Hash.put("tDBInput_9", true);
				end_Hash.put("tDBInput_9", System.currentTimeMillis());

				tStatCatcher_1.addMessage(
						"end",
						"tDBInput_9",
						end_Hash.get("tDBInput_9")
								- start_Hash.get("tDBInput_9"));
				tStatCatcher_1Process(globalMap);
				talendStats_STATS.addMessage(
						"end",
						"tDBInput_9",
						end_Hash.get("tDBInput_9")
								- start_Hash.get("tDBInput_9"));
				talendStats_STATSProcess(globalMap);

				/**
				 * [tDBInput_9 end ] stop
				 */

				/**
				 * [tDBOutput_9 end ] start
				 */

				currentComponent = "tDBOutput_9";

				try {
					int countSum_tDBOutput_9 = 0;
					if (pstmt_tDBOutput_9 != null
							&& batchSizeCounter_tDBOutput_9 > 0) {

						for (int countEach_tDBOutput_9 : pstmt_tDBOutput_9
								.executeBatch()) {
							countSum_tDBOutput_9 += (countEach_tDBOutput_9 < 0 ? 0
									: countEach_tDBOutput_9);
						}

					}

					insertedCount_tDBOutput_9 += countSum_tDBOutput_9;

				} catch (java.sql.BatchUpdateException e_tDBOutput_9) {
					java.sql.SQLException ne_tDBOutput_9 = e_tDBOutput_9
							.getNextException(), sqle_tDBOutput_9 = null;
					String errormessage_tDBOutput_9;
					if (ne_tDBOutput_9 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_9 = new java.sql.SQLException(
								e_tDBOutput_9.getMessage() + "\ncaused by: "
										+ ne_tDBOutput_9.getMessage(),
								ne_tDBOutput_9.getSQLState(),
								ne_tDBOutput_9.getErrorCode(), ne_tDBOutput_9);
						errormessage_tDBOutput_9 = sqle_tDBOutput_9
								.getMessage();
					} else {
						errormessage_tDBOutput_9 = e_tDBOutput_9.getMessage();
					}

					int countSum_tDBOutput_9 = 0;
					for (int countEach_tDBOutput_9 : e_tDBOutput_9
							.getUpdateCounts()) {
						countSum_tDBOutput_9 += (countEach_tDBOutput_9 < 0 ? 0
								: countEach_tDBOutput_9);
					}

					insertedCount_tDBOutput_9 += countSum_tDBOutput_9;

					System.err.println(errormessage_tDBOutput_9);

				}

				if (pstmt_tDBOutput_9 != null) {

					pstmt_tDBOutput_9.close();
					resourceMap.remove("pstmt_tDBOutput_9");
				}
				resourceMap.put("statementClosed_tDBOutput_9", true);

				conn_tDBOutput_9.commit();

				conn_tDBOutput_9.close();

				resourceMap.put("finish_tDBOutput_9", true);

				nb_line_deleted_tDBOutput_9 = nb_line_deleted_tDBOutput_9
						+ deletedCount_tDBOutput_9;
				nb_line_update_tDBOutput_9 = nb_line_update_tDBOutput_9
						+ updatedCount_tDBOutput_9;
				nb_line_inserted_tDBOutput_9 = nb_line_inserted_tDBOutput_9
						+ insertedCount_tDBOutput_9;
				nb_line_rejected_tDBOutput_9 = nb_line_rejected_tDBOutput_9
						+ rejectedCount_tDBOutput_9;

				globalMap.put("tDBOutput_9_NB_LINE", nb_line_tDBOutput_9);
				globalMap.put("tDBOutput_9_NB_LINE_UPDATED",
						nb_line_update_tDBOutput_9);
				globalMap.put("tDBOutput_9_NB_LINE_INSERTED",
						nb_line_inserted_tDBOutput_9);
				globalMap.put("tDBOutput_9_NB_LINE_DELETED",
						nb_line_deleted_tDBOutput_9);
				globalMap.put("tDBOutput_9_NB_LINE_REJECTED",
						nb_line_rejected_tDBOutput_9);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row9" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tDBOutput_9", true);
				end_Hash.put("tDBOutput_9", System.currentTimeMillis());

				tStatCatcher_1.addMessage(
						"end",
						"tDBOutput_9",
						end_Hash.get("tDBOutput_9")
								- start_Hash.get("tDBOutput_9"));
				tStatCatcher_1Process(globalMap);
				talendStats_STATS.addMessage(
						"end",
						"tDBOutput_9",
						end_Hash.get("tDBOutput_9")
								- start_Hash.get("tDBOutput_9"));
				talendStats_STATSProcess(globalMap);
				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk9", 0, "ok");
				}
				tDBInput_15Process(globalMap);

				/**
				 * [tDBOutput_9 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_9 finally ] start
				 */

				currentComponent = "tDBInput_9";

				/**
				 * [tDBInput_9 finally ] stop
				 */

				/**
				 * [tDBOutput_9 finally ] start
				 */

				currentComponent = "tDBOutput_9";

				try {
					if (resourceMap.get("statementClosed_tDBOutput_9") == null) {
						java.sql.PreparedStatement pstmtToClose_tDBOutput_9 = null;
						if ((pstmtToClose_tDBOutput_9 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmt_tDBOutput_9")) != null) {
							pstmtToClose_tDBOutput_9.close();
						}
					}
				} finally {
					if (resourceMap.get("finish_tDBOutput_9") == null) {
						java.sql.Connection ctn_tDBOutput_9 = null;
						if ((ctn_tDBOutput_9 = (java.sql.Connection) resourceMap
								.get("conn_tDBOutput_9")) != null) {
							try {
								ctn_tDBOutput_9.close();
							} catch (java.sql.SQLException sqlEx_tDBOutput_9) {
								String errorMessage_tDBOutput_9 = "failed to close the connection in tDBOutput_9 :"
										+ sqlEx_tDBOutput_9.getMessage();
								System.err.println(errorMessage_tDBOutput_9);
							}
						}
					}
				}

				/**
				 * [tDBOutput_9 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_9_SUBPROCESS_STATE", 1);
	}

	public static class row15Struct implements
			routines.system.IPersistableRow<row15Struct> {
		final static byte[] commonByteArrayLock_ORDER_ETL_OMS_ETL_NO_PRODUCTS = new byte[0];
		static byte[] commonByteArray_ORDER_ETL_OMS_ETL_NO_PRODUCTS = new byte[0];

		public Long dwo_licensee_dimension_uid;

		public Long getDwo_licensee_dimension_uid() {
			return this.dwo_licensee_dimension_uid;
		}

		public String source_system_licensee_uid;

		public String getSource_system_licensee_uid() {
			return this.source_system_licensee_uid;
		}

		public String licensee_name;

		public String getLicensee_name() {
			return this.licensee_name;
		}

		public String licensee_contact_email;

		public String getLicensee_contact_email() {
			return this.licensee_contact_email;
		}

		public String licensee_sub_type;

		public String getLicensee_sub_type() {
			return this.licensee_sub_type;
		}

		public String parent_organization_uid;

		public String getParent_organization_uid() {
			return this.parent_organization_uid;
		}

		public String licensee_oracle_party_number;

		public String getLicensee_oracle_party_number() {
			return this.licensee_oracle_party_number;
		}

		public String licensee_tax_country;

		public String getLicensee_tax_country() {
			return this.licensee_tax_country;
		}

		public Boolean not_for_profit_flag;

		public Boolean getNot_for_profit_flag() {
			return this.not_for_profit_flag;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ORDER_ETL_OMS_ETL_NO_PRODUCTS.length) {
					if (length < 1024
							&& commonByteArray_ORDER_ETL_OMS_ETL_NO_PRODUCTS.length == 0) {
						commonByteArray_ORDER_ETL_OMS_ETL_NO_PRODUCTS = new byte[1024];
					} else {
						commonByteArray_ORDER_ETL_OMS_ETL_NO_PRODUCTS = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ORDER_ETL_OMS_ETL_NO_PRODUCTS, 0,
						length);
				strReturn = new String(
						commonByteArray_ORDER_ETL_OMS_ETL_NO_PRODUCTS, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ORDER_ETL_OMS_ETL_NO_PRODUCTS) {

				try {

					int length = 0;

					length = dis.readByte();
					if (length == -1) {
						this.dwo_licensee_dimension_uid = null;
					} else {
						this.dwo_licensee_dimension_uid = dis.readLong();
					}

					this.source_system_licensee_uid = readString(dis);

					this.licensee_name = readString(dis);

					this.licensee_contact_email = readString(dis);

					this.licensee_sub_type = readString(dis);

					this.parent_organization_uid = readString(dis);

					this.licensee_oracle_party_number = readString(dis);

					this.licensee_tax_country = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.not_for_profit_flag = null;
					} else {
						this.not_for_profit_flag = dis.readBoolean();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Long

				if (this.dwo_licensee_dimension_uid == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.dwo_licensee_dimension_uid);
				}

				// String

				writeString(this.source_system_licensee_uid, dos);

				// String

				writeString(this.licensee_name, dos);

				// String

				writeString(this.licensee_contact_email, dos);

				// String

				writeString(this.licensee_sub_type, dos);

				// String

				writeString(this.parent_organization_uid, dos);

				// String

				writeString(this.licensee_oracle_party_number, dos);

				// String

				writeString(this.licensee_tax_country, dos);

				// Boolean

				if (this.not_for_profit_flag == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.not_for_profit_flag);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("dwo_licensee_dimension_uid="
					+ String.valueOf(dwo_licensee_dimension_uid));
			sb.append(",source_system_licensee_uid="
					+ source_system_licensee_uid);
			sb.append(",licensee_name=" + licensee_name);
			sb.append(",licensee_contact_email=" + licensee_contact_email);
			sb.append(",licensee_sub_type=" + licensee_sub_type);
			sb.append(",parent_organization_uid=" + parent_organization_uid);
			sb.append(",licensee_oracle_party_number="
					+ licensee_oracle_party_number);
			sb.append(",licensee_tax_country=" + licensee_tax_country);
			sb.append(",not_for_profit_flag="
					+ String.valueOf(not_for_profit_flag));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row15Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_15Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDBInput_15_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row15Struct row15 = new row15Struct();

				/**
				 * [tDBOutput_15 begin ] start
				 */

				ok_Hash.put("tDBOutput_15", false);
				start_Hash.put("tDBOutput_15", System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tDBOutput_15");
				tStatCatcher_1Process(globalMap);

				talendStats_STATS.addMessage("begin", "tDBOutput_15");
				talendStats_STATSProcess(globalMap);

				currentComponent = "tDBOutput_15";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row15" + iterateId, 0,
								0);

					}
				}

				int tos_count_tDBOutput_15 = 0;

				String dbschema_tDBOutput_15 = null;
				dbschema_tDBOutput_15 = context.data_warehouse_order_dwos_schema;

				String tableName_tDBOutput_15 = null;
				if (dbschema_tDBOutput_15 == null
						|| dbschema_tDBOutput_15.trim().length() == 0) {
					tableName_tDBOutput_15 = "dwo_licensee_dimension";
				} else {
					tableName_tDBOutput_15 = dbschema_tDBOutput_15 + "\".\""
							+ "dwo_licensee_dimension";
				}

				int nb_line_tDBOutput_15 = 0;
				int nb_line_update_tDBOutput_15 = 0;
				int nb_line_inserted_tDBOutput_15 = 0;
				int nb_line_deleted_tDBOutput_15 = 0;
				int nb_line_rejected_tDBOutput_15 = 0;

				int deletedCount_tDBOutput_15 = 0;
				int updatedCount_tDBOutput_15 = 0;
				int insertedCount_tDBOutput_15 = 0;
				int rejectedCount_tDBOutput_15 = 0;

				boolean whetherReject_tDBOutput_15 = false;

				java.sql.Connection conn_tDBOutput_15 = null;
				String dbUser_tDBOutput_15 = null;

				java.lang.Class.forName("org.postgresql.Driver");
				String url_tDBOutput_15 = "jdbc:postgresql://"
						+ context.data_warehouse_order_dwos_host + ":"
						+ context.data_warehouse_order_dwos_port + "/"
						+ context.data_warehouse_order_dwos_database;
				dbUser_tDBOutput_15 = context.data_warehouse_order_dwos_username;

				final String decryptedPassword_tDBOutput_15 = context.data_warehouse_order_dwos_password;

				String dbPwd_tDBOutput_15 = decryptedPassword_tDBOutput_15;

				conn_tDBOutput_15 = java.sql.DriverManager.getConnection(
						url_tDBOutput_15, dbUser_tDBOutput_15,
						dbPwd_tDBOutput_15);

				resourceMap.put("conn_tDBOutput_15", conn_tDBOutput_15);
				conn_tDBOutput_15.setAutoCommit(false);
				int commitEvery_tDBOutput_15 = 10000;
				int commitCounter_tDBOutput_15 = 0;

				int batchSize_tDBOutput_15 = 10000;
				int batchSizeCounter_tDBOutput_15 = 0;

				int count_tDBOutput_15 = 0;
				String insert_tDBOutput_15 = "INSERT INTO \""
						+ tableName_tDBOutput_15
						+ "\" (\"dwo_licensee_dimension_uid\",\"source_system_licensee_uid\",\"licensee_name\",\"licensee_contact_email\",\"licensee_sub_type\",\"parent_organization_uid\",\"licensee_oracle_party_number\",\"licensee_tax_country\",\"not_for_profit_flag\") VALUES (?,?,?,?,?,?,?,?,?)";

				java.sql.PreparedStatement pstmt_tDBOutput_15 = conn_tDBOutput_15
						.prepareStatement(insert_tDBOutput_15);
				resourceMap.put("pstmt_tDBOutput_15", pstmt_tDBOutput_15);

				/**
				 * [tDBOutput_15 begin ] stop
				 */

				/**
				 * [tDBInput_15 begin ] start
				 */

				ok_Hash.put("tDBInput_15", false);
				start_Hash.put("tDBInput_15", System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tDBInput_15");
				tStatCatcher_1Process(globalMap);

				talendStats_STATS.addMessage("begin", "tDBInput_15");
				talendStats_STATSProcess(globalMap);

				currentComponent = "tDBInput_15";

				int tos_count_tDBInput_15 = 0;

				int nb_line_tDBInput_15 = 0;
				java.sql.Connection conn_tDBInput_15 = null;
				String driverClass_tDBInput_15 = "org.postgresql.Driver";
				java.lang.Class.forName(driverClass_tDBInput_15);
				String dbUser_tDBInput_15 = context.data_warehouse_order_dwos_username;

				final String decryptedPassword_tDBInput_15 = context.data_warehouse_order_dwos_password;

				String dbPwd_tDBInput_15 = decryptedPassword_tDBInput_15;

				String url_tDBInput_15 = "jdbc:postgresql://"
						+ context.data_warehouse_order_dwos_host + ":"
						+ context.data_warehouse_order_dwos_port + "/"
						+ context.data_warehouse_order_dwos_database;

				conn_tDBInput_15 = java.sql.DriverManager.getConnection(
						url_tDBInput_15, dbUser_tDBInput_15, dbPwd_tDBInput_15);

				conn_tDBInput_15.setAutoCommit(false);

				java.sql.Statement stmt_tDBInput_15 = conn_tDBInput_15
						.createStatement();
				stmt_tDBInput_15.setFetchSize(1000);

				String dbquery_tDBInput_15 = "SELECT nextval('staging.licensee_dimension_seq') as dwo_licensee_dimension_uid,\n       org.pm_organization_uid as sourc"
						+ "e_system_licensee_uid,\n       org.name as licensee_name,\n       org.contact_email as licensee_contact_email,\n       org."
						+ "pm_organization_sub_type as licensee_sub_type,\n       org.parent_organization_uid as parent_organization_uid,\n       org"
						+ ".external_organization_key as licensee_oracle_party_number,\n       org.tax_address_country as licensee_tax_country,\n    "
						+ "   org.not_for_profit as not_for_profit_flag\nfrom staging.dwo_pm_organization org\nwhere org.pm_organization_type_uid = '"
						+ "LNC'";

				globalMap.put("tDBInput_15_QUERY", dbquery_tDBInput_15);
				java.sql.ResultSet rs_tDBInput_15 = null;

				try {
					rs_tDBInput_15 = stmt_tDBInput_15
							.executeQuery(dbquery_tDBInput_15);
					java.sql.ResultSetMetaData rsmd_tDBInput_15 = rs_tDBInput_15
							.getMetaData();
					int colQtyInRs_tDBInput_15 = rsmd_tDBInput_15
							.getColumnCount();

					String tmpContent_tDBInput_15 = null;

					while (rs_tDBInput_15.next()) {
						nb_line_tDBInput_15++;

						if (colQtyInRs_tDBInput_15 < 1) {
							row15.dwo_licensee_dimension_uid = null;
						} else {

							if (rs_tDBInput_15.getObject(1) != null) {
								row15.dwo_licensee_dimension_uid = rs_tDBInput_15
										.getLong(1);
							} else {
								row15.dwo_licensee_dimension_uid = null;
							}
						}
						if (colQtyInRs_tDBInput_15 < 2) {
							row15.source_system_licensee_uid = null;
						} else {

							row15.source_system_licensee_uid = routines.system.JDBCUtil
									.getString(rs_tDBInput_15, 2, false);
						}
						if (colQtyInRs_tDBInput_15 < 3) {
							row15.licensee_name = null;
						} else {

							row15.licensee_name = routines.system.JDBCUtil
									.getString(rs_tDBInput_15, 3, false);
						}
						if (colQtyInRs_tDBInput_15 < 4) {
							row15.licensee_contact_email = null;
						} else {

							row15.licensee_contact_email = routines.system.JDBCUtil
									.getString(rs_tDBInput_15, 4, false);
						}
						if (colQtyInRs_tDBInput_15 < 5) {
							row15.licensee_sub_type = null;
						} else {

							row15.licensee_sub_type = routines.system.JDBCUtil
									.getString(rs_tDBInput_15, 5, false);
						}
						if (colQtyInRs_tDBInput_15 < 6) {
							row15.parent_organization_uid = null;
						} else {

							row15.parent_organization_uid = routines.system.JDBCUtil
									.getString(rs_tDBInput_15, 6, false);
						}
						if (colQtyInRs_tDBInput_15 < 7) {
							row15.licensee_oracle_party_number = null;
						} else {

							row15.licensee_oracle_party_number = routines.system.JDBCUtil
									.getString(rs_tDBInput_15, 7, false);
						}
						if (colQtyInRs_tDBInput_15 < 8) {
							row15.licensee_tax_country = null;
						} else {

							row15.licensee_tax_country = routines.system.JDBCUtil
									.getString(rs_tDBInput_15, 8, false);
						}
						if (colQtyInRs_tDBInput_15 < 9) {
							row15.not_for_profit_flag = null;
						} else {

							if (rs_tDBInput_15.getObject(9) != null) {
								row15.not_for_profit_flag = rs_tDBInput_15
										.getBoolean(9);
							} else {
								row15.not_for_profit_flag = null;
							}
						}

						/**
						 * [tDBInput_15 begin ] stop
						 */

						/**
						 * [tDBInput_15 main ] start
						 */

						currentComponent = "tDBInput_15";

						tos_count_tDBInput_15++;

						/**
						 * [tDBInput_15 main ] stop
						 */

						/**
						 * [tDBInput_15 process_data_begin ] start
						 */

						currentComponent = "tDBInput_15";

						/**
						 * [tDBInput_15 process_data_begin ] stop
						 */

						/**
						 * [tDBOutput_15 main ] start
						 */

						currentComponent = "tDBOutput_15";

						// row15
						// row15

						if (execStat) {
							runStat.updateStatOnConnection("row15" + iterateId,
									1, 1);
						}

						whetherReject_tDBOutput_15 = false;
						if (row15.dwo_licensee_dimension_uid == null) {
							pstmt_tDBOutput_15.setNull(1,
									java.sql.Types.INTEGER);
						} else {
							pstmt_tDBOutput_15.setLong(1,
									row15.dwo_licensee_dimension_uid);
						}

						if (row15.source_system_licensee_uid == null) {
							pstmt_tDBOutput_15.setNull(2,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_15.setString(2,
									row15.source_system_licensee_uid);
						}

						if (row15.licensee_name == null) {
							pstmt_tDBOutput_15.setNull(3,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_15
									.setString(3, row15.licensee_name);
						}

						if (row15.licensee_contact_email == null) {
							pstmt_tDBOutput_15.setNull(4,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_15.setString(4,
									row15.licensee_contact_email);
						}

						if (row15.licensee_sub_type == null) {
							pstmt_tDBOutput_15.setNull(5,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_15.setString(5,
									row15.licensee_sub_type);
						}

						if (row15.parent_organization_uid == null) {
							pstmt_tDBOutput_15.setNull(6,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_15.setString(6,
									row15.parent_organization_uid);
						}

						if (row15.licensee_oracle_party_number == null) {
							pstmt_tDBOutput_15.setNull(7,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_15.setString(7,
									row15.licensee_oracle_party_number);
						}

						if (row15.licensee_tax_country == null) {
							pstmt_tDBOutput_15.setNull(8,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_15.setString(8,
									row15.licensee_tax_country);
						}

						if (row15.not_for_profit_flag == null) {
							pstmt_tDBOutput_15.setNull(9,
									java.sql.Types.BOOLEAN);
						} else {
							pstmt_tDBOutput_15.setBoolean(9,
									row15.not_for_profit_flag);
						}

						pstmt_tDBOutput_15.addBatch();
						nb_line_tDBOutput_15++;

						batchSizeCounter_tDBOutput_15++;

						if (!whetherReject_tDBOutput_15) {
						}
						if ((batchSize_tDBOutput_15 > 0)
								&& (batchSize_tDBOutput_15 <= batchSizeCounter_tDBOutput_15)) {
							try {
								int countSum_tDBOutput_15 = 0;

								for (int countEach_tDBOutput_15 : pstmt_tDBOutput_15
										.executeBatch()) {
									countSum_tDBOutput_15 += (countEach_tDBOutput_15 < 0 ? 0
											: countEach_tDBOutput_15);
								}

								insertedCount_tDBOutput_15 += countSum_tDBOutput_15;

								batchSizeCounter_tDBOutput_15 = 0;
							} catch (java.sql.BatchUpdateException e_tDBOutput_15) {
								java.sql.SQLException ne_tDBOutput_15 = e_tDBOutput_15
										.getNextException(), sqle_tDBOutput_15 = null;
								String errormessage_tDBOutput_15;
								if (ne_tDBOutput_15 != null) {
									// build new exception to provide the
									// original cause
									sqle_tDBOutput_15 = new java.sql.SQLException(
											e_tDBOutput_15.getMessage()
													+ "\ncaused by: "
													+ ne_tDBOutput_15
															.getMessage(),
											ne_tDBOutput_15.getSQLState(),
											ne_tDBOutput_15.getErrorCode(),
											ne_tDBOutput_15);
									errormessage_tDBOutput_15 = sqle_tDBOutput_15
											.getMessage();
								} else {
									errormessage_tDBOutput_15 = e_tDBOutput_15
											.getMessage();
								}

								int countSum_tDBOutput_15 = 0;
								for (int countEach_tDBOutput_15 : e_tDBOutput_15
										.getUpdateCounts()) {
									countSum_tDBOutput_15 += (countEach_tDBOutput_15 < 0 ? 0
											: countEach_tDBOutput_15);
								}

								insertedCount_tDBOutput_15 += countSum_tDBOutput_15;

								System.err.println(errormessage_tDBOutput_15);

							}
						}

						commitCounter_tDBOutput_15++;
						if (commitEvery_tDBOutput_15 <= commitCounter_tDBOutput_15) {
							if ((batchSize_tDBOutput_15 > 0)
									&& (batchSizeCounter_tDBOutput_15 > 0)) {
								try {
									int countSum_tDBOutput_15 = 0;

									for (int countEach_tDBOutput_15 : pstmt_tDBOutput_15
											.executeBatch()) {
										countSum_tDBOutput_15 += (countEach_tDBOutput_15 < 0 ? 0
												: countEach_tDBOutput_15);
									}

									insertedCount_tDBOutput_15 += countSum_tDBOutput_15;

									batchSizeCounter_tDBOutput_15 = 0;
								} catch (java.sql.BatchUpdateException e_tDBOutput_15) {
									java.sql.SQLException ne_tDBOutput_15 = e_tDBOutput_15
											.getNextException(), sqle_tDBOutput_15 = null;
									String errormessage_tDBOutput_15;
									if (ne_tDBOutput_15 != null) {
										// build new exception to provide the
										// original cause
										sqle_tDBOutput_15 = new java.sql.SQLException(
												e_tDBOutput_15.getMessage()
														+ "\ncaused by: "
														+ ne_tDBOutput_15
																.getMessage(),
												ne_tDBOutput_15.getSQLState(),
												ne_tDBOutput_15.getErrorCode(),
												ne_tDBOutput_15);
										errormessage_tDBOutput_15 = sqle_tDBOutput_15
												.getMessage();
									} else {
										errormessage_tDBOutput_15 = e_tDBOutput_15
												.getMessage();
									}

									int countSum_tDBOutput_15 = 0;
									for (int countEach_tDBOutput_15 : e_tDBOutput_15
											.getUpdateCounts()) {
										countSum_tDBOutput_15 += (countEach_tDBOutput_15 < 0 ? 0
												: countEach_tDBOutput_15);
									}

									insertedCount_tDBOutput_15 += countSum_tDBOutput_15;

									System.err
											.println(errormessage_tDBOutput_15);

								}
							}
							conn_tDBOutput_15.commit();

							commitCounter_tDBOutput_15 = 0;
						}

						tos_count_tDBOutput_15++;

						/**
						 * [tDBOutput_15 main ] stop
						 */

						/**
						 * [tDBOutput_15 process_data_begin ] start
						 */

						currentComponent = "tDBOutput_15";

						/**
						 * [tDBOutput_15 process_data_begin ] stop
						 */

						/**
						 * [tDBOutput_15 process_data_end ] start
						 */

						currentComponent = "tDBOutput_15";

						/**
						 * [tDBOutput_15 process_data_end ] stop
						 */

						/**
						 * [tDBInput_15 process_data_end ] start
						 */

						currentComponent = "tDBInput_15";

						/**
						 * [tDBInput_15 process_data_end ] stop
						 */

						/**
						 * [tDBInput_15 end ] start
						 */

						currentComponent = "tDBInput_15";

					}
				} finally {
					if (rs_tDBInput_15 != null) {
						rs_tDBInput_15.close();
					}
					if (stmt_tDBInput_15 != null) {
						stmt_tDBInput_15.close();
					}
					if (conn_tDBInput_15 != null
							&& !conn_tDBInput_15.isClosed()) {

						conn_tDBInput_15.commit();

						conn_tDBInput_15.close();

					}

				}
				globalMap.put("tDBInput_15_NB_LINE", nb_line_tDBInput_15);

				ok_Hash.put("tDBInput_15", true);
				end_Hash.put("tDBInput_15", System.currentTimeMillis());

				tStatCatcher_1.addMessage(
						"end",
						"tDBInput_15",
						end_Hash.get("tDBInput_15")
								- start_Hash.get("tDBInput_15"));
				tStatCatcher_1Process(globalMap);
				talendStats_STATS.addMessage(
						"end",
						"tDBInput_15",
						end_Hash.get("tDBInput_15")
								- start_Hash.get("tDBInput_15"));
				talendStats_STATSProcess(globalMap);

				/**
				 * [tDBInput_15 end ] stop
				 */

				/**
				 * [tDBOutput_15 end ] start
				 */

				currentComponent = "tDBOutput_15";

				try {
					int countSum_tDBOutput_15 = 0;
					if (pstmt_tDBOutput_15 != null
							&& batchSizeCounter_tDBOutput_15 > 0) {

						for (int countEach_tDBOutput_15 : pstmt_tDBOutput_15
								.executeBatch()) {
							countSum_tDBOutput_15 += (countEach_tDBOutput_15 < 0 ? 0
									: countEach_tDBOutput_15);
						}

					}

					insertedCount_tDBOutput_15 += countSum_tDBOutput_15;

				} catch (java.sql.BatchUpdateException e_tDBOutput_15) {
					java.sql.SQLException ne_tDBOutput_15 = e_tDBOutput_15
							.getNextException(), sqle_tDBOutput_15 = null;
					String errormessage_tDBOutput_15;
					if (ne_tDBOutput_15 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_15 = new java.sql.SQLException(
								e_tDBOutput_15.getMessage() + "\ncaused by: "
										+ ne_tDBOutput_15.getMessage(),
								ne_tDBOutput_15.getSQLState(),
								ne_tDBOutput_15.getErrorCode(), ne_tDBOutput_15);
						errormessage_tDBOutput_15 = sqle_tDBOutput_15
								.getMessage();
					} else {
						errormessage_tDBOutput_15 = e_tDBOutput_15.getMessage();
					}

					int countSum_tDBOutput_15 = 0;
					for (int countEach_tDBOutput_15 : e_tDBOutput_15
							.getUpdateCounts()) {
						countSum_tDBOutput_15 += (countEach_tDBOutput_15 < 0 ? 0
								: countEach_tDBOutput_15);
					}

					insertedCount_tDBOutput_15 += countSum_tDBOutput_15;

					System.err.println(errormessage_tDBOutput_15);

				}

				if (pstmt_tDBOutput_15 != null) {

					pstmt_tDBOutput_15.close();
					resourceMap.remove("pstmt_tDBOutput_15");
				}
				resourceMap.put("statementClosed_tDBOutput_15", true);

				conn_tDBOutput_15.commit();

				conn_tDBOutput_15.close();

				resourceMap.put("finish_tDBOutput_15", true);

				nb_line_deleted_tDBOutput_15 = nb_line_deleted_tDBOutput_15
						+ deletedCount_tDBOutput_15;
				nb_line_update_tDBOutput_15 = nb_line_update_tDBOutput_15
						+ updatedCount_tDBOutput_15;
				nb_line_inserted_tDBOutput_15 = nb_line_inserted_tDBOutput_15
						+ insertedCount_tDBOutput_15;
				nb_line_rejected_tDBOutput_15 = nb_line_rejected_tDBOutput_15
						+ rejectedCount_tDBOutput_15;

				globalMap.put("tDBOutput_15_NB_LINE", nb_line_tDBOutput_15);
				globalMap.put("tDBOutput_15_NB_LINE_UPDATED",
						nb_line_update_tDBOutput_15);
				globalMap.put("tDBOutput_15_NB_LINE_INSERTED",
						nb_line_inserted_tDBOutput_15);
				globalMap.put("tDBOutput_15_NB_LINE_DELETED",
						nb_line_deleted_tDBOutput_15);
				globalMap.put("tDBOutput_15_NB_LINE_REJECTED",
						nb_line_rejected_tDBOutput_15);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row15" + iterateId, 2,
								0);
					}
				}

				ok_Hash.put("tDBOutput_15", true);
				end_Hash.put("tDBOutput_15", System.currentTimeMillis());

				tStatCatcher_1.addMessage(
						"end",
						"tDBOutput_15",
						end_Hash.get("tDBOutput_15")
								- start_Hash.get("tDBOutput_15"));
				tStatCatcher_1Process(globalMap);
				talendStats_STATS.addMessage(
						"end",
						"tDBOutput_15",
						end_Hash.get("tDBOutput_15")
								- start_Hash.get("tDBOutput_15"));
				talendStats_STATSProcess(globalMap);
				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk10", 0, "ok");
				}
				tDBInput_17Process(globalMap);

				/**
				 * [tDBOutput_15 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_15 finally ] start
				 */

				currentComponent = "tDBInput_15";

				/**
				 * [tDBInput_15 finally ] stop
				 */

				/**
				 * [tDBOutput_15 finally ] start
				 */

				currentComponent = "tDBOutput_15";

				try {
					if (resourceMap.get("statementClosed_tDBOutput_15") == null) {
						java.sql.PreparedStatement pstmtToClose_tDBOutput_15 = null;
						if ((pstmtToClose_tDBOutput_15 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmt_tDBOutput_15")) != null) {
							pstmtToClose_tDBOutput_15.close();
						}
					}
				} finally {
					if (resourceMap.get("finish_tDBOutput_15") == null) {
						java.sql.Connection ctn_tDBOutput_15 = null;
						if ((ctn_tDBOutput_15 = (java.sql.Connection) resourceMap
								.get("conn_tDBOutput_15")) != null) {
							try {
								ctn_tDBOutput_15.close();
							} catch (java.sql.SQLException sqlEx_tDBOutput_15) {
								String errorMessage_tDBOutput_15 = "failed to close the connection in tDBOutput_15 :"
										+ sqlEx_tDBOutput_15.getMessage();
								System.err.println(errorMessage_tDBOutput_15);
							}
						}
					}
				}

				/**
				 * [tDBOutput_15 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_15_SUBPROCESS_STATE", 1);
	}

	public static class row18Struct implements
			routines.system.IPersistableRow<row18Struct> {
		final static byte[] commonByteArrayLock_ORDER_ETL_OMS_ETL_NO_PRODUCTS = new byte[0];
		static byte[] commonByteArray_ORDER_ETL_OMS_ETL_NO_PRODUCTS = new byte[0];

		public Long dwo_order_fact_uid;

		public Long getDwo_order_fact_uid() {
			return this.dwo_order_fact_uid;
		}

		public BigDecimal dwo_licensee_dimension_uid;

		public BigDecimal getDwo_licensee_dimension_uid() {
			return this.dwo_licensee_dimension_uid;
		}

		public long dwo_invoice_dimension_uid;

		public long getDwo_invoice_dimension_uid() {
			return this.dwo_invoice_dimension_uid;
		}

		public String dwo_product_dimension_uid;

		public String getDwo_product_dimension_uid() {
			return this.dwo_product_dimension_uid;
		}

		public BigDecimal dwo_time_dimension_uid;

		public BigDecimal getDwo_time_dimension_uid() {
			return this.dwo_time_dimension_uid;
		}

		public BigDecimal dwo_order_header_dimension_uid;

		public BigDecimal getDwo_order_header_dimension_uid() {
			return this.dwo_order_header_dimension_uid;
		}

		public BigDecimal dwo_order_detail_dimension_uid;

		public BigDecimal getDwo_order_detail_dimension_uid() {
			return this.dwo_order_detail_dimension_uid;
		}

		public BigDecimal amount_of_tax;

		public BigDecimal getAmount_of_tax() {
			return this.amount_of_tax;
		}

		public BigDecimal rights_holder_payable_amount;

		public BigDecimal getRights_holder_payable_amount() {
			return this.rights_holder_payable_amount;
		}

		public BigDecimal rights_holder_payable_discount_amount;

		public BigDecimal getRights_holder_payable_discount_amount() {
			return this.rights_holder_payable_discount_amount;
		}

		public BigDecimal ccc_revenue_amount;

		public BigDecimal getCcc_revenue_amount() {
			return this.ccc_revenue_amount;
		}

		public BigDecimal ccc_revenue_discount_amount;

		public BigDecimal getCcc_revenue_discount_amount() {
			return this.ccc_revenue_discount_amount;
		}

		public BigDecimal transaction_fee_amount;

		public BigDecimal getTransaction_fee_amount() {
			return this.transaction_fee_amount;
		}

		public BigDecimal transaction_fee_discount_amount;

		public BigDecimal getTransaction_fee_discount_amount() {
			return this.transaction_fee_discount_amount;
		}

		public BigDecimal shipping_amount;

		public BigDecimal getShipping_amount() {
			return this.shipping_amount;
		}

		public BigDecimal total_amount;

		public BigDecimal getTotal_amount() {
			return this.total_amount;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ORDER_ETL_OMS_ETL_NO_PRODUCTS.length) {
					if (length < 1024
							&& commonByteArray_ORDER_ETL_OMS_ETL_NO_PRODUCTS.length == 0) {
						commonByteArray_ORDER_ETL_OMS_ETL_NO_PRODUCTS = new byte[1024];
					} else {
						commonByteArray_ORDER_ETL_OMS_ETL_NO_PRODUCTS = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ORDER_ETL_OMS_ETL_NO_PRODUCTS, 0,
						length);
				strReturn = new String(
						commonByteArray_ORDER_ETL_OMS_ETL_NO_PRODUCTS, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ORDER_ETL_OMS_ETL_NO_PRODUCTS) {

				try {

					int length = 0;

					length = dis.readByte();
					if (length == -1) {
						this.dwo_order_fact_uid = null;
					} else {
						this.dwo_order_fact_uid = dis.readLong();
					}

					this.dwo_licensee_dimension_uid = (BigDecimal) dis
							.readObject();

					this.dwo_invoice_dimension_uid = dis.readLong();

					this.dwo_product_dimension_uid = readString(dis);

					this.dwo_time_dimension_uid = (BigDecimal) dis.readObject();

					this.dwo_order_header_dimension_uid = (BigDecimal) dis
							.readObject();

					this.dwo_order_detail_dimension_uid = (BigDecimal) dis
							.readObject();

					this.amount_of_tax = (BigDecimal) dis.readObject();

					this.rights_holder_payable_amount = (BigDecimal) dis
							.readObject();

					this.rights_holder_payable_discount_amount = (BigDecimal) dis
							.readObject();

					this.ccc_revenue_amount = (BigDecimal) dis.readObject();

					this.ccc_revenue_discount_amount = (BigDecimal) dis
							.readObject();

					this.transaction_fee_amount = (BigDecimal) dis.readObject();

					this.transaction_fee_discount_amount = (BigDecimal) dis
							.readObject();

					this.shipping_amount = (BigDecimal) dis.readObject();

					this.total_amount = (BigDecimal) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Long

				if (this.dwo_order_fact_uid == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.dwo_order_fact_uid);
				}

				// BigDecimal

				dos.writeObject(this.dwo_licensee_dimension_uid);

				// long

				dos.writeLong(this.dwo_invoice_dimension_uid);

				// String

				writeString(this.dwo_product_dimension_uid, dos);

				// BigDecimal

				dos.writeObject(this.dwo_time_dimension_uid);

				// BigDecimal

				dos.writeObject(this.dwo_order_header_dimension_uid);

				// BigDecimal

				dos.writeObject(this.dwo_order_detail_dimension_uid);

				// BigDecimal

				dos.writeObject(this.amount_of_tax);

				// BigDecimal

				dos.writeObject(this.rights_holder_payable_amount);

				// BigDecimal

				dos.writeObject(this.rights_holder_payable_discount_amount);

				// BigDecimal

				dos.writeObject(this.ccc_revenue_amount);

				// BigDecimal

				dos.writeObject(this.ccc_revenue_discount_amount);

				// BigDecimal

				dos.writeObject(this.transaction_fee_amount);

				// BigDecimal

				dos.writeObject(this.transaction_fee_discount_amount);

				// BigDecimal

				dos.writeObject(this.shipping_amount);

				// BigDecimal

				dos.writeObject(this.total_amount);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("dwo_order_fact_uid="
					+ String.valueOf(dwo_order_fact_uid));
			sb.append(",dwo_licensee_dimension_uid="
					+ String.valueOf(dwo_licensee_dimension_uid));
			sb.append(",dwo_invoice_dimension_uid="
					+ String.valueOf(dwo_invoice_dimension_uid));
			sb.append(",dwo_product_dimension_uid=" + dwo_product_dimension_uid);
			sb.append(",dwo_time_dimension_uid="
					+ String.valueOf(dwo_time_dimension_uid));
			sb.append(",dwo_order_header_dimension_uid="
					+ String.valueOf(dwo_order_header_dimension_uid));
			sb.append(",dwo_order_detail_dimension_uid="
					+ String.valueOf(dwo_order_detail_dimension_uid));
			sb.append(",amount_of_tax=" + String.valueOf(amount_of_tax));
			sb.append(",rights_holder_payable_amount="
					+ String.valueOf(rights_holder_payable_amount));
			sb.append(",rights_holder_payable_discount_amount="
					+ String.valueOf(rights_holder_payable_discount_amount));
			sb.append(",ccc_revenue_amount="
					+ String.valueOf(ccc_revenue_amount));
			sb.append(",ccc_revenue_discount_amount="
					+ String.valueOf(ccc_revenue_discount_amount));
			sb.append(",transaction_fee_amount="
					+ String.valueOf(transaction_fee_amount));
			sb.append(",transaction_fee_discount_amount="
					+ String.valueOf(transaction_fee_discount_amount));
			sb.append(",shipping_amount=" + String.valueOf(shipping_amount));
			sb.append(",total_amount=" + String.valueOf(total_amount));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row18Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_17Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDBInput_17_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row18Struct row18 = new row18Struct();

				/**
				 * [tDBOutput_17 begin ] start
				 */

				ok_Hash.put("tDBOutput_17", false);
				start_Hash.put("tDBOutput_17", System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tDBOutput_17");
				tStatCatcher_1Process(globalMap);

				talendStats_STATS.addMessage("begin", "tDBOutput_17");
				talendStats_STATSProcess(globalMap);

				currentComponent = "tDBOutput_17";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row18" + iterateId, 0,
								0);

					}
				}

				int tos_count_tDBOutput_17 = 0;

				String dbschema_tDBOutput_17 = null;
				dbschema_tDBOutput_17 = context.data_warehouse_order_dwos_schema;

				String tableName_tDBOutput_17 = null;
				if (dbschema_tDBOutput_17 == null
						|| dbschema_tDBOutput_17.trim().length() == 0) {
					tableName_tDBOutput_17 = "dwo_order_fact";
				} else {
					tableName_tDBOutput_17 = dbschema_tDBOutput_17 + "\".\""
							+ "dwo_order_fact";
				}

				int nb_line_tDBOutput_17 = 0;
				int nb_line_update_tDBOutput_17 = 0;
				int nb_line_inserted_tDBOutput_17 = 0;
				int nb_line_deleted_tDBOutput_17 = 0;
				int nb_line_rejected_tDBOutput_17 = 0;

				int deletedCount_tDBOutput_17 = 0;
				int updatedCount_tDBOutput_17 = 0;
				int insertedCount_tDBOutput_17 = 0;
				int rejectedCount_tDBOutput_17 = 0;

				boolean whetherReject_tDBOutput_17 = false;

				java.sql.Connection conn_tDBOutput_17 = null;
				String dbUser_tDBOutput_17 = null;

				java.lang.Class.forName("org.postgresql.Driver");
				String url_tDBOutput_17 = "jdbc:postgresql://"
						+ context.data_warehouse_order_dwos_host + ":"
						+ context.data_warehouse_order_dwos_port + "/"
						+ context.data_warehouse_order_dwos_database;
				dbUser_tDBOutput_17 = context.data_warehouse_order_dwos_username;

				final String decryptedPassword_tDBOutput_17 = context.data_warehouse_order_dwos_password;

				String dbPwd_tDBOutput_17 = decryptedPassword_tDBOutput_17;

				conn_tDBOutput_17 = java.sql.DriverManager.getConnection(
						url_tDBOutput_17, dbUser_tDBOutput_17,
						dbPwd_tDBOutput_17);

				resourceMap.put("conn_tDBOutput_17", conn_tDBOutput_17);
				conn_tDBOutput_17.setAutoCommit(false);
				int commitEvery_tDBOutput_17 = 10000;
				int commitCounter_tDBOutput_17 = 0;

				int batchSize_tDBOutput_17 = 10000;
				int batchSizeCounter_tDBOutput_17 = 0;

				int count_tDBOutput_17 = 0;
				String insert_tDBOutput_17 = "INSERT INTO \""
						+ tableName_tDBOutput_17
						+ "\" (\"dwo_order_fact_uid\",\"dwo_licensee_dimension_uid\",\"dwo_invoice_dimension_uid\",\"dwo_product_dimension_uid\",\"dwo_time_dimension_uid\",\"dwo_order_header_dimension_uid\",\"dwo_order_detail_dimension_uid\",\"amount_of_tax\",\"rights_holder_payable_amount\",\"rights_holder_payable_discount_amount\",\"ccc_revenue_amount\",\"ccc_revenue_discount_amount\",\"transaction_fee_amount\",\"transaction_fee_discount_amount\",\"shipping_amount\",\"total_amount\") VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

				java.sql.PreparedStatement pstmt_tDBOutput_17 = conn_tDBOutput_17
						.prepareStatement(insert_tDBOutput_17);
				resourceMap.put("pstmt_tDBOutput_17", pstmt_tDBOutput_17);

				/**
				 * [tDBOutput_17 begin ] stop
				 */

				/**
				 * [tDBInput_17 begin ] start
				 */

				ok_Hash.put("tDBInput_17", false);
				start_Hash.put("tDBInput_17", System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tDBInput_17");
				tStatCatcher_1Process(globalMap);

				talendStats_STATS.addMessage("begin", "tDBInput_17");
				talendStats_STATSProcess(globalMap);

				currentComponent = "tDBInput_17";

				int tos_count_tDBInput_17 = 0;

				int nb_line_tDBInput_17 = 0;
				java.sql.Connection conn_tDBInput_17 = null;
				String driverClass_tDBInput_17 = "org.postgresql.Driver";
				java.lang.Class.forName(driverClass_tDBInput_17);
				String dbUser_tDBInput_17 = context.data_warehouse_order_dwos_username;

				final String decryptedPassword_tDBInput_17 = context.data_warehouse_order_dwos_password;

				String dbPwd_tDBInput_17 = decryptedPassword_tDBInput_17;

				String url_tDBInput_17 = "jdbc:postgresql://"
						+ context.data_warehouse_order_dwos_host + ":"
						+ context.data_warehouse_order_dwos_port + "/"
						+ context.data_warehouse_order_dwos_database;

				conn_tDBInput_17 = java.sql.DriverManager.getConnection(
						url_tDBInput_17, dbUser_tDBInput_17, dbPwd_tDBInput_17);

				conn_tDBInput_17.setAutoCommit(false);

				java.sql.Statement stmt_tDBInput_17 = conn_tDBInput_17
						.createStatement();
				stmt_tDBInput_17.setFetchSize(1000);

				String dbquery_tDBInput_17 = "select nextval('staging.order_fact_seq') as dwo_order_fact_uid,\n       l.dwo_licensee_dimension_uid as dwo_licensee_dim"
						+ "ension_uid,\n       id.dwo_invoice_dimension_uid as dwo_invoice_dimension_uid,\n       pd.dwo_product_dimension_uid as dwo"
						+ "_product_dimension_uid,\n       coalesce(to_char(oh.order_capture_date, 'YYYYMMDD'), '00000000')::NUMERIC as dwo_time_dim"
						+ "ension_uid,\n       od.dwo_order_header_dimension_uid as dwo_order_header_dimension_uid,       \n       odd.dwo_order_deta"
						+ "il_dimension_uid as dwo_order_detail_dimension_uid,\n       if.tax_amount as amount_of_tax,\n       if.royalty_amount as r"
						+ "ights_holder_payable_amount,\n       if.royalty_fee_discount as rights_holder_payable_discount_amount,\n       if.ccc_fee_"
						+ "amount as ccc_revenue_amount,\n       if.ccc_fee_discount as ccc_revenue_discount_amount,\n       if.licensee_fee_amount a"
						+ "s transaction_fee_amount,\n       if.licensee_fee_discount as transaction_fee_discount_amount,\n       if.shipping_amount "
						+ "as shipping_amount,\n       if.total_amount as total_amount\nfrom staging.dwo_om_order_item o\n    join staging.dwo_order_d"
						+ "etail_dimension odd on odd.source_system_order_detail_uid = o.om_order_item_uid\n    left outer join staging.dwo_om_order"
						+ "_item_fees if on o.om_order_item_fees_uid = if.om_order_item_fees_uid \n    left outer join staging.dwo_om_order_header o"
						+ "h on o.om_order_header_uid = oh.om_order_header_uid\n    join staging.dwo_order_header_dimension od on od.source_system_o"
						+ "rder_header_uid = oh.om_order_header_uid    \n    left outer join staging.dwo_pm_license_product p on o.product_name = p."
						+ "pm_license_product_uid\n    join staging.dwo_products_dimension pd on pd.dwo_product_dimension_uid = p.pm_license_product"
						+ "_uid    \n    left outer join staging.dwo_inv_invoice inv on inv.inv_invoice_uid = oh.inv_invoice_uid\n    join staging.dw"
						+ "o_invoice_dimension id on id.invoice_number = inv.invoice_number    \n    left outer join staging.dwo_om_order_item_fees "
						+ "fees on fees.om_order_item_fees_uid = o.om_order_item_fees_uid\n    left outer join staging.dwo_pm_organization org on or"
						+ "g.pm_organization_uid = oh.organization_uid\n    join staging.dwo_licensee_dimension l on l.source_system_licensee_uid = "
						+ "org.pm_organization_uid    \nwhere oh.order_capture_date > '2017-06-30 23:59:59'";

				globalMap.put("tDBInput_17_QUERY", dbquery_tDBInput_17);
				java.sql.ResultSet rs_tDBInput_17 = null;

				try {
					rs_tDBInput_17 = stmt_tDBInput_17
							.executeQuery(dbquery_tDBInput_17);
					java.sql.ResultSetMetaData rsmd_tDBInput_17 = rs_tDBInput_17
							.getMetaData();
					int colQtyInRs_tDBInput_17 = rsmd_tDBInput_17
							.getColumnCount();

					String tmpContent_tDBInput_17 = null;

					while (rs_tDBInput_17.next()) {
						nb_line_tDBInput_17++;

						if (colQtyInRs_tDBInput_17 < 1) {
							row18.dwo_order_fact_uid = null;
						} else {

							if (rs_tDBInput_17.getObject(1) != null) {
								row18.dwo_order_fact_uid = rs_tDBInput_17
										.getLong(1);
							} else {
								row18.dwo_order_fact_uid = null;
							}
						}
						if (colQtyInRs_tDBInput_17 < 2) {
							row18.dwo_licensee_dimension_uid = null;
						} else {

							if (rs_tDBInput_17.getObject(2) != null) {
								row18.dwo_licensee_dimension_uid = rs_tDBInput_17
										.getBigDecimal(2);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_17 < 3) {
							row18.dwo_invoice_dimension_uid = 0;
						} else {

							if (rs_tDBInput_17.getObject(3) != null) {
								row18.dwo_invoice_dimension_uid = rs_tDBInput_17
										.getLong(3);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_17 < 4) {
							row18.dwo_product_dimension_uid = null;
						} else {

							row18.dwo_product_dimension_uid = routines.system.JDBCUtil
									.getString(rs_tDBInput_17, 4, false);
						}
						if (colQtyInRs_tDBInput_17 < 5) {
							row18.dwo_time_dimension_uid = null;
						} else {

							if (rs_tDBInput_17.getObject(5) != null) {
								row18.dwo_time_dimension_uid = rs_tDBInput_17
										.getBigDecimal(5);
							} else {
								row18.dwo_time_dimension_uid = null;
							}
						}
						if (colQtyInRs_tDBInput_17 < 6) {
							row18.dwo_order_header_dimension_uid = null;
						} else {

							if (rs_tDBInput_17.getObject(6) != null) {
								row18.dwo_order_header_dimension_uid = rs_tDBInput_17
										.getBigDecimal(6);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_17 < 7) {
							row18.dwo_order_detail_dimension_uid = null;
						} else {

							if (rs_tDBInput_17.getObject(7) != null) {
								row18.dwo_order_detail_dimension_uid = rs_tDBInput_17
										.getBigDecimal(7);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_17 < 8) {
							row18.amount_of_tax = null;
						} else {

							if (rs_tDBInput_17.getObject(8) != null) {
								row18.amount_of_tax = rs_tDBInput_17
										.getBigDecimal(8);
							} else {
								row18.amount_of_tax = null;
							}
						}
						if (colQtyInRs_tDBInput_17 < 9) {
							row18.rights_holder_payable_amount = null;
						} else {

							if (rs_tDBInput_17.getObject(9) != null) {
								row18.rights_holder_payable_amount = rs_tDBInput_17
										.getBigDecimal(9);
							} else {
								row18.rights_holder_payable_amount = null;
							}
						}
						if (colQtyInRs_tDBInput_17 < 10) {
							row18.rights_holder_payable_discount_amount = null;
						} else {

							if (rs_tDBInput_17.getObject(10) != null) {
								row18.rights_holder_payable_discount_amount = rs_tDBInput_17
										.getBigDecimal(10);
							} else {
								row18.rights_holder_payable_discount_amount = null;
							}
						}
						if (colQtyInRs_tDBInput_17 < 11) {
							row18.ccc_revenue_amount = null;
						} else {

							if (rs_tDBInput_17.getObject(11) != null) {
								row18.ccc_revenue_amount = rs_tDBInput_17
										.getBigDecimal(11);
							} else {
								row18.ccc_revenue_amount = null;
							}
						}
						if (colQtyInRs_tDBInput_17 < 12) {
							row18.ccc_revenue_discount_amount = null;
						} else {

							if (rs_tDBInput_17.getObject(12) != null) {
								row18.ccc_revenue_discount_amount = rs_tDBInput_17
										.getBigDecimal(12);
							} else {
								row18.ccc_revenue_discount_amount = null;
							}
						}
						if (colQtyInRs_tDBInput_17 < 13) {
							row18.transaction_fee_amount = null;
						} else {

							if (rs_tDBInput_17.getObject(13) != null) {
								row18.transaction_fee_amount = rs_tDBInput_17
										.getBigDecimal(13);
							} else {
								row18.transaction_fee_amount = null;
							}
						}
						if (colQtyInRs_tDBInput_17 < 14) {
							row18.transaction_fee_discount_amount = null;
						} else {

							if (rs_tDBInput_17.getObject(14) != null) {
								row18.transaction_fee_discount_amount = rs_tDBInput_17
										.getBigDecimal(14);
							} else {
								row18.transaction_fee_discount_amount = null;
							}
						}
						if (colQtyInRs_tDBInput_17 < 15) {
							row18.shipping_amount = null;
						} else {

							if (rs_tDBInput_17.getObject(15) != null) {
								row18.shipping_amount = rs_tDBInput_17
										.getBigDecimal(15);
							} else {
								row18.shipping_amount = null;
							}
						}
						if (colQtyInRs_tDBInput_17 < 16) {
							row18.total_amount = null;
						} else {

							if (rs_tDBInput_17.getObject(16) != null) {
								row18.total_amount = rs_tDBInput_17
										.getBigDecimal(16);
							} else {
								row18.total_amount = null;
							}
						}

						/**
						 * [tDBInput_17 begin ] stop
						 */

						/**
						 * [tDBInput_17 main ] start
						 */

						currentComponent = "tDBInput_17";

						tos_count_tDBInput_17++;

						/**
						 * [tDBInput_17 main ] stop
						 */

						/**
						 * [tDBInput_17 process_data_begin ] start
						 */

						currentComponent = "tDBInput_17";

						/**
						 * [tDBInput_17 process_data_begin ] stop
						 */

						/**
						 * [tDBOutput_17 main ] start
						 */

						currentComponent = "tDBOutput_17";

						// row18
						// row18

						if (execStat) {
							runStat.updateStatOnConnection("row18" + iterateId,
									1, 1);
						}

						whetherReject_tDBOutput_17 = false;
						if (row18.dwo_order_fact_uid == null) {
							pstmt_tDBOutput_17.setNull(1,
									java.sql.Types.INTEGER);
						} else {
							pstmt_tDBOutput_17.setLong(1,
									row18.dwo_order_fact_uid);
						}

						pstmt_tDBOutput_17.setBigDecimal(2,
								row18.dwo_licensee_dimension_uid);

						pstmt_tDBOutput_17.setLong(3,
								row18.dwo_invoice_dimension_uid);

						if (row18.dwo_product_dimension_uid == null) {
							pstmt_tDBOutput_17.setNull(4,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_17.setString(4,
									row18.dwo_product_dimension_uid);
						}

						pstmt_tDBOutput_17.setBigDecimal(5,
								row18.dwo_time_dimension_uid);

						pstmt_tDBOutput_17.setBigDecimal(6,
								row18.dwo_order_header_dimension_uid);

						pstmt_tDBOutput_17.setBigDecimal(7,
								row18.dwo_order_detail_dimension_uid);

						pstmt_tDBOutput_17
								.setBigDecimal(8, row18.amount_of_tax);

						pstmt_tDBOutput_17.setBigDecimal(9,
								row18.rights_holder_payable_amount);

						pstmt_tDBOutput_17.setBigDecimal(10,
								row18.rights_holder_payable_discount_amount);

						pstmt_tDBOutput_17.setBigDecimal(11,
								row18.ccc_revenue_amount);

						pstmt_tDBOutput_17.setBigDecimal(12,
								row18.ccc_revenue_discount_amount);

						pstmt_tDBOutput_17.setBigDecimal(13,
								row18.transaction_fee_amount);

						pstmt_tDBOutput_17.setBigDecimal(14,
								row18.transaction_fee_discount_amount);

						pstmt_tDBOutput_17.setBigDecimal(15,
								row18.shipping_amount);

						pstmt_tDBOutput_17
								.setBigDecimal(16, row18.total_amount);

						pstmt_tDBOutput_17.addBatch();
						nb_line_tDBOutput_17++;

						batchSizeCounter_tDBOutput_17++;

						if ((batchSize_tDBOutput_17 > 0)
								&& (batchSize_tDBOutput_17 <= batchSizeCounter_tDBOutput_17)) {
							try {
								int countSum_tDBOutput_17 = 0;

								for (int countEach_tDBOutput_17 : pstmt_tDBOutput_17
										.executeBatch()) {
									countSum_tDBOutput_17 += (countEach_tDBOutput_17 < 0 ? 0
											: countEach_tDBOutput_17);
								}

								insertedCount_tDBOutput_17 += countSum_tDBOutput_17;

								batchSizeCounter_tDBOutput_17 = 0;
							} catch (java.sql.BatchUpdateException e_tDBOutput_17) {
								java.sql.SQLException ne_tDBOutput_17 = e_tDBOutput_17
										.getNextException(), sqle_tDBOutput_17 = null;
								String errormessage_tDBOutput_17;
								if (ne_tDBOutput_17 != null) {
									// build new exception to provide the
									// original cause
									sqle_tDBOutput_17 = new java.sql.SQLException(
											e_tDBOutput_17.getMessage()
													+ "\ncaused by: "
													+ ne_tDBOutput_17
															.getMessage(),
											ne_tDBOutput_17.getSQLState(),
											ne_tDBOutput_17.getErrorCode(),
											ne_tDBOutput_17);
									errormessage_tDBOutput_17 = sqle_tDBOutput_17
											.getMessage();
								} else {
									errormessage_tDBOutput_17 = e_tDBOutput_17
											.getMessage();
								}

								int countSum_tDBOutput_17 = 0;
								for (int countEach_tDBOutput_17 : e_tDBOutput_17
										.getUpdateCounts()) {
									countSum_tDBOutput_17 += (countEach_tDBOutput_17 < 0 ? 0
											: countEach_tDBOutput_17);
								}

								insertedCount_tDBOutput_17 += countSum_tDBOutput_17;

								System.err.println(errormessage_tDBOutput_17);

							}
						}

						commitCounter_tDBOutput_17++;
						if (commitEvery_tDBOutput_17 <= commitCounter_tDBOutput_17) {
							if ((batchSize_tDBOutput_17 > 0)
									&& (batchSizeCounter_tDBOutput_17 > 0)) {
								try {
									int countSum_tDBOutput_17 = 0;

									for (int countEach_tDBOutput_17 : pstmt_tDBOutput_17
											.executeBatch()) {
										countSum_tDBOutput_17 += (countEach_tDBOutput_17 < 0 ? 0
												: countEach_tDBOutput_17);
									}

									insertedCount_tDBOutput_17 += countSum_tDBOutput_17;

									batchSizeCounter_tDBOutput_17 = 0;
								} catch (java.sql.BatchUpdateException e_tDBOutput_17) {
									java.sql.SQLException ne_tDBOutput_17 = e_tDBOutput_17
											.getNextException(), sqle_tDBOutput_17 = null;
									String errormessage_tDBOutput_17;
									if (ne_tDBOutput_17 != null) {
										// build new exception to provide the
										// original cause
										sqle_tDBOutput_17 = new java.sql.SQLException(
												e_tDBOutput_17.getMessage()
														+ "\ncaused by: "
														+ ne_tDBOutput_17
																.getMessage(),
												ne_tDBOutput_17.getSQLState(),
												ne_tDBOutput_17.getErrorCode(),
												ne_tDBOutput_17);
										errormessage_tDBOutput_17 = sqle_tDBOutput_17
												.getMessage();
									} else {
										errormessage_tDBOutput_17 = e_tDBOutput_17
												.getMessage();
									}

									int countSum_tDBOutput_17 = 0;
									for (int countEach_tDBOutput_17 : e_tDBOutput_17
											.getUpdateCounts()) {
										countSum_tDBOutput_17 += (countEach_tDBOutput_17 < 0 ? 0
												: countEach_tDBOutput_17);
									}

									insertedCount_tDBOutput_17 += countSum_tDBOutput_17;

									System.err
											.println(errormessage_tDBOutput_17);

								}
							}
							conn_tDBOutput_17.commit();

							commitCounter_tDBOutput_17 = 0;
						}

						tos_count_tDBOutput_17++;

						/**
						 * [tDBOutput_17 main ] stop
						 */

						/**
						 * [tDBOutput_17 process_data_begin ] start
						 */

						currentComponent = "tDBOutput_17";

						/**
						 * [tDBOutput_17 process_data_begin ] stop
						 */

						/**
						 * [tDBOutput_17 process_data_end ] start
						 */

						currentComponent = "tDBOutput_17";

						/**
						 * [tDBOutput_17 process_data_end ] stop
						 */

						/**
						 * [tDBInput_17 process_data_end ] start
						 */

						currentComponent = "tDBInput_17";

						/**
						 * [tDBInput_17 process_data_end ] stop
						 */

						/**
						 * [tDBInput_17 end ] start
						 */

						currentComponent = "tDBInput_17";

					}
				} finally {
					if (rs_tDBInput_17 != null) {
						rs_tDBInput_17.close();
					}
					if (stmt_tDBInput_17 != null) {
						stmt_tDBInput_17.close();
					}
					if (conn_tDBInput_17 != null
							&& !conn_tDBInput_17.isClosed()) {

						conn_tDBInput_17.commit();

						conn_tDBInput_17.close();

					}

				}
				globalMap.put("tDBInput_17_NB_LINE", nb_line_tDBInput_17);

				ok_Hash.put("tDBInput_17", true);
				end_Hash.put("tDBInput_17", System.currentTimeMillis());

				tStatCatcher_1.addMessage(
						"end",
						"tDBInput_17",
						end_Hash.get("tDBInput_17")
								- start_Hash.get("tDBInput_17"));
				tStatCatcher_1Process(globalMap);
				talendStats_STATS.addMessage(
						"end",
						"tDBInput_17",
						end_Hash.get("tDBInput_17")
								- start_Hash.get("tDBInput_17"));
				talendStats_STATSProcess(globalMap);

				/**
				 * [tDBInput_17 end ] stop
				 */

				/**
				 * [tDBOutput_17 end ] start
				 */

				currentComponent = "tDBOutput_17";

				try {
					int countSum_tDBOutput_17 = 0;
					if (pstmt_tDBOutput_17 != null
							&& batchSizeCounter_tDBOutput_17 > 0) {

						for (int countEach_tDBOutput_17 : pstmt_tDBOutput_17
								.executeBatch()) {
							countSum_tDBOutput_17 += (countEach_tDBOutput_17 < 0 ? 0
									: countEach_tDBOutput_17);
						}

					}

					insertedCount_tDBOutput_17 += countSum_tDBOutput_17;

				} catch (java.sql.BatchUpdateException e_tDBOutput_17) {
					java.sql.SQLException ne_tDBOutput_17 = e_tDBOutput_17
							.getNextException(), sqle_tDBOutput_17 = null;
					String errormessage_tDBOutput_17;
					if (ne_tDBOutput_17 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_17 = new java.sql.SQLException(
								e_tDBOutput_17.getMessage() + "\ncaused by: "
										+ ne_tDBOutput_17.getMessage(),
								ne_tDBOutput_17.getSQLState(),
								ne_tDBOutput_17.getErrorCode(), ne_tDBOutput_17);
						errormessage_tDBOutput_17 = sqle_tDBOutput_17
								.getMessage();
					} else {
						errormessage_tDBOutput_17 = e_tDBOutput_17.getMessage();
					}

					int countSum_tDBOutput_17 = 0;
					for (int countEach_tDBOutput_17 : e_tDBOutput_17
							.getUpdateCounts()) {
						countSum_tDBOutput_17 += (countEach_tDBOutput_17 < 0 ? 0
								: countEach_tDBOutput_17);
					}

					insertedCount_tDBOutput_17 += countSum_tDBOutput_17;

					System.err.println(errormessage_tDBOutput_17);

				}

				if (pstmt_tDBOutput_17 != null) {

					pstmt_tDBOutput_17.close();
					resourceMap.remove("pstmt_tDBOutput_17");
				}
				resourceMap.put("statementClosed_tDBOutput_17", true);

				conn_tDBOutput_17.commit();

				conn_tDBOutput_17.close();

				resourceMap.put("finish_tDBOutput_17", true);

				nb_line_deleted_tDBOutput_17 = nb_line_deleted_tDBOutput_17
						+ deletedCount_tDBOutput_17;
				nb_line_update_tDBOutput_17 = nb_line_update_tDBOutput_17
						+ updatedCount_tDBOutput_17;
				nb_line_inserted_tDBOutput_17 = nb_line_inserted_tDBOutput_17
						+ insertedCount_tDBOutput_17;
				nb_line_rejected_tDBOutput_17 = nb_line_rejected_tDBOutput_17
						+ rejectedCount_tDBOutput_17;

				globalMap.put("tDBOutput_17_NB_LINE", nb_line_tDBOutput_17);
				globalMap.put("tDBOutput_17_NB_LINE_UPDATED",
						nb_line_update_tDBOutput_17);
				globalMap.put("tDBOutput_17_NB_LINE_INSERTED",
						nb_line_inserted_tDBOutput_17);
				globalMap.put("tDBOutput_17_NB_LINE_DELETED",
						nb_line_deleted_tDBOutput_17);
				globalMap.put("tDBOutput_17_NB_LINE_REJECTED",
						nb_line_rejected_tDBOutput_17);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row18" + iterateId, 2,
								0);
					}
				}

				ok_Hash.put("tDBOutput_17", true);
				end_Hash.put("tDBOutput_17", System.currentTimeMillis());

				tStatCatcher_1.addMessage(
						"end",
						"tDBOutput_17",
						end_Hash.get("tDBOutput_17")
								- start_Hash.get("tDBOutput_17"));
				tStatCatcher_1Process(globalMap);
				talendStats_STATS.addMessage(
						"end",
						"tDBOutput_17",
						end_Hash.get("tDBOutput_17")
								- start_Hash.get("tDBOutput_17"));
				talendStats_STATSProcess(globalMap);

				/**
				 * [tDBOutput_17 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_17 finally ] start
				 */

				currentComponent = "tDBInput_17";

				/**
				 * [tDBInput_17 finally ] stop
				 */

				/**
				 * [tDBOutput_17 finally ] start
				 */

				currentComponent = "tDBOutput_17";

				try {
					if (resourceMap.get("statementClosed_tDBOutput_17") == null) {
						java.sql.PreparedStatement pstmtToClose_tDBOutput_17 = null;
						if ((pstmtToClose_tDBOutput_17 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmt_tDBOutput_17")) != null) {
							pstmtToClose_tDBOutput_17.close();
						}
					}
				} finally {
					if (resourceMap.get("finish_tDBOutput_17") == null) {
						java.sql.Connection ctn_tDBOutput_17 = null;
						if ((ctn_tDBOutput_17 = (java.sql.Connection) resourceMap
								.get("conn_tDBOutput_17")) != null) {
							try {
								ctn_tDBOutput_17.close();
							} catch (java.sql.SQLException sqlEx_tDBOutput_17) {
								String errorMessage_tDBOutput_17 = "failed to close the connection in tDBOutput_17 :"
										+ sqlEx_tDBOutput_17.getMessage();
								System.err.println(errorMessage_tDBOutput_17);
							}
						}
					}
				}

				/**
				 * [tDBOutput_17 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_17_SUBPROCESS_STATE", 1);
	}

	public static class row20Struct implements
			routines.system.IPersistableRow<row20Struct> {
		final static byte[] commonByteArrayLock_ORDER_ETL_OMS_ETL_NO_PRODUCTS = new byte[0];
		static byte[] commonByteArray_ORDER_ETL_OMS_ETL_NO_PRODUCTS = new byte[0];

		public java.util.Date moment;

		public java.util.Date getMoment() {
			return this.moment;
		}

		public String pid;

		public String getPid() {
			return this.pid;
		}

		public String root_pid;

		public String getRoot_pid() {
			return this.root_pid;
		}

		public String father_pid;

		public String getFather_pid() {
			return this.father_pid;
		}

		public String project;

		public String getProject() {
			return this.project;
		}

		public String job;

		public String getJob() {
			return this.job;
		}

		public String context;

		public String getContext() {
			return this.context;
		}

		public Integer priority;

		public Integer getPriority() {
			return this.priority;
		}

		public String type;

		public String getType() {
			return this.type;
		}

		public String origin;

		public String getOrigin() {
			return this.origin;
		}

		public String message;

		public String getMessage() {
			return this.message;
		}

		public Integer code;

		public Integer getCode() {
			return this.code;
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ORDER_ETL_OMS_ETL_NO_PRODUCTS.length) {
					if (length < 1024
							&& commonByteArray_ORDER_ETL_OMS_ETL_NO_PRODUCTS.length == 0) {
						commonByteArray_ORDER_ETL_OMS_ETL_NO_PRODUCTS = new byte[1024];
					} else {
						commonByteArray_ORDER_ETL_OMS_ETL_NO_PRODUCTS = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ORDER_ETL_OMS_ETL_NO_PRODUCTS, 0,
						length);
				strReturn = new String(
						commonByteArray_ORDER_ETL_OMS_ETL_NO_PRODUCTS, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ORDER_ETL_OMS_ETL_NO_PRODUCTS) {

				try {

					int length = 0;

					this.moment = readDate(dis);

					this.pid = readString(dis);

					this.root_pid = readString(dis);

					this.father_pid = readString(dis);

					this.project = readString(dis);

					this.job = readString(dis);

					this.context = readString(dis);

					this.priority = readInteger(dis);

					this.type = readString(dis);

					this.origin = readString(dis);

					this.message = readString(dis);

					this.code = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.moment, dos);

				// String

				writeString(this.pid, dos);

				// String

				writeString(this.root_pid, dos);

				// String

				writeString(this.father_pid, dos);

				// String

				writeString(this.project, dos);

				// String

				writeString(this.job, dos);

				// String

				writeString(this.context, dos);

				// Integer

				writeInteger(this.priority, dos);

				// String

				writeString(this.type, dos);

				// String

				writeString(this.origin, dos);

				// String

				writeString(this.message, dos);

				// Integer

				writeInteger(this.code, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("moment=" + String.valueOf(moment));
			sb.append(",pid=" + pid);
			sb.append(",root_pid=" + root_pid);
			sb.append(",father_pid=" + father_pid);
			sb.append(",project=" + project);
			sb.append(",job=" + job);
			sb.append(",context=" + context);
			sb.append(",priority=" + String.valueOf(priority));
			sb.append(",type=" + type);
			sb.append(",origin=" + origin);
			sb.append(",message=" + message);
			sb.append(",code=" + String.valueOf(code));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row20Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tLogCatcher_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tLogCatcher_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row20Struct row20 = new row20Struct();

				/**
				 * [tLogRow_2 begin ] start
				 */

				ok_Hash.put("tLogRow_2", false);
				start_Hash.put("tLogRow_2", System.currentTimeMillis());

				currentComponent = "tLogRow_2";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row20" + iterateId, 0,
								0);

					}
				}

				int tos_count_tLogRow_2 = 0;

				// /////////////////////

				final String OUTPUT_FIELD_SEPARATOR_tLogRow_2 = "|";
				java.io.PrintStream consoleOut_tLogRow_2 = null;

				StringBuilder strBuffer_tLogRow_2 = null;
				int nb_line_tLogRow_2 = 0;
				// /////////////////////

				/**
				 * [tLogRow_2 begin ] stop
				 */

				/**
				 * [tLogCatcher_1 begin ] start
				 */

				ok_Hash.put("tLogCatcher_1", false);
				start_Hash.put("tLogCatcher_1", System.currentTimeMillis());

				currentComponent = "tLogCatcher_1";

				int tos_count_tLogCatcher_1 = 0;

				try {
					for (LogCatcherUtils.LogCatcherMessage lcm : tLogCatcher_1
							.getMessages()) {
						row20.type = lcm.getType();
						row20.origin = (lcm.getOrigin() == null
								|| lcm.getOrigin().length() < 1 ? null : lcm
								.getOrigin());
						row20.priority = lcm.getPriority();
						row20.message = lcm.getMessage();
						row20.code = lcm.getCode();

						row20.moment = java.util.Calendar.getInstance()
								.getTime();

						row20.pid = pid;
						row20.root_pid = rootPid;
						row20.father_pid = fatherPid;

						row20.project = projectName;
						row20.job = jobName;
						row20.context = contextStr;

						/**
						 * [tLogCatcher_1 begin ] stop
						 */

						/**
						 * [tLogCatcher_1 main ] start
						 */

						currentComponent = "tLogCatcher_1";

						tos_count_tLogCatcher_1++;

						/**
						 * [tLogCatcher_1 main ] stop
						 */

						/**
						 * [tLogCatcher_1 process_data_begin ] start
						 */

						currentComponent = "tLogCatcher_1";

						/**
						 * [tLogCatcher_1 process_data_begin ] stop
						 */

						/**
						 * [tLogRow_2 main ] start
						 */

						currentComponent = "tLogRow_2";

						// row20
						// row20

						if (execStat) {
							runStat.updateStatOnConnection("row20" + iterateId,
									1, 1);
						}

						// /////////////////////

						strBuffer_tLogRow_2 = new StringBuilder();

						if (row20.moment != null) { //

							strBuffer_tLogRow_2.append(FormatterUtils
									.format_Date(row20.moment,
											"yyyy-MM-dd HH:mm:ss"));

						} //

						strBuffer_tLogRow_2.append("|");

						if (row20.pid != null) { //

							strBuffer_tLogRow_2.append(String
									.valueOf(row20.pid));

						} //

						strBuffer_tLogRow_2.append("|");

						if (row20.root_pid != null) { //

							strBuffer_tLogRow_2.append(String
									.valueOf(row20.root_pid));

						} //

						strBuffer_tLogRow_2.append("|");

						if (row20.father_pid != null) { //

							strBuffer_tLogRow_2.append(String
									.valueOf(row20.father_pid));

						} //

						strBuffer_tLogRow_2.append("|");

						if (row20.project != null) { //

							strBuffer_tLogRow_2.append(String
									.valueOf(row20.project));

						} //

						strBuffer_tLogRow_2.append("|");

						if (row20.job != null) { //

							strBuffer_tLogRow_2.append(String
									.valueOf(row20.job));

						} //

						strBuffer_tLogRow_2.append("|");

						if (row20.context != null) { //

							strBuffer_tLogRow_2.append(String
									.valueOf(row20.context));

						} //

						strBuffer_tLogRow_2.append("|");

						if (row20.priority != null) { //

							strBuffer_tLogRow_2.append(String
									.valueOf(row20.priority));

						} //

						strBuffer_tLogRow_2.append("|");

						if (row20.type != null) { //

							strBuffer_tLogRow_2.append(String
									.valueOf(row20.type));

						} //

						strBuffer_tLogRow_2.append("|");

						if (row20.origin != null) { //

							strBuffer_tLogRow_2.append(String
									.valueOf(row20.origin));

						} //

						strBuffer_tLogRow_2.append("|");

						if (row20.message != null) { //

							strBuffer_tLogRow_2.append(String
									.valueOf(row20.message));

						} //

						strBuffer_tLogRow_2.append("|");

						if (row20.code != null) { //

							strBuffer_tLogRow_2.append(String
									.valueOf(row20.code));

						} //

						if (globalMap.get("tLogRow_CONSOLE") != null) {
							consoleOut_tLogRow_2 = (java.io.PrintStream) globalMap
									.get("tLogRow_CONSOLE");
						} else {
							consoleOut_tLogRow_2 = new java.io.PrintStream(
									new java.io.BufferedOutputStream(System.out));
							globalMap.put("tLogRow_CONSOLE",
									consoleOut_tLogRow_2);
						}
						consoleOut_tLogRow_2.println(strBuffer_tLogRow_2
								.toString());
						consoleOut_tLogRow_2.flush();
						nb_line_tLogRow_2++;
						// ////

						// ////

						// /////////////////////

						tos_count_tLogRow_2++;

						/**
						 * [tLogRow_2 main ] stop
						 */

						/**
						 * [tLogRow_2 process_data_begin ] start
						 */

						currentComponent = "tLogRow_2";

						/**
						 * [tLogRow_2 process_data_begin ] stop
						 */

						/**
						 * [tLogRow_2 process_data_end ] start
						 */

						currentComponent = "tLogRow_2";

						/**
						 * [tLogRow_2 process_data_end ] stop
						 */

						/**
						 * [tLogCatcher_1 process_data_end ] start
						 */

						currentComponent = "tLogCatcher_1";

						/**
						 * [tLogCatcher_1 process_data_end ] stop
						 */

						/**
						 * [tLogCatcher_1 end ] start
						 */

						currentComponent = "tLogCatcher_1";

					}
				} catch (Exception e_tLogCatcher_1) {
					logIgnoredError(
							String.format(
									"tLogCatcher_1 - tLogCatcher failed to process log message(s) due to internal error: %s",
									e_tLogCatcher_1), e_tLogCatcher_1);
				}

				ok_Hash.put("tLogCatcher_1", true);
				end_Hash.put("tLogCatcher_1", System.currentTimeMillis());

				/**
				 * [tLogCatcher_1 end ] stop
				 */

				/**
				 * [tLogRow_2 end ] start
				 */

				currentComponent = "tLogRow_2";

				// ////
				// ////
				globalMap.put("tLogRow_2_NB_LINE", nb_line_tLogRow_2);

				// /////////////////////

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row20" + iterateId, 2,
								0);
					}
				}

				ok_Hash.put("tLogRow_2", true);
				end_Hash.put("tLogRow_2", System.currentTimeMillis());

				/**
				 * [tLogRow_2 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tLogCatcher_1 finally ] start
				 */

				currentComponent = "tLogCatcher_1";

				/**
				 * [tLogCatcher_1 finally ] stop
				 */

				/**
				 * [tLogRow_2 finally ] start
				 */

				currentComponent = "tLogRow_2";

				/**
				 * [tLogRow_2 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tLogCatcher_1_SUBPROCESS_STATE", 1);
	}

	public static class row19Struct implements
			routines.system.IPersistableRow<row19Struct> {
		final static byte[] commonByteArrayLock_ORDER_ETL_OMS_ETL_NO_PRODUCTS = new byte[0];
		static byte[] commonByteArray_ORDER_ETL_OMS_ETL_NO_PRODUCTS = new byte[0];

		public java.util.Date moment;

		public java.util.Date getMoment() {
			return this.moment;
		}

		public String pid;

		public String getPid() {
			return this.pid;
		}

		public String father_pid;

		public String getFather_pid() {
			return this.father_pid;
		}

		public String root_pid;

		public String getRoot_pid() {
			return this.root_pid;
		}

		public Long system_pid;

		public Long getSystem_pid() {
			return this.system_pid;
		}

		public String project;

		public String getProject() {
			return this.project;
		}

		public String job;

		public String getJob() {
			return this.job;
		}

		public String job_repository_id;

		public String getJob_repository_id() {
			return this.job_repository_id;
		}

		public String job_version;

		public String getJob_version() {
			return this.job_version;
		}

		public String context;

		public String getContext() {
			return this.context;
		}

		public String origin;

		public String getOrigin() {
			return this.origin;
		}

		public String message_type;

		public String getMessage_type() {
			return this.message_type;
		}

		public String message;

		public String getMessage() {
			return this.message;
		}

		public Long duration;

		public Long getDuration() {
			return this.duration;
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ORDER_ETL_OMS_ETL_NO_PRODUCTS.length) {
					if (length < 1024
							&& commonByteArray_ORDER_ETL_OMS_ETL_NO_PRODUCTS.length == 0) {
						commonByteArray_ORDER_ETL_OMS_ETL_NO_PRODUCTS = new byte[1024];
					} else {
						commonByteArray_ORDER_ETL_OMS_ETL_NO_PRODUCTS = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ORDER_ETL_OMS_ETL_NO_PRODUCTS, 0,
						length);
				strReturn = new String(
						commonByteArray_ORDER_ETL_OMS_ETL_NO_PRODUCTS, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ORDER_ETL_OMS_ETL_NO_PRODUCTS) {

				try {

					int length = 0;

					this.moment = readDate(dis);

					this.pid = readString(dis);

					this.father_pid = readString(dis);

					this.root_pid = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.system_pid = null;
					} else {
						this.system_pid = dis.readLong();
					}

					this.project = readString(dis);

					this.job = readString(dis);

					this.job_repository_id = readString(dis);

					this.job_version = readString(dis);

					this.context = readString(dis);

					this.origin = readString(dis);

					this.message_type = readString(dis);

					this.message = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.duration = null;
					} else {
						this.duration = dis.readLong();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.moment, dos);

				// String

				writeString(this.pid, dos);

				// String

				writeString(this.father_pid, dos);

				// String

				writeString(this.root_pid, dos);

				// Long

				if (this.system_pid == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.system_pid);
				}

				// String

				writeString(this.project, dos);

				// String

				writeString(this.job, dos);

				// String

				writeString(this.job_repository_id, dos);

				// String

				writeString(this.job_version, dos);

				// String

				writeString(this.context, dos);

				// String

				writeString(this.origin, dos);

				// String

				writeString(this.message_type, dos);

				// String

				writeString(this.message, dos);

				// Long

				if (this.duration == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.duration);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("moment=" + String.valueOf(moment));
			sb.append(",pid=" + pid);
			sb.append(",father_pid=" + father_pid);
			sb.append(",root_pid=" + root_pid);
			sb.append(",system_pid=" + String.valueOf(system_pid));
			sb.append(",project=" + project);
			sb.append(",job=" + job);
			sb.append(",job_repository_id=" + job_repository_id);
			sb.append(",job_version=" + job_version);
			sb.append(",context=" + context);
			sb.append(",origin=" + origin);
			sb.append(",message_type=" + message_type);
			sb.append(",message=" + message);
			sb.append(",duration=" + String.valueOf(duration));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row19Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tStatCatcher_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tStatCatcher_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row19Struct row19 = new row19Struct();

				/**
				 * [tLogRow_1 begin ] start
				 */

				ok_Hash.put("tLogRow_1", false);
				start_Hash.put("tLogRow_1", System.currentTimeMillis());

				currentComponent = "tLogRow_1";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row19" + iterateId, 0,
								0);

					}
				}

				int tos_count_tLogRow_1 = 0;

				// /////////////////////

				final String OUTPUT_FIELD_SEPARATOR_tLogRow_1 = "|";
				java.io.PrintStream consoleOut_tLogRow_1 = null;

				StringBuilder strBuffer_tLogRow_1 = null;
				int nb_line_tLogRow_1 = 0;
				// /////////////////////

				/**
				 * [tLogRow_1 begin ] stop
				 */

				/**
				 * [tStatCatcher_1 begin ] start
				 */

				ok_Hash.put("tStatCatcher_1", false);
				start_Hash.put("tStatCatcher_1", System.currentTimeMillis());

				currentComponent = "tStatCatcher_1";

				int tos_count_tStatCatcher_1 = 0;

				for (StatCatcherUtils.StatCatcherMessage scm : tStatCatcher_1
						.getMessages()) {
					row19.pid = pid;
					row19.root_pid = rootPid;
					row19.father_pid = fatherPid;
					row19.project = projectName;
					row19.job = jobName;
					row19.context = contextStr;
					row19.origin = (scm.getOrigin() == null
							|| scm.getOrigin().length() < 1 ? null : scm
							.getOrigin());
					row19.message = scm.getMessage();
					row19.duration = scm.getDuration();
					row19.moment = scm.getMoment();
					row19.message_type = scm.getMessageType();
					row19.job_version = scm.getJobVersion();
					row19.job_repository_id = scm.getJobId();
					row19.system_pid = scm.getSystemPid();

					/**
					 * [tStatCatcher_1 begin ] stop
					 */

					/**
					 * [tStatCatcher_1 main ] start
					 */

					currentComponent = "tStatCatcher_1";

					tos_count_tStatCatcher_1++;

					/**
					 * [tStatCatcher_1 main ] stop
					 */

					/**
					 * [tStatCatcher_1 process_data_begin ] start
					 */

					currentComponent = "tStatCatcher_1";

					/**
					 * [tStatCatcher_1 process_data_begin ] stop
					 */

					/**
					 * [tLogRow_1 main ] start
					 */

					currentComponent = "tLogRow_1";

					// row19
					// row19

					if (execStat) {
						runStat.updateStatOnConnection("row19" + iterateId, 1,
								1);
					}

					// /////////////////////

					strBuffer_tLogRow_1 = new StringBuilder();

					if (row19.moment != null) { //

						strBuffer_tLogRow_1.append(FormatterUtils.format_Date(
								row19.moment, "yyyy-MM-dd HH:mm:ss"));

					} //

					strBuffer_tLogRow_1.append("|");

					if (row19.pid != null) { //

						strBuffer_tLogRow_1.append(String.valueOf(row19.pid));

					} //

					strBuffer_tLogRow_1.append("|");

					if (row19.father_pid != null) { //

						strBuffer_tLogRow_1.append(String
								.valueOf(row19.father_pid));

					} //

					strBuffer_tLogRow_1.append("|");

					if (row19.root_pid != null) { //

						strBuffer_tLogRow_1.append(String
								.valueOf(row19.root_pid));

					} //

					strBuffer_tLogRow_1.append("|");

					if (row19.system_pid != null) { //

						strBuffer_tLogRow_1.append(String
								.valueOf(row19.system_pid));

					} //

					strBuffer_tLogRow_1.append("|");

					if (row19.project != null) { //

						strBuffer_tLogRow_1.append(String
								.valueOf(row19.project));

					} //

					strBuffer_tLogRow_1.append("|");

					if (row19.job != null) { //

						strBuffer_tLogRow_1.append(String.valueOf(row19.job));

					} //

					strBuffer_tLogRow_1.append("|");

					if (row19.job_repository_id != null) { //

						strBuffer_tLogRow_1.append(String
								.valueOf(row19.job_repository_id));

					} //

					strBuffer_tLogRow_1.append("|");

					if (row19.job_version != null) { //

						strBuffer_tLogRow_1.append(String
								.valueOf(row19.job_version));

					} //

					strBuffer_tLogRow_1.append("|");

					if (row19.context != null) { //

						strBuffer_tLogRow_1.append(String
								.valueOf(row19.context));

					} //

					strBuffer_tLogRow_1.append("|");

					if (row19.origin != null) { //

						strBuffer_tLogRow_1
								.append(String.valueOf(row19.origin));

					} //

					strBuffer_tLogRow_1.append("|");

					if (row19.message_type != null) { //

						strBuffer_tLogRow_1.append(String
								.valueOf(row19.message_type));

					} //

					strBuffer_tLogRow_1.append("|");

					if (row19.message != null) { //

						strBuffer_tLogRow_1.append(String
								.valueOf(row19.message));

					} //

					strBuffer_tLogRow_1.append("|");

					if (row19.duration != null) { //

						strBuffer_tLogRow_1.append(String
								.valueOf(row19.duration));

					} //

					if (globalMap.get("tLogRow_CONSOLE") != null) {
						consoleOut_tLogRow_1 = (java.io.PrintStream) globalMap
								.get("tLogRow_CONSOLE");
					} else {
						consoleOut_tLogRow_1 = new java.io.PrintStream(
								new java.io.BufferedOutputStream(System.out));
						globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_1);
					}
					consoleOut_tLogRow_1
							.println(strBuffer_tLogRow_1.toString());
					consoleOut_tLogRow_1.flush();
					nb_line_tLogRow_1++;
					// ////

					// ////

					// /////////////////////

					tos_count_tLogRow_1++;

					/**
					 * [tLogRow_1 main ] stop
					 */

					/**
					 * [tLogRow_1 process_data_begin ] start
					 */

					currentComponent = "tLogRow_1";

					/**
					 * [tLogRow_1 process_data_begin ] stop
					 */

					/**
					 * [tLogRow_1 process_data_end ] start
					 */

					currentComponent = "tLogRow_1";

					/**
					 * [tLogRow_1 process_data_end ] stop
					 */

					/**
					 * [tStatCatcher_1 process_data_end ] start
					 */

					currentComponent = "tStatCatcher_1";

					/**
					 * [tStatCatcher_1 process_data_end ] stop
					 */

					/**
					 * [tStatCatcher_1 end ] start
					 */

					currentComponent = "tStatCatcher_1";

				}

				ok_Hash.put("tStatCatcher_1", true);
				end_Hash.put("tStatCatcher_1", System.currentTimeMillis());

				/**
				 * [tStatCatcher_1 end ] stop
				 */

				/**
				 * [tLogRow_1 end ] start
				 */

				currentComponent = "tLogRow_1";

				// ////
				// ////
				globalMap.put("tLogRow_1_NB_LINE", nb_line_tLogRow_1);

				// /////////////////////

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row19" + iterateId, 2,
								0);
					}
				}

				ok_Hash.put("tLogRow_1", true);
				end_Hash.put("tLogRow_1", System.currentTimeMillis());

				/**
				 * [tLogRow_1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tStatCatcher_1 finally ] start
				 */

				currentComponent = "tStatCatcher_1";

				/**
				 * [tStatCatcher_1 finally ] stop
				 */

				/**
				 * [tLogRow_1 finally ] start
				 */

				currentComponent = "tLogRow_1";

				/**
				 * [tLogRow_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tStatCatcher_1_SUBPROCESS_STATE", 1);
	}

	public static class row_talendStats_STATSStruct implements
			routines.system.IPersistableRow<row_talendStats_STATSStruct> {
		final static byte[] commonByteArrayLock_ORDER_ETL_OMS_ETL_NO_PRODUCTS = new byte[0];
		static byte[] commonByteArray_ORDER_ETL_OMS_ETL_NO_PRODUCTS = new byte[0];

		public java.util.Date moment;

		public java.util.Date getMoment() {
			return this.moment;
		}

		public String pid;

		public String getPid() {
			return this.pid;
		}

		public String father_pid;

		public String getFather_pid() {
			return this.father_pid;
		}

		public String root_pid;

		public String getRoot_pid() {
			return this.root_pid;
		}

		public Long system_pid;

		public Long getSystem_pid() {
			return this.system_pid;
		}

		public String project;

		public String getProject() {
			return this.project;
		}

		public String job;

		public String getJob() {
			return this.job;
		}

		public String job_repository_id;

		public String getJob_repository_id() {
			return this.job_repository_id;
		}

		public String job_version;

		public String getJob_version() {
			return this.job_version;
		}

		public String context;

		public String getContext() {
			return this.context;
		}

		public String origin;

		public String getOrigin() {
			return this.origin;
		}

		public String message_type;

		public String getMessage_type() {
			return this.message_type;
		}

		public String message;

		public String getMessage() {
			return this.message;
		}

		public Long duration;

		public Long getDuration() {
			return this.duration;
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ORDER_ETL_OMS_ETL_NO_PRODUCTS.length) {
					if (length < 1024
							&& commonByteArray_ORDER_ETL_OMS_ETL_NO_PRODUCTS.length == 0) {
						commonByteArray_ORDER_ETL_OMS_ETL_NO_PRODUCTS = new byte[1024];
					} else {
						commonByteArray_ORDER_ETL_OMS_ETL_NO_PRODUCTS = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ORDER_ETL_OMS_ETL_NO_PRODUCTS, 0,
						length);
				strReturn = new String(
						commonByteArray_ORDER_ETL_OMS_ETL_NO_PRODUCTS, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ORDER_ETL_OMS_ETL_NO_PRODUCTS) {

				try {

					int length = 0;

					this.moment = readDate(dis);

					this.pid = readString(dis);

					this.father_pid = readString(dis);

					this.root_pid = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.system_pid = null;
					} else {
						this.system_pid = dis.readLong();
					}

					this.project = readString(dis);

					this.job = readString(dis);

					this.job_repository_id = readString(dis);

					this.job_version = readString(dis);

					this.context = readString(dis);

					this.origin = readString(dis);

					this.message_type = readString(dis);

					this.message = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.duration = null;
					} else {
						this.duration = dis.readLong();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.moment, dos);

				// String

				writeString(this.pid, dos);

				// String

				writeString(this.father_pid, dos);

				// String

				writeString(this.root_pid, dos);

				// Long

				if (this.system_pid == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.system_pid);
				}

				// String

				writeString(this.project, dos);

				// String

				writeString(this.job, dos);

				// String

				writeString(this.job_repository_id, dos);

				// String

				writeString(this.job_version, dos);

				// String

				writeString(this.context, dos);

				// String

				writeString(this.origin, dos);

				// String

				writeString(this.message_type, dos);

				// String

				writeString(this.message, dos);

				// Long

				if (this.duration == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.duration);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("moment=" + String.valueOf(moment));
			sb.append(",pid=" + pid);
			sb.append(",father_pid=" + father_pid);
			sb.append(",root_pid=" + root_pid);
			sb.append(",system_pid=" + String.valueOf(system_pid));
			sb.append(",project=" + project);
			sb.append(",job=" + job);
			sb.append(",job_repository_id=" + job_repository_id);
			sb.append(",job_version=" + job_version);
			sb.append(",context=" + context);
			sb.append(",origin=" + origin);
			sb.append(",message_type=" + message_type);
			sb.append(",message=" + message);
			sb.append(",duration=" + String.valueOf(duration));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row_talendStats_STATSStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void talendStats_STATSProcess(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("talendStats_STATS_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row_talendStats_STATSStruct row_talendStats_STATS = new row_talendStats_STATSStruct();

				/**
				 * [talendStats_FILE begin ] start
				 */

				ok_Hash.put("talendStats_FILE", false);
				start_Hash.put("talendStats_FILE", System.currentTimeMillis());

				currentVirtualComponent = "talendStats_FILE";

				currentComponent = "talendStats_FILE";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("Main" + iterateId, 0, 0);

					}
				}

				int tos_count_talendStats_FILE = 0;

				String fileName_talendStats_FILE = "";
				fileName_talendStats_FILE = (new java.io.File("/r01/log" + "/"
						+ "stats_file.txt")).getAbsolutePath().replace("\\",
						"/");
				String fullName_talendStats_FILE = null;
				String extension_talendStats_FILE = null;
				String directory_talendStats_FILE = null;
				if ((fileName_talendStats_FILE.indexOf("/") != -1)) {
					if (fileName_talendStats_FILE.lastIndexOf(".") < fileName_talendStats_FILE
							.lastIndexOf("/")) {
						fullName_talendStats_FILE = fileName_talendStats_FILE;
						extension_talendStats_FILE = "";
					} else {
						fullName_talendStats_FILE = fileName_talendStats_FILE
								.substring(0, fileName_talendStats_FILE
										.lastIndexOf("."));
						extension_talendStats_FILE = fileName_talendStats_FILE
								.substring(fileName_talendStats_FILE
										.lastIndexOf("."));
					}
					directory_talendStats_FILE = fileName_talendStats_FILE
							.substring(0,
									fileName_talendStats_FILE.lastIndexOf("/"));
				} else {
					if (fileName_talendStats_FILE.lastIndexOf(".") != -1) {
						fullName_talendStats_FILE = fileName_talendStats_FILE
								.substring(0, fileName_talendStats_FILE
										.lastIndexOf("."));
						extension_talendStats_FILE = fileName_talendStats_FILE
								.substring(fileName_talendStats_FILE
										.lastIndexOf("."));
					} else {
						fullName_talendStats_FILE = fileName_talendStats_FILE;
						extension_talendStats_FILE = "";
					}
					directory_talendStats_FILE = "";
				}
				boolean isFileGenerated_talendStats_FILE = true;
				java.io.File filetalendStats_FILE = new java.io.File(
						fileName_talendStats_FILE);
				globalMap.put("talendStats_FILE_FILE_NAME",
						fileName_talendStats_FILE);
				if (filetalendStats_FILE.exists()) {
					isFileGenerated_talendStats_FILE = false;
				}
				int nb_line_talendStats_FILE = 0;
				int splitedFileNo_talendStats_FILE = 0;
				int currentRow_talendStats_FILE = 0;

				final String OUT_DELIM_talendStats_FILE = /**
				 * Start field
				 * talendStats_FILE:FIELDSEPARATOR
				 */
				";"/** End field talendStats_FILE:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_talendStats_FILE = /**
				 * Start field
				 * talendStats_FILE:ROWSEPARATOR
				 */
				"\n"/** End field talendStats_FILE:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_talendStats_FILE != null
						&& directory_talendStats_FILE.trim().length() != 0) {
					java.io.File dir_talendStats_FILE = new java.io.File(
							directory_talendStats_FILE);
					if (!dir_talendStats_FILE.exists()) {
						dir_talendStats_FILE.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtalendStats_FILE = null;

				outtalendStats_FILE = new java.io.BufferedWriter(
						new java.io.OutputStreamWriter(
								new java.io.FileOutputStream(
										fileName_talendStats_FILE, true),
								"UTF-8"));

				resourceMap.put("out_talendStats_FILE", outtalendStats_FILE);
				resourceMap.put("nb_line_talendStats_FILE",
						nb_line_talendStats_FILE);

				/**
				 * [talendStats_FILE begin ] stop
				 */

				/**
				 * [talendStats_STATS begin ] start
				 */

				ok_Hash.put("talendStats_STATS", false);
				start_Hash.put("talendStats_STATS", System.currentTimeMillis());

				currentVirtualComponent = "talendStats_STATS";

				currentComponent = "talendStats_STATS";

				int tos_count_talendStats_STATS = 0;

				for (StatCatcherUtils.StatCatcherMessage scm : talendStats_STATS
						.getMessages()) {
					row_talendStats_STATS.pid = pid;
					row_talendStats_STATS.root_pid = rootPid;
					row_talendStats_STATS.father_pid = fatherPid;
					row_talendStats_STATS.project = projectName;
					row_talendStats_STATS.job = jobName;
					row_talendStats_STATS.context = contextStr;
					row_talendStats_STATS.origin = (scm.getOrigin() == null
							|| scm.getOrigin().length() < 1 ? null : scm
							.getOrigin());
					row_talendStats_STATS.message = scm.getMessage();
					row_talendStats_STATS.duration = scm.getDuration();
					row_talendStats_STATS.moment = scm.getMoment();
					row_talendStats_STATS.message_type = scm.getMessageType();
					row_talendStats_STATS.job_version = scm.getJobVersion();
					row_talendStats_STATS.job_repository_id = scm.getJobId();
					row_talendStats_STATS.system_pid = scm.getSystemPid();

					/**
					 * [talendStats_STATS begin ] stop
					 */

					/**
					 * [talendStats_STATS main ] start
					 */

					currentVirtualComponent = "talendStats_STATS";

					currentComponent = "talendStats_STATS";

					tos_count_talendStats_STATS++;

					/**
					 * [talendStats_STATS main ] stop
					 */

					/**
					 * [talendStats_STATS process_data_begin ] start
					 */

					currentVirtualComponent = "talendStats_STATS";

					currentComponent = "talendStats_STATS";

					/**
					 * [talendStats_STATS process_data_begin ] stop
					 */

					/**
					 * [talendStats_FILE main ] start
					 */

					currentVirtualComponent = "talendStats_FILE";

					currentComponent = "talendStats_FILE";

					// Main
					// row_talendStats_STATS

					if (execStat) {
						runStat.updateStatOnConnection("Main" + iterateId, 1, 1);
					}

					StringBuilder sb_talendStats_FILE = new StringBuilder();
					if (row_talendStats_STATS.moment != null) {
						sb_talendStats_FILE.append(FormatterUtils.format_Date(
								row_talendStats_STATS.moment,
								"yyyy-MM-dd HH:mm:ss"));
					}
					sb_talendStats_FILE.append(OUT_DELIM_talendStats_FILE);
					if (row_talendStats_STATS.pid != null) {
						sb_talendStats_FILE.append(row_talendStats_STATS.pid);
					}
					sb_talendStats_FILE.append(OUT_DELIM_talendStats_FILE);
					if (row_talendStats_STATS.father_pid != null) {
						sb_talendStats_FILE
								.append(row_talendStats_STATS.father_pid);
					}
					sb_talendStats_FILE.append(OUT_DELIM_talendStats_FILE);
					if (row_talendStats_STATS.root_pid != null) {
						sb_talendStats_FILE
								.append(row_talendStats_STATS.root_pid);
					}
					sb_talendStats_FILE.append(OUT_DELIM_talendStats_FILE);
					if (row_talendStats_STATS.system_pid != null) {
						sb_talendStats_FILE
								.append(row_talendStats_STATS.system_pid);
					}
					sb_talendStats_FILE.append(OUT_DELIM_talendStats_FILE);
					if (row_talendStats_STATS.project != null) {
						sb_talendStats_FILE
								.append(row_talendStats_STATS.project);
					}
					sb_talendStats_FILE.append(OUT_DELIM_talendStats_FILE);
					if (row_talendStats_STATS.job != null) {
						sb_talendStats_FILE.append(row_talendStats_STATS.job);
					}
					sb_talendStats_FILE.append(OUT_DELIM_talendStats_FILE);
					if (row_talendStats_STATS.job_repository_id != null) {
						sb_talendStats_FILE
								.append(row_talendStats_STATS.job_repository_id);
					}
					sb_talendStats_FILE.append(OUT_DELIM_talendStats_FILE);
					if (row_talendStats_STATS.job_version != null) {
						sb_talendStats_FILE
								.append(row_talendStats_STATS.job_version);
					}
					sb_talendStats_FILE.append(OUT_DELIM_talendStats_FILE);
					if (row_talendStats_STATS.context != null) {
						sb_talendStats_FILE
								.append(row_talendStats_STATS.context);
					}
					sb_talendStats_FILE.append(OUT_DELIM_talendStats_FILE);
					if (row_talendStats_STATS.origin != null) {
						sb_talendStats_FILE
								.append(row_talendStats_STATS.origin);
					}
					sb_talendStats_FILE.append(OUT_DELIM_talendStats_FILE);
					if (row_talendStats_STATS.message_type != null) {
						sb_talendStats_FILE
								.append(row_talendStats_STATS.message_type);
					}
					sb_talendStats_FILE.append(OUT_DELIM_talendStats_FILE);
					if (row_talendStats_STATS.message != null) {
						sb_talendStats_FILE
								.append(row_talendStats_STATS.message);
					}
					sb_talendStats_FILE.append(OUT_DELIM_talendStats_FILE);
					if (row_talendStats_STATS.duration != null) {
						sb_talendStats_FILE
								.append(row_talendStats_STATS.duration);
					}
					sb_talendStats_FILE
							.append(OUT_DELIM_ROWSEP_talendStats_FILE);

					nb_line_talendStats_FILE++;
					resourceMap.put("nb_line_talendStats_FILE",
							nb_line_talendStats_FILE);

					outtalendStats_FILE.write(sb_talendStats_FILE.toString());

					tos_count_talendStats_FILE++;

					/**
					 * [talendStats_FILE main ] stop
					 */

					/**
					 * [talendStats_FILE process_data_begin ] start
					 */

					currentVirtualComponent = "talendStats_FILE";

					currentComponent = "talendStats_FILE";

					/**
					 * [talendStats_FILE process_data_begin ] stop
					 */

					/**
					 * [talendStats_FILE process_data_end ] start
					 */

					currentVirtualComponent = "talendStats_FILE";

					currentComponent = "talendStats_FILE";

					/**
					 * [talendStats_FILE process_data_end ] stop
					 */

					/**
					 * [talendStats_STATS process_data_end ] start
					 */

					currentVirtualComponent = "talendStats_STATS";

					currentComponent = "talendStats_STATS";

					/**
					 * [talendStats_STATS process_data_end ] stop
					 */

					/**
					 * [talendStats_STATS end ] start
					 */

					currentVirtualComponent = "talendStats_STATS";

					currentComponent = "talendStats_STATS";

				}

				ok_Hash.put("talendStats_STATS", true);
				end_Hash.put("talendStats_STATS", System.currentTimeMillis());

				/**
				 * [talendStats_STATS end ] stop
				 */

				/**
				 * [talendStats_FILE end ] start
				 */

				currentVirtualComponent = "talendStats_FILE";

				currentComponent = "talendStats_FILE";

				if (outtalendStats_FILE != null) {
					outtalendStats_FILE.flush();
					outtalendStats_FILE.close();
				}

				globalMap.put("talendStats_FILE_NB_LINE",
						nb_line_talendStats_FILE);
				globalMap.put("talendStats_FILE_FILE_NAME",
						fileName_talendStats_FILE);

				resourceMap.put("finish_talendStats_FILE", true);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("Main" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("talendStats_FILE", true);
				end_Hash.put("talendStats_FILE", System.currentTimeMillis());

				/**
				 * [talendStats_FILE end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [talendStats_STATS finally ] start
				 */

				currentVirtualComponent = "talendStats_STATS";

				currentComponent = "talendStats_STATS";

				/**
				 * [talendStats_STATS finally ] stop
				 */

				/**
				 * [talendStats_FILE finally ] start
				 */

				currentVirtualComponent = "talendStats_FILE";

				currentComponent = "talendStats_FILE";

				if (resourceMap.get("finish_talendStats_FILE") == null) {

					java.io.Writer outtalendStats_FILE = (java.io.Writer) resourceMap
							.get("out_talendStats_FILE");
					if (outtalendStats_FILE != null) {
						outtalendStats_FILE.flush();
						outtalendStats_FILE.close();
					}

				}

				/**
				 * [talendStats_FILE finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("talendStats_STATS_SUBPROCESS_STATE", 1);
	}

	public static class row_talendLogs_LOGSStruct implements
			routines.system.IPersistableRow<row_talendLogs_LOGSStruct> {
		final static byte[] commonByteArrayLock_ORDER_ETL_OMS_ETL_NO_PRODUCTS = new byte[0];
		static byte[] commonByteArray_ORDER_ETL_OMS_ETL_NO_PRODUCTS = new byte[0];

		public java.util.Date moment;

		public java.util.Date getMoment() {
			return this.moment;
		}

		public String pid;

		public String getPid() {
			return this.pid;
		}

		public String root_pid;

		public String getRoot_pid() {
			return this.root_pid;
		}

		public String father_pid;

		public String getFather_pid() {
			return this.father_pid;
		}

		public String project;

		public String getProject() {
			return this.project;
		}

		public String job;

		public String getJob() {
			return this.job;
		}

		public String context;

		public String getContext() {
			return this.context;
		}

		public Integer priority;

		public Integer getPriority() {
			return this.priority;
		}

		public String type;

		public String getType() {
			return this.type;
		}

		public String origin;

		public String getOrigin() {
			return this.origin;
		}

		public String message;

		public String getMessage() {
			return this.message;
		}

		public Integer code;

		public Integer getCode() {
			return this.code;
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ORDER_ETL_OMS_ETL_NO_PRODUCTS.length) {
					if (length < 1024
							&& commonByteArray_ORDER_ETL_OMS_ETL_NO_PRODUCTS.length == 0) {
						commonByteArray_ORDER_ETL_OMS_ETL_NO_PRODUCTS = new byte[1024];
					} else {
						commonByteArray_ORDER_ETL_OMS_ETL_NO_PRODUCTS = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ORDER_ETL_OMS_ETL_NO_PRODUCTS, 0,
						length);
				strReturn = new String(
						commonByteArray_ORDER_ETL_OMS_ETL_NO_PRODUCTS, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ORDER_ETL_OMS_ETL_NO_PRODUCTS) {

				try {

					int length = 0;

					this.moment = readDate(dis);

					this.pid = readString(dis);

					this.root_pid = readString(dis);

					this.father_pid = readString(dis);

					this.project = readString(dis);

					this.job = readString(dis);

					this.context = readString(dis);

					this.priority = readInteger(dis);

					this.type = readString(dis);

					this.origin = readString(dis);

					this.message = readString(dis);

					this.code = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.moment, dos);

				// String

				writeString(this.pid, dos);

				// String

				writeString(this.root_pid, dos);

				// String

				writeString(this.father_pid, dos);

				// String

				writeString(this.project, dos);

				// String

				writeString(this.job, dos);

				// String

				writeString(this.context, dos);

				// Integer

				writeInteger(this.priority, dos);

				// String

				writeString(this.type, dos);

				// String

				writeString(this.origin, dos);

				// String

				writeString(this.message, dos);

				// Integer

				writeInteger(this.code, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("moment=" + String.valueOf(moment));
			sb.append(",pid=" + pid);
			sb.append(",root_pid=" + root_pid);
			sb.append(",father_pid=" + father_pid);
			sb.append(",project=" + project);
			sb.append(",job=" + job);
			sb.append(",context=" + context);
			sb.append(",priority=" + String.valueOf(priority));
			sb.append(",type=" + type);
			sb.append(",origin=" + origin);
			sb.append(",message=" + message);
			sb.append(",code=" + String.valueOf(code));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row_talendLogs_LOGSStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void talendLogs_LOGSProcess(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("talendLogs_LOGS_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row_talendLogs_LOGSStruct row_talendLogs_LOGS = new row_talendLogs_LOGSStruct();

				/**
				 * [talendLogs_FILE begin ] start
				 */

				ok_Hash.put("talendLogs_FILE", false);
				start_Hash.put("talendLogs_FILE", System.currentTimeMillis());

				currentVirtualComponent = "talendLogs_FILE";

				currentComponent = "talendLogs_FILE";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("Main" + iterateId, 0, 0);

					}
				}

				int tos_count_talendLogs_FILE = 0;

				String fileName_talendLogs_FILE = "";
				fileName_talendLogs_FILE = (new java.io.File("/r01/log" + "/"
						+ "logs_file.txt")).getAbsolutePath()
						.replace("\\", "/");
				String fullName_talendLogs_FILE = null;
				String extension_talendLogs_FILE = null;
				String directory_talendLogs_FILE = null;
				if ((fileName_talendLogs_FILE.indexOf("/") != -1)) {
					if (fileName_talendLogs_FILE.lastIndexOf(".") < fileName_talendLogs_FILE
							.lastIndexOf("/")) {
						fullName_talendLogs_FILE = fileName_talendLogs_FILE;
						extension_talendLogs_FILE = "";
					} else {
						fullName_talendLogs_FILE = fileName_talendLogs_FILE
								.substring(0, fileName_talendLogs_FILE
										.lastIndexOf("."));
						extension_talendLogs_FILE = fileName_talendLogs_FILE
								.substring(fileName_talendLogs_FILE
										.lastIndexOf("."));
					}
					directory_talendLogs_FILE = fileName_talendLogs_FILE
							.substring(0,
									fileName_talendLogs_FILE.lastIndexOf("/"));
				} else {
					if (fileName_talendLogs_FILE.lastIndexOf(".") != -1) {
						fullName_talendLogs_FILE = fileName_talendLogs_FILE
								.substring(0, fileName_talendLogs_FILE
										.lastIndexOf("."));
						extension_talendLogs_FILE = fileName_talendLogs_FILE
								.substring(fileName_talendLogs_FILE
										.lastIndexOf("."));
					} else {
						fullName_talendLogs_FILE = fileName_talendLogs_FILE;
						extension_talendLogs_FILE = "";
					}
					directory_talendLogs_FILE = "";
				}
				boolean isFileGenerated_talendLogs_FILE = true;
				java.io.File filetalendLogs_FILE = new java.io.File(
						fileName_talendLogs_FILE);
				globalMap.put("talendLogs_FILE_FILE_NAME",
						fileName_talendLogs_FILE);
				if (filetalendLogs_FILE.exists()) {
					isFileGenerated_talendLogs_FILE = false;
				}
				int nb_line_talendLogs_FILE = 0;
				int splitedFileNo_talendLogs_FILE = 0;
				int currentRow_talendLogs_FILE = 0;

				final String OUT_DELIM_talendLogs_FILE = /**
				 * Start field
				 * talendLogs_FILE:FIELDSEPARATOR
				 */
				";"/** End field talendLogs_FILE:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_talendLogs_FILE = /**
				 * Start field
				 * talendLogs_FILE:ROWSEPARATOR
				 */
				"\n"/** End field talendLogs_FILE:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_talendLogs_FILE != null
						&& directory_talendLogs_FILE.trim().length() != 0) {
					java.io.File dir_talendLogs_FILE = new java.io.File(
							directory_talendLogs_FILE);
					if (!dir_talendLogs_FILE.exists()) {
						dir_talendLogs_FILE.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtalendLogs_FILE = null;

				outtalendLogs_FILE = new java.io.BufferedWriter(
						new java.io.OutputStreamWriter(
								new java.io.FileOutputStream(
										fileName_talendLogs_FILE, true),
								"UTF-8"));

				resourceMap.put("out_talendLogs_FILE", outtalendLogs_FILE);
				resourceMap.put("nb_line_talendLogs_FILE",
						nb_line_talendLogs_FILE);

				/**
				 * [talendLogs_FILE begin ] stop
				 */

				/**
				 * [talendLogs_LOGS begin ] start
				 */

				ok_Hash.put("talendLogs_LOGS", false);
				start_Hash.put("talendLogs_LOGS", System.currentTimeMillis());

				currentVirtualComponent = "talendLogs_LOGS";

				currentComponent = "talendLogs_LOGS";

				int tos_count_talendLogs_LOGS = 0;

				try {
					for (LogCatcherUtils.LogCatcherMessage lcm : talendLogs_LOGS
							.getMessages()) {
						row_talendLogs_LOGS.type = lcm.getType();
						row_talendLogs_LOGS.origin = (lcm.getOrigin() == null
								|| lcm.getOrigin().length() < 1 ? null : lcm
								.getOrigin());
						row_talendLogs_LOGS.priority = lcm.getPriority();
						row_talendLogs_LOGS.message = lcm.getMessage();
						row_talendLogs_LOGS.code = lcm.getCode();

						row_talendLogs_LOGS.moment = java.util.Calendar
								.getInstance().getTime();

						row_talendLogs_LOGS.pid = pid;
						row_talendLogs_LOGS.root_pid = rootPid;
						row_talendLogs_LOGS.father_pid = fatherPid;

						row_talendLogs_LOGS.project = projectName;
						row_talendLogs_LOGS.job = jobName;
						row_talendLogs_LOGS.context = contextStr;

						/**
						 * [talendLogs_LOGS begin ] stop
						 */

						/**
						 * [talendLogs_LOGS main ] start
						 */

						currentVirtualComponent = "talendLogs_LOGS";

						currentComponent = "talendLogs_LOGS";

						tos_count_talendLogs_LOGS++;

						/**
						 * [talendLogs_LOGS main ] stop
						 */

						/**
						 * [talendLogs_LOGS process_data_begin ] start
						 */

						currentVirtualComponent = "talendLogs_LOGS";

						currentComponent = "talendLogs_LOGS";

						/**
						 * [talendLogs_LOGS process_data_begin ] stop
						 */

						/**
						 * [talendLogs_FILE main ] start
						 */

						currentVirtualComponent = "talendLogs_FILE";

						currentComponent = "talendLogs_FILE";

						// Main
						// row_talendLogs_LOGS

						if (execStat) {
							runStat.updateStatOnConnection("Main" + iterateId,
									1, 1);
						}

						StringBuilder sb_talendLogs_FILE = new StringBuilder();
						if (row_talendLogs_LOGS.moment != null) {
							sb_talendLogs_FILE.append(FormatterUtils
									.format_Date(row_talendLogs_LOGS.moment,
											"yyyy-MM-dd HH:mm:ss"));
						}
						sb_talendLogs_FILE.append(OUT_DELIM_talendLogs_FILE);
						if (row_talendLogs_LOGS.pid != null) {
							sb_talendLogs_FILE.append(row_talendLogs_LOGS.pid);
						}
						sb_talendLogs_FILE.append(OUT_DELIM_talendLogs_FILE);
						if (row_talendLogs_LOGS.root_pid != null) {
							sb_talendLogs_FILE
									.append(row_talendLogs_LOGS.root_pid);
						}
						sb_talendLogs_FILE.append(OUT_DELIM_talendLogs_FILE);
						if (row_talendLogs_LOGS.father_pid != null) {
							sb_talendLogs_FILE
									.append(row_talendLogs_LOGS.father_pid);
						}
						sb_talendLogs_FILE.append(OUT_DELIM_talendLogs_FILE);
						if (row_talendLogs_LOGS.project != null) {
							sb_talendLogs_FILE
									.append(row_talendLogs_LOGS.project);
						}
						sb_talendLogs_FILE.append(OUT_DELIM_talendLogs_FILE);
						if (row_talendLogs_LOGS.job != null) {
							sb_talendLogs_FILE.append(row_talendLogs_LOGS.job);
						}
						sb_talendLogs_FILE.append(OUT_DELIM_talendLogs_FILE);
						if (row_talendLogs_LOGS.context != null) {
							sb_talendLogs_FILE
									.append(row_talendLogs_LOGS.context);
						}
						sb_talendLogs_FILE.append(OUT_DELIM_talendLogs_FILE);
						if (row_talendLogs_LOGS.priority != null) {
							sb_talendLogs_FILE
									.append(row_talendLogs_LOGS.priority);
						}
						sb_talendLogs_FILE.append(OUT_DELIM_talendLogs_FILE);
						if (row_talendLogs_LOGS.type != null) {
							sb_talendLogs_FILE.append(row_talendLogs_LOGS.type);
						}
						sb_talendLogs_FILE.append(OUT_DELIM_talendLogs_FILE);
						if (row_talendLogs_LOGS.origin != null) {
							sb_talendLogs_FILE
									.append(row_talendLogs_LOGS.origin);
						}
						sb_talendLogs_FILE.append(OUT_DELIM_talendLogs_FILE);
						if (row_talendLogs_LOGS.message != null) {
							sb_talendLogs_FILE
									.append(row_talendLogs_LOGS.message);
						}
						sb_talendLogs_FILE.append(OUT_DELIM_talendLogs_FILE);
						if (row_talendLogs_LOGS.code != null) {
							sb_talendLogs_FILE.append(row_talendLogs_LOGS.code);
						}
						sb_talendLogs_FILE
								.append(OUT_DELIM_ROWSEP_talendLogs_FILE);

						nb_line_talendLogs_FILE++;
						resourceMap.put("nb_line_talendLogs_FILE",
								nb_line_talendLogs_FILE);

						outtalendLogs_FILE.write(sb_talendLogs_FILE.toString());

						tos_count_talendLogs_FILE++;

						/**
						 * [talendLogs_FILE main ] stop
						 */

						/**
						 * [talendLogs_FILE process_data_begin ] start
						 */

						currentVirtualComponent = "talendLogs_FILE";

						currentComponent = "talendLogs_FILE";

						/**
						 * [talendLogs_FILE process_data_begin ] stop
						 */

						/**
						 * [talendLogs_FILE process_data_end ] start
						 */

						currentVirtualComponent = "talendLogs_FILE";

						currentComponent = "talendLogs_FILE";

						/**
						 * [talendLogs_FILE process_data_end ] stop
						 */

						/**
						 * [talendLogs_LOGS process_data_end ] start
						 */

						currentVirtualComponent = "talendLogs_LOGS";

						currentComponent = "talendLogs_LOGS";

						/**
						 * [talendLogs_LOGS process_data_end ] stop
						 */

						/**
						 * [talendLogs_LOGS end ] start
						 */

						currentVirtualComponent = "talendLogs_LOGS";

						currentComponent = "talendLogs_LOGS";

					}
				} catch (Exception e_talendLogs_LOGS) {
					logIgnoredError(
							String.format(
									"talendLogs_LOGS - tLogCatcher failed to process log message(s) due to internal error: %s",
									e_talendLogs_LOGS), e_talendLogs_LOGS);
				}

				ok_Hash.put("talendLogs_LOGS", true);
				end_Hash.put("talendLogs_LOGS", System.currentTimeMillis());

				/**
				 * [talendLogs_LOGS end ] stop
				 */

				/**
				 * [talendLogs_FILE end ] start
				 */

				currentVirtualComponent = "talendLogs_FILE";

				currentComponent = "talendLogs_FILE";

				if (outtalendLogs_FILE != null) {
					outtalendLogs_FILE.flush();
					outtalendLogs_FILE.close();
				}

				globalMap.put("talendLogs_FILE_NB_LINE",
						nb_line_talendLogs_FILE);
				globalMap.put("talendLogs_FILE_FILE_NAME",
						fileName_talendLogs_FILE);

				resourceMap.put("finish_talendLogs_FILE", true);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("Main" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("talendLogs_FILE", true);
				end_Hash.put("talendLogs_FILE", System.currentTimeMillis());

				/**
				 * [talendLogs_FILE end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [talendLogs_LOGS finally ] start
				 */

				currentVirtualComponent = "talendLogs_LOGS";

				currentComponent = "talendLogs_LOGS";

				/**
				 * [talendLogs_LOGS finally ] stop
				 */

				/**
				 * [talendLogs_FILE finally ] start
				 */

				currentVirtualComponent = "talendLogs_FILE";

				currentComponent = "talendLogs_FILE";

				if (resourceMap.get("finish_talendLogs_FILE") == null) {

					java.io.Writer outtalendLogs_FILE = (java.io.Writer) resourceMap
							.get("out_talendLogs_FILE");
					if (outtalendLogs_FILE != null) {
						outtalendLogs_FILE.flush();
						outtalendLogs_FILE.close();
					}

				}

				/**
				 * [talendLogs_FILE finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("talendLogs_LOGS_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final OMS_ETL_NO_PRODUCTS OMS_ETL_NO_PRODUCTSClass = new OMS_ETL_NO_PRODUCTS();

		int exitCode = OMS_ETL_NO_PRODUCTSClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket
				// can't open
				System.err.println("The statistics socket port " + portStats
						+ " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}

		try {
			// call job/subjob with an existing context, like:
			// --context=production. if without this parameter, there will use
			// the default context instead.
			java.io.InputStream inContext = OMS_ETL_NO_PRODUCTS.class
					.getClassLoader().getResourceAsStream(
							"order_etl/oms_etl_no_products_0_1/contexts/"
									+ contextStr + ".properties");
			if (inContext == null) {
				inContext = OMS_ETL_NO_PRODUCTS.class
						.getClassLoader()
						.getResourceAsStream(
								"config/contexts/" + contextStr + ".properties");
			}
			if (inContext != null) {
				// defaultProps is in order to keep the original context value
				defaultProps.load(inContext);
				inContext.close();
				context = new ContextProperties(defaultProps);
			} else if (!isDefaultContext) {
				// print info and job continue to run, for case: context_param
				// is not empty.
				System.err.println("Could not find the context " + contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param
							.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
			context.setContextType("data_warehouse_order_oms_host", "id_String");

			context.data_warehouse_order_oms_host = (String) context
					.getProperty("data_warehouse_order_oms_host");
			context.setContextType("data_warehouse_order_oms_port", "id_String");

			context.data_warehouse_order_oms_port = (String) context
					.getProperty("data_warehouse_order_oms_port");
			context.setContextType("data_warehouse_order_database", "id_String");

			context.data_warehouse_order_database = (String) context
					.getProperty("data_warehouse_order_database");
			context.setContextType("data_warehouse_order_schema", "id_String");

			context.data_warehouse_order_schema = (String) context
					.getProperty("data_warehouse_order_schema");
			context.setContextType("data_warehouse_order_username", "id_String");

			context.data_warehouse_order_username = (String) context
					.getProperty("data_warehouse_order_username");
			context.setContextType("data_warehouse_order_password", "id_String");

			context.data_warehouse_order_password = (String) context
					.getProperty("data_warehouse_order_password");
			context.setContextType("data_warehouse_order_dwos_host",
					"id_String");

			context.data_warehouse_order_dwos_host = (String) context
					.getProperty("data_warehouse_order_dwos_host");
			context.setContextType("data_warehouse_order_dwos_port",
					"id_String");

			context.data_warehouse_order_dwos_port = (String) context
					.getProperty("data_warehouse_order_dwos_port");
			context.setContextType("data_warehouse_order_dwos_database",
					"id_String");

			context.data_warehouse_order_dwos_database = (String) context
					.getProperty("data_warehouse_order_dwos_database");
			context.setContextType("data_warehouse_order_dwos_schema",
					"id_String");

			context.data_warehouse_order_dwos_schema = (String) context
					.getProperty("data_warehouse_order_dwos_schema");
			context.setContextType("data_warehouse_order_dwos_username",
					"id_String");

			context.data_warehouse_order_dwos_username = (String) context
					.getProperty("data_warehouse_order_dwos_username");
			context.setContextType("data_warehouse_order_dwos_password",
					"id_String");

			context.data_warehouse_order_dwos_password = (String) context
					.getProperty("data_warehouse_order_dwos_password");
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
			if (parentContextMap.containsKey("data_warehouse_order_oms_host")) {
				context.data_warehouse_order_oms_host = (String) parentContextMap
						.get("data_warehouse_order_oms_host");
			}
			if (parentContextMap.containsKey("data_warehouse_order_oms_port")) {
				context.data_warehouse_order_oms_port = (String) parentContextMap
						.get("data_warehouse_order_oms_port");
			}
			if (parentContextMap.containsKey("data_warehouse_order_database")) {
				context.data_warehouse_order_database = (String) parentContextMap
						.get("data_warehouse_order_database");
			}
			if (parentContextMap.containsKey("data_warehouse_order_schema")) {
				context.data_warehouse_order_schema = (String) parentContextMap
						.get("data_warehouse_order_schema");
			}
			if (parentContextMap.containsKey("data_warehouse_order_username")) {
				context.data_warehouse_order_username = (String) parentContextMap
						.get("data_warehouse_order_username");
			}
			if (parentContextMap.containsKey("data_warehouse_order_password")) {
				context.data_warehouse_order_password = (String) parentContextMap
						.get("data_warehouse_order_password");
			}
			if (parentContextMap.containsKey("data_warehouse_order_dwos_host")) {
				context.data_warehouse_order_dwos_host = (String) parentContextMap
						.get("data_warehouse_order_dwos_host");
			}
			if (parentContextMap.containsKey("data_warehouse_order_dwos_port")) {
				context.data_warehouse_order_dwos_port = (String) parentContextMap
						.get("data_warehouse_order_dwos_port");
			}
			if (parentContextMap
					.containsKey("data_warehouse_order_dwos_database")) {
				context.data_warehouse_order_dwos_database = (String) parentContextMap
						.get("data_warehouse_order_dwos_database");
			}
			if (parentContextMap
					.containsKey("data_warehouse_order_dwos_schema")) {
				context.data_warehouse_order_dwos_schema = (String) parentContextMap
						.get("data_warehouse_order_dwos_schema");
			}
			if (parentContextMap
					.containsKey("data_warehouse_order_dwos_username")) {
				context.data_warehouse_order_dwos_username = (String) parentContextMap
						.get("data_warehouse_order_dwos_username");
			}
			if (parentContextMap
					.containsKey("data_warehouse_order_dwos_password")) {
				context.data_warehouse_order_dwos_password = (String) parentContextMap
						.get("data_warehouse_order_dwos_password");
			}
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil
				.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName,
				jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName,
				parent_part_launcher, Thread.currentThread().getId() + "", "",
				"", "", "",
				resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();
		tStatCatcher_1.addMessage("begin");
		talendStats_STATS.addMessage("begin");

		this.globalResumeTicket = true;// to run tPreJob

		try {
			tStatCatcher_1Process(globalMap);
		} catch (java.lang.Exception e) {
			e.printStackTrace();
		}
		try {
			talendStats_STATSProcess(globalMap);
		} catch (java.lang.Exception e) {
			e.printStackTrace();
		}

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tFileInputProperties_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tFileInputProperties_1) {
			globalMap.put("tFileInputProperties_1_SUBPROCESS_STATE", -1);

			e_tFileInputProperties_1.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		if (false) {
			System.out
					.println((endUsedMemory - startUsedMemory)
							+ " bytes memory increase when running : OMS_ETL_NO_PRODUCTS");
		}
		tStatCatcher_1.addMessage(status == "" ? "end" : status,
				(end - startTime));
		try {
			tStatCatcher_1Process(globalMap);
		} catch (java.lang.Exception e) {
			e.printStackTrace();
		}
		talendStats_STATS.addMessage(status == "" ? "end" : status,
				(end - startTime));
		try {
			talendStats_STATSProcess(globalMap);
		} catch (java.lang.Exception e) {
			e.printStackTrace();
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher,
				Thread.currentThread().getId() + "", "", "" + returnCode, "",
				"", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {
		closeSqlDbConnections();

	}

	private void closeSqlDbConnections() {
		try {
			Object obj_conn;
			obj_conn = globalMap.remove("conn_tDBConnection_1");
			if (null != obj_conn) {
				((java.sql.Connection) obj_conn).close();
			}
		} catch (java.lang.Exception e) {
		}
	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
		connections.put("conn_tDBConnection_1",
				globalMap.get("conn_tDBConnection_1"));

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		}

	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" },
			{ "\\'", "\'" }, { "\\r", "\r" }, { "\\f", "\f" }, { "\\b", "\b" },
			{ "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex,
							index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left
			// into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 697209 characters generated by Talend Open Studio for Data Integration on the
 * December 18, 2019 4:29:47 PM EST
 ************************************************************************************************/

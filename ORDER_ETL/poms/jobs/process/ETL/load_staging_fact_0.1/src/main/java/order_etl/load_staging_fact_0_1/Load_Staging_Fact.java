// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package order_etl.load_staging_fact_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")
/**
 * Job: Load_Staging_Fact Purpose: <br>
 * Description: Loads the staging version of the fact table from the dimension tables <br>
 * @author gstreet@copyright.com
 * @version 7.1.1.20181026_1147
 * @status 
 */
public class Load_Staging_Fact implements TalendJob {

	protected static void logIgnoredError(String message, Throwable cause) {
		System.err.println(message);
		if (cause != null) {
			cause.printStackTrace();
		}

	}

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset
			.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

		}

	}

	private ContextProperties context = new ContextProperties();

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "Load_Staging_Fact";
	private final String projectName = "ORDER_ETL";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(
			java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources
				.entrySet()) {
			talendDataSources.put(
					dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry
							.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap
				.put(KEY_DB_DATASOURCES_RAW,
						new java.util.HashMap<String, javax.sql.DataSource>(
								dataSources));
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
			new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent,
				final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null
						&& currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE",
							getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE",
						getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent
						+ " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					Load_Staging_Fact.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass()
							.getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(Load_Staging_Fact.this, new Object[] { e,
									currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tDBConnection_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBConnection_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBConnection_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_2_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_3_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBConnection_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tDBConnection_1 begin ] start
				 */

				ok_Hash.put("tDBConnection_1", false);
				start_Hash.put("tDBConnection_1", System.currentTimeMillis());

				currentComponent = "tDBConnection_1";

				int tos_count_tDBConnection_1 = 0;

				String url_tDBConnection_1 = "jdbc:postgresql://" + "localhost"
						+ ":" + "5432" + "/" + "rup";
				String dbUser_tDBConnection_1 = "rup";

				final String decryptedPassword_tDBConnection_1 = routines.system.PasswordEncryptUtil
						.decryptPassword("544d653f2c2bdc61");
				String dbPwd_tDBConnection_1 = decryptedPassword_tDBConnection_1;

				java.sql.Connection conn_tDBConnection_1 = null;

				java.util.Enumeration<java.sql.Driver> drivers_tDBConnection_1 = java.sql.DriverManager
						.getDrivers();
				while (drivers_tDBConnection_1.hasMoreElements()) {
					java.sql.Driver d_tDBConnection_1 = drivers_tDBConnection_1
							.nextElement();
					java.util.List<String> driverList_tDBConnection_1 = java.util.Arrays
							.<String> asList("com.amazon.redshift.jdbc.Driver",
									"com.amazon.redshift.jdbc41.Driver");
					if (driverList_tDBConnection_1.contains(d_tDBConnection_1
							.getClass().getName())) {
						try {
							java.sql.DriverManager
									.deregisterDriver(d_tDBConnection_1);
							java.sql.DriverManager
									.registerDriver(d_tDBConnection_1);
						} catch (java.lang.Exception e_tDBConnection_1) {
							// do nothing
						}
					}
				}
				String driverClass_tDBConnection_1 = "org.postgresql.Driver";
				java.lang.Class.forName(driverClass_tDBConnection_1);

				conn_tDBConnection_1 = java.sql.DriverManager.getConnection(
						url_tDBConnection_1, dbUser_tDBConnection_1,
						dbPwd_tDBConnection_1);

				globalMap.put("conn_tDBConnection_1", conn_tDBConnection_1);
				if (null != conn_tDBConnection_1) {

					conn_tDBConnection_1.setAutoCommit(false);
				}

				globalMap.put("schema_" + "tDBConnection_1", "staging");

				globalMap
						.put("conn_" + "tDBConnection_1", conn_tDBConnection_1);

				/**
				 * [tDBConnection_1 begin ] stop
				 */

				/**
				 * [tDBConnection_1 main ] start
				 */

				currentComponent = "tDBConnection_1";

				tos_count_tDBConnection_1++;

				/**
				 * [tDBConnection_1 main ] stop
				 */

				/**
				 * [tDBConnection_1 process_data_begin ] start
				 */

				currentComponent = "tDBConnection_1";

				/**
				 * [tDBConnection_1 process_data_begin ] stop
				 */

				/**
				 * [tDBConnection_1 process_data_end ] start
				 */

				currentComponent = "tDBConnection_1";

				/**
				 * [tDBConnection_1 process_data_end ] stop
				 */

				/**
				 * [tDBConnection_1 end ] start
				 */

				currentComponent = "tDBConnection_1";

				ok_Hash.put("tDBConnection_1", true);
				end_Hash.put("tDBConnection_1", System.currentTimeMillis());

				/**
				 * [tDBConnection_1 end ] stop
				 */
			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tDBConnection_1:OnSubjobOk1",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk1", 0, "ok");
			}

			tDBInput_1Process(globalMap);

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tDBConnection_1:OnSubjobOk2",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk2", 0, "ok");
			}

			tDBInput_2Process(globalMap);

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tDBConnection_1:OnSubjobOk3",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk3", 0, "ok");
			}

			tDBInput_3Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBConnection_1 finally ] start
				 */

				currentComponent = "tDBConnection_1";

				/**
				 * [tDBConnection_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 1);
	}

	public static class row1Struct implements
			routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_ORDER_ETL_Load_Staging_Fact = new byte[0];
		static byte[] commonByteArray_ORDER_ETL_Load_Staging_Fact = new byte[0];

		public Long order_fact_uid;

		public Long getOrder_fact_uid() {
			return this.order_fact_uid;
		}

		public String licensee_dimension_uid;

		public String getLicensee_dimension_uid() {
			return this.licensee_dimension_uid;
		}

		public String invoice_dimension_uid;

		public String getInvoice_dimension_uid() {
			return this.invoice_dimension_uid;
		}

		public String product_dimension_uid;

		public String getProduct_dimension_uid() {
			return this.product_dimension_uid;
		}

		public String time_dimension_uid;

		public String getTime_dimension_uid() {
			return this.time_dimension_uid;
		}

		public String order_header_dimension_uid;

		public String getOrder_header_dimension_uid() {
			return this.order_header_dimension_uid;
		}

		public String order_detail_dimension_uid;

		public String getOrder_detail_dimension_uid() {
			return this.order_detail_dimension_uid;
		}

		public BigDecimal amount_of_tax;

		public BigDecimal getAmount_of_tax() {
			return this.amount_of_tax;
		}

		public BigDecimal rights_holder_payable_amount;

		public BigDecimal getRights_holder_payable_amount() {
			return this.rights_holder_payable_amount;
		}

		public BigDecimal rights_holder_payable_discount_amount;

		public BigDecimal getRights_holder_payable_discount_amount() {
			return this.rights_holder_payable_discount_amount;
		}

		public BigDecimal ccc_revenue_amount;

		public BigDecimal getCcc_revenue_amount() {
			return this.ccc_revenue_amount;
		}

		public BigDecimal ccc_revenue_discount_amount;

		public BigDecimal getCcc_revenue_discount_amount() {
			return this.ccc_revenue_discount_amount;
		}

		public BigDecimal transaction_fee_amount;

		public BigDecimal getTransaction_fee_amount() {
			return this.transaction_fee_amount;
		}

		public BigDecimal transaction_fee_discount_amount;

		public BigDecimal getTransaction_fee_discount_amount() {
			return this.transaction_fee_discount_amount;
		}

		public BigDecimal shipping_amount;

		public BigDecimal getShipping_amount() {
			return this.shipping_amount;
		}

		public BigDecimal total_amount;

		public BigDecimal getTotal_amount() {
			return this.total_amount;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ORDER_ETL_Load_Staging_Fact.length) {
					if (length < 1024
							&& commonByteArray_ORDER_ETL_Load_Staging_Fact.length == 0) {
						commonByteArray_ORDER_ETL_Load_Staging_Fact = new byte[1024];
					} else {
						commonByteArray_ORDER_ETL_Load_Staging_Fact = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ORDER_ETL_Load_Staging_Fact, 0,
						length);
				strReturn = new String(
						commonByteArray_ORDER_ETL_Load_Staging_Fact, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ORDER_ETL_Load_Staging_Fact) {

				try {

					int length = 0;

					length = dis.readByte();
					if (length == -1) {
						this.order_fact_uid = null;
					} else {
						this.order_fact_uid = dis.readLong();
					}

					this.licensee_dimension_uid = readString(dis);

					this.invoice_dimension_uid = readString(dis);

					this.product_dimension_uid = readString(dis);

					this.time_dimension_uid = readString(dis);

					this.order_header_dimension_uid = readString(dis);

					this.order_detail_dimension_uid = readString(dis);

					this.amount_of_tax = (BigDecimal) dis.readObject();

					this.rights_holder_payable_amount = (BigDecimal) dis
							.readObject();

					this.rights_holder_payable_discount_amount = (BigDecimal) dis
							.readObject();

					this.ccc_revenue_amount = (BigDecimal) dis.readObject();

					this.ccc_revenue_discount_amount = (BigDecimal) dis
							.readObject();

					this.transaction_fee_amount = (BigDecimal) dis.readObject();

					this.transaction_fee_discount_amount = (BigDecimal) dis
							.readObject();

					this.shipping_amount = (BigDecimal) dis.readObject();

					this.total_amount = (BigDecimal) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Long

				if (this.order_fact_uid == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.order_fact_uid);
				}

				// String

				writeString(this.licensee_dimension_uid, dos);

				// String

				writeString(this.invoice_dimension_uid, dos);

				// String

				writeString(this.product_dimension_uid, dos);

				// String

				writeString(this.time_dimension_uid, dos);

				// String

				writeString(this.order_header_dimension_uid, dos);

				// String

				writeString(this.order_detail_dimension_uid, dos);

				// BigDecimal

				dos.writeObject(this.amount_of_tax);

				// BigDecimal

				dos.writeObject(this.rights_holder_payable_amount);

				// BigDecimal

				dos.writeObject(this.rights_holder_payable_discount_amount);

				// BigDecimal

				dos.writeObject(this.ccc_revenue_amount);

				// BigDecimal

				dos.writeObject(this.ccc_revenue_discount_amount);

				// BigDecimal

				dos.writeObject(this.transaction_fee_amount);

				// BigDecimal

				dos.writeObject(this.transaction_fee_discount_amount);

				// BigDecimal

				dos.writeObject(this.shipping_amount);

				// BigDecimal

				dos.writeObject(this.total_amount);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("order_fact_uid=" + String.valueOf(order_fact_uid));
			sb.append(",licensee_dimension_uid=" + licensee_dimension_uid);
			sb.append(",invoice_dimension_uid=" + invoice_dimension_uid);
			sb.append(",product_dimension_uid=" + product_dimension_uid);
			sb.append(",time_dimension_uid=" + time_dimension_uid);
			sb.append(",order_header_dimension_uid="
					+ order_header_dimension_uid);
			sb.append(",order_detail_dimension_uid="
					+ order_detail_dimension_uid);
			sb.append(",amount_of_tax=" + String.valueOf(amount_of_tax));
			sb.append(",rights_holder_payable_amount="
					+ String.valueOf(rights_holder_payable_amount));
			sb.append(",rights_holder_payable_discount_amount="
					+ String.valueOf(rights_holder_payable_discount_amount));
			sb.append(",ccc_revenue_amount="
					+ String.valueOf(ccc_revenue_amount));
			sb.append(",ccc_revenue_discount_amount="
					+ String.valueOf(ccc_revenue_discount_amount));
			sb.append(",transaction_fee_amount="
					+ String.valueOf(transaction_fee_amount));
			sb.append(",transaction_fee_discount_amount="
					+ String.valueOf(transaction_fee_discount_amount));
			sb.append(",shipping_amount=" + String.valueOf(shipping_amount));
			sb.append(",total_amount=" + String.valueOf(total_amount));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row1Struct row1 = new row1Struct();

				/**
				 * [tDBOutput_1 begin ] start
				 */

				ok_Hash.put("tDBOutput_1", false);
				start_Hash.put("tDBOutput_1", System.currentTimeMillis());

				currentComponent = "tDBOutput_1";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row1" + iterateId, 0, 0);

					}
				}

				int tos_count_tDBOutput_1 = 0;

				String dbschema_tDBOutput_1 = null;
				dbschema_tDBOutput_1 = "staging";

				String tableName_tDBOutput_1 = null;
				if (dbschema_tDBOutput_1 == null
						|| dbschema_tDBOutput_1.trim().length() == 0) {
					tableName_tDBOutput_1 = "stg_order_fact";
				} else {
					tableName_tDBOutput_1 = dbschema_tDBOutput_1 + "\".\""
							+ "stg_order_fact";
				}

				int nb_line_tDBOutput_1 = 0;
				int nb_line_update_tDBOutput_1 = 0;
				int nb_line_inserted_tDBOutput_1 = 0;
				int nb_line_deleted_tDBOutput_1 = 0;
				int nb_line_rejected_tDBOutput_1 = 0;

				int deletedCount_tDBOutput_1 = 0;
				int updatedCount_tDBOutput_1 = 0;
				int insertedCount_tDBOutput_1 = 0;
				int rejectedCount_tDBOutput_1 = 0;

				boolean whetherReject_tDBOutput_1 = false;

				java.sql.Connection conn_tDBOutput_1 = null;
				String dbUser_tDBOutput_1 = null;

				java.lang.Class.forName("org.postgresql.Driver");
				String url_tDBOutput_1 = "jdbc:postgresql://" + "localhost"
						+ ":" + "5432" + "/" + "rup";
				dbUser_tDBOutput_1 = "rup";

				final String decryptedPassword_tDBOutput_1 = routines.system.PasswordEncryptUtil
						.decryptPassword("544d653f2c2bdc61");

				String dbPwd_tDBOutput_1 = decryptedPassword_tDBOutput_1;

				conn_tDBOutput_1 = java.sql.DriverManager.getConnection(
						url_tDBOutput_1, dbUser_tDBOutput_1, dbPwd_tDBOutput_1);

				resourceMap.put("conn_tDBOutput_1", conn_tDBOutput_1);
				conn_tDBOutput_1.setAutoCommit(false);
				int commitEvery_tDBOutput_1 = 10000;
				int commitCounter_tDBOutput_1 = 0;

				int batchSize_tDBOutput_1 = 10000;
				int batchSizeCounter_tDBOutput_1 = 0;

				int count_tDBOutput_1 = 0;
				String insert_tDBOutput_1 = "INSERT INTO \""
						+ tableName_tDBOutput_1
						+ "\" (\"order_fact_uid\",\"licensee_dimension_uid\",\"invoice_dimension_uid\",\"product_dimension_uid\",\"time_dimension_uid\",\"order_header_dimension_uid\",\"order_detail_dimension_uid\",\"amount_of_tax\",\"rights_holder_payable_amount\",\"rights_holder_payable_discount_amount\",\"ccc_revenue_amount\",\"ccc_revenue_discount_amount\",\"transaction_fee_amount\",\"transaction_fee_discount_amount\",\"shipping_amount\",\"total_amount\") VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

				java.sql.PreparedStatement pstmt_tDBOutput_1 = conn_tDBOutput_1
						.prepareStatement(insert_tDBOutput_1);
				resourceMap.put("pstmt_tDBOutput_1", pstmt_tDBOutput_1);

				/**
				 * [tDBOutput_1 begin ] stop
				 */

				/**
				 * [tDBInput_1 begin ] start
				 */

				ok_Hash.put("tDBInput_1", false);
				start_Hash.put("tDBInput_1", System.currentTimeMillis());

				currentComponent = "tDBInput_1";

				int tos_count_tDBInput_1 = 0;

				int nb_line_tDBInput_1 = 0;
				java.sql.Connection conn_tDBInput_1 = null;
				conn_tDBInput_1 = (java.sql.Connection) globalMap
						.get("conn_tDBConnection_1");

				java.sql.Statement stmt_tDBInput_1 = conn_tDBInput_1
						.createStatement();

				String dbquery_tDBInput_1 = "select nextval('staging.order_fact_seq') as order_fact_uid,\n       coalesce(org.pm_organization_uid, '0') as licensee_d"
						+ "imension_uid,\n       coalesce(inv.inv_invoice_uid, '0') as invoice_dimension_uid,\n       coalesce(p.pm_license_product_u"
						+ "id, '0') as product_dimension_uid,\n       coalesce(to_char(oh.order_capture_date, 'YYYYMMDD'), '0001-01-01 00:00:00') as"
						+ " time_dimension_uid,\n       coalesce(oh.om_order_header_uid, '0') as order_header_dimension_uid,\n       coalesce(o.om_or"
						+ "der_item_uid, '0') as order_detail_dimension_uid,       \n       if.tax_amount as amount_of_tax,\n       if.royalty_amount"
						+ " as rights_holder_payable_amount,\n       if.royalty_fee_discount as rights_holder_payable_discount_amount,\n       if.ccc"
						+ "_fee_amount as ccc_revenue_amount,\n       if.ccc_fee_discount as ccc_revenue_discount_amount,\n       if.licensee_fee_amo"
						+ "unt as transaction_fee_amount,\n       if.licensee_fee_discount as transaction_fee_discount_amount,\n       if.shipping_am"
						+ "ount as shipping_amount,\n       if.total_amount as total_amount\nfrom staging.stg_om_order_item o \n    left outer join st"
						+ "aging.stg_om_order_item_fees if on o.om_order_item_fees_uid = if.om_order_item_fees_uid \n    left outer join staging.stg"
						+ "_om_order_header oh on o.om_order_header_uid = oh.om_order_header_uid\n    left outer join staging.stg_pm_license_product"
						+ " p on o.product_name = p.pm_license_product_uid\n    left outer join staging.stg_inv_invoice inv on inv.inv_invoice_uid ="
						+ " oh.inv_invoice_uid\n    left outer join staging.stg_om_order_item_fees fees on fees.om_order_item_fees_uid = o.om_order_"
						+ "item_fees_uid\n    left outer join staging.stg_pm_organization org on org.pm_organization_uid = oh.organization_uid\nwhere"
						+ " oh.order_capture_date >= '2016-01-01'";

				globalMap.put("tDBInput_1_QUERY", dbquery_tDBInput_1);
				java.sql.ResultSet rs_tDBInput_1 = null;

				try {
					rs_tDBInput_1 = stmt_tDBInput_1
							.executeQuery(dbquery_tDBInput_1);
					java.sql.ResultSetMetaData rsmd_tDBInput_1 = rs_tDBInput_1
							.getMetaData();
					int colQtyInRs_tDBInput_1 = rsmd_tDBInput_1
							.getColumnCount();

					String tmpContent_tDBInput_1 = null;

					while (rs_tDBInput_1.next()) {
						nb_line_tDBInput_1++;

						if (colQtyInRs_tDBInput_1 < 1) {
							row1.order_fact_uid = null;
						} else {

							if (rs_tDBInput_1.getObject(1) != null) {
								row1.order_fact_uid = rs_tDBInput_1.getLong(1);
							} else {
								row1.order_fact_uid = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 2) {
							row1.licensee_dimension_uid = null;
						} else {

							row1.licensee_dimension_uid = routines.system.JDBCUtil
									.getString(rs_tDBInput_1, 2, false);
						}
						if (colQtyInRs_tDBInput_1 < 3) {
							row1.invoice_dimension_uid = null;
						} else {

							row1.invoice_dimension_uid = routines.system.JDBCUtil
									.getString(rs_tDBInput_1, 3, false);
						}
						if (colQtyInRs_tDBInput_1 < 4) {
							row1.product_dimension_uid = null;
						} else {

							row1.product_dimension_uid = routines.system.JDBCUtil
									.getString(rs_tDBInput_1, 4, false);
						}
						if (colQtyInRs_tDBInput_1 < 5) {
							row1.time_dimension_uid = null;
						} else {

							row1.time_dimension_uid = routines.system.JDBCUtil
									.getString(rs_tDBInput_1, 5, false);
						}
						if (colQtyInRs_tDBInput_1 < 6) {
							row1.order_header_dimension_uid = null;
						} else {

							row1.order_header_dimension_uid = routines.system.JDBCUtil
									.getString(rs_tDBInput_1, 6, false);
						}
						if (colQtyInRs_tDBInput_1 < 7) {
							row1.order_detail_dimension_uid = null;
						} else {

							row1.order_detail_dimension_uid = routines.system.JDBCUtil
									.getString(rs_tDBInput_1, 7, false);
						}
						if (colQtyInRs_tDBInput_1 < 8) {
							row1.amount_of_tax = null;
						} else {

							if (rs_tDBInput_1.getObject(8) != null) {
								row1.amount_of_tax = rs_tDBInput_1
										.getBigDecimal(8);
							} else {
								row1.amount_of_tax = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 9) {
							row1.rights_holder_payable_amount = null;
						} else {

							if (rs_tDBInput_1.getObject(9) != null) {
								row1.rights_holder_payable_amount = rs_tDBInput_1
										.getBigDecimal(9);
							} else {
								row1.rights_holder_payable_amount = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 10) {
							row1.rights_holder_payable_discount_amount = null;
						} else {

							if (rs_tDBInput_1.getObject(10) != null) {
								row1.rights_holder_payable_discount_amount = rs_tDBInput_1
										.getBigDecimal(10);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 11) {
							row1.ccc_revenue_amount = null;
						} else {

							if (rs_tDBInput_1.getObject(11) != null) {
								row1.ccc_revenue_amount = rs_tDBInput_1
										.getBigDecimal(11);
							} else {
								row1.ccc_revenue_amount = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 12) {
							row1.ccc_revenue_discount_amount = null;
						} else {

							if (rs_tDBInput_1.getObject(12) != null) {
								row1.ccc_revenue_discount_amount = rs_tDBInput_1
										.getBigDecimal(12);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 13) {
							row1.transaction_fee_amount = null;
						} else {

							if (rs_tDBInput_1.getObject(13) != null) {
								row1.transaction_fee_amount = rs_tDBInput_1
										.getBigDecimal(13);
							} else {
								row1.transaction_fee_amount = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 14) {
							row1.transaction_fee_discount_amount = null;
						} else {

							if (rs_tDBInput_1.getObject(14) != null) {
								row1.transaction_fee_discount_amount = rs_tDBInput_1
										.getBigDecimal(14);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 15) {
							row1.shipping_amount = null;
						} else {

							if (rs_tDBInput_1.getObject(15) != null) {
								row1.shipping_amount = rs_tDBInput_1
										.getBigDecimal(15);
							} else {
								row1.shipping_amount = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 16) {
							row1.total_amount = null;
						} else {

							if (rs_tDBInput_1.getObject(16) != null) {
								row1.total_amount = rs_tDBInput_1
										.getBigDecimal(16);
							} else {
								row1.total_amount = null;
							}
						}

						/**
						 * [tDBInput_1 begin ] stop
						 */

						/**
						 * [tDBInput_1 main ] start
						 */

						currentComponent = "tDBInput_1";

						tos_count_tDBInput_1++;

						/**
						 * [tDBInput_1 main ] stop
						 */

						/**
						 * [tDBInput_1 process_data_begin ] start
						 */

						currentComponent = "tDBInput_1";

						/**
						 * [tDBInput_1 process_data_begin ] stop
						 */

						/**
						 * [tDBOutput_1 main ] start
						 */

						currentComponent = "tDBOutput_1";

						// row1
						// row1

						if (execStat) {
							runStat.updateStatOnConnection("row1" + iterateId,
									1, 1);
						}

						whetherReject_tDBOutput_1 = false;
						if (row1.order_fact_uid == null) {
							pstmt_tDBOutput_1
									.setNull(1, java.sql.Types.INTEGER);
						} else {
							pstmt_tDBOutput_1.setLong(1, row1.order_fact_uid);
						}

						if (row1.licensee_dimension_uid == null) {
							pstmt_tDBOutput_1
									.setNull(2, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(2,
									row1.licensee_dimension_uid);
						}

						if (row1.invoice_dimension_uid == null) {
							pstmt_tDBOutput_1
									.setNull(3, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(3,
									row1.invoice_dimension_uid);
						}

						if (row1.product_dimension_uid == null) {
							pstmt_tDBOutput_1
									.setNull(4, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(4,
									row1.product_dimension_uid);
						}

						if (row1.time_dimension_uid == null) {
							pstmt_tDBOutput_1
									.setNull(5, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(5,
									row1.time_dimension_uid);
						}

						if (row1.order_header_dimension_uid == null) {
							pstmt_tDBOutput_1
									.setNull(6, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(6,
									row1.order_header_dimension_uid);
						}

						if (row1.order_detail_dimension_uid == null) {
							pstmt_tDBOutput_1
									.setNull(7, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(7,
									row1.order_detail_dimension_uid);
						}

						pstmt_tDBOutput_1.setBigDecimal(8, row1.amount_of_tax);

						pstmt_tDBOutput_1.setBigDecimal(9,
								row1.rights_holder_payable_amount);

						pstmt_tDBOutput_1.setBigDecimal(10,
								row1.rights_holder_payable_discount_amount);

						pstmt_tDBOutput_1.setBigDecimal(11,
								row1.ccc_revenue_amount);

						pstmt_tDBOutput_1.setBigDecimal(12,
								row1.ccc_revenue_discount_amount);

						pstmt_tDBOutput_1.setBigDecimal(13,
								row1.transaction_fee_amount);

						pstmt_tDBOutput_1.setBigDecimal(14,
								row1.transaction_fee_discount_amount);

						pstmt_tDBOutput_1.setBigDecimal(15,
								row1.shipping_amount);

						pstmt_tDBOutput_1.setBigDecimal(16, row1.total_amount);

						pstmt_tDBOutput_1.addBatch();
						nb_line_tDBOutput_1++;

						batchSizeCounter_tDBOutput_1++;

						if ((batchSize_tDBOutput_1 > 0)
								&& (batchSize_tDBOutput_1 <= batchSizeCounter_tDBOutput_1)) {
							try {
								int countSum_tDBOutput_1 = 0;

								for (int countEach_tDBOutput_1 : pstmt_tDBOutput_1
										.executeBatch()) {
									countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0
											: countEach_tDBOutput_1);
								}

								insertedCount_tDBOutput_1 += countSum_tDBOutput_1;

								batchSizeCounter_tDBOutput_1 = 0;
							} catch (java.sql.BatchUpdateException e_tDBOutput_1) {
								java.sql.SQLException ne_tDBOutput_1 = e_tDBOutput_1
										.getNextException(), sqle_tDBOutput_1 = null;
								String errormessage_tDBOutput_1;
								if (ne_tDBOutput_1 != null) {
									// build new exception to provide the
									// original cause
									sqle_tDBOutput_1 = new java.sql.SQLException(
											e_tDBOutput_1.getMessage()
													+ "\ncaused by: "
													+ ne_tDBOutput_1
															.getMessage(),
											ne_tDBOutput_1.getSQLState(),
											ne_tDBOutput_1.getErrorCode(),
											ne_tDBOutput_1);
									errormessage_tDBOutput_1 = sqle_tDBOutput_1
											.getMessage();
								} else {
									errormessage_tDBOutput_1 = e_tDBOutput_1
											.getMessage();
								}

								int countSum_tDBOutput_1 = 0;
								for (int countEach_tDBOutput_1 : e_tDBOutput_1
										.getUpdateCounts()) {
									countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0
											: countEach_tDBOutput_1);
								}

								insertedCount_tDBOutput_1 += countSum_tDBOutput_1;

								System.err.println(errormessage_tDBOutput_1);

							}
						}

						commitCounter_tDBOutput_1++;
						if (commitEvery_tDBOutput_1 <= commitCounter_tDBOutput_1) {
							if ((batchSize_tDBOutput_1 > 0)
									&& (batchSizeCounter_tDBOutput_1 > 0)) {
								try {
									int countSum_tDBOutput_1 = 0;

									for (int countEach_tDBOutput_1 : pstmt_tDBOutput_1
											.executeBatch()) {
										countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0
												: countEach_tDBOutput_1);
									}

									insertedCount_tDBOutput_1 += countSum_tDBOutput_1;

									batchSizeCounter_tDBOutput_1 = 0;
								} catch (java.sql.BatchUpdateException e_tDBOutput_1) {
									java.sql.SQLException ne_tDBOutput_1 = e_tDBOutput_1
											.getNextException(), sqle_tDBOutput_1 = null;
									String errormessage_tDBOutput_1;
									if (ne_tDBOutput_1 != null) {
										// build new exception to provide the
										// original cause
										sqle_tDBOutput_1 = new java.sql.SQLException(
												e_tDBOutput_1.getMessage()
														+ "\ncaused by: "
														+ ne_tDBOutput_1
																.getMessage(),
												ne_tDBOutput_1.getSQLState(),
												ne_tDBOutput_1.getErrorCode(),
												ne_tDBOutput_1);
										errormessage_tDBOutput_1 = sqle_tDBOutput_1
												.getMessage();
									} else {
										errormessage_tDBOutput_1 = e_tDBOutput_1
												.getMessage();
									}

									int countSum_tDBOutput_1 = 0;
									for (int countEach_tDBOutput_1 : e_tDBOutput_1
											.getUpdateCounts()) {
										countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0
												: countEach_tDBOutput_1);
									}

									insertedCount_tDBOutput_1 += countSum_tDBOutput_1;

									System.err
											.println(errormessage_tDBOutput_1);

								}
							}
							conn_tDBOutput_1.commit();

							commitCounter_tDBOutput_1 = 0;
						}

						tos_count_tDBOutput_1++;

						/**
						 * [tDBOutput_1 main ] stop
						 */

						/**
						 * [tDBOutput_1 process_data_begin ] start
						 */

						currentComponent = "tDBOutput_1";

						/**
						 * [tDBOutput_1 process_data_begin ] stop
						 */

						/**
						 * [tDBOutput_1 process_data_end ] start
						 */

						currentComponent = "tDBOutput_1";

						/**
						 * [tDBOutput_1 process_data_end ] stop
						 */

						/**
						 * [tDBInput_1 process_data_end ] start
						 */

						currentComponent = "tDBInput_1";

						/**
						 * [tDBInput_1 process_data_end ] stop
						 */

						/**
						 * [tDBInput_1 end ] start
						 */

						currentComponent = "tDBInput_1";

					}
				} finally {
					if (rs_tDBInput_1 != null) {
						rs_tDBInput_1.close();
					}
					if (stmt_tDBInput_1 != null) {
						stmt_tDBInput_1.close();
					}
				}
				globalMap.put("tDBInput_1_NB_LINE", nb_line_tDBInput_1);

				ok_Hash.put("tDBInput_1", true);
				end_Hash.put("tDBInput_1", System.currentTimeMillis());

				/**
				 * [tDBInput_1 end ] stop
				 */

				/**
				 * [tDBOutput_1 end ] start
				 */

				currentComponent = "tDBOutput_1";

				try {
					int countSum_tDBOutput_1 = 0;
					if (pstmt_tDBOutput_1 != null
							&& batchSizeCounter_tDBOutput_1 > 0) {

						for (int countEach_tDBOutput_1 : pstmt_tDBOutput_1
								.executeBatch()) {
							countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0
									: countEach_tDBOutput_1);
						}

					}

					insertedCount_tDBOutput_1 += countSum_tDBOutput_1;

				} catch (java.sql.BatchUpdateException e_tDBOutput_1) {
					java.sql.SQLException ne_tDBOutput_1 = e_tDBOutput_1
							.getNextException(), sqle_tDBOutput_1 = null;
					String errormessage_tDBOutput_1;
					if (ne_tDBOutput_1 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_1 = new java.sql.SQLException(
								e_tDBOutput_1.getMessage() + "\ncaused by: "
										+ ne_tDBOutput_1.getMessage(),
								ne_tDBOutput_1.getSQLState(),
								ne_tDBOutput_1.getErrorCode(), ne_tDBOutput_1);
						errormessage_tDBOutput_1 = sqle_tDBOutput_1
								.getMessage();
					} else {
						errormessage_tDBOutput_1 = e_tDBOutput_1.getMessage();
					}

					int countSum_tDBOutput_1 = 0;
					for (int countEach_tDBOutput_1 : e_tDBOutput_1
							.getUpdateCounts()) {
						countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0
								: countEach_tDBOutput_1);
					}

					insertedCount_tDBOutput_1 += countSum_tDBOutput_1;

					System.err.println(errormessage_tDBOutput_1);

				}

				if (pstmt_tDBOutput_1 != null) {

					pstmt_tDBOutput_1.close();
					resourceMap.remove("pstmt_tDBOutput_1");
				}
				resourceMap.put("statementClosed_tDBOutput_1", true);

				conn_tDBOutput_1.commit();

				conn_tDBOutput_1.close();

				resourceMap.put("finish_tDBOutput_1", true);

				nb_line_deleted_tDBOutput_1 = nb_line_deleted_tDBOutput_1
						+ deletedCount_tDBOutput_1;
				nb_line_update_tDBOutput_1 = nb_line_update_tDBOutput_1
						+ updatedCount_tDBOutput_1;
				nb_line_inserted_tDBOutput_1 = nb_line_inserted_tDBOutput_1
						+ insertedCount_tDBOutput_1;
				nb_line_rejected_tDBOutput_1 = nb_line_rejected_tDBOutput_1
						+ rejectedCount_tDBOutput_1;

				globalMap.put("tDBOutput_1_NB_LINE", nb_line_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_UPDATED",
						nb_line_update_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_INSERTED",
						nb_line_inserted_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_DELETED",
						nb_line_deleted_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_REJECTED",
						nb_line_rejected_tDBOutput_1);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row1" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tDBOutput_1", true);
				end_Hash.put("tDBOutput_1", System.currentTimeMillis());

				/**
				 * [tDBOutput_1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_1 finally ] start
				 */

				currentComponent = "tDBInput_1";

				/**
				 * [tDBInput_1 finally ] stop
				 */

				/**
				 * [tDBOutput_1 finally ] start
				 */

				currentComponent = "tDBOutput_1";

				try {
					if (resourceMap.get("statementClosed_tDBOutput_1") == null) {
						java.sql.PreparedStatement pstmtToClose_tDBOutput_1 = null;
						if ((pstmtToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmt_tDBOutput_1")) != null) {
							pstmtToClose_tDBOutput_1.close();
						}
					}
				} finally {
					if (resourceMap.get("finish_tDBOutput_1") == null) {
						java.sql.Connection ctn_tDBOutput_1 = null;
						if ((ctn_tDBOutput_1 = (java.sql.Connection) resourceMap
								.get("conn_tDBOutput_1")) != null) {
							try {
								ctn_tDBOutput_1.close();
							} catch (java.sql.SQLException sqlEx_tDBOutput_1) {
								String errorMessage_tDBOutput_1 = "failed to close the connection in tDBOutput_1 :"
										+ sqlEx_tDBOutput_1.getMessage();
								System.err.println(errorMessage_tDBOutput_1);
							}
						}
					}
				}

				/**
				 * [tDBOutput_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 1);
	}

	public static class row2Struct implements
			routines.system.IPersistableRow<row2Struct> {
		final static byte[] commonByteArrayLock_ORDER_ETL_Load_Staging_Fact = new byte[0];
		static byte[] commonByteArray_ORDER_ETL_Load_Staging_Fact = new byte[0];

		public Long order_fact_uid;

		public Long getOrder_fact_uid() {
			return this.order_fact_uid;
		}

		public String licensee_dimension_uid;

		public String getLicensee_dimension_uid() {
			return this.licensee_dimension_uid;
		}

		public String invoice_dimension_uid;

		public String getInvoice_dimension_uid() {
			return this.invoice_dimension_uid;
		}

		public String product_dimension_uid;

		public String getProduct_dimension_uid() {
			return this.product_dimension_uid;
		}

		public String time_dimension_uid;

		public String getTime_dimension_uid() {
			return this.time_dimension_uid;
		}

		public BigDecimal order_header_dimension_uid;

		public BigDecimal getOrder_header_dimension_uid() {
			return this.order_header_dimension_uid;
		}

		public String order_detail_dimension_uid;

		public String getOrder_detail_dimension_uid() {
			return this.order_detail_dimension_uid;
		}

		public BigDecimal amount_of_tax;

		public BigDecimal getAmount_of_tax() {
			return this.amount_of_tax;
		}

		public BigDecimal rights_holder_payable_amount;

		public BigDecimal getRights_holder_payable_amount() {
			return this.rights_holder_payable_amount;
		}

		public BigDecimal rights_holder_payable_discount_amount;

		public BigDecimal getRights_holder_payable_discount_amount() {
			return this.rights_holder_payable_discount_amount;
		}

		public BigDecimal ccc_revenue_amount;

		public BigDecimal getCcc_revenue_amount() {
			return this.ccc_revenue_amount;
		}

		public BigDecimal ccc_revenue_discount_amount;

		public BigDecimal getCcc_revenue_discount_amount() {
			return this.ccc_revenue_discount_amount;
		}

		public BigDecimal transaction_fee_amount;

		public BigDecimal getTransaction_fee_amount() {
			return this.transaction_fee_amount;
		}

		public BigDecimal transaction_fee_discount_amount;

		public BigDecimal getTransaction_fee_discount_amount() {
			return this.transaction_fee_discount_amount;
		}

		public BigDecimal shipping_amount;

		public BigDecimal getShipping_amount() {
			return this.shipping_amount;
		}

		public BigDecimal total_amount;

		public BigDecimal getTotal_amount() {
			return this.total_amount;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ORDER_ETL_Load_Staging_Fact.length) {
					if (length < 1024
							&& commonByteArray_ORDER_ETL_Load_Staging_Fact.length == 0) {
						commonByteArray_ORDER_ETL_Load_Staging_Fact = new byte[1024];
					} else {
						commonByteArray_ORDER_ETL_Load_Staging_Fact = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ORDER_ETL_Load_Staging_Fact, 0,
						length);
				strReturn = new String(
						commonByteArray_ORDER_ETL_Load_Staging_Fact, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ORDER_ETL_Load_Staging_Fact) {

				try {

					int length = 0;

					length = dis.readByte();
					if (length == -1) {
						this.order_fact_uid = null;
					} else {
						this.order_fact_uid = dis.readLong();
					}

					this.licensee_dimension_uid = readString(dis);

					this.invoice_dimension_uid = readString(dis);

					this.product_dimension_uid = readString(dis);

					this.time_dimension_uid = readString(dis);

					this.order_header_dimension_uid = (BigDecimal) dis
							.readObject();

					this.order_detail_dimension_uid = readString(dis);

					this.amount_of_tax = (BigDecimal) dis.readObject();

					this.rights_holder_payable_amount = (BigDecimal) dis
							.readObject();

					this.rights_holder_payable_discount_amount = (BigDecimal) dis
							.readObject();

					this.ccc_revenue_amount = (BigDecimal) dis.readObject();

					this.ccc_revenue_discount_amount = (BigDecimal) dis
							.readObject();

					this.transaction_fee_amount = (BigDecimal) dis.readObject();

					this.transaction_fee_discount_amount = (BigDecimal) dis
							.readObject();

					this.shipping_amount = (BigDecimal) dis.readObject();

					this.total_amount = (BigDecimal) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Long

				if (this.order_fact_uid == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.order_fact_uid);
				}

				// String

				writeString(this.licensee_dimension_uid, dos);

				// String

				writeString(this.invoice_dimension_uid, dos);

				// String

				writeString(this.product_dimension_uid, dos);

				// String

				writeString(this.time_dimension_uid, dos);

				// BigDecimal

				dos.writeObject(this.order_header_dimension_uid);

				// String

				writeString(this.order_detail_dimension_uid, dos);

				// BigDecimal

				dos.writeObject(this.amount_of_tax);

				// BigDecimal

				dos.writeObject(this.rights_holder_payable_amount);

				// BigDecimal

				dos.writeObject(this.rights_holder_payable_discount_amount);

				// BigDecimal

				dos.writeObject(this.ccc_revenue_amount);

				// BigDecimal

				dos.writeObject(this.ccc_revenue_discount_amount);

				// BigDecimal

				dos.writeObject(this.transaction_fee_amount);

				// BigDecimal

				dos.writeObject(this.transaction_fee_discount_amount);

				// BigDecimal

				dos.writeObject(this.shipping_amount);

				// BigDecimal

				dos.writeObject(this.total_amount);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("order_fact_uid=" + String.valueOf(order_fact_uid));
			sb.append(",licensee_dimension_uid=" + licensee_dimension_uid);
			sb.append(",invoice_dimension_uid=" + invoice_dimension_uid);
			sb.append(",product_dimension_uid=" + product_dimension_uid);
			sb.append(",time_dimension_uid=" + time_dimension_uid);
			sb.append(",order_header_dimension_uid="
					+ String.valueOf(order_header_dimension_uid));
			sb.append(",order_detail_dimension_uid="
					+ order_detail_dimension_uid);
			sb.append(",amount_of_tax=" + String.valueOf(amount_of_tax));
			sb.append(",rights_holder_payable_amount="
					+ String.valueOf(rights_holder_payable_amount));
			sb.append(",rights_holder_payable_discount_amount="
					+ String.valueOf(rights_holder_payable_discount_amount));
			sb.append(",ccc_revenue_amount="
					+ String.valueOf(ccc_revenue_amount));
			sb.append(",ccc_revenue_discount_amount="
					+ String.valueOf(ccc_revenue_discount_amount));
			sb.append(",transaction_fee_amount="
					+ String.valueOf(transaction_fee_amount));
			sb.append(",transaction_fee_discount_amount="
					+ String.valueOf(transaction_fee_discount_amount));
			sb.append(",shipping_amount=" + String.valueOf(shipping_amount));
			sb.append(",total_amount=" + String.valueOf(total_amount));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_2Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDBInput_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row2Struct row2 = new row2Struct();

				/**
				 * [tDBOutput_2 begin ] start
				 */

				ok_Hash.put("tDBOutput_2", false);
				start_Hash.put("tDBOutput_2", System.currentTimeMillis());

				currentComponent = "tDBOutput_2";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row2" + iterateId, 0, 0);

					}
				}

				int tos_count_tDBOutput_2 = 0;

				String dbschema_tDBOutput_2 = null;
				dbschema_tDBOutput_2 = "staging";

				String tableName_tDBOutput_2 = null;
				if (dbschema_tDBOutput_2 == null
						|| dbschema_tDBOutput_2.trim().length() == 0) {
					tableName_tDBOutput_2 = "stg_order_fact";
				} else {
					tableName_tDBOutput_2 = dbschema_tDBOutput_2 + "\".\""
							+ "stg_order_fact";
				}

				int nb_line_tDBOutput_2 = 0;
				int nb_line_update_tDBOutput_2 = 0;
				int nb_line_inserted_tDBOutput_2 = 0;
				int nb_line_deleted_tDBOutput_2 = 0;
				int nb_line_rejected_tDBOutput_2 = 0;

				int deletedCount_tDBOutput_2 = 0;
				int updatedCount_tDBOutput_2 = 0;
				int insertedCount_tDBOutput_2 = 0;
				int rejectedCount_tDBOutput_2 = 0;

				boolean whetherReject_tDBOutput_2 = false;

				java.sql.Connection conn_tDBOutput_2 = null;
				String dbUser_tDBOutput_2 = null;

				java.lang.Class.forName("org.postgresql.Driver");
				String url_tDBOutput_2 = "jdbc:postgresql://" + "localhost"
						+ ":" + "5432" + "/" + "rup";
				dbUser_tDBOutput_2 = "rup";

				final String decryptedPassword_tDBOutput_2 = routines.system.PasswordEncryptUtil
						.decryptPassword("544d653f2c2bdc61");

				String dbPwd_tDBOutput_2 = decryptedPassword_tDBOutput_2;

				conn_tDBOutput_2 = java.sql.DriverManager.getConnection(
						url_tDBOutput_2, dbUser_tDBOutput_2, dbPwd_tDBOutput_2);

				resourceMap.put("conn_tDBOutput_2", conn_tDBOutput_2);
				conn_tDBOutput_2.setAutoCommit(false);
				int commitEvery_tDBOutput_2 = 10000;
				int commitCounter_tDBOutput_2 = 0;

				int batchSize_tDBOutput_2 = 10000;
				int batchSizeCounter_tDBOutput_2 = 0;

				int count_tDBOutput_2 = 0;
				String insert_tDBOutput_2 = "INSERT INTO \""
						+ tableName_tDBOutput_2
						+ "\" (\"order_fact_uid\",\"licensee_dimension_uid\",\"invoice_dimension_uid\",\"product_dimension_uid\",\"time_dimension_uid\",\"order_header_dimension_uid\",\"order_detail_dimension_uid\",\"amount_of_tax\",\"rights_holder_payable_amount\",\"rights_holder_payable_discount_amount\",\"ccc_revenue_amount\",\"ccc_revenue_discount_amount\",\"transaction_fee_amount\",\"transaction_fee_discount_amount\",\"shipping_amount\",\"total_amount\") VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

				java.sql.PreparedStatement pstmt_tDBOutput_2 = conn_tDBOutput_2
						.prepareStatement(insert_tDBOutput_2);
				resourceMap.put("pstmt_tDBOutput_2", pstmt_tDBOutput_2);

				/**
				 * [tDBOutput_2 begin ] stop
				 */

				/**
				 * [tDBInput_2 begin ] start
				 */

				ok_Hash.put("tDBInput_2", false);
				start_Hash.put("tDBInput_2", System.currentTimeMillis());

				currentComponent = "tDBInput_2";

				int tos_count_tDBInput_2 = 0;

				int nb_line_tDBInput_2 = 0;
				java.sql.Connection conn_tDBInput_2 = null;
				conn_tDBInput_2 = (java.sql.Connection) globalMap
						.get("conn_tDBConnection_1");

				java.sql.Statement stmt_tDBInput_2 = conn_tDBInput_2
						.createStatement();

				String dbquery_tDBInput_2 = "select nextval('staging.order_fact_seq') as order_fact_uid,\n       'lic.party_id' as licensee_dimension_uid, \n       in"
						+ "v.invoice_number as invoice_dimension_uid,\n       od.product_name as product_dimension_uid,\n       to_char(oh.order_date"
						+ ", 'YYYYMMDD') as time_dimension_uid,\n       oh.order_number as order_header_dimension_uid,\n       'od.line_id' as order_"
						+ "detail_dimension_uid, \n       inv.invoice_tax_amount as amount_of_tax,\n       inv.purchase_cost as rights_holder_payable"
						+ "_amount,\n       NULL::NUMERIC as rights_holder_payable_discount_amount,\n       inv.invoice_total_amount - inv.invoice_ta"
						+ "x_amount as ccc_revenue_amount,\n       NULL::NUMERIC as ccc_revenue_discount_amount,\n       NULL::NUMERIC as transaction"
						+ "_fee_amount,\n       NULL::NUMERIC as transaction_fee_discount_amount,\n       inv.invoice_ship_amount as shipping_amount,"
						+ "\n       inv.invoice_total_amount as total_amount\nFROM staging.stg_ebus_ccc_dm_order_headers oh\nJOIN staging.stg_ebus_ccc"
						+ "_dm_order_details od ON od.order_header_dimension_uid = oh.order_number\nJOIN staging.stg_ebus_ccc_dm_invoices inv ON inv"
						+ ".invoice_number = oh.order_invoice_uid\nJOIN staging.stg_ebus_ccc_dm_licensees lic ON lic.licensee_oracle_party_number = "
						+ "oh.licensee_org_party_number";

				globalMap.put("tDBInput_2_QUERY", dbquery_tDBInput_2);
				java.sql.ResultSet rs_tDBInput_2 = null;

				try {
					rs_tDBInput_2 = stmt_tDBInput_2
							.executeQuery(dbquery_tDBInput_2);
					java.sql.ResultSetMetaData rsmd_tDBInput_2 = rs_tDBInput_2
							.getMetaData();
					int colQtyInRs_tDBInput_2 = rsmd_tDBInput_2
							.getColumnCount();

					String tmpContent_tDBInput_2 = null;

					while (rs_tDBInput_2.next()) {
						nb_line_tDBInput_2++;

						if (colQtyInRs_tDBInput_2 < 1) {
							row2.order_fact_uid = null;
						} else {

							if (rs_tDBInput_2.getObject(1) != null) {
								row2.order_fact_uid = rs_tDBInput_2.getLong(1);
							} else {
								row2.order_fact_uid = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 2) {
							row2.licensee_dimension_uid = null;
						} else {

							row2.licensee_dimension_uid = routines.system.JDBCUtil
									.getString(rs_tDBInput_2, 2, false);
						}
						if (colQtyInRs_tDBInput_2 < 3) {
							row2.invoice_dimension_uid = null;
						} else {

							row2.invoice_dimension_uid = routines.system.JDBCUtil
									.getString(rs_tDBInput_2, 3, false);
						}
						if (colQtyInRs_tDBInput_2 < 4) {
							row2.product_dimension_uid = null;
						} else {

							row2.product_dimension_uid = routines.system.JDBCUtil
									.getString(rs_tDBInput_2, 4, false);
						}
						if (colQtyInRs_tDBInput_2 < 5) {
							row2.time_dimension_uid = null;
						} else {

							row2.time_dimension_uid = routines.system.JDBCUtil
									.getString(rs_tDBInput_2, 5, false);
						}
						if (colQtyInRs_tDBInput_2 < 6) {
							row2.order_header_dimension_uid = null;
						} else {

							if (rs_tDBInput_2.getObject(6) != null) {
								row2.order_header_dimension_uid = rs_tDBInput_2
										.getBigDecimal(6);
							} else {
								row2.order_header_dimension_uid = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 7) {
							row2.order_detail_dimension_uid = null;
						} else {

							row2.order_detail_dimension_uid = routines.system.JDBCUtil
									.getString(rs_tDBInput_2, 7, false);
						}
						if (colQtyInRs_tDBInput_2 < 8) {
							row2.amount_of_tax = null;
						} else {

							if (rs_tDBInput_2.getObject(8) != null) {
								row2.amount_of_tax = rs_tDBInput_2
										.getBigDecimal(8);
							} else {
								row2.amount_of_tax = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 9) {
							row2.rights_holder_payable_amount = null;
						} else {

							if (rs_tDBInput_2.getObject(9) != null) {
								row2.rights_holder_payable_amount = rs_tDBInput_2
										.getBigDecimal(9);
							} else {
								row2.rights_holder_payable_amount = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 10) {
							row2.rights_holder_payable_discount_amount = null;
						} else {

							if (rs_tDBInput_2.getObject(10) != null) {
								row2.rights_holder_payable_discount_amount = rs_tDBInput_2
										.getBigDecimal(10);
							} else {
								row2.rights_holder_payable_discount_amount = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 11) {
							row2.ccc_revenue_amount = null;
						} else {

							if (rs_tDBInput_2.getObject(11) != null) {
								row2.ccc_revenue_amount = rs_tDBInput_2
										.getBigDecimal(11);
							} else {
								row2.ccc_revenue_amount = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 12) {
							row2.ccc_revenue_discount_amount = null;
						} else {

							if (rs_tDBInput_2.getObject(12) != null) {
								row2.ccc_revenue_discount_amount = rs_tDBInput_2
										.getBigDecimal(12);
							} else {
								row2.ccc_revenue_discount_amount = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 13) {
							row2.transaction_fee_amount = null;
						} else {

							if (rs_tDBInput_2.getObject(13) != null) {
								row2.transaction_fee_amount = rs_tDBInput_2
										.getBigDecimal(13);
							} else {
								row2.transaction_fee_amount = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 14) {
							row2.transaction_fee_discount_amount = null;
						} else {

							if (rs_tDBInput_2.getObject(14) != null) {
								row2.transaction_fee_discount_amount = rs_tDBInput_2
										.getBigDecimal(14);
							} else {
								row2.transaction_fee_discount_amount = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 15) {
							row2.shipping_amount = null;
						} else {

							if (rs_tDBInput_2.getObject(15) != null) {
								row2.shipping_amount = rs_tDBInput_2
										.getBigDecimal(15);
							} else {
								row2.shipping_amount = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 16) {
							row2.total_amount = null;
						} else {

							if (rs_tDBInput_2.getObject(16) != null) {
								row2.total_amount = rs_tDBInput_2
										.getBigDecimal(16);
							} else {
								row2.total_amount = null;
							}
						}

						/**
						 * [tDBInput_2 begin ] stop
						 */

						/**
						 * [tDBInput_2 main ] start
						 */

						currentComponent = "tDBInput_2";

						tos_count_tDBInput_2++;

						/**
						 * [tDBInput_2 main ] stop
						 */

						/**
						 * [tDBInput_2 process_data_begin ] start
						 */

						currentComponent = "tDBInput_2";

						/**
						 * [tDBInput_2 process_data_begin ] stop
						 */

						/**
						 * [tDBOutput_2 main ] start
						 */

						currentComponent = "tDBOutput_2";

						// row2
						// row2

						if (execStat) {
							runStat.updateStatOnConnection("row2" + iterateId,
									1, 1);
						}

						whetherReject_tDBOutput_2 = false;
						if (row2.order_fact_uid == null) {
							pstmt_tDBOutput_2
									.setNull(1, java.sql.Types.INTEGER);
						} else {
							pstmt_tDBOutput_2.setLong(1, row2.order_fact_uid);
						}

						if (row2.licensee_dimension_uid == null) {
							pstmt_tDBOutput_2
									.setNull(2, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(2,
									row2.licensee_dimension_uid);
						}

						if (row2.invoice_dimension_uid == null) {
							pstmt_tDBOutput_2
									.setNull(3, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(3,
									row2.invoice_dimension_uid);
						}

						if (row2.product_dimension_uid == null) {
							pstmt_tDBOutput_2
									.setNull(4, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(4,
									row2.product_dimension_uid);
						}

						if (row2.time_dimension_uid == null) {
							pstmt_tDBOutput_2
									.setNull(5, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(5,
									row2.time_dimension_uid);
						}

						pstmt_tDBOutput_2.setBigDecimal(6,
								row2.order_header_dimension_uid);

						if (row2.order_detail_dimension_uid == null) {
							pstmt_tDBOutput_2
									.setNull(7, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(7,
									row2.order_detail_dimension_uid);
						}

						pstmt_tDBOutput_2.setBigDecimal(8, row2.amount_of_tax);

						pstmt_tDBOutput_2.setBigDecimal(9,
								row2.rights_holder_payable_amount);

						pstmt_tDBOutput_2.setBigDecimal(10,
								row2.rights_holder_payable_discount_amount);

						pstmt_tDBOutput_2.setBigDecimal(11,
								row2.ccc_revenue_amount);

						pstmt_tDBOutput_2.setBigDecimal(12,
								row2.ccc_revenue_discount_amount);

						pstmt_tDBOutput_2.setBigDecimal(13,
								row2.transaction_fee_amount);

						pstmt_tDBOutput_2.setBigDecimal(14,
								row2.transaction_fee_discount_amount);

						pstmt_tDBOutput_2.setBigDecimal(15,
								row2.shipping_amount);

						pstmt_tDBOutput_2.setBigDecimal(16, row2.total_amount);

						pstmt_tDBOutput_2.addBatch();
						nb_line_tDBOutput_2++;

						batchSizeCounter_tDBOutput_2++;

						if ((batchSize_tDBOutput_2 > 0)
								&& (batchSize_tDBOutput_2 <= batchSizeCounter_tDBOutput_2)) {
							try {
								int countSum_tDBOutput_2 = 0;

								for (int countEach_tDBOutput_2 : pstmt_tDBOutput_2
										.executeBatch()) {
									countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0
											: countEach_tDBOutput_2);
								}

								insertedCount_tDBOutput_2 += countSum_tDBOutput_2;

								batchSizeCounter_tDBOutput_2 = 0;
							} catch (java.sql.BatchUpdateException e_tDBOutput_2) {
								java.sql.SQLException ne_tDBOutput_2 = e_tDBOutput_2
										.getNextException(), sqle_tDBOutput_2 = null;
								String errormessage_tDBOutput_2;
								if (ne_tDBOutput_2 != null) {
									// build new exception to provide the
									// original cause
									sqle_tDBOutput_2 = new java.sql.SQLException(
											e_tDBOutput_2.getMessage()
													+ "\ncaused by: "
													+ ne_tDBOutput_2
															.getMessage(),
											ne_tDBOutput_2.getSQLState(),
											ne_tDBOutput_2.getErrorCode(),
											ne_tDBOutput_2);
									errormessage_tDBOutput_2 = sqle_tDBOutput_2
											.getMessage();
								} else {
									errormessage_tDBOutput_2 = e_tDBOutput_2
											.getMessage();
								}

								int countSum_tDBOutput_2 = 0;
								for (int countEach_tDBOutput_2 : e_tDBOutput_2
										.getUpdateCounts()) {
									countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0
											: countEach_tDBOutput_2);
								}

								insertedCount_tDBOutput_2 += countSum_tDBOutput_2;

								System.err.println(errormessage_tDBOutput_2);

							}
						}

						commitCounter_tDBOutput_2++;
						if (commitEvery_tDBOutput_2 <= commitCounter_tDBOutput_2) {
							if ((batchSize_tDBOutput_2 > 0)
									&& (batchSizeCounter_tDBOutput_2 > 0)) {
								try {
									int countSum_tDBOutput_2 = 0;

									for (int countEach_tDBOutput_2 : pstmt_tDBOutput_2
											.executeBatch()) {
										countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0
												: countEach_tDBOutput_2);
									}

									insertedCount_tDBOutput_2 += countSum_tDBOutput_2;

									batchSizeCounter_tDBOutput_2 = 0;
								} catch (java.sql.BatchUpdateException e_tDBOutput_2) {
									java.sql.SQLException ne_tDBOutput_2 = e_tDBOutput_2
											.getNextException(), sqle_tDBOutput_2 = null;
									String errormessage_tDBOutput_2;
									if (ne_tDBOutput_2 != null) {
										// build new exception to provide the
										// original cause
										sqle_tDBOutput_2 = new java.sql.SQLException(
												e_tDBOutput_2.getMessage()
														+ "\ncaused by: "
														+ ne_tDBOutput_2
																.getMessage(),
												ne_tDBOutput_2.getSQLState(),
												ne_tDBOutput_2.getErrorCode(),
												ne_tDBOutput_2);
										errormessage_tDBOutput_2 = sqle_tDBOutput_2
												.getMessage();
									} else {
										errormessage_tDBOutput_2 = e_tDBOutput_2
												.getMessage();
									}

									int countSum_tDBOutput_2 = 0;
									for (int countEach_tDBOutput_2 : e_tDBOutput_2
											.getUpdateCounts()) {
										countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0
												: countEach_tDBOutput_2);
									}

									insertedCount_tDBOutput_2 += countSum_tDBOutput_2;

									System.err
											.println(errormessage_tDBOutput_2);

								}
							}
							conn_tDBOutput_2.commit();

							commitCounter_tDBOutput_2 = 0;
						}

						tos_count_tDBOutput_2++;

						/**
						 * [tDBOutput_2 main ] stop
						 */

						/**
						 * [tDBOutput_2 process_data_begin ] start
						 */

						currentComponent = "tDBOutput_2";

						/**
						 * [tDBOutput_2 process_data_begin ] stop
						 */

						/**
						 * [tDBOutput_2 process_data_end ] start
						 */

						currentComponent = "tDBOutput_2";

						/**
						 * [tDBOutput_2 process_data_end ] stop
						 */

						/**
						 * [tDBInput_2 process_data_end ] start
						 */

						currentComponent = "tDBInput_2";

						/**
						 * [tDBInput_2 process_data_end ] stop
						 */

						/**
						 * [tDBInput_2 end ] start
						 */

						currentComponent = "tDBInput_2";

					}
				} finally {
					if (rs_tDBInput_2 != null) {
						rs_tDBInput_2.close();
					}
					if (stmt_tDBInput_2 != null) {
						stmt_tDBInput_2.close();
					}
				}
				globalMap.put("tDBInput_2_NB_LINE", nb_line_tDBInput_2);

				ok_Hash.put("tDBInput_2", true);
				end_Hash.put("tDBInput_2", System.currentTimeMillis());

				/**
				 * [tDBInput_2 end ] stop
				 */

				/**
				 * [tDBOutput_2 end ] start
				 */

				currentComponent = "tDBOutput_2";

				try {
					int countSum_tDBOutput_2 = 0;
					if (pstmt_tDBOutput_2 != null
							&& batchSizeCounter_tDBOutput_2 > 0) {

						for (int countEach_tDBOutput_2 : pstmt_tDBOutput_2
								.executeBatch()) {
							countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0
									: countEach_tDBOutput_2);
						}

					}

					insertedCount_tDBOutput_2 += countSum_tDBOutput_2;

				} catch (java.sql.BatchUpdateException e_tDBOutput_2) {
					java.sql.SQLException ne_tDBOutput_2 = e_tDBOutput_2
							.getNextException(), sqle_tDBOutput_2 = null;
					String errormessage_tDBOutput_2;
					if (ne_tDBOutput_2 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_2 = new java.sql.SQLException(
								e_tDBOutput_2.getMessage() + "\ncaused by: "
										+ ne_tDBOutput_2.getMessage(),
								ne_tDBOutput_2.getSQLState(),
								ne_tDBOutput_2.getErrorCode(), ne_tDBOutput_2);
						errormessage_tDBOutput_2 = sqle_tDBOutput_2
								.getMessage();
					} else {
						errormessage_tDBOutput_2 = e_tDBOutput_2.getMessage();
					}

					int countSum_tDBOutput_2 = 0;
					for (int countEach_tDBOutput_2 : e_tDBOutput_2
							.getUpdateCounts()) {
						countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0
								: countEach_tDBOutput_2);
					}

					insertedCount_tDBOutput_2 += countSum_tDBOutput_2;

					System.err.println(errormessage_tDBOutput_2);

				}

				if (pstmt_tDBOutput_2 != null) {

					pstmt_tDBOutput_2.close();
					resourceMap.remove("pstmt_tDBOutput_2");
				}
				resourceMap.put("statementClosed_tDBOutput_2", true);

				conn_tDBOutput_2.commit();

				conn_tDBOutput_2.close();

				resourceMap.put("finish_tDBOutput_2", true);

				nb_line_deleted_tDBOutput_2 = nb_line_deleted_tDBOutput_2
						+ deletedCount_tDBOutput_2;
				nb_line_update_tDBOutput_2 = nb_line_update_tDBOutput_2
						+ updatedCount_tDBOutput_2;
				nb_line_inserted_tDBOutput_2 = nb_line_inserted_tDBOutput_2
						+ insertedCount_tDBOutput_2;
				nb_line_rejected_tDBOutput_2 = nb_line_rejected_tDBOutput_2
						+ rejectedCount_tDBOutput_2;

				globalMap.put("tDBOutput_2_NB_LINE", nb_line_tDBOutput_2);
				globalMap.put("tDBOutput_2_NB_LINE_UPDATED",
						nb_line_update_tDBOutput_2);
				globalMap.put("tDBOutput_2_NB_LINE_INSERTED",
						nb_line_inserted_tDBOutput_2);
				globalMap.put("tDBOutput_2_NB_LINE_DELETED",
						nb_line_deleted_tDBOutput_2);
				globalMap.put("tDBOutput_2_NB_LINE_REJECTED",
						nb_line_rejected_tDBOutput_2);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row2" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tDBOutput_2", true);
				end_Hash.put("tDBOutput_2", System.currentTimeMillis());

				/**
				 * [tDBOutput_2 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_2 finally ] start
				 */

				currentComponent = "tDBInput_2";

				/**
				 * [tDBInput_2 finally ] stop
				 */

				/**
				 * [tDBOutput_2 finally ] start
				 */

				currentComponent = "tDBOutput_2";

				try {
					if (resourceMap.get("statementClosed_tDBOutput_2") == null) {
						java.sql.PreparedStatement pstmtToClose_tDBOutput_2 = null;
						if ((pstmtToClose_tDBOutput_2 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmt_tDBOutput_2")) != null) {
							pstmtToClose_tDBOutput_2.close();
						}
					}
				} finally {
					if (resourceMap.get("finish_tDBOutput_2") == null) {
						java.sql.Connection ctn_tDBOutput_2 = null;
						if ((ctn_tDBOutput_2 = (java.sql.Connection) resourceMap
								.get("conn_tDBOutput_2")) != null) {
							try {
								ctn_tDBOutput_2.close();
							} catch (java.sql.SQLException sqlEx_tDBOutput_2) {
								String errorMessage_tDBOutput_2 = "failed to close the connection in tDBOutput_2 :"
										+ sqlEx_tDBOutput_2.getMessage();
								System.err.println(errorMessage_tDBOutput_2);
							}
						}
					}
				}

				/**
				 * [tDBOutput_2 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_2_SUBPROCESS_STATE", 1);
	}

	public static class row3Struct implements
			routines.system.IPersistableRow<row3Struct> {
		final static byte[] commonByteArrayLock_ORDER_ETL_Load_Staging_Fact = new byte[0];
		static byte[] commonByteArray_ORDER_ETL_Load_Staging_Fact = new byte[0];

		public Long order_fact_uid;

		public Long getOrder_fact_uid() {
			return this.order_fact_uid;
		}

		public Long licensee_dimension_uid;

		public Long getLicensee_dimension_uid() {
			return this.licensee_dimension_uid;
		}

		public Integer invoice_dimension_uid;

		public Integer getInvoice_dimension_uid() {
			return this.invoice_dimension_uid;
		}

		public String product_dimension_uid;

		public String getProduct_dimension_uid() {
			return this.product_dimension_uid;
		}

		public String time_dimension_uid;

		public String getTime_dimension_uid() {
			return this.time_dimension_uid;
		}

		public String order_header_dimension_uid;

		public String getOrder_header_dimension_uid() {
			return this.order_header_dimension_uid;
		}

		public String order_detail_dimension_uid;

		public String getOrder_detail_dimension_uid() {
			return this.order_detail_dimension_uid;
		}

		public BigDecimal amount_of_tax;

		public BigDecimal getAmount_of_tax() {
			return this.amount_of_tax;
		}

		public BigDecimal rights_holder_payable_amount;

		public BigDecimal getRights_holder_payable_amount() {
			return this.rights_holder_payable_amount;
		}

		public BigDecimal rights_holder_payable_discount_amount;

		public BigDecimal getRights_holder_payable_discount_amount() {
			return this.rights_holder_payable_discount_amount;
		}

		public BigDecimal ccc_revenue_amount;

		public BigDecimal getCcc_revenue_amount() {
			return this.ccc_revenue_amount;
		}

		public BigDecimal ccc_revenue_discount_amount;

		public BigDecimal getCcc_revenue_discount_amount() {
			return this.ccc_revenue_discount_amount;
		}

		public BigDecimal transaction_fee_amount;

		public BigDecimal getTransaction_fee_amount() {
			return this.transaction_fee_amount;
		}

		public BigDecimal transaction_fee_discount_amount;

		public BigDecimal getTransaction_fee_discount_amount() {
			return this.transaction_fee_discount_amount;
		}

		public BigDecimal shipping_amount;

		public BigDecimal getShipping_amount() {
			return this.shipping_amount;
		}

		public BigDecimal total_amount;

		public BigDecimal getTotal_amount() {
			return this.total_amount;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ORDER_ETL_Load_Staging_Fact.length) {
					if (length < 1024
							&& commonByteArray_ORDER_ETL_Load_Staging_Fact.length == 0) {
						commonByteArray_ORDER_ETL_Load_Staging_Fact = new byte[1024];
					} else {
						commonByteArray_ORDER_ETL_Load_Staging_Fact = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ORDER_ETL_Load_Staging_Fact, 0,
						length);
				strReturn = new String(
						commonByteArray_ORDER_ETL_Load_Staging_Fact, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ORDER_ETL_Load_Staging_Fact) {

				try {

					int length = 0;

					length = dis.readByte();
					if (length == -1) {
						this.order_fact_uid = null;
					} else {
						this.order_fact_uid = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.licensee_dimension_uid = null;
					} else {
						this.licensee_dimension_uid = dis.readLong();
					}

					this.invoice_dimension_uid = readInteger(dis);

					this.product_dimension_uid = readString(dis);

					this.time_dimension_uid = readString(dis);

					this.order_header_dimension_uid = readString(dis);

					this.order_detail_dimension_uid = readString(dis);

					this.amount_of_tax = (BigDecimal) dis.readObject();

					this.rights_holder_payable_amount = (BigDecimal) dis
							.readObject();

					this.rights_holder_payable_discount_amount = (BigDecimal) dis
							.readObject();

					this.ccc_revenue_amount = (BigDecimal) dis.readObject();

					this.ccc_revenue_discount_amount = (BigDecimal) dis
							.readObject();

					this.transaction_fee_amount = (BigDecimal) dis.readObject();

					this.transaction_fee_discount_amount = (BigDecimal) dis
							.readObject();

					this.shipping_amount = (BigDecimal) dis.readObject();

					this.total_amount = (BigDecimal) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Long

				if (this.order_fact_uid == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.order_fact_uid);
				}

				// Long

				if (this.licensee_dimension_uid == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.licensee_dimension_uid);
				}

				// Integer

				writeInteger(this.invoice_dimension_uid, dos);

				// String

				writeString(this.product_dimension_uid, dos);

				// String

				writeString(this.time_dimension_uid, dos);

				// String

				writeString(this.order_header_dimension_uid, dos);

				// String

				writeString(this.order_detail_dimension_uid, dos);

				// BigDecimal

				dos.writeObject(this.amount_of_tax);

				// BigDecimal

				dos.writeObject(this.rights_holder_payable_amount);

				// BigDecimal

				dos.writeObject(this.rights_holder_payable_discount_amount);

				// BigDecimal

				dos.writeObject(this.ccc_revenue_amount);

				// BigDecimal

				dos.writeObject(this.ccc_revenue_discount_amount);

				// BigDecimal

				dos.writeObject(this.transaction_fee_amount);

				// BigDecimal

				dos.writeObject(this.transaction_fee_discount_amount);

				// BigDecimal

				dos.writeObject(this.shipping_amount);

				// BigDecimal

				dos.writeObject(this.total_amount);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("order_fact_uid=" + String.valueOf(order_fact_uid));
			sb.append(",licensee_dimension_uid="
					+ String.valueOf(licensee_dimension_uid));
			sb.append(",invoice_dimension_uid="
					+ String.valueOf(invoice_dimension_uid));
			sb.append(",product_dimension_uid=" + product_dimension_uid);
			sb.append(",time_dimension_uid=" + time_dimension_uid);
			sb.append(",order_header_dimension_uid="
					+ order_header_dimension_uid);
			sb.append(",order_detail_dimension_uid="
					+ order_detail_dimension_uid);
			sb.append(",amount_of_tax=" + String.valueOf(amount_of_tax));
			sb.append(",rights_holder_payable_amount="
					+ String.valueOf(rights_holder_payable_amount));
			sb.append(",rights_holder_payable_discount_amount="
					+ String.valueOf(rights_holder_payable_discount_amount));
			sb.append(",ccc_revenue_amount="
					+ String.valueOf(ccc_revenue_amount));
			sb.append(",ccc_revenue_discount_amount="
					+ String.valueOf(ccc_revenue_discount_amount));
			sb.append(",transaction_fee_amount="
					+ String.valueOf(transaction_fee_amount));
			sb.append(",transaction_fee_discount_amount="
					+ String.valueOf(transaction_fee_discount_amount));
			sb.append(",shipping_amount=" + String.valueOf(shipping_amount));
			sb.append(",total_amount=" + String.valueOf(total_amount));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_3Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDBInput_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row3Struct row3 = new row3Struct();

				/**
				 * [tDBOutput_3 begin ] start
				 */

				ok_Hash.put("tDBOutput_3", false);
				start_Hash.put("tDBOutput_3", System.currentTimeMillis());

				currentComponent = "tDBOutput_3";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row3" + iterateId, 0, 0);

					}
				}

				int tos_count_tDBOutput_3 = 0;

				String dbschema_tDBOutput_3 = null;
				dbschema_tDBOutput_3 = "staging";

				String tableName_tDBOutput_3 = null;
				if (dbschema_tDBOutput_3 == null
						|| dbschema_tDBOutput_3.trim().length() == 0) {
					tableName_tDBOutput_3 = "stg_order_fact";
				} else {
					tableName_tDBOutput_3 = dbschema_tDBOutput_3 + "\".\""
							+ "stg_order_fact";
				}

				int nb_line_tDBOutput_3 = 0;
				int nb_line_update_tDBOutput_3 = 0;
				int nb_line_inserted_tDBOutput_3 = 0;
				int nb_line_deleted_tDBOutput_3 = 0;
				int nb_line_rejected_tDBOutput_3 = 0;

				int deletedCount_tDBOutput_3 = 0;
				int updatedCount_tDBOutput_3 = 0;
				int insertedCount_tDBOutput_3 = 0;
				int rejectedCount_tDBOutput_3 = 0;

				boolean whetherReject_tDBOutput_3 = false;

				java.sql.Connection conn_tDBOutput_3 = null;
				String dbUser_tDBOutput_3 = null;

				java.lang.Class.forName("org.postgresql.Driver");
				String url_tDBOutput_3 = "jdbc:postgresql://" + "localhost"
						+ ":" + "5432" + "/" + "rup";
				dbUser_tDBOutput_3 = "rup";

				final String decryptedPassword_tDBOutput_3 = routines.system.PasswordEncryptUtil
						.decryptPassword("544d653f2c2bdc61");

				String dbPwd_tDBOutput_3 = decryptedPassword_tDBOutput_3;

				conn_tDBOutput_3 = java.sql.DriverManager.getConnection(
						url_tDBOutput_3, dbUser_tDBOutput_3, dbPwd_tDBOutput_3);

				resourceMap.put("conn_tDBOutput_3", conn_tDBOutput_3);
				conn_tDBOutput_3.setAutoCommit(false);
				int commitEvery_tDBOutput_3 = 10000;
				int commitCounter_tDBOutput_3 = 0;

				int batchSize_tDBOutput_3 = 10000;
				int batchSizeCounter_tDBOutput_3 = 0;

				int count_tDBOutput_3 = 0;
				String insert_tDBOutput_3 = "INSERT INTO \""
						+ tableName_tDBOutput_3
						+ "\" (\"order_fact_uid\",\"licensee_dimension_uid\",\"invoice_dimension_uid\",\"product_dimension_uid\",\"time_dimension_uid\",\"order_header_dimension_uid\",\"order_detail_dimension_uid\",\"amount_of_tax\",\"rights_holder_payable_amount\",\"rights_holder_payable_discount_amount\",\"ccc_revenue_amount\",\"ccc_revenue_discount_amount\",\"transaction_fee_amount\",\"transaction_fee_discount_amount\",\"shipping_amount\",\"total_amount\") VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

				java.sql.PreparedStatement pstmt_tDBOutput_3 = conn_tDBOutput_3
						.prepareStatement(insert_tDBOutput_3);
				resourceMap.put("pstmt_tDBOutput_3", pstmt_tDBOutput_3);

				/**
				 * [tDBOutput_3 begin ] stop
				 */

				/**
				 * [tDBInput_3 begin ] start
				 */

				ok_Hash.put("tDBInput_3", false);
				start_Hash.put("tDBInput_3", System.currentTimeMillis());

				currentComponent = "tDBInput_3";

				int tos_count_tDBInput_3 = 0;

				int nb_line_tDBInput_3 = 0;
				java.sql.Connection conn_tDBInput_3 = null;
				conn_tDBInput_3 = (java.sql.Connection) globalMap
						.get("conn_tDBConnection_1");

				java.sql.Statement stmt_tDBInput_3 = conn_tDBInput_3
						.createStatement();

				String dbquery_tDBInput_3 = "select nextval('staging.order_fact_seq') as order_fact_uid,\n       licensee_uid as licensee_dimension_uid,\n       invoi"
						+ "ce_number as invoice_dimension_uid,\n       product_code as product_dimension_uid,\n       coalesce(to_char(order_date, 'Y"
						+ "YYYMMDD'), '0001-01-01 00:00:00') as time_dimension_uid,\n       order_number as order_header_dimension_uid,\n       order"
						+ "_number as order_detail_dimension_uid,\n       tax_amount as amount_of_tax,\n       rights_holder_payable_amount as rights"
						+ "_holder_payable_amount,\n       NULL::NUMERIC as rights_holder_payable_discount_amount,\n       ccc_revenue_amount as ccc_"
						+ "revenue_amount,\n       discount_amount::NUMERIC as ccc_revenue_discount_amount,\n       transaction_fee_amount as transac"
						+ "tion_fee_amount,\n       NULL::NUMERIC as transaction_fee_discount_amount,\n       NULL::NUMERIC as shipping_amount,\n     "
						+ "  total_amount as total_amount\nfrom staging.stg_rl_v_finance_report v\nwhere v.order_date > '20160101'";

				globalMap.put("tDBInput_3_QUERY", dbquery_tDBInput_3);
				java.sql.ResultSet rs_tDBInput_3 = null;

				try {
					rs_tDBInput_3 = stmt_tDBInput_3
							.executeQuery(dbquery_tDBInput_3);
					java.sql.ResultSetMetaData rsmd_tDBInput_3 = rs_tDBInput_3
							.getMetaData();
					int colQtyInRs_tDBInput_3 = rsmd_tDBInput_3
							.getColumnCount();

					String tmpContent_tDBInput_3 = null;

					while (rs_tDBInput_3.next()) {
						nb_line_tDBInput_3++;

						if (colQtyInRs_tDBInput_3 < 1) {
							row3.order_fact_uid = null;
						} else {

							if (rs_tDBInput_3.getObject(1) != null) {
								row3.order_fact_uid = rs_tDBInput_3.getLong(1);
							} else {
								row3.order_fact_uid = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 2) {
							row3.licensee_dimension_uid = null;
						} else {

							if (rs_tDBInput_3.getObject(2) != null) {
								row3.licensee_dimension_uid = rs_tDBInput_3
										.getLong(2);
							} else {
								row3.licensee_dimension_uid = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 3) {
							row3.invoice_dimension_uid = null;
						} else {

							if (rs_tDBInput_3.getObject(3) != null) {
								row3.invoice_dimension_uid = rs_tDBInput_3
										.getInt(3);
							} else {
								row3.invoice_dimension_uid = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 4) {
							row3.product_dimension_uid = null;
						} else {

							row3.product_dimension_uid = routines.system.JDBCUtil
									.getString(rs_tDBInput_3, 4, false);
						}
						if (colQtyInRs_tDBInput_3 < 5) {
							row3.time_dimension_uid = null;
						} else {

							row3.time_dimension_uid = routines.system.JDBCUtil
									.getString(rs_tDBInput_3, 5, false);
						}
						if (colQtyInRs_tDBInput_3 < 6) {
							row3.order_header_dimension_uid = null;
						} else {

							row3.order_header_dimension_uid = routines.system.JDBCUtil
									.getString(rs_tDBInput_3, 6, false);
						}
						if (colQtyInRs_tDBInput_3 < 7) {
							row3.order_detail_dimension_uid = null;
						} else {

							row3.order_detail_dimension_uid = routines.system.JDBCUtil
									.getString(rs_tDBInput_3, 7, false);
						}
						if (colQtyInRs_tDBInput_3 < 8) {
							row3.amount_of_tax = null;
						} else {

							if (rs_tDBInput_3.getObject(8) != null) {
								row3.amount_of_tax = rs_tDBInput_3
										.getBigDecimal(8);
							} else {
								row3.amount_of_tax = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 9) {
							row3.rights_holder_payable_amount = null;
						} else {

							if (rs_tDBInput_3.getObject(9) != null) {
								row3.rights_holder_payable_amount = rs_tDBInput_3
										.getBigDecimal(9);
							} else {
								row3.rights_holder_payable_amount = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 10) {
							row3.rights_holder_payable_discount_amount = null;
						} else {

							if (rs_tDBInput_3.getObject(10) != null) {
								row3.rights_holder_payable_discount_amount = rs_tDBInput_3
										.getBigDecimal(10);
							} else {
								row3.rights_holder_payable_discount_amount = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 11) {
							row3.ccc_revenue_amount = null;
						} else {

							if (rs_tDBInput_3.getObject(11) != null) {
								row3.ccc_revenue_amount = rs_tDBInput_3
										.getBigDecimal(11);
							} else {
								row3.ccc_revenue_amount = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 12) {
							row3.ccc_revenue_discount_amount = null;
						} else {

							if (rs_tDBInput_3.getObject(12) != null) {
								row3.ccc_revenue_discount_amount = rs_tDBInput_3
										.getBigDecimal(12);
							} else {
								row3.ccc_revenue_discount_amount = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 13) {
							row3.transaction_fee_amount = null;
						} else {

							if (rs_tDBInput_3.getObject(13) != null) {
								row3.transaction_fee_amount = rs_tDBInput_3
										.getBigDecimal(13);
							} else {
								row3.transaction_fee_amount = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 14) {
							row3.transaction_fee_discount_amount = null;
						} else {

							if (rs_tDBInput_3.getObject(14) != null) {
								row3.transaction_fee_discount_amount = rs_tDBInput_3
										.getBigDecimal(14);
							} else {
								row3.transaction_fee_discount_amount = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 15) {
							row3.shipping_amount = null;
						} else {

							if (rs_tDBInput_3.getObject(15) != null) {
								row3.shipping_amount = rs_tDBInput_3
										.getBigDecimal(15);
							} else {
								row3.shipping_amount = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 16) {
							row3.total_amount = null;
						} else {

							if (rs_tDBInput_3.getObject(16) != null) {
								row3.total_amount = rs_tDBInput_3
										.getBigDecimal(16);
							} else {
								row3.total_amount = null;
							}
						}

						/**
						 * [tDBInput_3 begin ] stop
						 */

						/**
						 * [tDBInput_3 main ] start
						 */

						currentComponent = "tDBInput_3";

						tos_count_tDBInput_3++;

						/**
						 * [tDBInput_3 main ] stop
						 */

						/**
						 * [tDBInput_3 process_data_begin ] start
						 */

						currentComponent = "tDBInput_3";

						/**
						 * [tDBInput_3 process_data_begin ] stop
						 */

						/**
						 * [tDBOutput_3 main ] start
						 */

						currentComponent = "tDBOutput_3";

						// row3
						// row3

						if (execStat) {
							runStat.updateStatOnConnection("row3" + iterateId,
									1, 1);
						}

						whetherReject_tDBOutput_3 = false;
						if (row3.order_fact_uid == null) {
							pstmt_tDBOutput_3
									.setNull(1, java.sql.Types.INTEGER);
						} else {
							pstmt_tDBOutput_3.setLong(1, row3.order_fact_uid);
						}

						if (row3.licensee_dimension_uid == null) {
							pstmt_tDBOutput_3
									.setNull(2, java.sql.Types.INTEGER);
						} else {
							pstmt_tDBOutput_3.setLong(2,
									row3.licensee_dimension_uid);
						}

						if (row3.invoice_dimension_uid == null) {
							pstmt_tDBOutput_3
									.setNull(3, java.sql.Types.INTEGER);
						} else {
							pstmt_tDBOutput_3.setInt(3,
									row3.invoice_dimension_uid);
						}

						if (row3.product_dimension_uid == null) {
							pstmt_tDBOutput_3
									.setNull(4, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_3.setString(4,
									row3.product_dimension_uid);
						}

						if (row3.time_dimension_uid == null) {
							pstmt_tDBOutput_3
									.setNull(5, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_3.setString(5,
									row3.time_dimension_uid);
						}

						if (row3.order_header_dimension_uid == null) {
							pstmt_tDBOutput_3
									.setNull(6, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_3.setString(6,
									row3.order_header_dimension_uid);
						}

						if (row3.order_detail_dimension_uid == null) {
							pstmt_tDBOutput_3
									.setNull(7, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_3.setString(7,
									row3.order_detail_dimension_uid);
						}

						pstmt_tDBOutput_3.setBigDecimal(8, row3.amount_of_tax);

						pstmt_tDBOutput_3.setBigDecimal(9,
								row3.rights_holder_payable_amount);

						pstmt_tDBOutput_3.setBigDecimal(10,
								row3.rights_holder_payable_discount_amount);

						pstmt_tDBOutput_3.setBigDecimal(11,
								row3.ccc_revenue_amount);

						pstmt_tDBOutput_3.setBigDecimal(12,
								row3.ccc_revenue_discount_amount);

						pstmt_tDBOutput_3.setBigDecimal(13,
								row3.transaction_fee_amount);

						pstmt_tDBOutput_3.setBigDecimal(14,
								row3.transaction_fee_discount_amount);

						pstmt_tDBOutput_3.setBigDecimal(15,
								row3.shipping_amount);

						pstmt_tDBOutput_3.setBigDecimal(16, row3.total_amount);

						pstmt_tDBOutput_3.addBatch();
						nb_line_tDBOutput_3++;

						batchSizeCounter_tDBOutput_3++;

						if ((batchSize_tDBOutput_3 > 0)
								&& (batchSize_tDBOutput_3 <= batchSizeCounter_tDBOutput_3)) {
							try {
								int countSum_tDBOutput_3 = 0;

								for (int countEach_tDBOutput_3 : pstmt_tDBOutput_3
										.executeBatch()) {
									countSum_tDBOutput_3 += (countEach_tDBOutput_3 < 0 ? 0
											: countEach_tDBOutput_3);
								}

								insertedCount_tDBOutput_3 += countSum_tDBOutput_3;

								batchSizeCounter_tDBOutput_3 = 0;
							} catch (java.sql.BatchUpdateException e_tDBOutput_3) {
								java.sql.SQLException ne_tDBOutput_3 = e_tDBOutput_3
										.getNextException(), sqle_tDBOutput_3 = null;
								String errormessage_tDBOutput_3;
								if (ne_tDBOutput_3 != null) {
									// build new exception to provide the
									// original cause
									sqle_tDBOutput_3 = new java.sql.SQLException(
											e_tDBOutput_3.getMessage()
													+ "\ncaused by: "
													+ ne_tDBOutput_3
															.getMessage(),
											ne_tDBOutput_3.getSQLState(),
											ne_tDBOutput_3.getErrorCode(),
											ne_tDBOutput_3);
									errormessage_tDBOutput_3 = sqle_tDBOutput_3
											.getMessage();
								} else {
									errormessage_tDBOutput_3 = e_tDBOutput_3
											.getMessage();
								}

								int countSum_tDBOutput_3 = 0;
								for (int countEach_tDBOutput_3 : e_tDBOutput_3
										.getUpdateCounts()) {
									countSum_tDBOutput_3 += (countEach_tDBOutput_3 < 0 ? 0
											: countEach_tDBOutput_3);
								}

								insertedCount_tDBOutput_3 += countSum_tDBOutput_3;

								System.err.println(errormessage_tDBOutput_3);

							}
						}

						commitCounter_tDBOutput_3++;
						if (commitEvery_tDBOutput_3 <= commitCounter_tDBOutput_3) {
							if ((batchSize_tDBOutput_3 > 0)
									&& (batchSizeCounter_tDBOutput_3 > 0)) {
								try {
									int countSum_tDBOutput_3 = 0;

									for (int countEach_tDBOutput_3 : pstmt_tDBOutput_3
											.executeBatch()) {
										countSum_tDBOutput_3 += (countEach_tDBOutput_3 < 0 ? 0
												: countEach_tDBOutput_3);
									}

									insertedCount_tDBOutput_3 += countSum_tDBOutput_3;

									batchSizeCounter_tDBOutput_3 = 0;
								} catch (java.sql.BatchUpdateException e_tDBOutput_3) {
									java.sql.SQLException ne_tDBOutput_3 = e_tDBOutput_3
											.getNextException(), sqle_tDBOutput_3 = null;
									String errormessage_tDBOutput_3;
									if (ne_tDBOutput_3 != null) {
										// build new exception to provide the
										// original cause
										sqle_tDBOutput_3 = new java.sql.SQLException(
												e_tDBOutput_3.getMessage()
														+ "\ncaused by: "
														+ ne_tDBOutput_3
																.getMessage(),
												ne_tDBOutput_3.getSQLState(),
												ne_tDBOutput_3.getErrorCode(),
												ne_tDBOutput_3);
										errormessage_tDBOutput_3 = sqle_tDBOutput_3
												.getMessage();
									} else {
										errormessage_tDBOutput_3 = e_tDBOutput_3
												.getMessage();
									}

									int countSum_tDBOutput_3 = 0;
									for (int countEach_tDBOutput_3 : e_tDBOutput_3
											.getUpdateCounts()) {
										countSum_tDBOutput_3 += (countEach_tDBOutput_3 < 0 ? 0
												: countEach_tDBOutput_3);
									}

									insertedCount_tDBOutput_3 += countSum_tDBOutput_3;

									System.err
											.println(errormessage_tDBOutput_3);

								}
							}
							conn_tDBOutput_3.commit();

							commitCounter_tDBOutput_3 = 0;
						}

						tos_count_tDBOutput_3++;

						/**
						 * [tDBOutput_3 main ] stop
						 */

						/**
						 * [tDBOutput_3 process_data_begin ] start
						 */

						currentComponent = "tDBOutput_3";

						/**
						 * [tDBOutput_3 process_data_begin ] stop
						 */

						/**
						 * [tDBOutput_3 process_data_end ] start
						 */

						currentComponent = "tDBOutput_3";

						/**
						 * [tDBOutput_3 process_data_end ] stop
						 */

						/**
						 * [tDBInput_3 process_data_end ] start
						 */

						currentComponent = "tDBInput_3";

						/**
						 * [tDBInput_3 process_data_end ] stop
						 */

						/**
						 * [tDBInput_3 end ] start
						 */

						currentComponent = "tDBInput_3";

					}
				} finally {
					if (rs_tDBInput_3 != null) {
						rs_tDBInput_3.close();
					}
					if (stmt_tDBInput_3 != null) {
						stmt_tDBInput_3.close();
					}
				}
				globalMap.put("tDBInput_3_NB_LINE", nb_line_tDBInput_3);

				ok_Hash.put("tDBInput_3", true);
				end_Hash.put("tDBInput_3", System.currentTimeMillis());

				/**
				 * [tDBInput_3 end ] stop
				 */

				/**
				 * [tDBOutput_3 end ] start
				 */

				currentComponent = "tDBOutput_3";

				try {
					int countSum_tDBOutput_3 = 0;
					if (pstmt_tDBOutput_3 != null
							&& batchSizeCounter_tDBOutput_3 > 0) {

						for (int countEach_tDBOutput_3 : pstmt_tDBOutput_3
								.executeBatch()) {
							countSum_tDBOutput_3 += (countEach_tDBOutput_3 < 0 ? 0
									: countEach_tDBOutput_3);
						}

					}

					insertedCount_tDBOutput_3 += countSum_tDBOutput_3;

				} catch (java.sql.BatchUpdateException e_tDBOutput_3) {
					java.sql.SQLException ne_tDBOutput_3 = e_tDBOutput_3
							.getNextException(), sqle_tDBOutput_3 = null;
					String errormessage_tDBOutput_3;
					if (ne_tDBOutput_3 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_3 = new java.sql.SQLException(
								e_tDBOutput_3.getMessage() + "\ncaused by: "
										+ ne_tDBOutput_3.getMessage(),
								ne_tDBOutput_3.getSQLState(),
								ne_tDBOutput_3.getErrorCode(), ne_tDBOutput_3);
						errormessage_tDBOutput_3 = sqle_tDBOutput_3
								.getMessage();
					} else {
						errormessage_tDBOutput_3 = e_tDBOutput_3.getMessage();
					}

					int countSum_tDBOutput_3 = 0;
					for (int countEach_tDBOutput_3 : e_tDBOutput_3
							.getUpdateCounts()) {
						countSum_tDBOutput_3 += (countEach_tDBOutput_3 < 0 ? 0
								: countEach_tDBOutput_3);
					}

					insertedCount_tDBOutput_3 += countSum_tDBOutput_3;

					System.err.println(errormessage_tDBOutput_3);

				}

				if (pstmt_tDBOutput_3 != null) {

					pstmt_tDBOutput_3.close();
					resourceMap.remove("pstmt_tDBOutput_3");
				}
				resourceMap.put("statementClosed_tDBOutput_3", true);

				conn_tDBOutput_3.commit();

				conn_tDBOutput_3.close();

				resourceMap.put("finish_tDBOutput_3", true);

				nb_line_deleted_tDBOutput_3 = nb_line_deleted_tDBOutput_3
						+ deletedCount_tDBOutput_3;
				nb_line_update_tDBOutput_3 = nb_line_update_tDBOutput_3
						+ updatedCount_tDBOutput_3;
				nb_line_inserted_tDBOutput_3 = nb_line_inserted_tDBOutput_3
						+ insertedCount_tDBOutput_3;
				nb_line_rejected_tDBOutput_3 = nb_line_rejected_tDBOutput_3
						+ rejectedCount_tDBOutput_3;

				globalMap.put("tDBOutput_3_NB_LINE", nb_line_tDBOutput_3);
				globalMap.put("tDBOutput_3_NB_LINE_UPDATED",
						nb_line_update_tDBOutput_3);
				globalMap.put("tDBOutput_3_NB_LINE_INSERTED",
						nb_line_inserted_tDBOutput_3);
				globalMap.put("tDBOutput_3_NB_LINE_DELETED",
						nb_line_deleted_tDBOutput_3);
				globalMap.put("tDBOutput_3_NB_LINE_REJECTED",
						nb_line_rejected_tDBOutput_3);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row3" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tDBOutput_3", true);
				end_Hash.put("tDBOutput_3", System.currentTimeMillis());

				/**
				 * [tDBOutput_3 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_3 finally ] start
				 */

				currentComponent = "tDBInput_3";

				/**
				 * [tDBInput_3 finally ] stop
				 */

				/**
				 * [tDBOutput_3 finally ] start
				 */

				currentComponent = "tDBOutput_3";

				try {
					if (resourceMap.get("statementClosed_tDBOutput_3") == null) {
						java.sql.PreparedStatement pstmtToClose_tDBOutput_3 = null;
						if ((pstmtToClose_tDBOutput_3 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmt_tDBOutput_3")) != null) {
							pstmtToClose_tDBOutput_3.close();
						}
					}
				} finally {
					if (resourceMap.get("finish_tDBOutput_3") == null) {
						java.sql.Connection ctn_tDBOutput_3 = null;
						if ((ctn_tDBOutput_3 = (java.sql.Connection) resourceMap
								.get("conn_tDBOutput_3")) != null) {
							try {
								ctn_tDBOutput_3.close();
							} catch (java.sql.SQLException sqlEx_tDBOutput_3) {
								String errorMessage_tDBOutput_3 = "failed to close the connection in tDBOutput_3 :"
										+ sqlEx_tDBOutput_3.getMessage();
								System.err.println(errorMessage_tDBOutput_3);
							}
						}
					}
				}

				/**
				 * [tDBOutput_3 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_3_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final Load_Staging_Fact Load_Staging_FactClass = new Load_Staging_Fact();

		int exitCode = Load_Staging_FactClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket
				// can't open
				System.err.println("The statistics socket port " + portStats
						+ " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}

		try {
			// call job/subjob with an existing context, like:
			// --context=production. if without this parameter, there will use
			// the default context instead.
			java.io.InputStream inContext = Load_Staging_Fact.class
					.getClassLoader().getResourceAsStream(
							"order_etl/load_staging_fact_0_1/contexts/"
									+ contextStr + ".properties");
			if (inContext == null) {
				inContext = Load_Staging_Fact.class
						.getClassLoader()
						.getResourceAsStream(
								"config/contexts/" + contextStr + ".properties");
			}
			if (inContext != null) {
				// defaultProps is in order to keep the original context value
				defaultProps.load(inContext);
				inContext.close();
				context = new ContextProperties(defaultProps);
			} else if (!isDefaultContext) {
				// print info and job continue to run, for case: context_param
				// is not empty.
				System.err.println("Could not find the context " + contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param
							.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil
				.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName,
				jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName,
				parent_part_launcher, Thread.currentThread().getId() + "", "",
				"", "", "",
				resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tDBConnection_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tDBConnection_1) {
			globalMap.put("tDBConnection_1_SUBPROCESS_STATE", -1);

			e_tDBConnection_1.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		if (false) {
			System.out
					.println((endUsedMemory - startUsedMemory)
							+ " bytes memory increase when running : Load_Staging_Fact");
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher,
				Thread.currentThread().getId() + "", "", "" + returnCode, "",
				"", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {
		closeSqlDbConnections();

	}

	private void closeSqlDbConnections() {
		try {
			Object obj_conn;
			obj_conn = globalMap.remove("conn_tDBConnection_1");
			if (null != obj_conn) {
				((java.sql.Connection) obj_conn).close();
			}
		} catch (java.lang.Exception e) {
		}
	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
		connections.put("conn_tDBConnection_1",
				globalMap.get("conn_tDBConnection_1"));

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		}

	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" },
			{ "\\'", "\'" }, { "\\r", "\r" }, { "\\f", "\f" }, { "\\b", "\b" },
			{ "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex,
							index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left
			// into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 127099 characters generated by Talend Open Studio for Data Integration on the
 * March 21, 2019 11:30:05 AM EDT
 ************************************************************************************************/

// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package order_etl.old_rl_etl_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")
/**
 * Job: OLD_RL_ETL Purpose: <br>
 * Description: Extract data from RightsLink source tables and load them into staging tables, including dimension and fact tables. <br>
 * @author gstreet@copyright.com
 * @version 7.1.1.20181026_1147
 * @status 
 */
public class OLD_RL_ETL implements TalendJob {

	protected static void logIgnoredError(String message, Throwable cause) {
		System.err.println(message);
		if (cause != null) {
			cause.printStackTrace();
		}

	}

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset
			.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

			if (data_warehouse_order_rl_host != null) {

				this.setProperty("data_warehouse_order_rl_host",
						data_warehouse_order_rl_host.toString());

			}

			if (data_warehouse_order_rl_port != null) {

				this.setProperty("data_warehouse_order_rl_port",
						data_warehouse_order_rl_port.toString());

			}

			if (data_warehouse_order_rl_database != null) {

				this.setProperty("data_warehouse_order_rl_database",
						data_warehouse_order_rl_database.toString());

			}

			if (data_warehouse_order_rl_schema != null) {

				this.setProperty("data_warehouse_order_rl_schema",
						data_warehouse_order_rl_schema.toString());

			}

			if (data_warehouse_order_rl_username != null) {

				this.setProperty("data_warehouse_order_rl_username",
						data_warehouse_order_rl_username.toString());

			}

			if (data_warehouse_order_rl_password != null) {

				this.setProperty("data_warehouse_order_rl_password",
						data_warehouse_order_rl_password.toString());

			}

			if (data_warehouse_order_dwos_host != null) {

				this.setProperty("data_warehouse_order_dwos_host",
						data_warehouse_order_dwos_host.toString());

			}

			if (data_warehouse_order_dwos_port != null) {

				this.setProperty("data_warehouse_order_dwos_port",
						data_warehouse_order_dwos_port.toString());

			}

			if (data_warehouse_order_dwos_database != null) {

				this.setProperty("data_warehouse_order_dwos_database",
						data_warehouse_order_dwos_database.toString());

			}

			if (data_warehouse_order_dwos_schema != null) {

				this.setProperty("data_warehouse_order_dwos_schema",
						data_warehouse_order_dwos_schema.toString());

			}

			if (data_warehouse_order_dwos_username != null) {

				this.setProperty("data_warehouse_order_dwos_username",
						data_warehouse_order_dwos_username.toString());

			}

			if (data_warehouse_order_dwos_password != null) {

				this.setProperty("data_warehouse_order_dwos_password",
						data_warehouse_order_dwos_password.toString());

			}

		}

		public String data_warehouse_order_rl_host;

		public String getData_warehouse_order_rl_host() {
			return this.data_warehouse_order_rl_host;
		}

		public String data_warehouse_order_rl_port;

		public String getData_warehouse_order_rl_port() {
			return this.data_warehouse_order_rl_port;
		}

		public String data_warehouse_order_rl_database;

		public String getData_warehouse_order_rl_database() {
			return this.data_warehouse_order_rl_database;
		}

		public String data_warehouse_order_rl_schema;

		public String getData_warehouse_order_rl_schema() {
			return this.data_warehouse_order_rl_schema;
		}

		public String data_warehouse_order_rl_username;

		public String getData_warehouse_order_rl_username() {
			return this.data_warehouse_order_rl_username;
		}

		public String data_warehouse_order_rl_password;

		public String getData_warehouse_order_rl_password() {
			return this.data_warehouse_order_rl_password;
		}

		public String data_warehouse_order_dwos_host;

		public String getData_warehouse_order_dwos_host() {
			return this.data_warehouse_order_dwos_host;
		}

		public String data_warehouse_order_dwos_port;

		public String getData_warehouse_order_dwos_port() {
			return this.data_warehouse_order_dwos_port;
		}

		public String data_warehouse_order_dwos_database;

		public String getData_warehouse_order_dwos_database() {
			return this.data_warehouse_order_dwos_database;
		}

		public String data_warehouse_order_dwos_schema;

		public String getData_warehouse_order_dwos_schema() {
			return this.data_warehouse_order_dwos_schema;
		}

		public String data_warehouse_order_dwos_username;

		public String getData_warehouse_order_dwos_username() {
			return this.data_warehouse_order_dwos_username;
		}

		public String data_warehouse_order_dwos_password;

		public String getData_warehouse_order_dwos_password() {
			return this.data_warehouse_order_dwos_password;
		}
	}

	private ContextProperties context = new ContextProperties();

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "OLD_RL_ETL";
	private final String projectName = "ORDER_ETL";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(
			java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources
				.entrySet()) {
			talendDataSources.put(
					dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry
							.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap
				.put(KEY_DB_DATASOURCES_RAW,
						new java.util.HashMap<String, javax.sql.DataSource>(
								dataSources));
	}

	LogCatcherUtils tLogCatcher_1 = new LogCatcherUtils();
	LogCatcherUtils talendLogs_LOGS = new LogCatcherUtils();
	StatCatcherUtils tStatCatcher_1 = new StatCatcherUtils(
			"_IWFnUBEyEeqoBadiDj7_qw", "0.1");
	StatCatcherUtils talendStats_STATS = new StatCatcherUtils(
			"_IWFnUBEyEeqoBadiDj7_qw", "0.1");

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
			new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent,
				final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null
						&& currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE",
							getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE",
						getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent
						+ " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					OLD_RL_ETL.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass()
							.getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(OLD_RL_ETL.this, new Object[] { e,
									currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
						tLogCatcher_1.addMessage("Java Exception",
								currentComponent, 6, e.getClass().getName()
										+ ":" + e.getMessage(), 1);
						talendLogs_LOGS.addMessage("Java Exception",
								currentComponent, 6, e.getClass().getName()
										+ ":" + e.getMessage(), 1);
						try {
							tLogCatcher_1Process(globalMap);
						} finally {
							talendLogs_LOGSProcess(globalMap);
						}
					}
				} catch (TalendException e) {
					// do nothing

				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tFileInputProperties_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		talendStats_STATS.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		talendStats_STATSProcess(globalMap);

		status = "failure";

		tFileInputProperties_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tContextLoad_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		talendStats_STATS.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		talendStats_STATSProcess(globalMap);

		status = "failure";

		tFileInputProperties_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tDBConnection_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		talendStats_STATS.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		talendStats_STATSProcess(globalMap);

		status = "failure";

		tDBConnection_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		talendStats_STATS.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		talendStats_STATSProcess(globalMap);

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		talendStats_STATS.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		talendStats_STATSProcess(globalMap);

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		talendStats_STATS.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		talendStats_STATSProcess(globalMap);

		status = "failure";

		tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		talendStats_STATS.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		talendStats_STATSProcess(globalMap);

		status = "failure";

		tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		talendStats_STATS.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		talendStats_STATSProcess(globalMap);

		status = "failure";

		tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		talendStats_STATS.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		talendStats_STATSProcess(globalMap);

		status = "failure";

		tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		talendStats_STATS.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		talendStats_STATSProcess(globalMap);

		status = "failure";

		tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		talendStats_STATS.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		talendStats_STATSProcess(globalMap);

		status = "failure";

		tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_5_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		talendStats_STATS.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		talendStats_STATSProcess(globalMap);

		status = "failure";

		tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_5_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		talendStats_STATS.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		talendStats_STATSProcess(globalMap);

		status = "failure";

		tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_6_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		talendStats_STATS.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		talendStats_STATSProcess(globalMap);

		status = "failure";

		tDBInput_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_6_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		talendStats_STATS.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		talendStats_STATSProcess(globalMap);

		status = "failure";

		tDBInput_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_7_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		talendStats_STATS.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		talendStats_STATSProcess(globalMap);

		status = "failure";

		tDBInput_7_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_7_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		talendStats_STATS.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		talendStats_STATSProcess(globalMap);

		status = "failure";

		tDBInput_7_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogCatcher_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tStatCatcher_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tStatCatcher_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tStatCatcher_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void talendStats_STATS_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		talendStats_FILE_error(exception, errorComponent, globalMap);

	}

	public void talendStats_FILE_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		talendStats_STATS_onSubJobError(exception, errorComponent, globalMap);
	}

	public void talendLogs_LOGS_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		talendLogs_FILE_error(exception, errorComponent, globalMap);

	}

	public void talendLogs_FILE_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		talendLogs_LOGS_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputProperties_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBConnection_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_2_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_3_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_4_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_5_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_6_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_7_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tLogCatcher_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tStatCatcher_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void talendStats_STATS_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void talendLogs_LOGS_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public static class row17Struct implements
			routines.system.IPersistableRow<row17Struct> {
		final static byte[] commonByteArrayLock_ORDER_ETL_OLD_RL_ETL = new byte[0];
		static byte[] commonByteArray_ORDER_ETL_OLD_RL_ETL = new byte[0];

		public String key;

		public String getKey() {
			return this.key;
		}

		public String value;

		public String getValue() {
			return this.value;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ORDER_ETL_OLD_RL_ETL.length) {
					if (length < 1024
							&& commonByteArray_ORDER_ETL_OLD_RL_ETL.length == 0) {
						commonByteArray_ORDER_ETL_OLD_RL_ETL = new byte[1024];
					} else {
						commonByteArray_ORDER_ETL_OLD_RL_ETL = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ORDER_ETL_OLD_RL_ETL, 0, length);
				strReturn = new String(commonByteArray_ORDER_ETL_OLD_RL_ETL, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ORDER_ETL_OLD_RL_ETL) {

				try {

					int length = 0;

					this.key = readString(dis);

					this.value = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.key, dos);

				// String

				writeString(this.value, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("key=" + key);
			sb.append(",value=" + value);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row17Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputProperties_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputProperties_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row17Struct row17 = new row17Struct();

				/**
				 * [tContextLoad_1 begin ] start
				 */

				ok_Hash.put("tContextLoad_1", false);
				start_Hash.put("tContextLoad_1", System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tContextLoad_1");
				tStatCatcher_1Process(globalMap);

				talendStats_STATS.addMessage("begin", "tContextLoad_1");
				talendStats_STATSProcess(globalMap);

				currentComponent = "tContextLoad_1";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row17" + iterateId, 0,
								0);

					}
				}

				int tos_count_tContextLoad_1 = 0;

				java.util.List<String> assignList_tContextLoad_1 = new java.util.ArrayList<String>();
				java.util.List<String> newPropertyList_tContextLoad_1 = new java.util.ArrayList<String>();
				java.util.List<String> noAssignList_tContextLoad_1 = new java.util.ArrayList<String>();
				int nb_line_tContextLoad_1 = 0;

				/**
				 * [tContextLoad_1 begin ] stop
				 */

				/**
				 * [tFileInputProperties_1 begin ] start
				 */

				ok_Hash.put("tFileInputProperties_1", false);
				start_Hash.put("tFileInputProperties_1",
						System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tFileInputProperties_1");
				tStatCatcher_1Process(globalMap);

				talendStats_STATS.addMessage("begin", "tFileInputProperties_1");
				talendStats_STATSProcess(globalMap);

				currentComponent = "tFileInputProperties_1";

				int tos_count_tFileInputProperties_1 = 0;

				java.io.File file_tFileInputProperties_1 = new java.io.File(
						"/r01/rup-config/rup-env.properties");
				int nb_line_tFileInputProperties_1 = 0;
				java.util.Properties properties_tFileInputProperties_1 = new java.util.Properties();
				java.io.FileInputStream fis_tFileInputProperties_1 = new java.io.FileInputStream(
						file_tFileInputProperties_1);
				try {
					properties_tFileInputProperties_1
							.load(fis_tFileInputProperties_1);
					java.util.Enumeration enumeration_tFileInputProperties_1 = properties_tFileInputProperties_1
							.propertyNames();
					while (enumeration_tFileInputProperties_1.hasMoreElements()) {
						nb_line_tFileInputProperties_1++;
						row17.key = (String) enumeration_tFileInputProperties_1
								.nextElement();
						row17.value = (String) properties_tFileInputProperties_1
								.getProperty(row17.key);

						/**
						 * [tFileInputProperties_1 begin ] stop
						 */

						/**
						 * [tFileInputProperties_1 main ] start
						 */

						currentComponent = "tFileInputProperties_1";

						tos_count_tFileInputProperties_1++;

						/**
						 * [tFileInputProperties_1 main ] stop
						 */

						/**
						 * [tFileInputProperties_1 process_data_begin ] start
						 */

						currentComponent = "tFileInputProperties_1";

						/**
						 * [tFileInputProperties_1 process_data_begin ] stop
						 */

						/**
						 * [tContextLoad_1 main ] start
						 */

						currentComponent = "tContextLoad_1";

						// row17
						// row17

						if (execStat) {
							runStat.updateStatOnConnection("row17" + iterateId,
									1, 1);
						}

						// ////////////////////////
						String tmp_key_tContextLoad_1 = null;
						String key_tContextLoad_1 = null;
						if (row17.key != null) {
							tmp_key_tContextLoad_1 = row17.key.trim();
							if ((tmp_key_tContextLoad_1.startsWith("#") || tmp_key_tContextLoad_1
									.startsWith("!"))) {
								tmp_key_tContextLoad_1 = null;
							} else {
								row17.key = tmp_key_tContextLoad_1;
							}
						}
						if (row17.key != null) {
							key_tContextLoad_1 = row17.key;
						}
						String value_tContextLoad_1 = null;
						if (row17.value != null) {
							value_tContextLoad_1 = row17.value;
						}

						String currentValue_tContextLoad_1 = value_tContextLoad_1;

						if (tmp_key_tContextLoad_1 != null) {
							try {
								if (key_tContextLoad_1 != null
										&& "data_warehouse_order_rl_host"
												.equals(key_tContextLoad_1)) {
									context.data_warehouse_order_rl_host = value_tContextLoad_1;
								}

								if (key_tContextLoad_1 != null
										&& "data_warehouse_order_rl_port"
												.equals(key_tContextLoad_1)) {
									context.data_warehouse_order_rl_port = value_tContextLoad_1;
								}

								if (key_tContextLoad_1 != null
										&& "data_warehouse_order_rl_database"
												.equals(key_tContextLoad_1)) {
									context.data_warehouse_order_rl_database = value_tContextLoad_1;
								}

								if (key_tContextLoad_1 != null
										&& "data_warehouse_order_rl_schema"
												.equals(key_tContextLoad_1)) {
									context.data_warehouse_order_rl_schema = value_tContextLoad_1;
								}

								if (key_tContextLoad_1 != null
										&& "data_warehouse_order_rl_username"
												.equals(key_tContextLoad_1)) {
									context.data_warehouse_order_rl_username = value_tContextLoad_1;
								}

								if (key_tContextLoad_1 != null
										&& "data_warehouse_order_rl_password"
												.equals(key_tContextLoad_1)) {
									context.data_warehouse_order_rl_password = value_tContextLoad_1;
								}

								if (key_tContextLoad_1 != null
										&& "data_warehouse_order_dwos_host"
												.equals(key_tContextLoad_1)) {
									context.data_warehouse_order_dwos_host = value_tContextLoad_1;
								}

								if (key_tContextLoad_1 != null
										&& "data_warehouse_order_dwos_port"
												.equals(key_tContextLoad_1)) {
									context.data_warehouse_order_dwos_port = value_tContextLoad_1;
								}

								if (key_tContextLoad_1 != null
										&& "data_warehouse_order_dwos_database"
												.equals(key_tContextLoad_1)) {
									context.data_warehouse_order_dwos_database = value_tContextLoad_1;
								}

								if (key_tContextLoad_1 != null
										&& "data_warehouse_order_dwos_schema"
												.equals(key_tContextLoad_1)) {
									context.data_warehouse_order_dwos_schema = value_tContextLoad_1;
								}

								if (key_tContextLoad_1 != null
										&& "data_warehouse_order_dwos_username"
												.equals(key_tContextLoad_1)) {
									context.data_warehouse_order_dwos_username = value_tContextLoad_1;
								}

								if (key_tContextLoad_1 != null
										&& "data_warehouse_order_dwos_password"
												.equals(key_tContextLoad_1)) {
									context.data_warehouse_order_dwos_password = value_tContextLoad_1;
								}

								if (context.getProperty(key_tContextLoad_1) != null) {
									assignList_tContextLoad_1
											.add(key_tContextLoad_1);
								} else {
									newPropertyList_tContextLoad_1
											.add(key_tContextLoad_1);
								}
								if (value_tContextLoad_1 == null) {
									context.setProperty(key_tContextLoad_1, "");
								} else {
									context.setProperty(key_tContextLoad_1,
											value_tContextLoad_1);
								}
							} catch (java.lang.Exception e) {
								System.err
										.println("Setting a value for the key \""
												+ key_tContextLoad_1
												+ "\" has failed. Error message: "
												+ e.getMessage());
							}
							nb_line_tContextLoad_1++;
						}
						// ////////////////////////

						tos_count_tContextLoad_1++;

						/**
						 * [tContextLoad_1 main ] stop
						 */

						/**
						 * [tContextLoad_1 process_data_begin ] start
						 */

						currentComponent = "tContextLoad_1";

						/**
						 * [tContextLoad_1 process_data_begin ] stop
						 */

						/**
						 * [tContextLoad_1 process_data_end ] start
						 */

						currentComponent = "tContextLoad_1";

						/**
						 * [tContextLoad_1 process_data_end ] stop
						 */

						/**
						 * [tFileInputProperties_1 process_data_end ] start
						 */

						currentComponent = "tFileInputProperties_1";

						/**
						 * [tFileInputProperties_1 process_data_end ] stop
						 */

						/**
						 * [tFileInputProperties_1 end ] start
						 */

						currentComponent = "tFileInputProperties_1";

					}
				} finally {
					if (fis_tFileInputProperties_1 != null) {
						fis_tFileInputProperties_1.close();
					}
				}
				globalMap.put("tFileInputProperties_1_NB_LINE",
						nb_line_tFileInputProperties_1);

				ok_Hash.put("tFileInputProperties_1", true);
				end_Hash.put("tFileInputProperties_1",
						System.currentTimeMillis());

				tStatCatcher_1.addMessage(
						"end",
						"tFileInputProperties_1",
						end_Hash.get("tFileInputProperties_1")
								- start_Hash.get("tFileInputProperties_1"));
				tStatCatcher_1Process(globalMap);
				talendStats_STATS.addMessage(
						"end",
						"tFileInputProperties_1",
						end_Hash.get("tFileInputProperties_1")
								- start_Hash.get("tFileInputProperties_1"));
				talendStats_STATSProcess(globalMap);

				/**
				 * [tFileInputProperties_1 end ] stop
				 */

				/**
				 * [tContextLoad_1 end ] start
				 */

				currentComponent = "tContextLoad_1";

				java.util.Enumeration<?> enu_tContextLoad_1 = context
						.propertyNames();
				while (enu_tContextLoad_1.hasMoreElements()) {
					String key_tContextLoad_1 = (String) enu_tContextLoad_1
							.nextElement();
					if (!assignList_tContextLoad_1.contains(key_tContextLoad_1)
							&& !newPropertyList_tContextLoad_1
									.contains(key_tContextLoad_1)) {
						noAssignList_tContextLoad_1.add(key_tContextLoad_1);
					}
				}

				String newPropertyStr_tContextLoad_1 = newPropertyList_tContextLoad_1
						.toString();
				String newProperty_tContextLoad_1 = newPropertyStr_tContextLoad_1
						.substring(1,
								newPropertyStr_tContextLoad_1.length() - 1);

				String noAssignStr_tContextLoad_1 = noAssignList_tContextLoad_1
						.toString();
				String noAssign_tContextLoad_1 = noAssignStr_tContextLoad_1
						.substring(1, noAssignStr_tContextLoad_1.length() - 1);

				globalMap.put("tContextLoad_1_KEY_NOT_INCONTEXT",
						newProperty_tContextLoad_1);
				globalMap.put("tContextLoad_1_KEY_NOT_LOADED",
						noAssign_tContextLoad_1);

				globalMap.put("tContextLoad_1_NB_LINE", nb_line_tContextLoad_1);

				List<String> parametersToEncrypt_tContextLoad_1 = new java.util.ArrayList<String>();

				resumeUtil.addLog("NODE", "NODE:tContextLoad_1", "", Thread
						.currentThread().getId() + "", "", "", "", "",
						resumeUtil.convertToJsonText(context,
								parametersToEncrypt_tContextLoad_1));

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row17" + iterateId, 2,
								0);
					}
				}

				ok_Hash.put("tContextLoad_1", true);
				end_Hash.put("tContextLoad_1", System.currentTimeMillis());

				tStatCatcher_1.addMessage(
						"end",
						"tContextLoad_1",
						end_Hash.get("tContextLoad_1")
								- start_Hash.get("tContextLoad_1"));
				tStatCatcher_1Process(globalMap);
				talendStats_STATS.addMessage(
						"end",
						"tContextLoad_1",
						end_Hash.get("tContextLoad_1")
								- start_Hash.get("tContextLoad_1"));
				talendStats_STATSProcess(globalMap);
				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk5", 0, "ok");
				}
				tDBConnection_1Process(globalMap);

				/**
				 * [tContextLoad_1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputProperties_1 finally ] start
				 */

				currentComponent = "tFileInputProperties_1";

				/**
				 * [tFileInputProperties_1 finally ] stop
				 */

				/**
				 * [tContextLoad_1 finally ] start
				 */

				currentComponent = "tContextLoad_1";

				/**
				 * [tContextLoad_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputProperties_1_SUBPROCESS_STATE", 1);
	}

	public void tDBConnection_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tDBConnection_1 begin ] start
				 */

				ok_Hash.put("tDBConnection_1", false);
				start_Hash.put("tDBConnection_1", System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tDBConnection_1");
				tStatCatcher_1Process(globalMap);

				talendStats_STATS.addMessage("begin", "tDBConnection_1");
				talendStats_STATSProcess(globalMap);

				currentComponent = "tDBConnection_1";

				int tos_count_tDBConnection_1 = 0;

				String properties_tDBConnection_1 = "noDatetimeStringSync=true&useCursorFetch=true";
				if (properties_tDBConnection_1 == null
						|| properties_tDBConnection_1.trim().length() == 0) {
					properties_tDBConnection_1 += "rewriteBatchedStatements=true";
				} else if (properties_tDBConnection_1 != null
						&& !properties_tDBConnection_1
								.contains("rewriteBatchedStatements")) {
					properties_tDBConnection_1 += "&rewriteBatchedStatements=true";
				}

				String url_tDBConnection_1 = "jdbc:mysql://"
						+ context.data_warehouse_order_rl_host + ":"
						+ context.data_warehouse_order_rl_port + "/"
						+ context.data_warehouse_order_rl_database + "?"
						+ properties_tDBConnection_1;
				String dbUser_tDBConnection_1 = context.data_warehouse_order_rl_username;

				final String decryptedPassword_tDBConnection_1 = context.data_warehouse_order_rl_password;
				String dbPwd_tDBConnection_1 = decryptedPassword_tDBConnection_1;

				java.sql.Connection conn_tDBConnection_1 = null;

				String driverClass_tDBConnection_1 = "com.mysql.jdbc.Driver";
				java.lang.Class.forName(driverClass_tDBConnection_1);

				conn_tDBConnection_1 = java.sql.DriverManager.getConnection(
						url_tDBConnection_1, dbUser_tDBConnection_1,
						dbPwd_tDBConnection_1);

				globalMap.put("conn_tDBConnection_1", conn_tDBConnection_1);
				if (null != conn_tDBConnection_1) {

					conn_tDBConnection_1.setAutoCommit(false);
				}

				globalMap.put("conn_tDBConnection_1", conn_tDBConnection_1);

				globalMap.put("db_tDBConnection_1",
						context.data_warehouse_order_rl_database);

				/**
				 * [tDBConnection_1 begin ] stop
				 */

				/**
				 * [tDBConnection_1 main ] start
				 */

				currentComponent = "tDBConnection_1";

				tos_count_tDBConnection_1++;

				/**
				 * [tDBConnection_1 main ] stop
				 */

				/**
				 * [tDBConnection_1 process_data_begin ] start
				 */

				currentComponent = "tDBConnection_1";

				/**
				 * [tDBConnection_1 process_data_begin ] stop
				 */

				/**
				 * [tDBConnection_1 process_data_end ] start
				 */

				currentComponent = "tDBConnection_1";

				/**
				 * [tDBConnection_1 process_data_end ] stop
				 */

				/**
				 * [tDBConnection_1 end ] start
				 */

				currentComponent = "tDBConnection_1";

				ok_Hash.put("tDBConnection_1", true);
				end_Hash.put("tDBConnection_1", System.currentTimeMillis());

				tStatCatcher_1.addMessage(
						"end",
						"tDBConnection_1",
						end_Hash.get("tDBConnection_1")
								- start_Hash.get("tDBConnection_1"));
				tStatCatcher_1Process(globalMap);
				talendStats_STATS.addMessage(
						"end",
						"tDBConnection_1",
						end_Hash.get("tDBConnection_1")
								- start_Hash.get("tDBConnection_1"));
				talendStats_STATSProcess(globalMap);

				/**
				 * [tDBConnection_1 end ] stop
				 */
			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tDBConnection_1:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk1", 0, "ok");
			}

			tDBInput_1Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBConnection_1 finally ] start
				 */

				currentComponent = "tDBConnection_1";

				/**
				 * [tDBConnection_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 1);
	}

	public static class row1Struct implements
			routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_ORDER_ETL_OLD_RL_ETL = new byte[0];
		static byte[] commonByteArray_ORDER_ETL_OLD_RL_ETL = new byte[0];

		public String invoice_dimension_uid;

		public String getInvoice_dimension_uid() {
			return this.invoice_dimension_uid;
		}

		public String licensee_dimension_uid;

		public String getLicensee_dimension_uid() {
			return this.licensee_dimension_uid;
		}

		public String order_header_dimension_uid;

		public String getOrder_header_dimension_uid() {
			return this.order_header_dimension_uid;
		}

		public String order_detail_dimension_uid;

		public String getOrder_detail_dimension_uid() {
			return this.order_detail_dimension_uid;
		}

		public Integer time_dimension_uid;

		public Integer getTime_dimension_uid() {
			return this.time_dimension_uid;
		}

		public String tou_name;

		public String getTou_name() {
			return this.tou_name;
		}

		public int Invoice_no;

		public int getInvoice_no() {
			return this.Invoice_no;
		}

		public String company_name;

		public String getCompany_name() {
			return this.company_name;
		}

		public int customer_id;

		public int getCustomer_id() {
			return this.customer_id;
		}

		public java.util.Date create_date;

		public java.util.Date getCreate_date() {
			return this.create_date;
		}

		public java.util.Date update_date;

		public java.util.Date getUpdate_date() {
			return this.update_date;
		}

		public String invoice_status_desc;

		public String getInvoice_status_desc() {
			return this.invoice_status_desc;
		}

		public String payment_status;

		public String getPayment_status() {
			return this.payment_status;
		}

		public java.util.Date payment_date;

		public java.util.Date getPayment_date() {
			return this.payment_date;
		}

		public String iso_code;

		public String getIso_code() {
			return this.iso_code;
		}

		public double rate;

		public double getRate() {
			return this.rate;
		}

		public String company_name1;

		public String getCompany_name1() {
			return this.company_name1;
		}

		public String email_address;

		public String getEmail_address() {
			return this.email_address;
		}

		public String licensee_sub_type;

		public String getLicensee_sub_type() {
			return this.licensee_sub_type;
		}

		public String licensee_channel;

		public String getLicensee_channel() {
			return this.licensee_channel;
		}

		public String parent_organization_uid;

		public String getParent_organization_uid() {
			return this.parent_organization_uid;
		}

		public Long ccc_party_id;

		public Long getCcc_party_id() {
			return this.ccc_party_id;
		}

		public String vat_country_cd;

		public String getVat_country_cd() {
			return this.vat_country_cd;
		}

		public Long not_for_profit_flag;

		public Long getNot_for_profit_flag() {
			return this.not_for_profit_flag;
		}

		public long license_no;

		public long getLicense_no() {
			return this.license_no;
		}

		public Long ccc_party_id1;

		public Long getCcc_party_id1() {
			return this.ccc_party_id1;
		}

		public java.util.Date order_date;

		public java.util.Date getOrder_date() {
			return this.order_date;
		}

		public String channel;

		public String getChannel() {
			return this.channel;
		}

		public String country;

		public String getCountry() {
			return this.country;
		}

		public String organization_location_name;

		public String getOrganization_location_name() {
			return this.organization_location_name;
		}

		public String city;

		public String getCity() {
			return this.city;
		}

		public String state;

		public String getState() {
			return this.state;
		}

		public String postal_code;

		public String getPostal_code() {
			return this.postal_code;
		}

		public String country1;

		public String getCountry1() {
			return this.country1;
		}

		public String content_id;

		public String getContent_id() {
			return this.content_id;
		}

		public java.util.Date create_date1;

		public java.util.Date getCreate_date1() {
			return this.create_date1;
		}

		public java.util.Date update_date1;

		public java.util.Date getUpdate_date1() {
			return this.update_date1;
		}

		public String tou_name1;

		public String getTou_name1() {
			return this.tou_name1;
		}

		public short tou_id;

		public short getTou_id() {
			return this.tou_id;
		}

		public short tou_id1;

		public short getTou_id1() {
			return this.tou_id1;
		}

		public String publication_name;

		public String getPublication_name() {
			return this.publication_name;
		}

		public String total_status;

		public String getTotal_status() {
			return this.total_status;
		}

		public Integer ccc_event_id;

		public Integer getCcc_event_id() {
			return this.ccc_event_id;
		}

		public String source_of_content;

		public String getSource_of_content() {
			return this.source_of_content;
		}

		public java.util.Date create_date2;

		public java.util.Date getCreate_date2() {
			return this.create_date2;
		}

		public String created_by_user;

		public String getCreated_by_user() {
			return this.created_by_user;
		}

		public java.util.Date update_date2;

		public java.util.Date getUpdate_date2() {
			return this.update_date2;
		}

		public String updated_by_user;

		public String getUpdated_by_user() {
			return this.updated_by_user;
		}

		public String tax_pass_thru;

		public String getTax_pass_thru() {
			return this.tax_pass_thru;
		}

		public double tax_amt;

		public double getTax_amt() {
			return this.tax_amt;
		}

		public double distribution_amt;

		public double getDistribution_amt() {
			return this.distribution_amt;
		}

		public double rightsholder_fee;

		public double getRightsholder_fee() {
			return this.rightsholder_fee;
		}

		public double total_fee;

		public double getTotal_fee() {
			return this.total_fee;
		}

		public double total_fee1;

		public double getTotal_fee1() {
			return this.total_fee1;
		}

		public String dur_circ_qty;

		public String getDur_circ_qty() {
			return this.dur_circ_qty;
		}

		public String value;

		public String getValue() {
			return this.value;
		}

		public String publisher_name;

		public String getPublisher_name() {
			return this.publisher_name;
		}

		public java.util.Date create_date3;

		public java.util.Date getCreate_date3() {
			return this.create_date3;
		}

		public java.util.Date update_date3;

		public java.util.Date getUpdate_date3() {
			return this.update_date3;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ORDER_ETL_OLD_RL_ETL.length) {
					if (length < 1024
							&& commonByteArray_ORDER_ETL_OLD_RL_ETL.length == 0) {
						commonByteArray_ORDER_ETL_OLD_RL_ETL = new byte[1024];
					} else {
						commonByteArray_ORDER_ETL_OLD_RL_ETL = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ORDER_ETL_OLD_RL_ETL, 0, length);
				strReturn = new String(commonByteArray_ORDER_ETL_OLD_RL_ETL, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ORDER_ETL_OLD_RL_ETL) {

				try {

					int length = 0;

					this.invoice_dimension_uid = readString(dis);

					this.licensee_dimension_uid = readString(dis);

					this.order_header_dimension_uid = readString(dis);

					this.order_detail_dimension_uid = readString(dis);

					this.time_dimension_uid = readInteger(dis);

					this.tou_name = readString(dis);

					this.Invoice_no = dis.readInt();

					this.company_name = readString(dis);

					this.customer_id = dis.readInt();

					this.create_date = readDate(dis);

					this.update_date = readDate(dis);

					this.invoice_status_desc = readString(dis);

					this.payment_status = readString(dis);

					this.payment_date = readDate(dis);

					this.iso_code = readString(dis);

					this.rate = dis.readDouble();

					this.company_name1 = readString(dis);

					this.email_address = readString(dis);

					this.licensee_sub_type = readString(dis);

					this.licensee_channel = readString(dis);

					this.parent_organization_uid = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.ccc_party_id = null;
					} else {
						this.ccc_party_id = dis.readLong();
					}

					this.vat_country_cd = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.not_for_profit_flag = null;
					} else {
						this.not_for_profit_flag = dis.readLong();
					}

					this.license_no = dis.readLong();

					length = dis.readByte();
					if (length == -1) {
						this.ccc_party_id1 = null;
					} else {
						this.ccc_party_id1 = dis.readLong();
					}

					this.order_date = readDate(dis);

					this.channel = readString(dis);

					this.country = readString(dis);

					this.organization_location_name = readString(dis);

					this.city = readString(dis);

					this.state = readString(dis);

					this.postal_code = readString(dis);

					this.country1 = readString(dis);

					this.content_id = readString(dis);

					this.create_date1 = readDate(dis);

					this.update_date1 = readDate(dis);

					this.tou_name1 = readString(dis);

					this.tou_id = dis.readShort();

					this.tou_id1 = dis.readShort();

					this.publication_name = readString(dis);

					this.total_status = readString(dis);

					this.ccc_event_id = readInteger(dis);

					this.source_of_content = readString(dis);

					this.create_date2 = readDate(dis);

					this.created_by_user = readString(dis);

					this.update_date2 = readDate(dis);

					this.updated_by_user = readString(dis);

					this.tax_pass_thru = readString(dis);

					this.tax_amt = dis.readDouble();

					this.distribution_amt = dis.readDouble();

					this.rightsholder_fee = dis.readDouble();

					this.total_fee = dis.readDouble();

					this.total_fee1 = dis.readDouble();

					this.dur_circ_qty = readString(dis);

					this.value = readString(dis);

					this.publisher_name = readString(dis);

					this.create_date3 = readDate(dis);

					this.update_date3 = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.invoice_dimension_uid, dos);

				// String

				writeString(this.licensee_dimension_uid, dos);

				// String

				writeString(this.order_header_dimension_uid, dos);

				// String

				writeString(this.order_detail_dimension_uid, dos);

				// Integer

				writeInteger(this.time_dimension_uid, dos);

				// String

				writeString(this.tou_name, dos);

				// int

				dos.writeInt(this.Invoice_no);

				// String

				writeString(this.company_name, dos);

				// int

				dos.writeInt(this.customer_id);

				// java.util.Date

				writeDate(this.create_date, dos);

				// java.util.Date

				writeDate(this.update_date, dos);

				// String

				writeString(this.invoice_status_desc, dos);

				// String

				writeString(this.payment_status, dos);

				// java.util.Date

				writeDate(this.payment_date, dos);

				// String

				writeString(this.iso_code, dos);

				// double

				dos.writeDouble(this.rate);

				// String

				writeString(this.company_name1, dos);

				// String

				writeString(this.email_address, dos);

				// String

				writeString(this.licensee_sub_type, dos);

				// String

				writeString(this.licensee_channel, dos);

				// String

				writeString(this.parent_organization_uid, dos);

				// Long

				if (this.ccc_party_id == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.ccc_party_id);
				}

				// String

				writeString(this.vat_country_cd, dos);

				// Long

				if (this.not_for_profit_flag == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.not_for_profit_flag);
				}

				// long

				dos.writeLong(this.license_no);

				// Long

				if (this.ccc_party_id1 == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.ccc_party_id1);
				}

				// java.util.Date

				writeDate(this.order_date, dos);

				// String

				writeString(this.channel, dos);

				// String

				writeString(this.country, dos);

				// String

				writeString(this.organization_location_name, dos);

				// String

				writeString(this.city, dos);

				// String

				writeString(this.state, dos);

				// String

				writeString(this.postal_code, dos);

				// String

				writeString(this.country1, dos);

				// String

				writeString(this.content_id, dos);

				// java.util.Date

				writeDate(this.create_date1, dos);

				// java.util.Date

				writeDate(this.update_date1, dos);

				// String

				writeString(this.tou_name1, dos);

				// short

				dos.writeShort(this.tou_id);

				// short

				dos.writeShort(this.tou_id1);

				// String

				writeString(this.publication_name, dos);

				// String

				writeString(this.total_status, dos);

				// Integer

				writeInteger(this.ccc_event_id, dos);

				// String

				writeString(this.source_of_content, dos);

				// java.util.Date

				writeDate(this.create_date2, dos);

				// String

				writeString(this.created_by_user, dos);

				// java.util.Date

				writeDate(this.update_date2, dos);

				// String

				writeString(this.updated_by_user, dos);

				// String

				writeString(this.tax_pass_thru, dos);

				// double

				dos.writeDouble(this.tax_amt);

				// double

				dos.writeDouble(this.distribution_amt);

				// double

				dos.writeDouble(this.rightsholder_fee);

				// double

				dos.writeDouble(this.total_fee);

				// double

				dos.writeDouble(this.total_fee1);

				// String

				writeString(this.dur_circ_qty, dos);

				// String

				writeString(this.value, dos);

				// String

				writeString(this.publisher_name, dos);

				// java.util.Date

				writeDate(this.create_date3, dos);

				// java.util.Date

				writeDate(this.update_date3, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("invoice_dimension_uid=" + invoice_dimension_uid);
			sb.append(",licensee_dimension_uid=" + licensee_dimension_uid);
			sb.append(",order_header_dimension_uid="
					+ order_header_dimension_uid);
			sb.append(",order_detail_dimension_uid="
					+ order_detail_dimension_uid);
			sb.append(",time_dimension_uid="
					+ String.valueOf(time_dimension_uid));
			sb.append(",tou_name=" + tou_name);
			sb.append(",Invoice_no=" + String.valueOf(Invoice_no));
			sb.append(",company_name=" + company_name);
			sb.append(",customer_id=" + String.valueOf(customer_id));
			sb.append(",create_date=" + String.valueOf(create_date));
			sb.append(",update_date=" + String.valueOf(update_date));
			sb.append(",invoice_status_desc=" + invoice_status_desc);
			sb.append(",payment_status=" + payment_status);
			sb.append(",payment_date=" + String.valueOf(payment_date));
			sb.append(",iso_code=" + iso_code);
			sb.append(",rate=" + String.valueOf(rate));
			sb.append(",company_name1=" + company_name1);
			sb.append(",email_address=" + email_address);
			sb.append(",licensee_sub_type=" + licensee_sub_type);
			sb.append(",licensee_channel=" + licensee_channel);
			sb.append(",parent_organization_uid=" + parent_organization_uid);
			sb.append(",ccc_party_id=" + String.valueOf(ccc_party_id));
			sb.append(",vat_country_cd=" + vat_country_cd);
			sb.append(",not_for_profit_flag="
					+ String.valueOf(not_for_profit_flag));
			sb.append(",license_no=" + String.valueOf(license_no));
			sb.append(",ccc_party_id1=" + String.valueOf(ccc_party_id1));
			sb.append(",order_date=" + String.valueOf(order_date));
			sb.append(",channel=" + channel);
			sb.append(",country=" + country);
			sb.append(",organization_location_name="
					+ organization_location_name);
			sb.append(",city=" + city);
			sb.append(",state=" + state);
			sb.append(",postal_code=" + postal_code);
			sb.append(",country1=" + country1);
			sb.append(",content_id=" + content_id);
			sb.append(",create_date1=" + String.valueOf(create_date1));
			sb.append(",update_date1=" + String.valueOf(update_date1));
			sb.append(",tou_name1=" + tou_name1);
			sb.append(",tou_id=" + String.valueOf(tou_id));
			sb.append(",tou_id1=" + String.valueOf(tou_id1));
			sb.append(",publication_name=" + publication_name);
			sb.append(",total_status=" + total_status);
			sb.append(",ccc_event_id=" + String.valueOf(ccc_event_id));
			sb.append(",source_of_content=" + source_of_content);
			sb.append(",create_date2=" + String.valueOf(create_date2));
			sb.append(",created_by_user=" + created_by_user);
			sb.append(",update_date2=" + String.valueOf(update_date2));
			sb.append(",updated_by_user=" + updated_by_user);
			sb.append(",tax_pass_thru=" + tax_pass_thru);
			sb.append(",tax_amt=" + String.valueOf(tax_amt));
			sb.append(",distribution_amt=" + String.valueOf(distribution_amt));
			sb.append(",rightsholder_fee=" + String.valueOf(rightsholder_fee));
			sb.append(",total_fee=" + String.valueOf(total_fee));
			sb.append(",total_fee1=" + String.valueOf(total_fee1));
			sb.append(",dur_circ_qty=" + dur_circ_qty);
			sb.append(",value=" + value);
			sb.append(",publisher_name=" + publisher_name);
			sb.append(",create_date3=" + String.valueOf(create_date3));
			sb.append(",update_date3=" + String.valueOf(update_date3));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row1Struct row1 = new row1Struct();

				/**
				 * [tDBOutput_1 begin ] start
				 */

				ok_Hash.put("tDBOutput_1", false);
				start_Hash.put("tDBOutput_1", System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tDBOutput_1");
				tStatCatcher_1Process(globalMap);

				talendStats_STATS.addMessage("begin", "tDBOutput_1");
				talendStats_STATSProcess(globalMap);

				currentComponent = "tDBOutput_1";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row1" + iterateId, 0, 0);

					}
				}

				int tos_count_tDBOutput_1 = 0;

				String dbschema_tDBOutput_1 = null;
				dbschema_tDBOutput_1 = context.data_warehouse_order_dwos_schema;

				String tableName_tDBOutput_1 = null;
				if (dbschema_tDBOutput_1 == null
						|| dbschema_tDBOutput_1.trim().length() == 0) {
					tableName_tDBOutput_1 = "dwo_rl_v_finance_report";
				} else {
					tableName_tDBOutput_1 = dbschema_tDBOutput_1 + "\".\""
							+ "dwo_rl_v_finance_report";
				}

				int nb_line_tDBOutput_1 = 0;
				int nb_line_update_tDBOutput_1 = 0;
				int nb_line_inserted_tDBOutput_1 = 0;
				int nb_line_deleted_tDBOutput_1 = 0;
				int nb_line_rejected_tDBOutput_1 = 0;

				int deletedCount_tDBOutput_1 = 0;
				int updatedCount_tDBOutput_1 = 0;
				int insertedCount_tDBOutput_1 = 0;
				int rejectedCount_tDBOutput_1 = 0;

				boolean whetherReject_tDBOutput_1 = false;

				java.sql.Connection conn_tDBOutput_1 = null;
				String dbUser_tDBOutput_1 = null;

				java.lang.Class.forName("org.postgresql.Driver");
				String url_tDBOutput_1 = "jdbc:postgresql://"
						+ context.data_warehouse_order_dwos_host + ":"
						+ context.data_warehouse_order_dwos_port + "/"
						+ context.data_warehouse_order_dwos_database;
				dbUser_tDBOutput_1 = context.data_warehouse_order_dwos_username;

				final String decryptedPassword_tDBOutput_1 = context.data_warehouse_order_dwos_password;

				String dbPwd_tDBOutput_1 = decryptedPassword_tDBOutput_1;

				conn_tDBOutput_1 = java.sql.DriverManager.getConnection(
						url_tDBOutput_1, dbUser_tDBOutput_1, dbPwd_tDBOutput_1);

				resourceMap.put("conn_tDBOutput_1", conn_tDBOutput_1);
				conn_tDBOutput_1.setAutoCommit(false);
				int commitEvery_tDBOutput_1 = 10000;
				int commitCounter_tDBOutput_1 = 0;

				int batchSize_tDBOutput_1 = 1000;
				int batchSizeCounter_tDBOutput_1 = 0;

				int count_tDBOutput_1 = 0;
				int rsTruncCountNumber_tDBOutput_1 = 0;
				try (java.sql.Statement stmtTruncCount_tDBOutput_1 = conn_tDBOutput_1
						.createStatement()) {
					try (java.sql.ResultSet rsTruncCount_tDBOutput_1 = stmtTruncCount_tDBOutput_1
							.executeQuery("SELECT COUNT(1) FROM \""
									+ tableName_tDBOutput_1 + "\"")) {
						if (rsTruncCount_tDBOutput_1.next()) {
							rsTruncCountNumber_tDBOutput_1 = rsTruncCount_tDBOutput_1
									.getInt(1);
						}
					}
				}
				try (java.sql.Statement stmtTrunc_tDBOutput_1 = conn_tDBOutput_1
						.createStatement()) {
					stmtTrunc_tDBOutput_1.executeUpdate("TRUNCATE TABLE \""
							+ tableName_tDBOutput_1 + "\"");
					deletedCount_tDBOutput_1 += rsTruncCountNumber_tDBOutput_1;
				}
				String insert_tDBOutput_1 = "INSERT INTO \""
						+ tableName_tDBOutput_1
						+ "\" (\""
						+ "invoice_dimension_uid"
						+ "\",\""
						+ "licensee_dimension_uid"
						+ "\",\""
						+ "order_header_dimension_uid"
						+ "\",\""
						+ "order_detail_dimension_uid"
						+ "\",\"time_dimension_uid\",\"product_dimension_uid\",\"invoice_number\",\"organization_name\",\"licensee_uid\",\"invoice_created_datetime\",\"invoice_updated_datetime\",\"invoice_status\",\"payment_status\",\"invoice_payment_date\",\"currency\",\"invoice_exchange_rate\",\"licensee_name\",\"licensee_contact_email\",\"licensee_sub_type\",\"licensee_channel\",\"parent_organization_uid\",\"licensee_oracle_party_number\",\"licensee_tax_country\",\"not_for_profit_flag\",\"order_number\",\"licensee_organization_party_number\",\"order_date\",\"order_channel\",\"organization_location_country_code\",\"organization_location_name\",\"taxable_city\",\"taxable_region\",\"taxable_postal_code\",\"taxable_country\",\"order_source\",\"created_datetime\",\"updated_datetime\",\"product_name\",\"product_code\",\"product_family\",\"item_title\",\"item_status_code\",\"distribution_event_id\",\"source_of_content\",\"content_created_datetime\",\"created_by_user\",\"content_updated_datetime\",\"updated_by_user\",\"tax_pass_thru\",\"tax_amount\",\"rights_holder_payable_amount\",\"ccc_revenue_amount\",\"transaction_fee_amount\",\"total_amount\",\"quantity\",\"discount_amount\",\"publisher\",\"credit_memo_created_datetime\",\"credit_memo_updated_datetime\") VALUES ("
						+ "nextval('staging.invoice_dimension_seq')"
						+ ","
						+ "nextval('staging.licensee_dimension_seq')"
						+ ","
						+ "nextval('staging.order_header_dimension_seq')"
						+ ","
						+ "nextval('staging.order_detail_dimension_seq')"
						+ ",?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

				java.sql.PreparedStatement pstmt_tDBOutput_1 = conn_tDBOutput_1
						.prepareStatement(insert_tDBOutput_1);
				resourceMap.put("pstmt_tDBOutput_1", pstmt_tDBOutput_1);

				/**
				 * [tDBOutput_1 begin ] stop
				 */

				/**
				 * [tDBInput_1 begin ] start
				 */

				ok_Hash.put("tDBInput_1", false);
				start_Hash.put("tDBInput_1", System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tDBInput_1");
				tStatCatcher_1Process(globalMap);

				talendStats_STATS.addMessage("begin", "tDBInput_1");
				talendStats_STATSProcess(globalMap);

				currentComponent = "tDBInput_1";

				int tos_count_tDBInput_1 = 0;

				java.util.Calendar calendar_tDBInput_1 = java.util.Calendar
						.getInstance();
				calendar_tDBInput_1.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tDBInput_1 = calendar_tDBInput_1.getTime();
				int nb_line_tDBInput_1 = 0;
				java.sql.Connection conn_tDBInput_1 = null;
				conn_tDBInput_1 = (java.sql.Connection) globalMap
						.get("conn_tDBConnection_1");

				java.sql.Statement stmt_tDBInput_1 = conn_tDBInput_1
						.createStatement();
				if (stmt_tDBInput_1 instanceof com.mysql.jdbc.Statement) {
					((com.mysql.jdbc.Statement) stmt_tDBInput_1)
							.enableStreamingResults();
				} else if (stmt_tDBInput_1 instanceof com.mysql.jdbc.jdbc2.optional.JDBC4StatementWrapper) {
					((com.mysql.jdbc.jdbc2.optional.JDBC4StatementWrapper) stmt_tDBInput_1)
							.enableStreamingResults();
				}

				String dbquery_tDBInput_1 = "select NULL as invoice_dimension_uid,\n       NULL as licensee_dimension_uid,\n        NULL as order_header_dimension_uid"
						+ ",\n        NULL as order_detail_dimension_uid,\n    convert(DATE_FORMAT(license.order_date, '%Y%m%d'), unsigned integer) a"
						+ "s time_dimension_uid,\n    type_of_use.tou_name as product_dimension_uid,\n    invoice_info.Invoice_no as invoice_number,\n"
						+ "    customer.company_name as organization_name,\n    customer.customer_id as licensee_uid,\n    invoice_info.create_date a"
						+ "s invoice_created_datetime,\n    invoice_info.update_date as invoice_updated_datetime,\n    invoice_status.invoice_status_"
						+ "desc as invoice_status,\n    (case\n        when (customer_fee_status.total_status = 'D') then 'DISTRIBUTED'\n        when "
						+ "(customer_fee_status.total_status = 'O') then 'OPEN'\n        when (customer_fee_status.total_status = 'P') then 'PAID'\n "
						+ "       when (customer_fee_status.total_status = 'G') then 'GRATIS GRANTED'\n        when (customer_fee_status.total_statu"
						+ "s = 'X') then 'DISTRIBUTED'\n        ELSE CONCAT(fs.fee_status_desc, \" (\", CAST(FORMAT(ls.total_fee, 2) AS BINARY) , \""
						+ " \", currency.ISO_code,\")\")	\n    end) as payment_status,\n    invoice_info.payment_date as invoice_payment_date,\n    cu"
						+ "rrency.iso_code as currency,\n    currency_rates.rate as invoice_exchange_rate,\n    customer.company_name as licensee_nam"
						+ "e,\n    customer.email_address as licensee_contact_email,\n    (case\n        when (customer.industry = 'None') then 'Indiv"
						+ "idual'\n        else 'Corporate'\n    end) as licensee_sub_type,\n    null as licensee_channel,\n    null as parent_organiza"
						+ "tion_uid,\n    account_info.ccc_party_id as licensee_oracle_party_number,\n    customer.vat_country_cd as licensee_tax_cou"
						+ "ntry,\n    (case\n        when (customer.org_status = 'NONPROFIT') then 1\n        else 0\n    end) as not_for_profit_flag,\n"
						+ "    license.license_no as order_number,\n    account_info.ccc_party_id as licensee_organization_party_number,\n    license"
						+ ".order_date as order_date,\n    license.channel as order_channel,\n    billing_address.country as organization_location_co"
						+ "untry_code,\n    concat(billing_address.city, billing_address.state) as organization_location_name,\n    taxable_address.c"
						+ "ity as taxable_city,\n    taxable_address.state as taxable_region,\n    taxable_address.postal_code as taxable_postal_code"
						+ ",\n    taxable_address.country as taxable_country,\n    license.content_id as order_source,\n    license.create_date as cre"
						+ "ated_datetime,\n    license.update_date as updated_datetime,\n    type_of_use.tou_name as product_name,\n    type_of_use.to"
						+ "u_id as product_code,\n    type_of_use.tou_id as product_family,\n    publication.publication_name as item_title,\n    cust"
						+ "omer_fee_status.total_status as item_status_code,\n    distribution_group.ccc_event_id as distribution_event_id,\n    'DIR"
						+ "ECT' as source_of_content,\n    content.create_date as content_created_datetime,\n    null as created_by_user,\n    content"
						+ ".update_date as content_updated_datetime,\n    null as updated_by_user,\n    (case\n        when (license.channel = 'GIN') "
						+ "then 'NO'\n        else 'YES'\n    end) as tax_pass_thru,\n    customer_fees.tax_amt as tax_amount,\n    customer_fees.distr"
						+ "ibution_amt as rights_holder_payable_amount,\n    customer_fees.rightsholder_fee as ccc_revenue_amount,\n    customer_fees"
						+ ".total_fee as transaction_fee_amount,\n    customer_fees.total_fee as total_amount,\n    license_details.dur_circ_qty as q"
						+ "uantity,\n    license_discount.value as discount_amount,\n    publisher.publisher_name as publisher,\n    cmi.create_date a"
						+ "s credit_memo_created_datetime,\n    cmi.update_date as credit_memo_updated_datetime\nfrom\n    (((((((((((((((((((invoice_"
						+ "info\njoin invoice_status on\n    ((invoice_status.invoice_status_cd = invoice_info.invoice_status_cd)))\njoin customer on\n"
						+ "    ((invoice_info.customer_id = customer.customer_id)))\njoin account_info on\n    ((invoice_info.customer_id = account_i"
						+ "nfo.customer_id)))\njoin license on\n    ((invoice_info.Invoice_no = license.invoice_no)))\nJOIN license_split ls\n  ON lice"
						+ "nse.license_no = ls.license_no    \njoin content on\n    (((content.publication_id = license.publication_id)\n    and (cont"
						+ "ent.content_id = license.content_id)\n    and (content.update_date = (\n        select max(c.update_date)\n    from\n       "
						+ " content c\n    where\n        ((c.publication_id = content.publication_id)\n        and (c.content_id = content.content_id"
						+ ")))))))\njoin publication on\n    ((license.publication_id = publication.publication_id)))\njoin license_details on\n    ((l"
						+ "icense.license_no = license_details.license_no)))\njoin type_of_use on\n    ((license.tou_id = type_of_use.tou_id)))\njoin "
						+ "license_fee on\n    ((license.license_no = license_fee.license_no)))\njoin customer_fee_status on\n    ((license_fee.cf_id "
						+ "= customer_fee_status.cfs_id)))\nJOIN fee_status fs\n     ON customer_fee_status.total_status = fs.fee_status_cd  \njoin cu"
						+ "stomer_fees on\n    ((license_fee.cf_id = customer_fees.cf_id)))\nleft join license_distribution on\n    ((license.license_"
						+ "no = license_distribution.license_no)))\nleft join distribution_group on\n    (((license_distribution.distribution_group_i"
						+ "d = distribution_group.distribution_group_id)\n    and (distribution_group.distribution_date = (\n        select max(dg.di"
						+ "stribution_date)\n    from\n        distribution_group dg\n    where\n        dg.distribution_group_id in (\n            sele"
						+ "ct dg.distribution_group_id\n        from\n            (distribution_group dg\n        join license_distribution ld on\n    "
						+ "        ((dg.distribution_group_id = ld.distribution_group_id)))\n        where\n            (ld.license_no = license.lice"
						+ "nse_no)))))))\njoin party_address on\n    (((party_address.party_id = customer.party_id)\n    and (party_address.address_ty"
						+ "pe_id = 2))))\njoin address billing_address on\n    ((party_address.address_id = billing_address.address_id)))\nleft join a"
						+ "ddress taxable_address on\n    ((taxable_address.address_id = license_details.taxable_address_id)))\nleft join license_var"
						+ "iables license_discount on\n    (((license.license_no = license_discount.license_no)\n    and (license_discount.name = 'DI"
						+ "SCOUNTAMOUNT'))))\njoin currency_rates on\n    ((currency_rates.currency_rate_id = customer_fees.base_to_usd_currency_rate"
						+ "_id)))\njoin currency on\n    ((currency.currency_id = currency_rates.conv_currency_id)))\njoin publisher\n    ON publicatio"
						+ "n.pub_id = publisher.pub_id\n left outer join credit_memo_info cmi on\n    cmi.license_no = license.license_no\nwhere\n    ("
						+ "((license_distribution.distribution_group_id is not null)\n    and (distribution_group.distribution_date is not null))\n  "
						+ "  or (isnull(license_distribution.distribution_group_id)\n    and isnull(distribution_group.distribution_date))\n    and c"
						+ "ustomer.customer_type_cd <> 'T')\nAND invoice_info.create_date > '2017-06-30 23:59:59'\nAND customer.company_name != 'TEST"
						+ "ING'\nAND customer.company_name != 'Mr. Aliaksandr Meliukh'\nAND customer.company_name != 'QA Test  Account User'\nAND publ"
						+ "isher.publisher_name != 'CCC Republication'\nAND type_of_use.tou_name != 'Author Charges'";

				globalMap.put("tDBInput_1_QUERY", dbquery_tDBInput_1);
				java.sql.ResultSet rs_tDBInput_1 = null;

				try {
					rs_tDBInput_1 = stmt_tDBInput_1
							.executeQuery(dbquery_tDBInput_1);
					java.sql.ResultSetMetaData rsmd_tDBInput_1 = rs_tDBInput_1
							.getMetaData();
					int colQtyInRs_tDBInput_1 = rsmd_tDBInput_1
							.getColumnCount();

					String tmpContent_tDBInput_1 = null;

					while (rs_tDBInput_1.next()) {
						nb_line_tDBInput_1++;

						if (colQtyInRs_tDBInput_1 < 1) {
							row1.invoice_dimension_uid = null;
						} else {

							row1.invoice_dimension_uid = routines.system.JDBCUtil
									.getString(rs_tDBInput_1, 1, false);
						}
						if (colQtyInRs_tDBInput_1 < 2) {
							row1.licensee_dimension_uid = null;
						} else {

							row1.licensee_dimension_uid = routines.system.JDBCUtil
									.getString(rs_tDBInput_1, 2, false);
						}
						if (colQtyInRs_tDBInput_1 < 3) {
							row1.order_header_dimension_uid = null;
						} else {

							row1.order_header_dimension_uid = routines.system.JDBCUtil
									.getString(rs_tDBInput_1, 3, false);
						}
						if (colQtyInRs_tDBInput_1 < 4) {
							row1.order_detail_dimension_uid = null;
						} else {

							row1.order_detail_dimension_uid = routines.system.JDBCUtil
									.getString(rs_tDBInput_1, 4, false);
						}
						if (colQtyInRs_tDBInput_1 < 5) {
							row1.time_dimension_uid = null;
						} else {

							if (rs_tDBInput_1.getObject(5) != null) {
								row1.time_dimension_uid = rs_tDBInput_1
										.getInt(5);
							} else {
								row1.time_dimension_uid = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 6) {
							row1.tou_name = null;
						} else {

							row1.tou_name = routines.system.JDBCUtil.getString(
									rs_tDBInput_1, 6, false);
						}
						if (colQtyInRs_tDBInput_1 < 7) {
							row1.Invoice_no = 0;
						} else {

							if (rs_tDBInput_1.getObject(7) != null) {
								row1.Invoice_no = rs_tDBInput_1.getInt(7);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 8) {
							row1.company_name = null;
						} else {

							row1.company_name = routines.system.JDBCUtil
									.getString(rs_tDBInput_1, 8, false);
						}
						if (colQtyInRs_tDBInput_1 < 9) {
							row1.customer_id = 0;
						} else {

							if (rs_tDBInput_1.getObject(9) != null) {
								row1.customer_id = rs_tDBInput_1.getInt(9);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 10) {
							row1.create_date = null;
						} else {

							if (rs_tDBInput_1.getString(10) != null) {
								String dateString_tDBInput_1 = rs_tDBInput_1
										.getString(10);
								if (!("0000-00-00")
										.equals(dateString_tDBInput_1)
										&& !("0000-00-00 00:00:00")
												.equals(dateString_tDBInput_1)) {
									row1.create_date = rs_tDBInput_1
											.getTimestamp(10);
								} else {
									row1.create_date = (java.util.Date) year0_tDBInput_1
											.clone();
								}
							} else {
								row1.create_date = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 11) {
							row1.update_date = null;
						} else {

							if (rs_tDBInput_1.getString(11) != null) {
								String dateString_tDBInput_1 = rs_tDBInput_1
										.getString(11);
								if (!("0000-00-00")
										.equals(dateString_tDBInput_1)
										&& !("0000-00-00 00:00:00")
												.equals(dateString_tDBInput_1)) {
									row1.update_date = rs_tDBInput_1
											.getTimestamp(11);
								} else {
									row1.update_date = (java.util.Date) year0_tDBInput_1
											.clone();
								}
							} else {
								row1.update_date = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 12) {
							row1.invoice_status_desc = null;
						} else {

							row1.invoice_status_desc = routines.system.JDBCUtil
									.getString(rs_tDBInput_1, 12, false);
						}
						if (colQtyInRs_tDBInput_1 < 13) {
							row1.payment_status = null;
						} else {

							row1.payment_status = routines.system.JDBCUtil
									.getString(rs_tDBInput_1, 13, false);
						}
						if (colQtyInRs_tDBInput_1 < 14) {
							row1.payment_date = null;
						} else {

							if (rs_tDBInput_1.getString(14) != null) {
								String dateString_tDBInput_1 = rs_tDBInput_1
										.getString(14);
								if (!("0000-00-00")
										.equals(dateString_tDBInput_1)
										&& !("0000-00-00 00:00:00")
												.equals(dateString_tDBInput_1)) {
									row1.payment_date = rs_tDBInput_1
											.getTimestamp(14);
								} else {
									row1.payment_date = (java.util.Date) year0_tDBInput_1
											.clone();
								}
							} else {
								row1.payment_date = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 15) {
							row1.iso_code = null;
						} else {

							row1.iso_code = routines.system.JDBCUtil.getString(
									rs_tDBInput_1, 15, false);
						}
						if (colQtyInRs_tDBInput_1 < 16) {
							row1.rate = 0;
						} else {

							if (rs_tDBInput_1.getObject(16) != null) {
								row1.rate = rs_tDBInput_1.getDouble(16);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 17) {
							row1.company_name1 = null;
						} else {

							row1.company_name1 = routines.system.JDBCUtil
									.getString(rs_tDBInput_1, 17, false);
						}
						if (colQtyInRs_tDBInput_1 < 18) {
							row1.email_address = null;
						} else {

							row1.email_address = routines.system.JDBCUtil
									.getString(rs_tDBInput_1, 18, false);
						}
						if (colQtyInRs_tDBInput_1 < 19) {
							row1.licensee_sub_type = null;
						} else {

							row1.licensee_sub_type = routines.system.JDBCUtil
									.getString(rs_tDBInput_1, 19, false);
						}
						if (colQtyInRs_tDBInput_1 < 20) {
							row1.licensee_channel = null;
						} else {

							row1.licensee_channel = routines.system.JDBCUtil
									.getString(rs_tDBInput_1, 20, false);
						}
						if (colQtyInRs_tDBInput_1 < 21) {
							row1.parent_organization_uid = null;
						} else {

							row1.parent_organization_uid = routines.system.JDBCUtil
									.getString(rs_tDBInput_1, 21, false);
						}
						if (colQtyInRs_tDBInput_1 < 22) {
							row1.ccc_party_id = null;
						} else {

							if (rs_tDBInput_1.getObject(22) != null) {
								row1.ccc_party_id = rs_tDBInput_1.getLong(22);
							} else {
								row1.ccc_party_id = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 23) {
							row1.vat_country_cd = null;
						} else {

							row1.vat_country_cd = routines.system.JDBCUtil
									.getString(rs_tDBInput_1, 23, false);
						}
						if (colQtyInRs_tDBInput_1 < 24) {
							row1.not_for_profit_flag = null;
						} else {

							if (rs_tDBInput_1.getObject(24) != null) {
								row1.not_for_profit_flag = rs_tDBInput_1
										.getLong(24);
							} else {
								row1.not_for_profit_flag = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 25) {
							row1.license_no = 0;
						} else {

							if (rs_tDBInput_1.getObject(25) != null) {
								row1.license_no = rs_tDBInput_1.getLong(25);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 26) {
							row1.ccc_party_id1 = null;
						} else {

							if (rs_tDBInput_1.getObject(26) != null) {
								row1.ccc_party_id1 = rs_tDBInput_1.getLong(26);
							} else {
								row1.ccc_party_id1 = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 27) {
							row1.order_date = null;
						} else {

							if (rs_tDBInput_1.getString(27) != null) {
								String dateString_tDBInput_1 = rs_tDBInput_1
										.getString(27);
								if (!("0000-00-00")
										.equals(dateString_tDBInput_1)
										&& !("0000-00-00 00:00:00")
												.equals(dateString_tDBInput_1)) {
									row1.order_date = rs_tDBInput_1
											.getTimestamp(27);
								} else {
									row1.order_date = (java.util.Date) year0_tDBInput_1
											.clone();
								}
							} else {
								row1.order_date = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 28) {
							row1.channel = null;
						} else {

							row1.channel = routines.system.JDBCUtil.getString(
									rs_tDBInput_1, 28, false);
						}
						if (colQtyInRs_tDBInput_1 < 29) {
							row1.country = null;
						} else {

							row1.country = routines.system.JDBCUtil.getString(
									rs_tDBInput_1, 29, false);
						}
						if (colQtyInRs_tDBInput_1 < 30) {
							row1.organization_location_name = null;
						} else {

							row1.organization_location_name = routines.system.JDBCUtil
									.getString(rs_tDBInput_1, 30, false);
						}
						if (colQtyInRs_tDBInput_1 < 31) {
							row1.city = null;
						} else {

							row1.city = routines.system.JDBCUtil.getString(
									rs_tDBInput_1, 31, false);
						}
						if (colQtyInRs_tDBInput_1 < 32) {
							row1.state = null;
						} else {

							row1.state = routines.system.JDBCUtil.getString(
									rs_tDBInput_1, 32, false);
						}
						if (colQtyInRs_tDBInput_1 < 33) {
							row1.postal_code = null;
						} else {

							row1.postal_code = routines.system.JDBCUtil
									.getString(rs_tDBInput_1, 33, false);
						}
						if (colQtyInRs_tDBInput_1 < 34) {
							row1.country1 = null;
						} else {

							row1.country1 = routines.system.JDBCUtil.getString(
									rs_tDBInput_1, 34, false);
						}
						if (colQtyInRs_tDBInput_1 < 35) {
							row1.content_id = null;
						} else {

							row1.content_id = routines.system.JDBCUtil
									.getString(rs_tDBInput_1, 35, false);
						}
						if (colQtyInRs_tDBInput_1 < 36) {
							row1.create_date1 = null;
						} else {

							if (rs_tDBInput_1.getString(36) != null) {
								String dateString_tDBInput_1 = rs_tDBInput_1
										.getString(36);
								if (!("0000-00-00")
										.equals(dateString_tDBInput_1)
										&& !("0000-00-00 00:00:00")
												.equals(dateString_tDBInput_1)) {
									row1.create_date1 = rs_tDBInput_1
											.getTimestamp(36);
								} else {
									row1.create_date1 = (java.util.Date) year0_tDBInput_1
											.clone();
								}
							} else {
								row1.create_date1 = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 37) {
							row1.update_date1 = null;
						} else {

							if (rs_tDBInput_1.getString(37) != null) {
								String dateString_tDBInput_1 = rs_tDBInput_1
										.getString(37);
								if (!("0000-00-00")
										.equals(dateString_tDBInput_1)
										&& !("0000-00-00 00:00:00")
												.equals(dateString_tDBInput_1)) {
									row1.update_date1 = rs_tDBInput_1
											.getTimestamp(37);
								} else {
									row1.update_date1 = (java.util.Date) year0_tDBInput_1
											.clone();
								}
							} else {
								row1.update_date1 = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 38) {
							row1.tou_name1 = null;
						} else {

							row1.tou_name1 = routines.system.JDBCUtil
									.getString(rs_tDBInput_1, 38, false);
						}
						if (colQtyInRs_tDBInput_1 < 39) {
							row1.tou_id = 0;
						} else {

							if (rs_tDBInput_1.getObject(39) != null) {
								row1.tou_id = rs_tDBInput_1.getShort(39);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 40) {
							row1.tou_id1 = 0;
						} else {

							if (rs_tDBInput_1.getObject(40) != null) {
								row1.tou_id1 = rs_tDBInput_1.getShort(40);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 41) {
							row1.publication_name = null;
						} else {

							row1.publication_name = routines.system.JDBCUtil
									.getString(rs_tDBInput_1, 41, false);
						}
						if (colQtyInRs_tDBInput_1 < 42) {
							row1.total_status = null;
						} else {

							row1.total_status = routines.system.JDBCUtil
									.getString(rs_tDBInput_1, 42, false);
						}
						if (colQtyInRs_tDBInput_1 < 43) {
							row1.ccc_event_id = null;
						} else {

							if (rs_tDBInput_1.getObject(43) != null) {
								row1.ccc_event_id = rs_tDBInput_1.getInt(43);
							} else {
								row1.ccc_event_id = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 44) {
							row1.source_of_content = null;
						} else {

							row1.source_of_content = routines.system.JDBCUtil
									.getString(rs_tDBInput_1, 44, false);
						}
						if (colQtyInRs_tDBInput_1 < 45) {
							row1.create_date2 = null;
						} else {

							if (rs_tDBInput_1.getString(45) != null) {
								String dateString_tDBInput_1 = rs_tDBInput_1
										.getString(45);
								if (!("0000-00-00")
										.equals(dateString_tDBInput_1)
										&& !("0000-00-00 00:00:00")
												.equals(dateString_tDBInput_1)) {
									row1.create_date2 = rs_tDBInput_1
											.getTimestamp(45);
								} else {
									row1.create_date2 = (java.util.Date) year0_tDBInput_1
											.clone();
								}
							} else {
								row1.create_date2 = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 46) {
							row1.created_by_user = null;
						} else {

							row1.created_by_user = routines.system.JDBCUtil
									.getString(rs_tDBInput_1, 46, false);
						}
						if (colQtyInRs_tDBInput_1 < 47) {
							row1.update_date2 = null;
						} else {

							if (rs_tDBInput_1.getString(47) != null) {
								String dateString_tDBInput_1 = rs_tDBInput_1
										.getString(47);
								if (!("0000-00-00")
										.equals(dateString_tDBInput_1)
										&& !("0000-00-00 00:00:00")
												.equals(dateString_tDBInput_1)) {
									row1.update_date2 = rs_tDBInput_1
											.getTimestamp(47);
								} else {
									row1.update_date2 = (java.util.Date) year0_tDBInput_1
											.clone();
								}
							} else {
								row1.update_date2 = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 48) {
							row1.updated_by_user = null;
						} else {

							row1.updated_by_user = routines.system.JDBCUtil
									.getString(rs_tDBInput_1, 48, false);
						}
						if (colQtyInRs_tDBInput_1 < 49) {
							row1.tax_pass_thru = null;
						} else {

							row1.tax_pass_thru = routines.system.JDBCUtil
									.getString(rs_tDBInput_1, 49, false);
						}
						if (colQtyInRs_tDBInput_1 < 50) {
							row1.tax_amt = 0;
						} else {

							if (rs_tDBInput_1.getObject(50) != null) {
								row1.tax_amt = rs_tDBInput_1.getDouble(50);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 51) {
							row1.distribution_amt = 0;
						} else {

							if (rs_tDBInput_1.getObject(51) != null) {
								row1.distribution_amt = rs_tDBInput_1
										.getDouble(51);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 52) {
							row1.rightsholder_fee = 0;
						} else {

							if (rs_tDBInput_1.getObject(52) != null) {
								row1.rightsholder_fee = rs_tDBInput_1
										.getDouble(52);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 53) {
							row1.total_fee = 0;
						} else {

							if (rs_tDBInput_1.getObject(53) != null) {
								row1.total_fee = rs_tDBInput_1.getDouble(53);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 54) {
							row1.total_fee1 = 0;
						} else {

							if (rs_tDBInput_1.getObject(54) != null) {
								row1.total_fee1 = rs_tDBInput_1.getDouble(54);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 55) {
							row1.dur_circ_qty = null;
						} else {

							row1.dur_circ_qty = routines.system.JDBCUtil
									.getString(rs_tDBInput_1, 55, false);
						}
						if (colQtyInRs_tDBInput_1 < 56) {
							row1.value = null;
						} else {

							row1.value = routines.system.JDBCUtil.getString(
									rs_tDBInput_1, 56, false);
						}
						if (colQtyInRs_tDBInput_1 < 57) {
							row1.publisher_name = null;
						} else {

							row1.publisher_name = routines.system.JDBCUtil
									.getString(rs_tDBInput_1, 57, false);
						}
						if (colQtyInRs_tDBInput_1 < 58) {
							row1.create_date3 = null;
						} else {

							if (rs_tDBInput_1.getString(58) != null) {
								String dateString_tDBInput_1 = rs_tDBInput_1
										.getString(58);
								if (!("0000-00-00")
										.equals(dateString_tDBInput_1)
										&& !("0000-00-00 00:00:00")
												.equals(dateString_tDBInput_1)) {
									row1.create_date3 = rs_tDBInput_1
											.getTimestamp(58);
								} else {
									row1.create_date3 = (java.util.Date) year0_tDBInput_1
											.clone();
								}
							} else {
								row1.create_date3 = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 59) {
							row1.update_date3 = null;
						} else {

							if (rs_tDBInput_1.getString(59) != null) {
								String dateString_tDBInput_1 = rs_tDBInput_1
										.getString(59);
								if (!("0000-00-00")
										.equals(dateString_tDBInput_1)
										&& !("0000-00-00 00:00:00")
												.equals(dateString_tDBInput_1)) {
									row1.update_date3 = rs_tDBInput_1
											.getTimestamp(59);
								} else {
									row1.update_date3 = (java.util.Date) year0_tDBInput_1
											.clone();
								}
							} else {
								row1.update_date3 = null;
							}
						}

						/**
						 * [tDBInput_1 begin ] stop
						 */

						/**
						 * [tDBInput_1 main ] start
						 */

						currentComponent = "tDBInput_1";

						tos_count_tDBInput_1++;

						/**
						 * [tDBInput_1 main ] stop
						 */

						/**
						 * [tDBInput_1 process_data_begin ] start
						 */

						currentComponent = "tDBInput_1";

						/**
						 * [tDBInput_1 process_data_begin ] stop
						 */

						/**
						 * [tDBOutput_1 main ] start
						 */

						currentComponent = "tDBOutput_1";

						// row1
						// row1

						if (execStat) {
							runStat.updateStatOnConnection("row1" + iterateId,
									1, 1);
						}

						whetherReject_tDBOutput_1 = false;
						if (row1.time_dimension_uid == null) {
							pstmt_tDBOutput_1
									.setNull(1, java.sql.Types.INTEGER);
						} else {
							pstmt_tDBOutput_1
									.setInt(1, row1.time_dimension_uid);
						}

						if (row1.tou_name == null) {
							pstmt_tDBOutput_1
									.setNull(2, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(2, row1.tou_name);
						}

						pstmt_tDBOutput_1.setInt(3, row1.Invoice_no);

						if (row1.company_name == null) {
							pstmt_tDBOutput_1
									.setNull(4, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(4, row1.company_name);
						}

						pstmt_tDBOutput_1.setInt(5, row1.customer_id);

						if (row1.create_date != null) {
							pstmt_tDBOutput_1.setTimestamp(
									6,
									new java.sql.Timestamp(row1.create_date
											.getTime()));
						} else {
							pstmt_tDBOutput_1.setNull(6,
									java.sql.Types.TIMESTAMP);
						}

						if (row1.update_date != null) {
							pstmt_tDBOutput_1.setTimestamp(
									7,
									new java.sql.Timestamp(row1.update_date
											.getTime()));
						} else {
							pstmt_tDBOutput_1.setNull(7,
									java.sql.Types.TIMESTAMP);
						}

						if (row1.invoice_status_desc == null) {
							pstmt_tDBOutput_1
									.setNull(8, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(8,
									row1.invoice_status_desc);
						}

						if (row1.payment_status == null) {
							pstmt_tDBOutput_1
									.setNull(9, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(9, row1.payment_status);
						}

						if (row1.payment_date != null) {
							pstmt_tDBOutput_1.setTimestamp(
									10,
									new java.sql.Timestamp(row1.payment_date
											.getTime()));
						} else {
							pstmt_tDBOutput_1.setNull(10,
									java.sql.Types.TIMESTAMP);
						}

						if (row1.iso_code == null) {
							pstmt_tDBOutput_1.setNull(11,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(11, row1.iso_code);
						}

						pstmt_tDBOutput_1.setDouble(12, row1.rate);

						if (row1.company_name1 == null) {
							pstmt_tDBOutput_1.setNull(13,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(13, row1.company_name1);
						}

						if (row1.email_address == null) {
							pstmt_tDBOutput_1.setNull(14,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(14, row1.email_address);
						}

						if (row1.licensee_sub_type == null) {
							pstmt_tDBOutput_1.setNull(15,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(15,
									row1.licensee_sub_type);
						}

						if (row1.licensee_channel == null) {
							pstmt_tDBOutput_1.setNull(16,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(16,
									row1.licensee_channel);
						}

						if (row1.parent_organization_uid == null) {
							pstmt_tDBOutput_1.setNull(17,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(17,
									row1.parent_organization_uid);
						}

						if (row1.ccc_party_id == null) {
							pstmt_tDBOutput_1.setNull(18,
									java.sql.Types.INTEGER);
						} else {
							pstmt_tDBOutput_1.setLong(18, row1.ccc_party_id);
						}

						if (row1.vat_country_cd == null) {
							pstmt_tDBOutput_1.setNull(19,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1
									.setString(19, row1.vat_country_cd);
						}

						if (row1.not_for_profit_flag == null) {
							pstmt_tDBOutput_1.setNull(20,
									java.sql.Types.INTEGER);
						} else {
							pstmt_tDBOutput_1.setLong(20,
									row1.not_for_profit_flag);
						}

						pstmt_tDBOutput_1.setLong(21, row1.license_no);

						if (row1.ccc_party_id1 == null) {
							pstmt_tDBOutput_1.setNull(22,
									java.sql.Types.INTEGER);
						} else {
							pstmt_tDBOutput_1.setLong(22, row1.ccc_party_id1);
						}

						if (row1.order_date != null) {
							pstmt_tDBOutput_1.setTimestamp(
									23,
									new java.sql.Timestamp(row1.order_date
											.getTime()));
						} else {
							pstmt_tDBOutput_1.setNull(23,
									java.sql.Types.TIMESTAMP);
						}

						if (row1.channel == null) {
							pstmt_tDBOutput_1.setNull(24,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(24, row1.channel);
						}

						if (row1.country == null) {
							pstmt_tDBOutput_1.setNull(25,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(25, row1.country);
						}

						if (row1.organization_location_name == null) {
							pstmt_tDBOutput_1.setNull(26,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(26,
									row1.organization_location_name);
						}

						if (row1.city == null) {
							pstmt_tDBOutput_1.setNull(27,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(27, row1.city);
						}

						if (row1.state == null) {
							pstmt_tDBOutput_1.setNull(28,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(28, row1.state);
						}

						if (row1.postal_code == null) {
							pstmt_tDBOutput_1.setNull(29,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(29, row1.postal_code);
						}

						if (row1.country1 == null) {
							pstmt_tDBOutput_1.setNull(30,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(30, row1.country1);
						}

						if (row1.content_id == null) {
							pstmt_tDBOutput_1.setNull(31,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(31, row1.content_id);
						}

						if (row1.create_date1 != null) {
							pstmt_tDBOutput_1.setTimestamp(
									32,
									new java.sql.Timestamp(row1.create_date1
											.getTime()));
						} else {
							pstmt_tDBOutput_1.setNull(32,
									java.sql.Types.TIMESTAMP);
						}

						if (row1.update_date1 != null) {
							pstmt_tDBOutput_1.setTimestamp(
									33,
									new java.sql.Timestamp(row1.update_date1
											.getTime()));
						} else {
							pstmt_tDBOutput_1.setNull(33,
									java.sql.Types.TIMESTAMP);
						}

						if (row1.tou_name1 == null) {
							pstmt_tDBOutput_1.setNull(34,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(34, row1.tou_name1);
						}

						pstmt_tDBOutput_1.setShort(35, row1.tou_id);

						pstmt_tDBOutput_1.setShort(36, row1.tou_id1);

						if (row1.publication_name == null) {
							pstmt_tDBOutput_1.setNull(37,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(37,
									row1.publication_name);
						}

						if (row1.total_status == null) {
							pstmt_tDBOutput_1.setNull(38,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(38, row1.total_status);
						}

						if (row1.ccc_event_id == null) {
							pstmt_tDBOutput_1.setNull(39,
									java.sql.Types.INTEGER);
						} else {
							pstmt_tDBOutput_1.setInt(39, row1.ccc_event_id);
						}

						if (row1.source_of_content == null) {
							pstmt_tDBOutput_1.setNull(40,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(40,
									row1.source_of_content);
						}

						if (row1.create_date2 != null) {
							pstmt_tDBOutput_1.setTimestamp(
									41,
									new java.sql.Timestamp(row1.create_date2
											.getTime()));
						} else {
							pstmt_tDBOutput_1.setNull(41,
									java.sql.Types.TIMESTAMP);
						}

						if (row1.created_by_user == null) {
							pstmt_tDBOutput_1.setNull(42,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(42,
									row1.created_by_user);
						}

						if (row1.update_date2 != null) {
							pstmt_tDBOutput_1.setTimestamp(
									43,
									new java.sql.Timestamp(row1.update_date2
											.getTime()));
						} else {
							pstmt_tDBOutput_1.setNull(43,
									java.sql.Types.TIMESTAMP);
						}

						if (row1.updated_by_user == null) {
							pstmt_tDBOutput_1.setNull(44,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(44,
									row1.updated_by_user);
						}

						if (row1.tax_pass_thru == null) {
							pstmt_tDBOutput_1.setNull(45,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(45, row1.tax_pass_thru);
						}

						pstmt_tDBOutput_1.setDouble(46, row1.tax_amt);

						pstmt_tDBOutput_1.setDouble(47, row1.distribution_amt);

						pstmt_tDBOutput_1.setDouble(48, row1.rightsholder_fee);

						pstmt_tDBOutput_1.setDouble(49, row1.total_fee);

						pstmt_tDBOutput_1.setDouble(50, row1.total_fee1);

						if (row1.dur_circ_qty == null) {
							pstmt_tDBOutput_1.setNull(51,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(51, row1.dur_circ_qty);
						}

						if (row1.value == null) {
							pstmt_tDBOutput_1.setNull(52,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(52, row1.value);
						}

						if (row1.publisher_name == null) {
							pstmt_tDBOutput_1.setNull(53,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1
									.setString(53, row1.publisher_name);
						}

						if (row1.create_date3 != null) {
							pstmt_tDBOutput_1.setTimestamp(
									54,
									new java.sql.Timestamp(row1.create_date3
											.getTime()));
						} else {
							pstmt_tDBOutput_1.setNull(54,
									java.sql.Types.TIMESTAMP);
						}

						if (row1.update_date3 != null) {
							pstmt_tDBOutput_1.setTimestamp(
									55,
									new java.sql.Timestamp(row1.update_date3
											.getTime()));
						} else {
							pstmt_tDBOutput_1.setNull(55,
									java.sql.Types.TIMESTAMP);
						}

						pstmt_tDBOutput_1.addBatch();
						nb_line_tDBOutput_1++;

						batchSizeCounter_tDBOutput_1++;

						if (!whetherReject_tDBOutput_1) {
						}
						if ((batchSize_tDBOutput_1 > 0)
								&& (batchSize_tDBOutput_1 <= batchSizeCounter_tDBOutput_1)) {
							try {
								int countSum_tDBOutput_1 = 0;

								for (int countEach_tDBOutput_1 : pstmt_tDBOutput_1
										.executeBatch()) {
									countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0
											: countEach_tDBOutput_1);
								}

								insertedCount_tDBOutput_1 += countSum_tDBOutput_1;

								batchSizeCounter_tDBOutput_1 = 0;
							} catch (java.sql.BatchUpdateException e_tDBOutput_1) {
								java.sql.SQLException ne_tDBOutput_1 = e_tDBOutput_1
										.getNextException(), sqle_tDBOutput_1 = null;
								String errormessage_tDBOutput_1;
								if (ne_tDBOutput_1 != null) {
									// build new exception to provide the
									// original cause
									sqle_tDBOutput_1 = new java.sql.SQLException(
											e_tDBOutput_1.getMessage()
													+ "\ncaused by: "
													+ ne_tDBOutput_1
															.getMessage(),
											ne_tDBOutput_1.getSQLState(),
											ne_tDBOutput_1.getErrorCode(),
											ne_tDBOutput_1);
									errormessage_tDBOutput_1 = sqle_tDBOutput_1
											.getMessage();
								} else {
									errormessage_tDBOutput_1 = e_tDBOutput_1
											.getMessage();
								}

								if (ne_tDBOutput_1 != null) {
									throw (sqle_tDBOutput_1);
								} else {
									throw (e_tDBOutput_1);
								}

							}
						}

						commitCounter_tDBOutput_1++;
						if (commitEvery_tDBOutput_1 <= commitCounter_tDBOutput_1) {
							if ((batchSize_tDBOutput_1 > 0)
									&& (batchSizeCounter_tDBOutput_1 > 0)) {
								try {
									int countSum_tDBOutput_1 = 0;

									for (int countEach_tDBOutput_1 : pstmt_tDBOutput_1
											.executeBatch()) {
										countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0
												: countEach_tDBOutput_1);
									}

									insertedCount_tDBOutput_1 += countSum_tDBOutput_1;

									batchSizeCounter_tDBOutput_1 = 0;
								} catch (java.sql.BatchUpdateException e_tDBOutput_1) {
									java.sql.SQLException ne_tDBOutput_1 = e_tDBOutput_1
											.getNextException(), sqle_tDBOutput_1 = null;
									String errormessage_tDBOutput_1;
									if (ne_tDBOutput_1 != null) {
										// build new exception to provide the
										// original cause
										sqle_tDBOutput_1 = new java.sql.SQLException(
												e_tDBOutput_1.getMessage()
														+ "\ncaused by: "
														+ ne_tDBOutput_1
																.getMessage(),
												ne_tDBOutput_1.getSQLState(),
												ne_tDBOutput_1.getErrorCode(),
												ne_tDBOutput_1);
										errormessage_tDBOutput_1 = sqle_tDBOutput_1
												.getMessage();
									} else {
										errormessage_tDBOutput_1 = e_tDBOutput_1
												.getMessage();
									}

									if (ne_tDBOutput_1 != null) {
										throw (sqle_tDBOutput_1);
									} else {
										throw (e_tDBOutput_1);
									}

								}
							}
							conn_tDBOutput_1.commit();

							commitCounter_tDBOutput_1 = 0;
						}

						tos_count_tDBOutput_1++;

						/**
						 * [tDBOutput_1 main ] stop
						 */

						/**
						 * [tDBOutput_1 process_data_begin ] start
						 */

						currentComponent = "tDBOutput_1";

						/**
						 * [tDBOutput_1 process_data_begin ] stop
						 */

						/**
						 * [tDBOutput_1 process_data_end ] start
						 */

						currentComponent = "tDBOutput_1";

						/**
						 * [tDBOutput_1 process_data_end ] stop
						 */

						/**
						 * [tDBInput_1 process_data_end ] start
						 */

						currentComponent = "tDBInput_1";

						/**
						 * [tDBInput_1 process_data_end ] stop
						 */

						/**
						 * [tDBInput_1 end ] start
						 */

						currentComponent = "tDBInput_1";

					}
				} finally {
					if (rs_tDBInput_1 != null) {
						rs_tDBInput_1.close();
					}
					if (stmt_tDBInput_1 != null) {
						stmt_tDBInput_1.close();
					}
				}

				globalMap.put("tDBInput_1_NB_LINE", nb_line_tDBInput_1);

				ok_Hash.put("tDBInput_1", true);
				end_Hash.put("tDBInput_1", System.currentTimeMillis());

				tStatCatcher_1.addMessage(
						"end",
						"tDBInput_1",
						end_Hash.get("tDBInput_1")
								- start_Hash.get("tDBInput_1"));
				tStatCatcher_1Process(globalMap);
				talendStats_STATS.addMessage(
						"end",
						"tDBInput_1",
						end_Hash.get("tDBInput_1")
								- start_Hash.get("tDBInput_1"));
				talendStats_STATSProcess(globalMap);

				/**
				 * [tDBInput_1 end ] stop
				 */

				/**
				 * [tDBOutput_1 end ] start
				 */

				currentComponent = "tDBOutput_1";

				try {
					int countSum_tDBOutput_1 = 0;
					if (pstmt_tDBOutput_1 != null
							&& batchSizeCounter_tDBOutput_1 > 0) {

						for (int countEach_tDBOutput_1 : pstmt_tDBOutput_1
								.executeBatch()) {
							countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0
									: countEach_tDBOutput_1);
						}

					}

					insertedCount_tDBOutput_1 += countSum_tDBOutput_1;

				} catch (java.sql.BatchUpdateException e_tDBOutput_1) {
					java.sql.SQLException ne_tDBOutput_1 = e_tDBOutput_1
							.getNextException(), sqle_tDBOutput_1 = null;
					String errormessage_tDBOutput_1;
					if (ne_tDBOutput_1 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_1 = new java.sql.SQLException(
								e_tDBOutput_1.getMessage() + "\ncaused by: "
										+ ne_tDBOutput_1.getMessage(),
								ne_tDBOutput_1.getSQLState(),
								ne_tDBOutput_1.getErrorCode(), ne_tDBOutput_1);
						errormessage_tDBOutput_1 = sqle_tDBOutput_1
								.getMessage();
					} else {
						errormessage_tDBOutput_1 = e_tDBOutput_1.getMessage();
					}

					if (ne_tDBOutput_1 != null) {
						throw (sqle_tDBOutput_1);
					} else {
						throw (e_tDBOutput_1);
					}

				}

				if (pstmt_tDBOutput_1 != null) {

					pstmt_tDBOutput_1.close();
					resourceMap.remove("pstmt_tDBOutput_1");
				}
				resourceMap.put("statementClosed_tDBOutput_1", true);

				conn_tDBOutput_1.commit();

				conn_tDBOutput_1.close();

				resourceMap.put("finish_tDBOutput_1", true);

				nb_line_deleted_tDBOutput_1 = nb_line_deleted_tDBOutput_1
						+ deletedCount_tDBOutput_1;
				nb_line_update_tDBOutput_1 = nb_line_update_tDBOutput_1
						+ updatedCount_tDBOutput_1;
				nb_line_inserted_tDBOutput_1 = nb_line_inserted_tDBOutput_1
						+ insertedCount_tDBOutput_1;
				nb_line_rejected_tDBOutput_1 = nb_line_rejected_tDBOutput_1
						+ rejectedCount_tDBOutput_1;

				globalMap.put("tDBOutput_1_NB_LINE", nb_line_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_UPDATED",
						nb_line_update_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_INSERTED",
						nb_line_inserted_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_DELETED",
						nb_line_deleted_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_REJECTED",
						nb_line_rejected_tDBOutput_1);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row1" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tDBOutput_1", true);
				end_Hash.put("tDBOutput_1", System.currentTimeMillis());

				tStatCatcher_1.addMessage(
						"end",
						"tDBOutput_1",
						end_Hash.get("tDBOutput_1")
								- start_Hash.get("tDBOutput_1"));
				tStatCatcher_1Process(globalMap);
				talendStats_STATS.addMessage(
						"end",
						"tDBOutput_1",
						end_Hash.get("tDBOutput_1")
								- start_Hash.get("tDBOutput_1"));
				talendStats_STATSProcess(globalMap);
				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk3", 0, "ok");
				}
				tDBInput_2Process(globalMap);
				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk4", 0, "ok");
				}
				tDBInput_3Process(globalMap);
				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk6", 0, "ok");
				}
				tDBInput_4Process(globalMap);
				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk7", 0, "ok");
				}
				tDBInput_5Process(globalMap);
				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk8", 0, "ok");
				}
				tDBInput_6Process(globalMap);

				/**
				 * [tDBOutput_1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_1 finally ] start
				 */

				currentComponent = "tDBInput_1";

				/**
				 * [tDBInput_1 finally ] stop
				 */

				/**
				 * [tDBOutput_1 finally ] start
				 */

				currentComponent = "tDBOutput_1";

				try {
					if (resourceMap.get("statementClosed_tDBOutput_1") == null) {
						java.sql.PreparedStatement pstmtToClose_tDBOutput_1 = null;
						if ((pstmtToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmt_tDBOutput_1")) != null) {
							pstmtToClose_tDBOutput_1.close();
						}
					}
				} finally {
					if (resourceMap.get("finish_tDBOutput_1") == null) {
						java.sql.Connection ctn_tDBOutput_1 = null;
						if ((ctn_tDBOutput_1 = (java.sql.Connection) resourceMap
								.get("conn_tDBOutput_1")) != null) {
							try {
								ctn_tDBOutput_1.close();
							} catch (java.sql.SQLException sqlEx_tDBOutput_1) {
								String errorMessage_tDBOutput_1 = "failed to close the connection in tDBOutput_1 :"
										+ sqlEx_tDBOutput_1.getMessage();
								System.err.println(errorMessage_tDBOutput_1);
							}
						}
					}
				}

				/**
				 * [tDBOutput_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 1);
	}

	public static class row2Struct implements
			routines.system.IPersistableRow<row2Struct> {
		final static byte[] commonByteArrayLock_ORDER_ETL_OLD_RL_ETL = new byte[0];
		static byte[] commonByteArray_ORDER_ETL_OLD_RL_ETL = new byte[0];

		public Integer dwo_invoice_dimension_uid;

		public Integer getDwo_invoice_dimension_uid() {
			return this.dwo_invoice_dimension_uid;
		}

		public Integer source_system_invoice_uid;

		public Integer getSource_system_invoice_uid() {
			return this.source_system_invoice_uid;
		}

		public Integer invoice_number;

		public Integer getInvoice_number() {
			return this.invoice_number;
		}

		public String invoice_source_system;

		public String getInvoice_source_system() {
			return this.invoice_source_system;
		}

		public java.util.Date invoice_date;

		public java.util.Date getInvoice_date() {
			return this.invoice_date;
		}

		public String invoice_status;

		public String getInvoice_status() {
			return this.invoice_status;
		}

		public java.util.Date invoice_payment_date;

		public java.util.Date getInvoice_payment_date() {
			return this.invoice_payment_date;
		}

		public BigDecimal invoice_total_amount;

		public BigDecimal getInvoice_total_amount() {
			return this.invoice_total_amount;
		}

		public BigDecimal invoice_tax_amount;

		public BigDecimal getInvoice_tax_amount() {
			return this.invoice_tax_amount;
		}

		public BigDecimal invoice_discount_amount;

		public BigDecimal getInvoice_discount_amount() {
			return this.invoice_discount_amount;
		}

		public BigDecimal invoice_exchange_rate;

		public BigDecimal getInvoice_exchange_rate() {
			return this.invoice_exchange_rate;
		}

		public String channel;

		public String getChannel() {
			return this.channel;
		}

		public String currency;

		public String getCurrency() {
			return this.currency;
		}

		public String cart_type;

		public String getCart_type() {
			return this.cart_type;
		}

		public String organization_name;

		public String getOrganization_name() {
			return this.organization_name;
		}

		public BigDecimal total_amount_in_transaction_currency;

		public BigDecimal getTotal_amount_in_transaction_currency() {
			return this.total_amount_in_transaction_currency;
		}

		public BigDecimal original_amount_in_transaction_currency;

		public BigDecimal getOriginal_amount_in_transaction_currency() {
			return this.original_amount_in_transaction_currency;
		}

		public BigDecimal tax_amount_in_transaction_currency;

		public BigDecimal getTax_amount_in_transaction_currency() {
			return this.tax_amount_in_transaction_currency;
		}

		public String payment_status;

		public String getPayment_status() {
			return this.payment_status;
		}

		public String invoice_class;

		public String getInvoice_class() {
			return this.invoice_class;
		}

		public String organization_uid;

		public String getOrganization_uid() {
			return this.organization_uid;
		}

		public java.util.Date created_datetime;

		public java.util.Date getCreated_datetime() {
			return this.created_datetime;
		}

		public String created_by_user;

		public String getCreated_by_user() {
			return this.created_by_user;
		}

		public java.util.Date updated_datetime;

		public java.util.Date getUpdated_datetime() {
			return this.updated_datetime;
		}

		public String updated_by_user;

		public String getUpdated_by_user() {
			return this.updated_by_user;
		}

		public java.util.Date credit_memo_created_datetime;

		public java.util.Date getCredit_memo_created_datetime() {
			return this.credit_memo_created_datetime;
		}

		public java.util.Date credit_memo_updated_datetime;

		public java.util.Date getCredit_memo_updated_datetime() {
			return this.credit_memo_updated_datetime;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ORDER_ETL_OLD_RL_ETL.length) {
					if (length < 1024
							&& commonByteArray_ORDER_ETL_OLD_RL_ETL.length == 0) {
						commonByteArray_ORDER_ETL_OLD_RL_ETL = new byte[1024];
					} else {
						commonByteArray_ORDER_ETL_OLD_RL_ETL = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ORDER_ETL_OLD_RL_ETL, 0, length);
				strReturn = new String(commonByteArray_ORDER_ETL_OLD_RL_ETL, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ORDER_ETL_OLD_RL_ETL) {

				try {

					int length = 0;

					this.dwo_invoice_dimension_uid = readInteger(dis);

					this.source_system_invoice_uid = readInteger(dis);

					this.invoice_number = readInteger(dis);

					this.invoice_source_system = readString(dis);

					this.invoice_date = readDate(dis);

					this.invoice_status = readString(dis);

					this.invoice_payment_date = readDate(dis);

					this.invoice_total_amount = (BigDecimal) dis.readObject();

					this.invoice_tax_amount = (BigDecimal) dis.readObject();

					this.invoice_discount_amount = (BigDecimal) dis
							.readObject();

					this.invoice_exchange_rate = (BigDecimal) dis.readObject();

					this.channel = readString(dis);

					this.currency = readString(dis);

					this.cart_type = readString(dis);

					this.organization_name = readString(dis);

					this.total_amount_in_transaction_currency = (BigDecimal) dis
							.readObject();

					this.original_amount_in_transaction_currency = (BigDecimal) dis
							.readObject();

					this.tax_amount_in_transaction_currency = (BigDecimal) dis
							.readObject();

					this.payment_status = readString(dis);

					this.invoice_class = readString(dis);

					this.organization_uid = readString(dis);

					this.created_datetime = readDate(dis);

					this.created_by_user = readString(dis);

					this.updated_datetime = readDate(dis);

					this.updated_by_user = readString(dis);

					this.credit_memo_created_datetime = readDate(dis);

					this.credit_memo_updated_datetime = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.dwo_invoice_dimension_uid, dos);

				// Integer

				writeInteger(this.source_system_invoice_uid, dos);

				// Integer

				writeInteger(this.invoice_number, dos);

				// String

				writeString(this.invoice_source_system, dos);

				// java.util.Date

				writeDate(this.invoice_date, dos);

				// String

				writeString(this.invoice_status, dos);

				// java.util.Date

				writeDate(this.invoice_payment_date, dos);

				// BigDecimal

				dos.writeObject(this.invoice_total_amount);

				// BigDecimal

				dos.writeObject(this.invoice_tax_amount);

				// BigDecimal

				dos.writeObject(this.invoice_discount_amount);

				// BigDecimal

				dos.writeObject(this.invoice_exchange_rate);

				// String

				writeString(this.channel, dos);

				// String

				writeString(this.currency, dos);

				// String

				writeString(this.cart_type, dos);

				// String

				writeString(this.organization_name, dos);

				// BigDecimal

				dos.writeObject(this.total_amount_in_transaction_currency);

				// BigDecimal

				dos.writeObject(this.original_amount_in_transaction_currency);

				// BigDecimal

				dos.writeObject(this.tax_amount_in_transaction_currency);

				// String

				writeString(this.payment_status, dos);

				// String

				writeString(this.invoice_class, dos);

				// String

				writeString(this.organization_uid, dos);

				// java.util.Date

				writeDate(this.created_datetime, dos);

				// String

				writeString(this.created_by_user, dos);

				// java.util.Date

				writeDate(this.updated_datetime, dos);

				// String

				writeString(this.updated_by_user, dos);

				// java.util.Date

				writeDate(this.credit_memo_created_datetime, dos);

				// java.util.Date

				writeDate(this.credit_memo_updated_datetime, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("dwo_invoice_dimension_uid="
					+ String.valueOf(dwo_invoice_dimension_uid));
			sb.append(",source_system_invoice_uid="
					+ String.valueOf(source_system_invoice_uid));
			sb.append(",invoice_number=" + String.valueOf(invoice_number));
			sb.append(",invoice_source_system=" + invoice_source_system);
			sb.append(",invoice_date=" + String.valueOf(invoice_date));
			sb.append(",invoice_status=" + invoice_status);
			sb.append(",invoice_payment_date="
					+ String.valueOf(invoice_payment_date));
			sb.append(",invoice_total_amount="
					+ String.valueOf(invoice_total_amount));
			sb.append(",invoice_tax_amount="
					+ String.valueOf(invoice_tax_amount));
			sb.append(",invoice_discount_amount="
					+ String.valueOf(invoice_discount_amount));
			sb.append(",invoice_exchange_rate="
					+ String.valueOf(invoice_exchange_rate));
			sb.append(",channel=" + channel);
			sb.append(",currency=" + currency);
			sb.append(",cart_type=" + cart_type);
			sb.append(",organization_name=" + organization_name);
			sb.append(",total_amount_in_transaction_currency="
					+ String.valueOf(total_amount_in_transaction_currency));
			sb.append(",original_amount_in_transaction_currency="
					+ String.valueOf(original_amount_in_transaction_currency));
			sb.append(",tax_amount_in_transaction_currency="
					+ String.valueOf(tax_amount_in_transaction_currency));
			sb.append(",payment_status=" + payment_status);
			sb.append(",invoice_class=" + invoice_class);
			sb.append(",organization_uid=" + organization_uid);
			sb.append(",created_datetime=" + String.valueOf(created_datetime));
			sb.append(",created_by_user=" + created_by_user);
			sb.append(",updated_datetime=" + String.valueOf(updated_datetime));
			sb.append(",updated_by_user=" + updated_by_user);
			sb.append(",credit_memo_created_datetime="
					+ String.valueOf(credit_memo_created_datetime));
			sb.append(",credit_memo_updated_datetime="
					+ String.valueOf(credit_memo_updated_datetime));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_2Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDBInput_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row2Struct row2 = new row2Struct();

				/**
				 * [tDBOutput_2 begin ] start
				 */

				ok_Hash.put("tDBOutput_2", false);
				start_Hash.put("tDBOutput_2", System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tDBOutput_2");
				tStatCatcher_1Process(globalMap);

				talendStats_STATS.addMessage("begin", "tDBOutput_2");
				talendStats_STATSProcess(globalMap);

				currentComponent = "tDBOutput_2";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row2" + iterateId, 0, 0);

					}
				}

				int tos_count_tDBOutput_2 = 0;

				String dbschema_tDBOutput_2 = null;
				dbschema_tDBOutput_2 = context.data_warehouse_order_dwos_schema;

				String tableName_tDBOutput_2 = null;
				if (dbschema_tDBOutput_2 == null
						|| dbschema_tDBOutput_2.trim().length() == 0) {
					tableName_tDBOutput_2 = "dwo_invoice_dimension";
				} else {
					tableName_tDBOutput_2 = dbschema_tDBOutput_2 + "\".\""
							+ "dwo_invoice_dimension";
				}

				int nb_line_tDBOutput_2 = 0;
				int nb_line_update_tDBOutput_2 = 0;
				int nb_line_inserted_tDBOutput_2 = 0;
				int nb_line_deleted_tDBOutput_2 = 0;
				int nb_line_rejected_tDBOutput_2 = 0;

				int deletedCount_tDBOutput_2 = 0;
				int updatedCount_tDBOutput_2 = 0;
				int insertedCount_tDBOutput_2 = 0;
				int rejectedCount_tDBOutput_2 = 0;

				boolean whetherReject_tDBOutput_2 = false;

				java.sql.Connection conn_tDBOutput_2 = null;
				String dbUser_tDBOutput_2 = null;

				java.lang.Class.forName("org.postgresql.Driver");
				String url_tDBOutput_2 = "jdbc:postgresql://"
						+ context.data_warehouse_order_dwos_host + ":"
						+ context.data_warehouse_order_dwos_port + "/"
						+ context.data_warehouse_order_dwos_database;
				dbUser_tDBOutput_2 = context.data_warehouse_order_dwos_username;

				final String decryptedPassword_tDBOutput_2 = context.data_warehouse_order_dwos_password;

				String dbPwd_tDBOutput_2 = decryptedPassword_tDBOutput_2;

				conn_tDBOutput_2 = java.sql.DriverManager.getConnection(
						url_tDBOutput_2, dbUser_tDBOutput_2, dbPwd_tDBOutput_2);

				resourceMap.put("conn_tDBOutput_2", conn_tDBOutput_2);
				conn_tDBOutput_2.setAutoCommit(false);
				int commitEvery_tDBOutput_2 = 10000;
				int commitCounter_tDBOutput_2 = 0;

				int batchSize_tDBOutput_2 = 10000;
				int batchSizeCounter_tDBOutput_2 = 0;

				int count_tDBOutput_2 = 0;
				String insert_tDBOutput_2 = "INSERT INTO \""
						+ tableName_tDBOutput_2
						+ "\" (\"dwo_invoice_dimension_uid\",\"source_system_invoice_uid\",\"invoice_number\",\"invoice_source_system\",\"invoice_date\",\"invoice_status\",\"invoice_payment_date\",\"invoice_total_amount\",\"invoice_tax_amount\",\"invoice_discount_amount\",\"invoice_exchange_rate\",\"channel\",\"currency\",\"cart_type\",\"organization_name\",\"total_amount_in_transaction_currency\",\"original_amount_in_transaction_currency\",\"tax_amount_in_transaction_currency\",\"payment_status\",\"invoice_class\",\"organization_uid\",\"created_datetime\",\"created_by_user\",\"updated_datetime\",\"updated_by_user\",\"credit_memo_created_datetime\",\"credit_memo_updated_datetime\") VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

				java.sql.PreparedStatement pstmt_tDBOutput_2 = conn_tDBOutput_2
						.prepareStatement(insert_tDBOutput_2);
				resourceMap.put("pstmt_tDBOutput_2", pstmt_tDBOutput_2);

				/**
				 * [tDBOutput_2 begin ] stop
				 */

				/**
				 * [tDBInput_2 begin ] start
				 */

				ok_Hash.put("tDBInput_2", false);
				start_Hash.put("tDBInput_2", System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tDBInput_2");
				tStatCatcher_1Process(globalMap);

				talendStats_STATS.addMessage("begin", "tDBInput_2");
				talendStats_STATSProcess(globalMap);

				currentComponent = "tDBInput_2";

				int tos_count_tDBInput_2 = 0;

				int nb_line_tDBInput_2 = 0;
				java.sql.Connection conn_tDBInput_2 = null;
				String driverClass_tDBInput_2 = "org.postgresql.Driver";
				java.lang.Class.forName(driverClass_tDBInput_2);
				String dbUser_tDBInput_2 = context.data_warehouse_order_dwos_username;

				final String decryptedPassword_tDBInput_2 = context.data_warehouse_order_dwos_password;

				String dbPwd_tDBInput_2 = decryptedPassword_tDBInput_2;

				String url_tDBInput_2 = "jdbc:postgresql://"
						+ context.data_warehouse_order_dwos_host + ":"
						+ context.data_warehouse_order_dwos_port + "/"
						+ context.data_warehouse_order_dwos_database;

				conn_tDBInput_2 = java.sql.DriverManager.getConnection(
						url_tDBInput_2, dbUser_tDBInput_2, dbPwd_tDBInput_2);

				conn_tDBInput_2.setAutoCommit(false);

				java.sql.Statement stmt_tDBInput_2 = conn_tDBInput_2
						.createStatement();
				stmt_tDBInput_2.setFetchSize(1000);

				String dbquery_tDBInput_2 = "SELECT fr.invoice_dimension_uid::INTEGER as dwo_invoice_dimension_uid,\n       fr.invoice_number as source_system_invoic"
						+ "e_uid,\n       fr.invoice_number as invoice_number,\n       'RL' as invoice_source_system,\n       fr.invoice_created_datet"
						+ "ime as invoice_date,\n       fr.invoice_status as invoice_status,\n       fr.invoice_payment_date as invoice_payment_date,"
						+ "\n       case when fr.credit_memo_created_datetime is not null\n         then 0 - fr.total_amount\n       else fr.total_amo"
						+ "unt\n       end as invoice_total_amount,\n       fr.tax_amount as invoice_tax_amount,\n       NULL::NUMERIC as invoice_disc"
						+ "ount_amount,\n       fr.invoice_exchange_rate as invoice_exchange_rate,\n       fr.order_channel as channel,\n       fr.cur"
						+ "rency as currency,\n       NULL as cart_type,\n       fr.organization_name as organization_name,\n       NULL::NUMERIC as t"
						+ "otal_amount_in_transaction_currency,\n       NULL::NUMERIC as original_amount_in_transaction_currency,\n       NULL::NUMER"
						+ "IC as tax_amount_in_transaction_currency,\n       CASE WHEN fr.payment_status like ('Credited%')\n         THEN 'Credited'"
						+ "\n       WHEN fr.payment_status like ('Distributed Credited%')\n	     THEN 'Distributed Credited'\n       WHEN fr.payment_s"
						+ "tatus like ('Prior Credited Distributed%')\n          THEN 'Prior Credited Distributed'\n       WHEN  fr.payment_status li"
						+ "ke ('Prior Credited%')\n          THEN 'Prior Credited'\n       ELSE fr.payment_status\n       END as payment_status,\n     "
						+ "  NULL as invoice_class,\n       NULL as organization_uid,\n       fr.invoice_created_datetime as created_datetime,\n      "
						+ " fr.created_by_user as created_by_user,\n       fr.invoice_updated_datetime as updated_datetime,\n       fr.updated_by_use"
						+ "r as updated_by_user,\n       fr.credit_memo_created_datetime as credit_memo_created_datetime,\n       fr.credit_memo_upda"
						+ "ted_datetime as credit_memo_updated_datetime\nFROM staging.dwo_rl_v_finance_report fr\nWHERE fr.payment_status != 'CANCELE"
						+ "D'";

				globalMap.put("tDBInput_2_QUERY", dbquery_tDBInput_2);
				java.sql.ResultSet rs_tDBInput_2 = null;

				try {
					rs_tDBInput_2 = stmt_tDBInput_2
							.executeQuery(dbquery_tDBInput_2);
					java.sql.ResultSetMetaData rsmd_tDBInput_2 = rs_tDBInput_2
							.getMetaData();
					int colQtyInRs_tDBInput_2 = rsmd_tDBInput_2
							.getColumnCount();

					String tmpContent_tDBInput_2 = null;

					while (rs_tDBInput_2.next()) {
						nb_line_tDBInput_2++;

						if (colQtyInRs_tDBInput_2 < 1) {
							row2.dwo_invoice_dimension_uid = null;
						} else {

							if (rs_tDBInput_2.getObject(1) != null) {
								row2.dwo_invoice_dimension_uid = rs_tDBInput_2
										.getInt(1);
							} else {
								row2.dwo_invoice_dimension_uid = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 2) {
							row2.source_system_invoice_uid = null;
						} else {

							if (rs_tDBInput_2.getObject(2) != null) {
								row2.source_system_invoice_uid = rs_tDBInput_2
										.getInt(2);
							} else {
								row2.source_system_invoice_uid = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 3) {
							row2.invoice_number = null;
						} else {

							if (rs_tDBInput_2.getObject(3) != null) {
								row2.invoice_number = rs_tDBInput_2.getInt(3);
							} else {
								row2.invoice_number = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 4) {
							row2.invoice_source_system = null;
						} else {

							row2.invoice_source_system = routines.system.JDBCUtil
									.getString(rs_tDBInput_2, 4, false);
						}
						if (colQtyInRs_tDBInput_2 < 5) {
							row2.invoice_date = null;
						} else {

							row2.invoice_date = routines.system.JDBCUtil
									.getDate(rs_tDBInput_2, 5);
						}
						if (colQtyInRs_tDBInput_2 < 6) {
							row2.invoice_status = null;
						} else {

							row2.invoice_status = routines.system.JDBCUtil
									.getString(rs_tDBInput_2, 6, false);
						}
						if (colQtyInRs_tDBInput_2 < 7) {
							row2.invoice_payment_date = null;
						} else {

							row2.invoice_payment_date = routines.system.JDBCUtil
									.getDate(rs_tDBInput_2, 7);
						}
						if (colQtyInRs_tDBInput_2 < 8) {
							row2.invoice_total_amount = null;
						} else {

							if (rs_tDBInput_2.getObject(8) != null) {
								row2.invoice_total_amount = rs_tDBInput_2
										.getBigDecimal(8);
							} else {
								row2.invoice_total_amount = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 9) {
							row2.invoice_tax_amount = null;
						} else {

							if (rs_tDBInput_2.getObject(9) != null) {
								row2.invoice_tax_amount = rs_tDBInput_2
										.getBigDecimal(9);
							} else {
								row2.invoice_tax_amount = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 10) {
							row2.invoice_discount_amount = null;
						} else {

							if (rs_tDBInput_2.getObject(10) != null) {
								row2.invoice_discount_amount = rs_tDBInput_2
										.getBigDecimal(10);
							} else {
								row2.invoice_discount_amount = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 11) {
							row2.invoice_exchange_rate = null;
						} else {

							if (rs_tDBInput_2.getObject(11) != null) {
								row2.invoice_exchange_rate = rs_tDBInput_2
										.getBigDecimal(11);
							} else {
								row2.invoice_exchange_rate = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 12) {
							row2.channel = null;
						} else {

							row2.channel = routines.system.JDBCUtil.getString(
									rs_tDBInput_2, 12, false);
						}
						if (colQtyInRs_tDBInput_2 < 13) {
							row2.currency = null;
						} else {

							row2.currency = routines.system.JDBCUtil.getString(
									rs_tDBInput_2, 13, false);
						}
						if (colQtyInRs_tDBInput_2 < 14) {
							row2.cart_type = null;
						} else {

							row2.cart_type = routines.system.JDBCUtil
									.getString(rs_tDBInput_2, 14, false);
						}
						if (colQtyInRs_tDBInput_2 < 15) {
							row2.organization_name = null;
						} else {

							row2.organization_name = routines.system.JDBCUtil
									.getString(rs_tDBInput_2, 15, false);
						}
						if (colQtyInRs_tDBInput_2 < 16) {
							row2.total_amount_in_transaction_currency = null;
						} else {

							if (rs_tDBInput_2.getObject(16) != null) {
								row2.total_amount_in_transaction_currency = rs_tDBInput_2
										.getBigDecimal(16);
							} else {
								row2.total_amount_in_transaction_currency = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 17) {
							row2.original_amount_in_transaction_currency = null;
						} else {

							if (rs_tDBInput_2.getObject(17) != null) {
								row2.original_amount_in_transaction_currency = rs_tDBInput_2
										.getBigDecimal(17);
							} else {
								row2.original_amount_in_transaction_currency = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 18) {
							row2.tax_amount_in_transaction_currency = null;
						} else {

							if (rs_tDBInput_2.getObject(18) != null) {
								row2.tax_amount_in_transaction_currency = rs_tDBInput_2
										.getBigDecimal(18);
							} else {
								row2.tax_amount_in_transaction_currency = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 19) {
							row2.payment_status = null;
						} else {

							row2.payment_status = routines.system.JDBCUtil
									.getString(rs_tDBInput_2, 19, false);
						}
						if (colQtyInRs_tDBInput_2 < 20) {
							row2.invoice_class = null;
						} else {

							row2.invoice_class = routines.system.JDBCUtil
									.getString(rs_tDBInput_2, 20, false);
						}
						if (colQtyInRs_tDBInput_2 < 21) {
							row2.organization_uid = null;
						} else {

							row2.organization_uid = routines.system.JDBCUtil
									.getString(rs_tDBInput_2, 21, false);
						}
						if (colQtyInRs_tDBInput_2 < 22) {
							row2.created_datetime = null;
						} else {

							row2.created_datetime = routines.system.JDBCUtil
									.getDate(rs_tDBInput_2, 22);
						}
						if (colQtyInRs_tDBInput_2 < 23) {
							row2.created_by_user = null;
						} else {

							row2.created_by_user = routines.system.JDBCUtil
									.getString(rs_tDBInput_2, 23, false);
						}
						if (colQtyInRs_tDBInput_2 < 24) {
							row2.updated_datetime = null;
						} else {

							row2.updated_datetime = routines.system.JDBCUtil
									.getDate(rs_tDBInput_2, 24);
						}
						if (colQtyInRs_tDBInput_2 < 25) {
							row2.updated_by_user = null;
						} else {

							row2.updated_by_user = routines.system.JDBCUtil
									.getString(rs_tDBInput_2, 25, false);
						}
						if (colQtyInRs_tDBInput_2 < 26) {
							row2.credit_memo_created_datetime = null;
						} else {

							row2.credit_memo_created_datetime = routines.system.JDBCUtil
									.getDate(rs_tDBInput_2, 26);
						}
						if (colQtyInRs_tDBInput_2 < 27) {
							row2.credit_memo_updated_datetime = null;
						} else {

							row2.credit_memo_updated_datetime = routines.system.JDBCUtil
									.getDate(rs_tDBInput_2, 27);
						}

						/**
						 * [tDBInput_2 begin ] stop
						 */

						/**
						 * [tDBInput_2 main ] start
						 */

						currentComponent = "tDBInput_2";

						tos_count_tDBInput_2++;

						/**
						 * [tDBInput_2 main ] stop
						 */

						/**
						 * [tDBInput_2 process_data_begin ] start
						 */

						currentComponent = "tDBInput_2";

						/**
						 * [tDBInput_2 process_data_begin ] stop
						 */

						/**
						 * [tDBOutput_2 main ] start
						 */

						currentComponent = "tDBOutput_2";

						// row2
						// row2

						if (execStat) {
							runStat.updateStatOnConnection("row2" + iterateId,
									1, 1);
						}

						whetherReject_tDBOutput_2 = false;
						if (row2.dwo_invoice_dimension_uid == null) {
							pstmt_tDBOutput_2
									.setNull(1, java.sql.Types.INTEGER);
						} else {
							pstmt_tDBOutput_2.setInt(1,
									row2.dwo_invoice_dimension_uid);
						}

						if (row2.source_system_invoice_uid == null) {
							pstmt_tDBOutput_2
									.setNull(2, java.sql.Types.INTEGER);
						} else {
							pstmt_tDBOutput_2.setInt(2,
									row2.source_system_invoice_uid);
						}

						if (row2.invoice_number == null) {
							pstmt_tDBOutput_2
									.setNull(3, java.sql.Types.INTEGER);
						} else {
							pstmt_tDBOutput_2.setInt(3, row2.invoice_number);
						}

						if (row2.invoice_source_system == null) {
							pstmt_tDBOutput_2
									.setNull(4, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(4,
									row2.invoice_source_system);
						}

						if (row2.invoice_date != null) {
							pstmt_tDBOutput_2.setTimestamp(
									5,
									new java.sql.Timestamp(row2.invoice_date
											.getTime()));
						} else {
							pstmt_tDBOutput_2.setNull(5,
									java.sql.Types.TIMESTAMP);
						}

						if (row2.invoice_status == null) {
							pstmt_tDBOutput_2
									.setNull(6, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(6, row2.invoice_status);
						}

						if (row2.invoice_payment_date != null) {
							pstmt_tDBOutput_2
									.setTimestamp(
											7,
											new java.sql.Timestamp(
													row2.invoice_payment_date
															.getTime()));
						} else {
							pstmt_tDBOutput_2.setNull(7,
									java.sql.Types.TIMESTAMP);
						}

						pstmt_tDBOutput_2.setBigDecimal(8,
								row2.invoice_total_amount);

						pstmt_tDBOutput_2.setBigDecimal(9,
								row2.invoice_tax_amount);

						pstmt_tDBOutput_2.setBigDecimal(10,
								row2.invoice_discount_amount);

						pstmt_tDBOutput_2.setBigDecimal(11,
								row2.invoice_exchange_rate);

						if (row2.channel == null) {
							pstmt_tDBOutput_2.setNull(12,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(12, row2.channel);
						}

						if (row2.currency == null) {
							pstmt_tDBOutput_2.setNull(13,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(13, row2.currency);
						}

						if (row2.cart_type == null) {
							pstmt_tDBOutput_2.setNull(14,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(14, row2.cart_type);
						}

						if (row2.organization_name == null) {
							pstmt_tDBOutput_2.setNull(15,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(15,
									row2.organization_name);
						}

						pstmt_tDBOutput_2.setBigDecimal(16,
								row2.total_amount_in_transaction_currency);

						pstmt_tDBOutput_2.setBigDecimal(17,
								row2.original_amount_in_transaction_currency);

						pstmt_tDBOutput_2.setBigDecimal(18,
								row2.tax_amount_in_transaction_currency);

						if (row2.payment_status == null) {
							pstmt_tDBOutput_2.setNull(19,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2
									.setString(19, row2.payment_status);
						}

						if (row2.invoice_class == null) {
							pstmt_tDBOutput_2.setNull(20,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(20, row2.invoice_class);
						}

						if (row2.organization_uid == null) {
							pstmt_tDBOutput_2.setNull(21,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(21,
									row2.organization_uid);
						}

						if (row2.created_datetime != null) {
							pstmt_tDBOutput_2.setTimestamp(22,
									new java.sql.Timestamp(
											row2.created_datetime.getTime()));
						} else {
							pstmt_tDBOutput_2.setNull(22,
									java.sql.Types.TIMESTAMP);
						}

						if (row2.created_by_user == null) {
							pstmt_tDBOutput_2.setNull(23,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(23,
									row2.created_by_user);
						}

						if (row2.updated_datetime != null) {
							pstmt_tDBOutput_2.setTimestamp(24,
									new java.sql.Timestamp(
											row2.updated_datetime.getTime()));
						} else {
							pstmt_tDBOutput_2.setNull(24,
									java.sql.Types.TIMESTAMP);
						}

						if (row2.updated_by_user == null) {
							pstmt_tDBOutput_2.setNull(25,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(25,
									row2.updated_by_user);
						}

						if (row2.credit_memo_created_datetime != null) {
							pstmt_tDBOutput_2.setTimestamp(
									26,
									new java.sql.Timestamp(
											row2.credit_memo_created_datetime
													.getTime()));
						} else {
							pstmt_tDBOutput_2.setNull(26,
									java.sql.Types.TIMESTAMP);
						}

						if (row2.credit_memo_updated_datetime != null) {
							pstmt_tDBOutput_2.setTimestamp(
									27,
									new java.sql.Timestamp(
											row2.credit_memo_updated_datetime
													.getTime()));
						} else {
							pstmt_tDBOutput_2.setNull(27,
									java.sql.Types.TIMESTAMP);
						}

						pstmt_tDBOutput_2.addBatch();
						nb_line_tDBOutput_2++;

						batchSizeCounter_tDBOutput_2++;

						if ((batchSize_tDBOutput_2 > 0)
								&& (batchSize_tDBOutput_2 <= batchSizeCounter_tDBOutput_2)) {
							try {
								int countSum_tDBOutput_2 = 0;

								for (int countEach_tDBOutput_2 : pstmt_tDBOutput_2
										.executeBatch()) {
									countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0
											: countEach_tDBOutput_2);
								}

								insertedCount_tDBOutput_2 += countSum_tDBOutput_2;

								batchSizeCounter_tDBOutput_2 = 0;
							} catch (java.sql.BatchUpdateException e_tDBOutput_2) {
								java.sql.SQLException ne_tDBOutput_2 = e_tDBOutput_2
										.getNextException(), sqle_tDBOutput_2 = null;
								String errormessage_tDBOutput_2;
								if (ne_tDBOutput_2 != null) {
									// build new exception to provide the
									// original cause
									sqle_tDBOutput_2 = new java.sql.SQLException(
											e_tDBOutput_2.getMessage()
													+ "\ncaused by: "
													+ ne_tDBOutput_2
															.getMessage(),
											ne_tDBOutput_2.getSQLState(),
											ne_tDBOutput_2.getErrorCode(),
											ne_tDBOutput_2);
									errormessage_tDBOutput_2 = sqle_tDBOutput_2
											.getMessage();
								} else {
									errormessage_tDBOutput_2 = e_tDBOutput_2
											.getMessage();
								}

								int countSum_tDBOutput_2 = 0;
								for (int countEach_tDBOutput_2 : e_tDBOutput_2
										.getUpdateCounts()) {
									countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0
											: countEach_tDBOutput_2);
								}

								insertedCount_tDBOutput_2 += countSum_tDBOutput_2;

								System.err.println(errormessage_tDBOutput_2);

							}
						}

						commitCounter_tDBOutput_2++;
						if (commitEvery_tDBOutput_2 <= commitCounter_tDBOutput_2) {
							if ((batchSize_tDBOutput_2 > 0)
									&& (batchSizeCounter_tDBOutput_2 > 0)) {
								try {
									int countSum_tDBOutput_2 = 0;

									for (int countEach_tDBOutput_2 : pstmt_tDBOutput_2
											.executeBatch()) {
										countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0
												: countEach_tDBOutput_2);
									}

									insertedCount_tDBOutput_2 += countSum_tDBOutput_2;

									batchSizeCounter_tDBOutput_2 = 0;
								} catch (java.sql.BatchUpdateException e_tDBOutput_2) {
									java.sql.SQLException ne_tDBOutput_2 = e_tDBOutput_2
											.getNextException(), sqle_tDBOutput_2 = null;
									String errormessage_tDBOutput_2;
									if (ne_tDBOutput_2 != null) {
										// build new exception to provide the
										// original cause
										sqle_tDBOutput_2 = new java.sql.SQLException(
												e_tDBOutput_2.getMessage()
														+ "\ncaused by: "
														+ ne_tDBOutput_2
																.getMessage(),
												ne_tDBOutput_2.getSQLState(),
												ne_tDBOutput_2.getErrorCode(),
												ne_tDBOutput_2);
										errormessage_tDBOutput_2 = sqle_tDBOutput_2
												.getMessage();
									} else {
										errormessage_tDBOutput_2 = e_tDBOutput_2
												.getMessage();
									}

									int countSum_tDBOutput_2 = 0;
									for (int countEach_tDBOutput_2 : e_tDBOutput_2
											.getUpdateCounts()) {
										countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0
												: countEach_tDBOutput_2);
									}

									insertedCount_tDBOutput_2 += countSum_tDBOutput_2;

									System.err
											.println(errormessage_tDBOutput_2);

								}
							}
							conn_tDBOutput_2.commit();

							commitCounter_tDBOutput_2 = 0;
						}

						tos_count_tDBOutput_2++;

						/**
						 * [tDBOutput_2 main ] stop
						 */

						/**
						 * [tDBOutput_2 process_data_begin ] start
						 */

						currentComponent = "tDBOutput_2";

						/**
						 * [tDBOutput_2 process_data_begin ] stop
						 */

						/**
						 * [tDBOutput_2 process_data_end ] start
						 */

						currentComponent = "tDBOutput_2";

						/**
						 * [tDBOutput_2 process_data_end ] stop
						 */

						/**
						 * [tDBInput_2 process_data_end ] start
						 */

						currentComponent = "tDBInput_2";

						/**
						 * [tDBInput_2 process_data_end ] stop
						 */

						/**
						 * [tDBInput_2 end ] start
						 */

						currentComponent = "tDBInput_2";

					}
				} finally {
					if (rs_tDBInput_2 != null) {
						rs_tDBInput_2.close();
					}
					if (stmt_tDBInput_2 != null) {
						stmt_tDBInput_2.close();
					}
					if (conn_tDBInput_2 != null && !conn_tDBInput_2.isClosed()) {

						conn_tDBInput_2.commit();

						conn_tDBInput_2.close();

					}

				}
				globalMap.put("tDBInput_2_NB_LINE", nb_line_tDBInput_2);

				ok_Hash.put("tDBInput_2", true);
				end_Hash.put("tDBInput_2", System.currentTimeMillis());

				tStatCatcher_1.addMessage(
						"end",
						"tDBInput_2",
						end_Hash.get("tDBInput_2")
								- start_Hash.get("tDBInput_2"));
				tStatCatcher_1Process(globalMap);
				talendStats_STATS.addMessage(
						"end",
						"tDBInput_2",
						end_Hash.get("tDBInput_2")
								- start_Hash.get("tDBInput_2"));
				talendStats_STATSProcess(globalMap);

				/**
				 * [tDBInput_2 end ] stop
				 */

				/**
				 * [tDBOutput_2 end ] start
				 */

				currentComponent = "tDBOutput_2";

				try {
					int countSum_tDBOutput_2 = 0;
					if (pstmt_tDBOutput_2 != null
							&& batchSizeCounter_tDBOutput_2 > 0) {

						for (int countEach_tDBOutput_2 : pstmt_tDBOutput_2
								.executeBatch()) {
							countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0
									: countEach_tDBOutput_2);
						}

					}

					insertedCount_tDBOutput_2 += countSum_tDBOutput_2;

				} catch (java.sql.BatchUpdateException e_tDBOutput_2) {
					java.sql.SQLException ne_tDBOutput_2 = e_tDBOutput_2
							.getNextException(), sqle_tDBOutput_2 = null;
					String errormessage_tDBOutput_2;
					if (ne_tDBOutput_2 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_2 = new java.sql.SQLException(
								e_tDBOutput_2.getMessage() + "\ncaused by: "
										+ ne_tDBOutput_2.getMessage(),
								ne_tDBOutput_2.getSQLState(),
								ne_tDBOutput_2.getErrorCode(), ne_tDBOutput_2);
						errormessage_tDBOutput_2 = sqle_tDBOutput_2
								.getMessage();
					} else {
						errormessage_tDBOutput_2 = e_tDBOutput_2.getMessage();
					}

					int countSum_tDBOutput_2 = 0;
					for (int countEach_tDBOutput_2 : e_tDBOutput_2
							.getUpdateCounts()) {
						countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0
								: countEach_tDBOutput_2);
					}

					insertedCount_tDBOutput_2 += countSum_tDBOutput_2;

					System.err.println(errormessage_tDBOutput_2);

				}

				if (pstmt_tDBOutput_2 != null) {

					pstmt_tDBOutput_2.close();
					resourceMap.remove("pstmt_tDBOutput_2");
				}
				resourceMap.put("statementClosed_tDBOutput_2", true);

				conn_tDBOutput_2.commit();

				conn_tDBOutput_2.close();

				resourceMap.put("finish_tDBOutput_2", true);

				nb_line_deleted_tDBOutput_2 = nb_line_deleted_tDBOutput_2
						+ deletedCount_tDBOutput_2;
				nb_line_update_tDBOutput_2 = nb_line_update_tDBOutput_2
						+ updatedCount_tDBOutput_2;
				nb_line_inserted_tDBOutput_2 = nb_line_inserted_tDBOutput_2
						+ insertedCount_tDBOutput_2;
				nb_line_rejected_tDBOutput_2 = nb_line_rejected_tDBOutput_2
						+ rejectedCount_tDBOutput_2;

				globalMap.put("tDBOutput_2_NB_LINE", nb_line_tDBOutput_2);
				globalMap.put("tDBOutput_2_NB_LINE_UPDATED",
						nb_line_update_tDBOutput_2);
				globalMap.put("tDBOutput_2_NB_LINE_INSERTED",
						nb_line_inserted_tDBOutput_2);
				globalMap.put("tDBOutput_2_NB_LINE_DELETED",
						nb_line_deleted_tDBOutput_2);
				globalMap.put("tDBOutput_2_NB_LINE_REJECTED",
						nb_line_rejected_tDBOutput_2);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row2" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tDBOutput_2", true);
				end_Hash.put("tDBOutput_2", System.currentTimeMillis());

				tStatCatcher_1.addMessage(
						"end",
						"tDBOutput_2",
						end_Hash.get("tDBOutput_2")
								- start_Hash.get("tDBOutput_2"));
				tStatCatcher_1Process(globalMap);
				talendStats_STATS.addMessage(
						"end",
						"tDBOutput_2",
						end_Hash.get("tDBOutput_2")
								- start_Hash.get("tDBOutput_2"));
				talendStats_STATSProcess(globalMap);

				/**
				 * [tDBOutput_2 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_2 finally ] start
				 */

				currentComponent = "tDBInput_2";

				/**
				 * [tDBInput_2 finally ] stop
				 */

				/**
				 * [tDBOutput_2 finally ] start
				 */

				currentComponent = "tDBOutput_2";

				try {
					if (resourceMap.get("statementClosed_tDBOutput_2") == null) {
						java.sql.PreparedStatement pstmtToClose_tDBOutput_2 = null;
						if ((pstmtToClose_tDBOutput_2 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmt_tDBOutput_2")) != null) {
							pstmtToClose_tDBOutput_2.close();
						}
					}
				} finally {
					if (resourceMap.get("finish_tDBOutput_2") == null) {
						java.sql.Connection ctn_tDBOutput_2 = null;
						if ((ctn_tDBOutput_2 = (java.sql.Connection) resourceMap
								.get("conn_tDBOutput_2")) != null) {
							try {
								ctn_tDBOutput_2.close();
							} catch (java.sql.SQLException sqlEx_tDBOutput_2) {
								String errorMessage_tDBOutput_2 = "failed to close the connection in tDBOutput_2 :"
										+ sqlEx_tDBOutput_2.getMessage();
								System.err.println(errorMessage_tDBOutput_2);
							}
						}
					}
				}

				/**
				 * [tDBOutput_2 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_2_SUBPROCESS_STATE", 1);
	}

	public static class row3Struct implements
			routines.system.IPersistableRow<row3Struct> {
		final static byte[] commonByteArrayLock_ORDER_ETL_OLD_RL_ETL = new byte[0];
		static byte[] commonByteArray_ORDER_ETL_OLD_RL_ETL = new byte[0];

		public Long order_header_dimension_uid;

		public Long getOrder_header_dimension_uid() {
			return this.order_header_dimension_uid;
		}

		public String source_system_order_header_uid;

		public String getSource_system_order_header_uid() {
			return this.source_system_order_header_uid;
		}

		public String order_number;

		public String getOrder_number() {
			return this.order_number;
		}

		public String licensee_oracle_party_number;

		public String getLicensee_oracle_party_number() {
			return this.licensee_oracle_party_number;
		}

		public java.util.Date order_date;

		public java.util.Date getOrder_date() {
			return this.order_date;
		}

		public String order_channel;

		public String getOrder_channel() {
			return this.order_channel;
		}

		public String organization_name;

		public String getOrganization_name() {
			return this.organization_name;
		}

		public String organization_location_country_code;

		public String getOrganization_location_country_code() {
			return this.organization_location_country_code;
		}

		public String organization_location_name;

		public String getOrganization_location_name() {
			return this.organization_location_name;
		}

		public String taxable_city;

		public String getTaxable_city() {
			return this.taxable_city;
		}

		public String taxable_region;

		public String getTaxable_region() {
			return this.taxable_region;
		}

		public String taxable_postal_code;

		public String getTaxable_postal_code() {
			return this.taxable_postal_code;
		}

		public String taxable_country;

		public String getTaxable_country() {
			return this.taxable_country;
		}

		public Integer order_invoice_uid;

		public Integer getOrder_invoice_uid() {
			return this.order_invoice_uid;
		}

		public String order_source;

		public String getOrder_source() {
			return this.order_source;
		}

		public java.util.Date created_datetime;

		public java.util.Date getCreated_datetime() {
			return this.created_datetime;
		}

		public String created_by_user;

		public String getCreated_by_user() {
			return this.created_by_user;
		}

		public java.util.Date updated_datetime;

		public java.util.Date getUpdated_datetime() {
			return this.updated_datetime;
		}

		public String updated_by_user;

		public String getUpdated_by_user() {
			return this.updated_by_user;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ORDER_ETL_OLD_RL_ETL.length) {
					if (length < 1024
							&& commonByteArray_ORDER_ETL_OLD_RL_ETL.length == 0) {
						commonByteArray_ORDER_ETL_OLD_RL_ETL = new byte[1024];
					} else {
						commonByteArray_ORDER_ETL_OLD_RL_ETL = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ORDER_ETL_OLD_RL_ETL, 0, length);
				strReturn = new String(commonByteArray_ORDER_ETL_OLD_RL_ETL, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ORDER_ETL_OLD_RL_ETL) {

				try {

					int length = 0;

					length = dis.readByte();
					if (length == -1) {
						this.order_header_dimension_uid = null;
					} else {
						this.order_header_dimension_uid = dis.readLong();
					}

					this.source_system_order_header_uid = readString(dis);

					this.order_number = readString(dis);

					this.licensee_oracle_party_number = readString(dis);

					this.order_date = readDate(dis);

					this.order_channel = readString(dis);

					this.organization_name = readString(dis);

					this.organization_location_country_code = readString(dis);

					this.organization_location_name = readString(dis);

					this.taxable_city = readString(dis);

					this.taxable_region = readString(dis);

					this.taxable_postal_code = readString(dis);

					this.taxable_country = readString(dis);

					this.order_invoice_uid = readInteger(dis);

					this.order_source = readString(dis);

					this.created_datetime = readDate(dis);

					this.created_by_user = readString(dis);

					this.updated_datetime = readDate(dis);

					this.updated_by_user = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Long

				if (this.order_header_dimension_uid == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.order_header_dimension_uid);
				}

				// String

				writeString(this.source_system_order_header_uid, dos);

				// String

				writeString(this.order_number, dos);

				// String

				writeString(this.licensee_oracle_party_number, dos);

				// java.util.Date

				writeDate(this.order_date, dos);

				// String

				writeString(this.order_channel, dos);

				// String

				writeString(this.organization_name, dos);

				// String

				writeString(this.organization_location_country_code, dos);

				// String

				writeString(this.organization_location_name, dos);

				// String

				writeString(this.taxable_city, dos);

				// String

				writeString(this.taxable_region, dos);

				// String

				writeString(this.taxable_postal_code, dos);

				// String

				writeString(this.taxable_country, dos);

				// Integer

				writeInteger(this.order_invoice_uid, dos);

				// String

				writeString(this.order_source, dos);

				// java.util.Date

				writeDate(this.created_datetime, dos);

				// String

				writeString(this.created_by_user, dos);

				// java.util.Date

				writeDate(this.updated_datetime, dos);

				// String

				writeString(this.updated_by_user, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("order_header_dimension_uid="
					+ String.valueOf(order_header_dimension_uid));
			sb.append(",source_system_order_header_uid="
					+ source_system_order_header_uid);
			sb.append(",order_number=" + order_number);
			sb.append(",licensee_oracle_party_number="
					+ licensee_oracle_party_number);
			sb.append(",order_date=" + String.valueOf(order_date));
			sb.append(",order_channel=" + order_channel);
			sb.append(",organization_name=" + organization_name);
			sb.append(",organization_location_country_code="
					+ organization_location_country_code);
			sb.append(",organization_location_name="
					+ organization_location_name);
			sb.append(",taxable_city=" + taxable_city);
			sb.append(",taxable_region=" + taxable_region);
			sb.append(",taxable_postal_code=" + taxable_postal_code);
			sb.append(",taxable_country=" + taxable_country);
			sb.append(",order_invoice_uid=" + String.valueOf(order_invoice_uid));
			sb.append(",order_source=" + order_source);
			sb.append(",created_datetime=" + String.valueOf(created_datetime));
			sb.append(",created_by_user=" + created_by_user);
			sb.append(",updated_datetime=" + String.valueOf(updated_datetime));
			sb.append(",updated_by_user=" + updated_by_user);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_3Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDBInput_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row3Struct row3 = new row3Struct();

				/**
				 * [tDBOutput_3 begin ] start
				 */

				ok_Hash.put("tDBOutput_3", false);
				start_Hash.put("tDBOutput_3", System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tDBOutput_3");
				tStatCatcher_1Process(globalMap);

				talendStats_STATS.addMessage("begin", "tDBOutput_3");
				talendStats_STATSProcess(globalMap);

				currentComponent = "tDBOutput_3";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row3" + iterateId, 0, 0);

					}
				}

				int tos_count_tDBOutput_3 = 0;

				String dbschema_tDBOutput_3 = null;
				dbschema_tDBOutput_3 = context.data_warehouse_order_dwos_schema;

				String tableName_tDBOutput_3 = null;
				if (dbschema_tDBOutput_3 == null
						|| dbschema_tDBOutput_3.trim().length() == 0) {
					tableName_tDBOutput_3 = "dwo_order_header_dimension";
				} else {
					tableName_tDBOutput_3 = dbschema_tDBOutput_3 + "\".\""
							+ "dwo_order_header_dimension";
				}

				int nb_line_tDBOutput_3 = 0;
				int nb_line_update_tDBOutput_3 = 0;
				int nb_line_inserted_tDBOutput_3 = 0;
				int nb_line_deleted_tDBOutput_3 = 0;
				int nb_line_rejected_tDBOutput_3 = 0;

				int deletedCount_tDBOutput_3 = 0;
				int updatedCount_tDBOutput_3 = 0;
				int insertedCount_tDBOutput_3 = 0;
				int rejectedCount_tDBOutput_3 = 0;

				boolean whetherReject_tDBOutput_3 = false;

				java.sql.Connection conn_tDBOutput_3 = null;
				String dbUser_tDBOutput_3 = null;

				java.lang.Class.forName("org.postgresql.Driver");
				String url_tDBOutput_3 = "jdbc:postgresql://"
						+ context.data_warehouse_order_dwos_host + ":"
						+ context.data_warehouse_order_dwos_port + "/"
						+ context.data_warehouse_order_dwos_database;
				dbUser_tDBOutput_3 = context.data_warehouse_order_dwos_username;

				final String decryptedPassword_tDBOutput_3 = context.data_warehouse_order_dwos_password;

				String dbPwd_tDBOutput_3 = decryptedPassword_tDBOutput_3;

				conn_tDBOutput_3 = java.sql.DriverManager.getConnection(
						url_tDBOutput_3, dbUser_tDBOutput_3, dbPwd_tDBOutput_3);

				resourceMap.put("conn_tDBOutput_3", conn_tDBOutput_3);
				conn_tDBOutput_3.setAutoCommit(false);
				int commitEvery_tDBOutput_3 = 10000;
				int commitCounter_tDBOutput_3 = 0;

				int batchSize_tDBOutput_3 = 10000;
				int batchSizeCounter_tDBOutput_3 = 0;

				int count_tDBOutput_3 = 0;
				String insert_tDBOutput_3 = "INSERT INTO \""
						+ tableName_tDBOutput_3
						+ "\" (\"dwo_order_header_dimension_uid\",\"source_system_order_header_uid\",\"order_number\",\"licensee_oracle_party_number\",\"order_date\",\"order_channel\",\"organization_name\",\"organization_location_country_code\",\"organization_location_name\",\"taxable_city\",\"taxable_region\",\"taxable_postal_code\",\"taxable_country\",\"order_invoice_uid\",\"order_source\",\"created_datetime\",\"created_by_user\",\"updated_datetime\",\"updated_by_user\") VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

				java.sql.PreparedStatement pstmt_tDBOutput_3 = conn_tDBOutput_3
						.prepareStatement(insert_tDBOutput_3);
				resourceMap.put("pstmt_tDBOutput_3", pstmt_tDBOutput_3);

				/**
				 * [tDBOutput_3 begin ] stop
				 */

				/**
				 * [tDBInput_3 begin ] start
				 */

				ok_Hash.put("tDBInput_3", false);
				start_Hash.put("tDBInput_3", System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tDBInput_3");
				tStatCatcher_1Process(globalMap);

				talendStats_STATS.addMessage("begin", "tDBInput_3");
				talendStats_STATSProcess(globalMap);

				currentComponent = "tDBInput_3";

				int tos_count_tDBInput_3 = 0;

				int nb_line_tDBInput_3 = 0;
				java.sql.Connection conn_tDBInput_3 = null;
				String driverClass_tDBInput_3 = "org.postgresql.Driver";
				java.lang.Class.forName(driverClass_tDBInput_3);
				String dbUser_tDBInput_3 = context.data_warehouse_order_dwos_username;

				final String decryptedPassword_tDBInput_3 = context.data_warehouse_order_dwos_password;

				String dbPwd_tDBInput_3 = decryptedPassword_tDBInput_3;

				String url_tDBInput_3 = "jdbc:postgresql://"
						+ context.data_warehouse_order_dwos_host + ":"
						+ context.data_warehouse_order_dwos_port + "/"
						+ context.data_warehouse_order_dwos_database;

				conn_tDBInput_3 = java.sql.DriverManager.getConnection(
						url_tDBInput_3, dbUser_tDBInput_3, dbPwd_tDBInput_3);

				conn_tDBInput_3.setAutoCommit(false);

				java.sql.Statement stmt_tDBInput_3 = conn_tDBInput_3
						.createStatement();
				stmt_tDBInput_3.setFetchSize(1000);

				String dbquery_tDBInput_3 = "SELECT fr.order_header_dimension_uid as dwo_order_header_dimension_uid,\n       fr.order_number as source_system_order_h"
						+ "eader_uid,\n       fr.order_number as order_number,\n       fr.licensee_oracle_party_number as licensee_oracle_party_numbe"
						+ "r,\n       fr.order_date as order_date,\n       fr.order_channel as order_channel,\n       fr.organization_name as organiza"
						+ "tion_name,\n       fr.licensee_tax_country as organization_location_country_code,\n       fr.organization_location_name as"
						+ " organization_location_name,\n       fr.taxable_city as taxable_city,\n       fr.taxable_region as taxable_region,\n       "
						+ "fr.taxable_postal_code as taxable_postal_code,\n       fr.taxable_country as taxable_country,\n       fr.invoice_number as"
						+ " order_invoice_uid,\n       fr.order_source as order_source,\n       fr.created_datetime as created_datetime,\n       fr.cr"
						+ "eated_by_user as created_by_user,\n       fr.updated_datetime as updated_datetime,\n       fr.updated_by_user as updated_b"
						+ "y_user\nFROM staging.dwo_rl_v_finance_report fr\nWHERE fr.organization_name != 'TESTING'";

				globalMap.put("tDBInput_3_QUERY", dbquery_tDBInput_3);
				java.sql.ResultSet rs_tDBInput_3 = null;

				try {
					rs_tDBInput_3 = stmt_tDBInput_3
							.executeQuery(dbquery_tDBInput_3);
					java.sql.ResultSetMetaData rsmd_tDBInput_3 = rs_tDBInput_3
							.getMetaData();
					int colQtyInRs_tDBInput_3 = rsmd_tDBInput_3
							.getColumnCount();

					String tmpContent_tDBInput_3 = null;

					while (rs_tDBInput_3.next()) {
						nb_line_tDBInput_3++;

						if (colQtyInRs_tDBInput_3 < 1) {
							row3.order_header_dimension_uid = null;
						} else {

							if (rs_tDBInput_3.getObject(1) != null) {
								row3.order_header_dimension_uid = rs_tDBInput_3
										.getLong(1);
							} else {
								row3.order_header_dimension_uid = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 2) {
							row3.source_system_order_header_uid = null;
						} else {

							row3.source_system_order_header_uid = routines.system.JDBCUtil
									.getString(rs_tDBInput_3, 2, false);
						}
						if (colQtyInRs_tDBInput_3 < 3) {
							row3.order_number = null;
						} else {

							row3.order_number = routines.system.JDBCUtil
									.getString(rs_tDBInput_3, 3, false);
						}
						if (colQtyInRs_tDBInput_3 < 4) {
							row3.licensee_oracle_party_number = null;
						} else {

							row3.licensee_oracle_party_number = routines.system.JDBCUtil
									.getString(rs_tDBInput_3, 4, false);
						}
						if (colQtyInRs_tDBInput_3 < 5) {
							row3.order_date = null;
						} else {

							row3.order_date = routines.system.JDBCUtil.getDate(
									rs_tDBInput_3, 5);
						}
						if (colQtyInRs_tDBInput_3 < 6) {
							row3.order_channel = null;
						} else {

							row3.order_channel = routines.system.JDBCUtil
									.getString(rs_tDBInput_3, 6, false);
						}
						if (colQtyInRs_tDBInput_3 < 7) {
							row3.organization_name = null;
						} else {

							row3.organization_name = routines.system.JDBCUtil
									.getString(rs_tDBInput_3, 7, false);
						}
						if (colQtyInRs_tDBInput_3 < 8) {
							row3.organization_location_country_code = null;
						} else {

							row3.organization_location_country_code = routines.system.JDBCUtil
									.getString(rs_tDBInput_3, 8, false);
						}
						if (colQtyInRs_tDBInput_3 < 9) {
							row3.organization_location_name = null;
						} else {

							row3.organization_location_name = routines.system.JDBCUtil
									.getString(rs_tDBInput_3, 9, false);
						}
						if (colQtyInRs_tDBInput_3 < 10) {
							row3.taxable_city = null;
						} else {

							row3.taxable_city = routines.system.JDBCUtil
									.getString(rs_tDBInput_3, 10, false);
						}
						if (colQtyInRs_tDBInput_3 < 11) {
							row3.taxable_region = null;
						} else {

							row3.taxable_region = routines.system.JDBCUtil
									.getString(rs_tDBInput_3, 11, false);
						}
						if (colQtyInRs_tDBInput_3 < 12) {
							row3.taxable_postal_code = null;
						} else {

							row3.taxable_postal_code = routines.system.JDBCUtil
									.getString(rs_tDBInput_3, 12, false);
						}
						if (colQtyInRs_tDBInput_3 < 13) {
							row3.taxable_country = null;
						} else {

							row3.taxable_country = routines.system.JDBCUtil
									.getString(rs_tDBInput_3, 13, false);
						}
						if (colQtyInRs_tDBInput_3 < 14) {
							row3.order_invoice_uid = null;
						} else {

							if (rs_tDBInput_3.getObject(14) != null) {
								row3.order_invoice_uid = rs_tDBInput_3
										.getInt(14);
							} else {
								row3.order_invoice_uid = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 15) {
							row3.order_source = null;
						} else {

							row3.order_source = routines.system.JDBCUtil
									.getString(rs_tDBInput_3, 15, false);
						}
						if (colQtyInRs_tDBInput_3 < 16) {
							row3.created_datetime = null;
						} else {

							row3.created_datetime = routines.system.JDBCUtil
									.getDate(rs_tDBInput_3, 16);
						}
						if (colQtyInRs_tDBInput_3 < 17) {
							row3.created_by_user = null;
						} else {

							row3.created_by_user = routines.system.JDBCUtil
									.getString(rs_tDBInput_3, 17, false);
						}
						if (colQtyInRs_tDBInput_3 < 18) {
							row3.updated_datetime = null;
						} else {

							row3.updated_datetime = routines.system.JDBCUtil
									.getDate(rs_tDBInput_3, 18);
						}
						if (colQtyInRs_tDBInput_3 < 19) {
							row3.updated_by_user = null;
						} else {

							row3.updated_by_user = routines.system.JDBCUtil
									.getString(rs_tDBInput_3, 19, false);
						}

						/**
						 * [tDBInput_3 begin ] stop
						 */

						/**
						 * [tDBInput_3 main ] start
						 */

						currentComponent = "tDBInput_3";

						tos_count_tDBInput_3++;

						/**
						 * [tDBInput_3 main ] stop
						 */

						/**
						 * [tDBInput_3 process_data_begin ] start
						 */

						currentComponent = "tDBInput_3";

						/**
						 * [tDBInput_3 process_data_begin ] stop
						 */

						/**
						 * [tDBOutput_3 main ] start
						 */

						currentComponent = "tDBOutput_3";

						// row3
						// row3

						if (execStat) {
							runStat.updateStatOnConnection("row3" + iterateId,
									1, 1);
						}

						whetherReject_tDBOutput_3 = false;
						if (row3.order_header_dimension_uid == null) {
							pstmt_tDBOutput_3
									.setNull(1, java.sql.Types.INTEGER);
						} else {
							pstmt_tDBOutput_3.setLong(1,
									row3.order_header_dimension_uid);
						}

						if (row3.source_system_order_header_uid == null) {
							pstmt_tDBOutput_3
									.setNull(2, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_3.setString(2,
									row3.source_system_order_header_uid);
						}

						if (row3.order_number == null) {
							pstmt_tDBOutput_3
									.setNull(3, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_3.setString(3, row3.order_number);
						}

						if (row3.licensee_oracle_party_number == null) {
							pstmt_tDBOutput_3
									.setNull(4, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_3.setString(4,
									row3.licensee_oracle_party_number);
						}

						if (row3.order_date != null) {
							pstmt_tDBOutput_3.setTimestamp(
									5,
									new java.sql.Timestamp(row3.order_date
											.getTime()));
						} else {
							pstmt_tDBOutput_3.setNull(5,
									java.sql.Types.TIMESTAMP);
						}

						if (row3.order_channel == null) {
							pstmt_tDBOutput_3
									.setNull(6, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_3.setString(6, row3.order_channel);
						}

						if (row3.organization_name == null) {
							pstmt_tDBOutput_3
									.setNull(7, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_3.setString(7,
									row3.organization_name);
						}

						if (row3.organization_location_country_code == null) {
							pstmt_tDBOutput_3
									.setNull(8, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_3.setString(8,
									row3.organization_location_country_code);
						}

						if (row3.organization_location_name == null) {
							pstmt_tDBOutput_3
									.setNull(9, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_3.setString(9,
									row3.organization_location_name);
						}

						if (row3.taxable_city == null) {
							pstmt_tDBOutput_3.setNull(10,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_3.setString(10, row3.taxable_city);
						}

						if (row3.taxable_region == null) {
							pstmt_tDBOutput_3.setNull(11,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_3
									.setString(11, row3.taxable_region);
						}

						if (row3.taxable_postal_code == null) {
							pstmt_tDBOutput_3.setNull(12,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_3.setString(12,
									row3.taxable_postal_code);
						}

						if (row3.taxable_country == null) {
							pstmt_tDBOutput_3.setNull(13,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_3.setString(13,
									row3.taxable_country);
						}

						if (row3.order_invoice_uid == null) {
							pstmt_tDBOutput_3.setNull(14,
									java.sql.Types.INTEGER);
						} else {
							pstmt_tDBOutput_3
									.setInt(14, row3.order_invoice_uid);
						}

						if (row3.order_source == null) {
							pstmt_tDBOutput_3.setNull(15,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_3.setString(15, row3.order_source);
						}

						if (row3.created_datetime != null) {
							pstmt_tDBOutput_3.setTimestamp(16,
									new java.sql.Timestamp(
											row3.created_datetime.getTime()));
						} else {
							pstmt_tDBOutput_3.setNull(16,
									java.sql.Types.TIMESTAMP);
						}

						if (row3.created_by_user == null) {
							pstmt_tDBOutput_3.setNull(17,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_3.setString(17,
									row3.created_by_user);
						}

						if (row3.updated_datetime != null) {
							pstmt_tDBOutput_3.setTimestamp(18,
									new java.sql.Timestamp(
											row3.updated_datetime.getTime()));
						} else {
							pstmt_tDBOutput_3.setNull(18,
									java.sql.Types.TIMESTAMP);
						}

						if (row3.updated_by_user == null) {
							pstmt_tDBOutput_3.setNull(19,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_3.setString(19,
									row3.updated_by_user);
						}

						pstmt_tDBOutput_3.addBatch();
						nb_line_tDBOutput_3++;

						batchSizeCounter_tDBOutput_3++;

						if ((batchSize_tDBOutput_3 > 0)
								&& (batchSize_tDBOutput_3 <= batchSizeCounter_tDBOutput_3)) {
							try {
								int countSum_tDBOutput_3 = 0;

								for (int countEach_tDBOutput_3 : pstmt_tDBOutput_3
										.executeBatch()) {
									countSum_tDBOutput_3 += (countEach_tDBOutput_3 < 0 ? 0
											: countEach_tDBOutput_3);
								}

								insertedCount_tDBOutput_3 += countSum_tDBOutput_3;

								batchSizeCounter_tDBOutput_3 = 0;
							} catch (java.sql.BatchUpdateException e_tDBOutput_3) {
								java.sql.SQLException ne_tDBOutput_3 = e_tDBOutput_3
										.getNextException(), sqle_tDBOutput_3 = null;
								String errormessage_tDBOutput_3;
								if (ne_tDBOutput_3 != null) {
									// build new exception to provide the
									// original cause
									sqle_tDBOutput_3 = new java.sql.SQLException(
											e_tDBOutput_3.getMessage()
													+ "\ncaused by: "
													+ ne_tDBOutput_3
															.getMessage(),
											ne_tDBOutput_3.getSQLState(),
											ne_tDBOutput_3.getErrorCode(),
											ne_tDBOutput_3);
									errormessage_tDBOutput_3 = sqle_tDBOutput_3
											.getMessage();
								} else {
									errormessage_tDBOutput_3 = e_tDBOutput_3
											.getMessage();
								}

								int countSum_tDBOutput_3 = 0;
								for (int countEach_tDBOutput_3 : e_tDBOutput_3
										.getUpdateCounts()) {
									countSum_tDBOutput_3 += (countEach_tDBOutput_3 < 0 ? 0
											: countEach_tDBOutput_3);
								}

								insertedCount_tDBOutput_3 += countSum_tDBOutput_3;

								System.err.println(errormessage_tDBOutput_3);

							}
						}

						commitCounter_tDBOutput_3++;
						if (commitEvery_tDBOutput_3 <= commitCounter_tDBOutput_3) {
							if ((batchSize_tDBOutput_3 > 0)
									&& (batchSizeCounter_tDBOutput_3 > 0)) {
								try {
									int countSum_tDBOutput_3 = 0;

									for (int countEach_tDBOutput_3 : pstmt_tDBOutput_3
											.executeBatch()) {
										countSum_tDBOutput_3 += (countEach_tDBOutput_3 < 0 ? 0
												: countEach_tDBOutput_3);
									}

									insertedCount_tDBOutput_3 += countSum_tDBOutput_3;

									batchSizeCounter_tDBOutput_3 = 0;
								} catch (java.sql.BatchUpdateException e_tDBOutput_3) {
									java.sql.SQLException ne_tDBOutput_3 = e_tDBOutput_3
											.getNextException(), sqle_tDBOutput_3 = null;
									String errormessage_tDBOutput_3;
									if (ne_tDBOutput_3 != null) {
										// build new exception to provide the
										// original cause
										sqle_tDBOutput_3 = new java.sql.SQLException(
												e_tDBOutput_3.getMessage()
														+ "\ncaused by: "
														+ ne_tDBOutput_3
																.getMessage(),
												ne_tDBOutput_3.getSQLState(),
												ne_tDBOutput_3.getErrorCode(),
												ne_tDBOutput_3);
										errormessage_tDBOutput_3 = sqle_tDBOutput_3
												.getMessage();
									} else {
										errormessage_tDBOutput_3 = e_tDBOutput_3
												.getMessage();
									}

									int countSum_tDBOutput_3 = 0;
									for (int countEach_tDBOutput_3 : e_tDBOutput_3
											.getUpdateCounts()) {
										countSum_tDBOutput_3 += (countEach_tDBOutput_3 < 0 ? 0
												: countEach_tDBOutput_3);
									}

									insertedCount_tDBOutput_3 += countSum_tDBOutput_3;

									System.err
											.println(errormessage_tDBOutput_3);

								}
							}
							conn_tDBOutput_3.commit();

							commitCounter_tDBOutput_3 = 0;
						}

						tos_count_tDBOutput_3++;

						/**
						 * [tDBOutput_3 main ] stop
						 */

						/**
						 * [tDBOutput_3 process_data_begin ] start
						 */

						currentComponent = "tDBOutput_3";

						/**
						 * [tDBOutput_3 process_data_begin ] stop
						 */

						/**
						 * [tDBOutput_3 process_data_end ] start
						 */

						currentComponent = "tDBOutput_3";

						/**
						 * [tDBOutput_3 process_data_end ] stop
						 */

						/**
						 * [tDBInput_3 process_data_end ] start
						 */

						currentComponent = "tDBInput_3";

						/**
						 * [tDBInput_3 process_data_end ] stop
						 */

						/**
						 * [tDBInput_3 end ] start
						 */

						currentComponent = "tDBInput_3";

					}
				} finally {
					if (rs_tDBInput_3 != null) {
						rs_tDBInput_3.close();
					}
					if (stmt_tDBInput_3 != null) {
						stmt_tDBInput_3.close();
					}
					if (conn_tDBInput_3 != null && !conn_tDBInput_3.isClosed()) {

						conn_tDBInput_3.commit();

						conn_tDBInput_3.close();

					}

				}
				globalMap.put("tDBInput_3_NB_LINE", nb_line_tDBInput_3);

				ok_Hash.put("tDBInput_3", true);
				end_Hash.put("tDBInput_3", System.currentTimeMillis());

				tStatCatcher_1.addMessage(
						"end",
						"tDBInput_3",
						end_Hash.get("tDBInput_3")
								- start_Hash.get("tDBInput_3"));
				tStatCatcher_1Process(globalMap);
				talendStats_STATS.addMessage(
						"end",
						"tDBInput_3",
						end_Hash.get("tDBInput_3")
								- start_Hash.get("tDBInput_3"));
				talendStats_STATSProcess(globalMap);

				/**
				 * [tDBInput_3 end ] stop
				 */

				/**
				 * [tDBOutput_3 end ] start
				 */

				currentComponent = "tDBOutput_3";

				try {
					int countSum_tDBOutput_3 = 0;
					if (pstmt_tDBOutput_3 != null
							&& batchSizeCounter_tDBOutput_3 > 0) {

						for (int countEach_tDBOutput_3 : pstmt_tDBOutput_3
								.executeBatch()) {
							countSum_tDBOutput_3 += (countEach_tDBOutput_3 < 0 ? 0
									: countEach_tDBOutput_3);
						}

					}

					insertedCount_tDBOutput_3 += countSum_tDBOutput_3;

				} catch (java.sql.BatchUpdateException e_tDBOutput_3) {
					java.sql.SQLException ne_tDBOutput_3 = e_tDBOutput_3
							.getNextException(), sqle_tDBOutput_3 = null;
					String errormessage_tDBOutput_3;
					if (ne_tDBOutput_3 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_3 = new java.sql.SQLException(
								e_tDBOutput_3.getMessage() + "\ncaused by: "
										+ ne_tDBOutput_3.getMessage(),
								ne_tDBOutput_3.getSQLState(),
								ne_tDBOutput_3.getErrorCode(), ne_tDBOutput_3);
						errormessage_tDBOutput_3 = sqle_tDBOutput_3
								.getMessage();
					} else {
						errormessage_tDBOutput_3 = e_tDBOutput_3.getMessage();
					}

					int countSum_tDBOutput_3 = 0;
					for (int countEach_tDBOutput_3 : e_tDBOutput_3
							.getUpdateCounts()) {
						countSum_tDBOutput_3 += (countEach_tDBOutput_3 < 0 ? 0
								: countEach_tDBOutput_3);
					}

					insertedCount_tDBOutput_3 += countSum_tDBOutput_3;

					System.err.println(errormessage_tDBOutput_3);

				}

				if (pstmt_tDBOutput_3 != null) {

					pstmt_tDBOutput_3.close();
					resourceMap.remove("pstmt_tDBOutput_3");
				}
				resourceMap.put("statementClosed_tDBOutput_3", true);

				conn_tDBOutput_3.commit();

				conn_tDBOutput_3.close();

				resourceMap.put("finish_tDBOutput_3", true);

				nb_line_deleted_tDBOutput_3 = nb_line_deleted_tDBOutput_3
						+ deletedCount_tDBOutput_3;
				nb_line_update_tDBOutput_3 = nb_line_update_tDBOutput_3
						+ updatedCount_tDBOutput_3;
				nb_line_inserted_tDBOutput_3 = nb_line_inserted_tDBOutput_3
						+ insertedCount_tDBOutput_3;
				nb_line_rejected_tDBOutput_3 = nb_line_rejected_tDBOutput_3
						+ rejectedCount_tDBOutput_3;

				globalMap.put("tDBOutput_3_NB_LINE", nb_line_tDBOutput_3);
				globalMap.put("tDBOutput_3_NB_LINE_UPDATED",
						nb_line_update_tDBOutput_3);
				globalMap.put("tDBOutput_3_NB_LINE_INSERTED",
						nb_line_inserted_tDBOutput_3);
				globalMap.put("tDBOutput_3_NB_LINE_DELETED",
						nb_line_deleted_tDBOutput_3);
				globalMap.put("tDBOutput_3_NB_LINE_REJECTED",
						nb_line_rejected_tDBOutput_3);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row3" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tDBOutput_3", true);
				end_Hash.put("tDBOutput_3", System.currentTimeMillis());

				tStatCatcher_1.addMessage(
						"end",
						"tDBOutput_3",
						end_Hash.get("tDBOutput_3")
								- start_Hash.get("tDBOutput_3"));
				tStatCatcher_1Process(globalMap);
				talendStats_STATS.addMessage(
						"end",
						"tDBOutput_3",
						end_Hash.get("tDBOutput_3")
								- start_Hash.get("tDBOutput_3"));
				talendStats_STATSProcess(globalMap);

				/**
				 * [tDBOutput_3 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_3 finally ] start
				 */

				currentComponent = "tDBInput_3";

				/**
				 * [tDBInput_3 finally ] stop
				 */

				/**
				 * [tDBOutput_3 finally ] start
				 */

				currentComponent = "tDBOutput_3";

				try {
					if (resourceMap.get("statementClosed_tDBOutput_3") == null) {
						java.sql.PreparedStatement pstmtToClose_tDBOutput_3 = null;
						if ((pstmtToClose_tDBOutput_3 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmt_tDBOutput_3")) != null) {
							pstmtToClose_tDBOutput_3.close();
						}
					}
				} finally {
					if (resourceMap.get("finish_tDBOutput_3") == null) {
						java.sql.Connection ctn_tDBOutput_3 = null;
						if ((ctn_tDBOutput_3 = (java.sql.Connection) resourceMap
								.get("conn_tDBOutput_3")) != null) {
							try {
								ctn_tDBOutput_3.close();
							} catch (java.sql.SQLException sqlEx_tDBOutput_3) {
								String errorMessage_tDBOutput_3 = "failed to close the connection in tDBOutput_3 :"
										+ sqlEx_tDBOutput_3.getMessage();
								System.err.println(errorMessage_tDBOutput_3);
							}
						}
					}
				}

				/**
				 * [tDBOutput_3 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_3_SUBPROCESS_STATE", 1);
	}

	public static class row4Struct implements
			routines.system.IPersistableRow<row4Struct> {
		final static byte[] commonByteArrayLock_ORDER_ETL_OLD_RL_ETL = new byte[0];
		static byte[] commonByteArray_ORDER_ETL_OLD_RL_ETL = new byte[0];

		public Long order_detail_dimension_uid;

		public Long getOrder_detail_dimension_uid() {
			return this.order_detail_dimension_uid;
		}

		public String source_system_order_detail_uid;

		public String getSource_system_order_detail_uid() {
			return this.source_system_order_detail_uid;
		}

		public String order_header_dimension_uid;

		public String getOrder_header_dimension_uid() {
			return this.order_header_dimension_uid;
		}

		public String rightsholder_on_record_account_number;

		public String getRightsholder_on_record_account_number() {
			return this.rightsholder_on_record_account_number;
		}

		public String rightsholder_on_record_name;

		public String getRightsholder_on_record_name() {
			return this.rightsholder_on_record_name;
		}

		public String product_name;

		public String getProduct_name() {
			return this.product_name;
		}

		public String product_code;

		public String getProduct_code() {
			return this.product_code;
		}

		public String product_family;

		public String getProduct_family() {
			return this.product_family;
		}

		public BigDecimal number_of_units;

		public BigDecimal getNumber_of_units() {
			return this.number_of_units;
		}

		public String unit_type;

		public String getUnit_type() {
			return this.unit_type;
		}

		public String publication_title;

		public String getPublication_title() {
			return this.publication_title;
		}

		public String item_status_code;

		public String getItem_status_code() {
			return this.item_status_code;
		}

		public BigDecimal distribution_event_id;

		public BigDecimal getDistribution_event_id() {
			return this.distribution_event_id;
		}

		public String source_of_content;

		public String getSource_of_content() {
			return this.source_of_content;
		}

		public Boolean tax_pass_through_flag;

		public Boolean getTax_pass_through_flag() {
			return this.tax_pass_through_flag;
		}

		public String publication_work_identifier;

		public String getPublication_work_identifier() {
			return this.publication_work_identifier;
		}

		public java.util.Date created_datetime;

		public java.util.Date getCreated_datetime() {
			return this.created_datetime;
		}

		public String created_by_user;

		public String getCreated_by_user() {
			return this.created_by_user;
		}

		public java.util.Date updated_datetime;

		public java.util.Date getUpdated_datetime() {
			return this.updated_datetime;
		}

		public String updated_by_user;

		public String getUpdated_by_user() {
			return this.updated_by_user;
		}

		public String publisher;

		public String getPublisher() {
			return this.publisher;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ORDER_ETL_OLD_RL_ETL.length) {
					if (length < 1024
							&& commonByteArray_ORDER_ETL_OLD_RL_ETL.length == 0) {
						commonByteArray_ORDER_ETL_OLD_RL_ETL = new byte[1024];
					} else {
						commonByteArray_ORDER_ETL_OLD_RL_ETL = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ORDER_ETL_OLD_RL_ETL, 0, length);
				strReturn = new String(commonByteArray_ORDER_ETL_OLD_RL_ETL, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ORDER_ETL_OLD_RL_ETL) {

				try {

					int length = 0;

					length = dis.readByte();
					if (length == -1) {
						this.order_detail_dimension_uid = null;
					} else {
						this.order_detail_dimension_uid = dis.readLong();
					}

					this.source_system_order_detail_uid = readString(dis);

					this.order_header_dimension_uid = readString(dis);

					this.rightsholder_on_record_account_number = readString(dis);

					this.rightsholder_on_record_name = readString(dis);

					this.product_name = readString(dis);

					this.product_code = readString(dis);

					this.product_family = readString(dis);

					this.number_of_units = (BigDecimal) dis.readObject();

					this.unit_type = readString(dis);

					this.publication_title = readString(dis);

					this.item_status_code = readString(dis);

					this.distribution_event_id = (BigDecimal) dis.readObject();

					this.source_of_content = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.tax_pass_through_flag = null;
					} else {
						this.tax_pass_through_flag = dis.readBoolean();
					}

					this.publication_work_identifier = readString(dis);

					this.created_datetime = readDate(dis);

					this.created_by_user = readString(dis);

					this.updated_datetime = readDate(dis);

					this.updated_by_user = readString(dis);

					this.publisher = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Long

				if (this.order_detail_dimension_uid == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.order_detail_dimension_uid);
				}

				// String

				writeString(this.source_system_order_detail_uid, dos);

				// String

				writeString(this.order_header_dimension_uid, dos);

				// String

				writeString(this.rightsholder_on_record_account_number, dos);

				// String

				writeString(this.rightsholder_on_record_name, dos);

				// String

				writeString(this.product_name, dos);

				// String

				writeString(this.product_code, dos);

				// String

				writeString(this.product_family, dos);

				// BigDecimal

				dos.writeObject(this.number_of_units);

				// String

				writeString(this.unit_type, dos);

				// String

				writeString(this.publication_title, dos);

				// String

				writeString(this.item_status_code, dos);

				// BigDecimal

				dos.writeObject(this.distribution_event_id);

				// String

				writeString(this.source_of_content, dos);

				// Boolean

				if (this.tax_pass_through_flag == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.tax_pass_through_flag);
				}

				// String

				writeString(this.publication_work_identifier, dos);

				// java.util.Date

				writeDate(this.created_datetime, dos);

				// String

				writeString(this.created_by_user, dos);

				// java.util.Date

				writeDate(this.updated_datetime, dos);

				// String

				writeString(this.updated_by_user, dos);

				// String

				writeString(this.publisher, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("order_detail_dimension_uid="
					+ String.valueOf(order_detail_dimension_uid));
			sb.append(",source_system_order_detail_uid="
					+ source_system_order_detail_uid);
			sb.append(",order_header_dimension_uid="
					+ order_header_dimension_uid);
			sb.append(",rightsholder_on_record_account_number="
					+ rightsholder_on_record_account_number);
			sb.append(",rightsholder_on_record_name="
					+ rightsholder_on_record_name);
			sb.append(",product_name=" + product_name);
			sb.append(",product_code=" + product_code);
			sb.append(",product_family=" + product_family);
			sb.append(",number_of_units=" + String.valueOf(number_of_units));
			sb.append(",unit_type=" + unit_type);
			sb.append(",publication_title=" + publication_title);
			sb.append(",item_status_code=" + item_status_code);
			sb.append(",distribution_event_id="
					+ String.valueOf(distribution_event_id));
			sb.append(",source_of_content=" + source_of_content);
			sb.append(",tax_pass_through_flag="
					+ String.valueOf(tax_pass_through_flag));
			sb.append(",publication_work_identifier="
					+ publication_work_identifier);
			sb.append(",created_datetime=" + String.valueOf(created_datetime));
			sb.append(",created_by_user=" + created_by_user);
			sb.append(",updated_datetime=" + String.valueOf(updated_datetime));
			sb.append(",updated_by_user=" + updated_by_user);
			sb.append(",publisher=" + publisher);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row4Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_4Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDBInput_4_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row4Struct row4 = new row4Struct();

				/**
				 * [tDBOutput_4 begin ] start
				 */

				ok_Hash.put("tDBOutput_4", false);
				start_Hash.put("tDBOutput_4", System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tDBOutput_4");
				tStatCatcher_1Process(globalMap);

				talendStats_STATS.addMessage("begin", "tDBOutput_4");
				talendStats_STATSProcess(globalMap);

				currentComponent = "tDBOutput_4";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row4" + iterateId, 0, 0);

					}
				}

				int tos_count_tDBOutput_4 = 0;

				String dbschema_tDBOutput_4 = null;
				dbschema_tDBOutput_4 = context.data_warehouse_order_dwos_schema;

				String tableName_tDBOutput_4 = null;
				if (dbschema_tDBOutput_4 == null
						|| dbschema_tDBOutput_4.trim().length() == 0) {
					tableName_tDBOutput_4 = "dwo_order_detail_dimension";
				} else {
					tableName_tDBOutput_4 = dbschema_tDBOutput_4 + "\".\""
							+ "dwo_order_detail_dimension";
				}

				int nb_line_tDBOutput_4 = 0;
				int nb_line_update_tDBOutput_4 = 0;
				int nb_line_inserted_tDBOutput_4 = 0;
				int nb_line_deleted_tDBOutput_4 = 0;
				int nb_line_rejected_tDBOutput_4 = 0;

				int deletedCount_tDBOutput_4 = 0;
				int updatedCount_tDBOutput_4 = 0;
				int insertedCount_tDBOutput_4 = 0;
				int rejectedCount_tDBOutput_4 = 0;

				boolean whetherReject_tDBOutput_4 = false;

				java.sql.Connection conn_tDBOutput_4 = null;
				String dbUser_tDBOutput_4 = null;

				java.lang.Class.forName("org.postgresql.Driver");
				String url_tDBOutput_4 = "jdbc:postgresql://"
						+ context.data_warehouse_order_dwos_host + ":"
						+ context.data_warehouse_order_dwos_port + "/"
						+ context.data_warehouse_order_dwos_database;
				dbUser_tDBOutput_4 = context.data_warehouse_order_dwos_username;

				final String decryptedPassword_tDBOutput_4 = context.data_warehouse_order_dwos_password;

				String dbPwd_tDBOutput_4 = decryptedPassword_tDBOutput_4;

				conn_tDBOutput_4 = java.sql.DriverManager.getConnection(
						url_tDBOutput_4, dbUser_tDBOutput_4, dbPwd_tDBOutput_4);

				resourceMap.put("conn_tDBOutput_4", conn_tDBOutput_4);
				conn_tDBOutput_4.setAutoCommit(false);
				int commitEvery_tDBOutput_4 = 10000;
				int commitCounter_tDBOutput_4 = 0;

				int batchSize_tDBOutput_4 = 10000;
				int batchSizeCounter_tDBOutput_4 = 0;

				int count_tDBOutput_4 = 0;
				String insert_tDBOutput_4 = "INSERT INTO \""
						+ tableName_tDBOutput_4
						+ "\" (\"dwo_order_detail_dimension_uid\",\"source_system_order_detail_uid\",\"dwo_order_header_dimension_uid\",\"rightsholder_on_record_account_number\",\"rightsholder_on_record_name\",\"product_name\",\"product_code\",\"product_family\",\"number_of_units\",\"unit_type\",\"publication_title\",\"item_status_code\",\"distribution_event_id\",\"source_of_content\",\"tax_pass_through_flag\",\"publication_work_identifier\",\"created_datetime\",\"created_by_user\",\"updated_datetime\",\"updated_by_user\",\"publisher\") VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

				java.sql.PreparedStatement pstmt_tDBOutput_4 = conn_tDBOutput_4
						.prepareStatement(insert_tDBOutput_4);
				resourceMap.put("pstmt_tDBOutput_4", pstmt_tDBOutput_4);

				/**
				 * [tDBOutput_4 begin ] stop
				 */

				/**
				 * [tDBInput_4 begin ] start
				 */

				ok_Hash.put("tDBInput_4", false);
				start_Hash.put("tDBInput_4", System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tDBInput_4");
				tStatCatcher_1Process(globalMap);

				talendStats_STATS.addMessage("begin", "tDBInput_4");
				talendStats_STATSProcess(globalMap);

				currentComponent = "tDBInput_4";

				int tos_count_tDBInput_4 = 0;

				int nb_line_tDBInput_4 = 0;
				java.sql.Connection conn_tDBInput_4 = null;
				String driverClass_tDBInput_4 = "org.postgresql.Driver";
				java.lang.Class.forName(driverClass_tDBInput_4);
				String dbUser_tDBInput_4 = context.data_warehouse_order_dwos_username;

				final String decryptedPassword_tDBInput_4 = context.data_warehouse_order_dwos_password;

				String dbPwd_tDBInput_4 = decryptedPassword_tDBInput_4;

				String url_tDBInput_4 = "jdbc:postgresql://"
						+ context.data_warehouse_order_dwos_host + ":"
						+ context.data_warehouse_order_dwos_port + "/"
						+ context.data_warehouse_order_dwos_database;

				conn_tDBInput_4 = java.sql.DriverManager.getConnection(
						url_tDBInput_4, dbUser_tDBInput_4, dbPwd_tDBInput_4);

				conn_tDBInput_4.setAutoCommit(false);

				java.sql.Statement stmt_tDBInput_4 = conn_tDBInput_4
						.createStatement();
				stmt_tDBInput_4.setFetchSize(1000);

				String dbquery_tDBInput_4 = "SELECT fr.order_detail_dimension_uid as dwo_order_detail_dimension_uid,\n       fr.order_number as source_system_order_d"
						+ "etail_uid,\n       fr.order_number as dwo_order_header_dimension_uid,\n       NULL as rightsholder_on_record_account_numbe"
						+ "r,\n       NULL as rightsholder_on_record_name,\n       fr.product_name as product_name,\n       fr.product_code as product"
						+ "_code,\n       fr.product_family as product_family,\n       CASE WHEN fr.quantity = 'n/a' THEN NULL::numeric\n             "
						+ "    WHEN fr.quantity = '1 year' THEN 1::numeric\n                 WHEN fr.quantity = '１' THEN 1::numeric\n                "
						+ " WHEN fr.quantity = '2 years' THEN 2::numeric\n                 WHEN fr.quantity = '3 months' THEN 3::numeric\n           "
						+ "      WHEN fr.quantity = '7 days' THEN 7::numeric\n                 WHEN fr.quantity = '24 hrs' THEN 24::numeric\n        "
						+ "         WHEN fr.quantity = '48 hrs' THEN 48::numeric\n                 WHEN fr.quantity = '6 months' THEN 6::numeric\n   "
						+ "              WHEN fr.quantity = '7 to 12 months' THEN NULL::numeric       \n                 WHEN fr.quantity = '72 hrs'"
						+ " THEN 72::numeric\n                 WHEN fr.quantity = 'up to 12 months' THEN 48::numeric   \n                 WHEN fr.qua"
						+ "ntity = '７６００' THEN NULL::numeric\n                 WHEN fr.quantity = '１００００００' THEN NULL::numeric\n                 WHEN"
						+ " fr.quantity = '365 days' THEN NULL::numeric\n                 WHEN fr.quantity = 'up to 3 months' THEN NULL::numeric\n   "
						+ "              WHEN fr.quantity = '4 to 6 months' THEN NULL::numeric  \n                 WHEN fr.quantity = '２' THEN NULL:"
						+ ":numeric \n                 WHEN fr.quantity = '２００' THEN NULL::numeric \n                 WHEN fr.quantity = 'over 90 day"
						+ "s' THEN NULL::numeric\n                 WHEN fr.quantity = '۱' THEN NULL::numeric \n                 WHEN fr.quantity = ''"
						+ " THEN NULL::numeric\n                 ELSE fr.quantity::NUMERIC\n       END as number_of_units,\n       NULL as unit_type,\n"
						+ "       fr.item_title as publication_title,\n       fr.item_status_code as item_status_code,\n       fr.distribution_event_"
						+ "id as distribution_event_id,\n       fr.source_of_content as source_of_content,\n       fr.tax_pass_thru::BOOLEAN as tax_p"
						+ "ass_through_flag,\n       NULL as publication_work_identifier,\n       fr.created_datetime as created_datetime,\n       fr."
						+ "created_by_user as created_by_user,\n       fr.updated_datetime as updated_datetime,\n       fr.updated_by_user as updated"
						+ "_by_user,\n       fr.publisher as publisher\nFROM staging.dwo_rl_v_finance_report fr";

				globalMap.put("tDBInput_4_QUERY", dbquery_tDBInput_4);
				java.sql.ResultSet rs_tDBInput_4 = null;

				try {
					rs_tDBInput_4 = stmt_tDBInput_4
							.executeQuery(dbquery_tDBInput_4);
					java.sql.ResultSetMetaData rsmd_tDBInput_4 = rs_tDBInput_4
							.getMetaData();
					int colQtyInRs_tDBInput_4 = rsmd_tDBInput_4
							.getColumnCount();

					String tmpContent_tDBInput_4 = null;

					while (rs_tDBInput_4.next()) {
						nb_line_tDBInput_4++;

						if (colQtyInRs_tDBInput_4 < 1) {
							row4.order_detail_dimension_uid = null;
						} else {

							if (rs_tDBInput_4.getObject(1) != null) {
								row4.order_detail_dimension_uid = rs_tDBInput_4
										.getLong(1);
							} else {
								row4.order_detail_dimension_uid = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 2) {
							row4.source_system_order_detail_uid = null;
						} else {

							row4.source_system_order_detail_uid = routines.system.JDBCUtil
									.getString(rs_tDBInput_4, 2, false);
						}
						if (colQtyInRs_tDBInput_4 < 3) {
							row4.order_header_dimension_uid = null;
						} else {

							row4.order_header_dimension_uid = routines.system.JDBCUtil
									.getString(rs_tDBInput_4, 3, false);
						}
						if (colQtyInRs_tDBInput_4 < 4) {
							row4.rightsholder_on_record_account_number = null;
						} else {

							row4.rightsholder_on_record_account_number = routines.system.JDBCUtil
									.getString(rs_tDBInput_4, 4, false);
						}
						if (colQtyInRs_tDBInput_4 < 5) {
							row4.rightsholder_on_record_name = null;
						} else {

							row4.rightsholder_on_record_name = routines.system.JDBCUtil
									.getString(rs_tDBInput_4, 5, false);
						}
						if (colQtyInRs_tDBInput_4 < 6) {
							row4.product_name = null;
						} else {

							row4.product_name = routines.system.JDBCUtil
									.getString(rs_tDBInput_4, 6, false);
						}
						if (colQtyInRs_tDBInput_4 < 7) {
							row4.product_code = null;
						} else {

							row4.product_code = routines.system.JDBCUtil
									.getString(rs_tDBInput_4, 7, false);
						}
						if (colQtyInRs_tDBInput_4 < 8) {
							row4.product_family = null;
						} else {

							row4.product_family = routines.system.JDBCUtil
									.getString(rs_tDBInput_4, 8, false);
						}
						if (colQtyInRs_tDBInput_4 < 9) {
							row4.number_of_units = null;
						} else {

							if (rs_tDBInput_4.getObject(9) != null) {
								row4.number_of_units = rs_tDBInput_4
										.getBigDecimal(9);
							} else {
								row4.number_of_units = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 10) {
							row4.unit_type = null;
						} else {

							row4.unit_type = routines.system.JDBCUtil
									.getString(rs_tDBInput_4, 10, false);
						}
						if (colQtyInRs_tDBInput_4 < 11) {
							row4.publication_title = null;
						} else {

							row4.publication_title = routines.system.JDBCUtil
									.getString(rs_tDBInput_4, 11, false);
						}
						if (colQtyInRs_tDBInput_4 < 12) {
							row4.item_status_code = null;
						} else {

							row4.item_status_code = routines.system.JDBCUtil
									.getString(rs_tDBInput_4, 12, false);
						}
						if (colQtyInRs_tDBInput_4 < 13) {
							row4.distribution_event_id = null;
						} else {

							if (rs_tDBInput_4.getObject(13) != null) {
								row4.distribution_event_id = rs_tDBInput_4
										.getBigDecimal(13);
							} else {
								row4.distribution_event_id = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 14) {
							row4.source_of_content = null;
						} else {

							row4.source_of_content = routines.system.JDBCUtil
									.getString(rs_tDBInput_4, 14, false);
						}
						if (colQtyInRs_tDBInput_4 < 15) {
							row4.tax_pass_through_flag = null;
						} else {

							if (rs_tDBInput_4.getObject(15) != null) {
								row4.tax_pass_through_flag = rs_tDBInput_4
										.getBoolean(15);
							} else {
								row4.tax_pass_through_flag = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 16) {
							row4.publication_work_identifier = null;
						} else {

							row4.publication_work_identifier = routines.system.JDBCUtil
									.getString(rs_tDBInput_4, 16, false);
						}
						if (colQtyInRs_tDBInput_4 < 17) {
							row4.created_datetime = null;
						} else {

							row4.created_datetime = routines.system.JDBCUtil
									.getDate(rs_tDBInput_4, 17);
						}
						if (colQtyInRs_tDBInput_4 < 18) {
							row4.created_by_user = null;
						} else {

							row4.created_by_user = routines.system.JDBCUtil
									.getString(rs_tDBInput_4, 18, false);
						}
						if (colQtyInRs_tDBInput_4 < 19) {
							row4.updated_datetime = null;
						} else {

							row4.updated_datetime = routines.system.JDBCUtil
									.getDate(rs_tDBInput_4, 19);
						}
						if (colQtyInRs_tDBInput_4 < 20) {
							row4.updated_by_user = null;
						} else {

							row4.updated_by_user = routines.system.JDBCUtil
									.getString(rs_tDBInput_4, 20, false);
						}
						if (colQtyInRs_tDBInput_4 < 21) {
							row4.publisher = null;
						} else {

							row4.publisher = routines.system.JDBCUtil
									.getString(rs_tDBInput_4, 21, false);
						}

						/**
						 * [tDBInput_4 begin ] stop
						 */

						/**
						 * [tDBInput_4 main ] start
						 */

						currentComponent = "tDBInput_4";

						tos_count_tDBInput_4++;

						/**
						 * [tDBInput_4 main ] stop
						 */

						/**
						 * [tDBInput_4 process_data_begin ] start
						 */

						currentComponent = "tDBInput_4";

						/**
						 * [tDBInput_4 process_data_begin ] stop
						 */

						/**
						 * [tDBOutput_4 main ] start
						 */

						currentComponent = "tDBOutput_4";

						// row4
						// row4

						if (execStat) {
							runStat.updateStatOnConnection("row4" + iterateId,
									1, 1);
						}

						whetherReject_tDBOutput_4 = false;
						if (row4.order_detail_dimension_uid == null) {
							pstmt_tDBOutput_4
									.setNull(1, java.sql.Types.INTEGER);
						} else {
							pstmt_tDBOutput_4.setLong(1,
									row4.order_detail_dimension_uid);
						}

						if (row4.source_system_order_detail_uid == null) {
							pstmt_tDBOutput_4
									.setNull(2, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_4.setString(2,
									row4.source_system_order_detail_uid);
						}

						if (row4.order_header_dimension_uid == null) {
							pstmt_tDBOutput_4
									.setNull(3, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_4.setString(3,
									row4.order_header_dimension_uid);
						}

						if (row4.rightsholder_on_record_account_number == null) {
							pstmt_tDBOutput_4
									.setNull(4, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_4.setString(4,
									row4.rightsholder_on_record_account_number);
						}

						if (row4.rightsholder_on_record_name == null) {
							pstmt_tDBOutput_4
									.setNull(5, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_4.setString(5,
									row4.rightsholder_on_record_name);
						}

						if (row4.product_name == null) {
							pstmt_tDBOutput_4
									.setNull(6, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_4.setString(6, row4.product_name);
						}

						if (row4.product_code == null) {
							pstmt_tDBOutput_4
									.setNull(7, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_4.setString(7, row4.product_code);
						}

						if (row4.product_family == null) {
							pstmt_tDBOutput_4
									.setNull(8, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_4.setString(8, row4.product_family);
						}

						pstmt_tDBOutput_4
								.setBigDecimal(9, row4.number_of_units);

						if (row4.unit_type == null) {
							pstmt_tDBOutput_4.setNull(10,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_4.setString(10, row4.unit_type);
						}

						if (row4.publication_title == null) {
							pstmt_tDBOutput_4.setNull(11,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_4.setString(11,
									row4.publication_title);
						}

						if (row4.item_status_code == null) {
							pstmt_tDBOutput_4.setNull(12,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_4.setString(12,
									row4.item_status_code);
						}

						pstmt_tDBOutput_4.setBigDecimal(13,
								row4.distribution_event_id);

						if (row4.source_of_content == null) {
							pstmt_tDBOutput_4.setNull(14,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_4.setString(14,
									row4.source_of_content);
						}

						if (row4.tax_pass_through_flag == null) {
							pstmt_tDBOutput_4.setNull(15,
									java.sql.Types.BOOLEAN);
						} else {
							pstmt_tDBOutput_4.setBoolean(15,
									row4.tax_pass_through_flag);
						}

						if (row4.publication_work_identifier == null) {
							pstmt_tDBOutput_4.setNull(16,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_4.setString(16,
									row4.publication_work_identifier);
						}

						if (row4.created_datetime != null) {
							pstmt_tDBOutput_4.setTimestamp(17,
									new java.sql.Timestamp(
											row4.created_datetime.getTime()));
						} else {
							pstmt_tDBOutput_4.setNull(17,
									java.sql.Types.TIMESTAMP);
						}

						if (row4.created_by_user == null) {
							pstmt_tDBOutput_4.setNull(18,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_4.setString(18,
									row4.created_by_user);
						}

						if (row4.updated_datetime != null) {
							pstmt_tDBOutput_4.setTimestamp(19,
									new java.sql.Timestamp(
											row4.updated_datetime.getTime()));
						} else {
							pstmt_tDBOutput_4.setNull(19,
									java.sql.Types.TIMESTAMP);
						}

						if (row4.updated_by_user == null) {
							pstmt_tDBOutput_4.setNull(20,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_4.setString(20,
									row4.updated_by_user);
						}

						if (row4.publisher == null) {
							pstmt_tDBOutput_4.setNull(21,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_4.setString(21, row4.publisher);
						}

						pstmt_tDBOutput_4.addBatch();
						nb_line_tDBOutput_4++;

						batchSizeCounter_tDBOutput_4++;

						if ((batchSize_tDBOutput_4 > 0)
								&& (batchSize_tDBOutput_4 <= batchSizeCounter_tDBOutput_4)) {
							try {
								int countSum_tDBOutput_4 = 0;

								for (int countEach_tDBOutput_4 : pstmt_tDBOutput_4
										.executeBatch()) {
									countSum_tDBOutput_4 += (countEach_tDBOutput_4 < 0 ? 0
											: countEach_tDBOutput_4);
								}

								insertedCount_tDBOutput_4 += countSum_tDBOutput_4;

								batchSizeCounter_tDBOutput_4 = 0;
							} catch (java.sql.BatchUpdateException e_tDBOutput_4) {
								java.sql.SQLException ne_tDBOutput_4 = e_tDBOutput_4
										.getNextException(), sqle_tDBOutput_4 = null;
								String errormessage_tDBOutput_4;
								if (ne_tDBOutput_4 != null) {
									// build new exception to provide the
									// original cause
									sqle_tDBOutput_4 = new java.sql.SQLException(
											e_tDBOutput_4.getMessage()
													+ "\ncaused by: "
													+ ne_tDBOutput_4
															.getMessage(),
											ne_tDBOutput_4.getSQLState(),
											ne_tDBOutput_4.getErrorCode(),
											ne_tDBOutput_4);
									errormessage_tDBOutput_4 = sqle_tDBOutput_4
											.getMessage();
								} else {
									errormessage_tDBOutput_4 = e_tDBOutput_4
											.getMessage();
								}

								int countSum_tDBOutput_4 = 0;
								for (int countEach_tDBOutput_4 : e_tDBOutput_4
										.getUpdateCounts()) {
									countSum_tDBOutput_4 += (countEach_tDBOutput_4 < 0 ? 0
											: countEach_tDBOutput_4);
								}

								insertedCount_tDBOutput_4 += countSum_tDBOutput_4;

								System.err.println(errormessage_tDBOutput_4);

							}
						}

						commitCounter_tDBOutput_4++;
						if (commitEvery_tDBOutput_4 <= commitCounter_tDBOutput_4) {
							if ((batchSize_tDBOutput_4 > 0)
									&& (batchSizeCounter_tDBOutput_4 > 0)) {
								try {
									int countSum_tDBOutput_4 = 0;

									for (int countEach_tDBOutput_4 : pstmt_tDBOutput_4
											.executeBatch()) {
										countSum_tDBOutput_4 += (countEach_tDBOutput_4 < 0 ? 0
												: countEach_tDBOutput_4);
									}

									insertedCount_tDBOutput_4 += countSum_tDBOutput_4;

									batchSizeCounter_tDBOutput_4 = 0;
								} catch (java.sql.BatchUpdateException e_tDBOutput_4) {
									java.sql.SQLException ne_tDBOutput_4 = e_tDBOutput_4
											.getNextException(), sqle_tDBOutput_4 = null;
									String errormessage_tDBOutput_4;
									if (ne_tDBOutput_4 != null) {
										// build new exception to provide the
										// original cause
										sqle_tDBOutput_4 = new java.sql.SQLException(
												e_tDBOutput_4.getMessage()
														+ "\ncaused by: "
														+ ne_tDBOutput_4
																.getMessage(),
												ne_tDBOutput_4.getSQLState(),
												ne_tDBOutput_4.getErrorCode(),
												ne_tDBOutput_4);
										errormessage_tDBOutput_4 = sqle_tDBOutput_4
												.getMessage();
									} else {
										errormessage_tDBOutput_4 = e_tDBOutput_4
												.getMessage();
									}

									int countSum_tDBOutput_4 = 0;
									for (int countEach_tDBOutput_4 : e_tDBOutput_4
											.getUpdateCounts()) {
										countSum_tDBOutput_4 += (countEach_tDBOutput_4 < 0 ? 0
												: countEach_tDBOutput_4);
									}

									insertedCount_tDBOutput_4 += countSum_tDBOutput_4;

									System.err
											.println(errormessage_tDBOutput_4);

								}
							}
							conn_tDBOutput_4.commit();

							commitCounter_tDBOutput_4 = 0;
						}

						tos_count_tDBOutput_4++;

						/**
						 * [tDBOutput_4 main ] stop
						 */

						/**
						 * [tDBOutput_4 process_data_begin ] start
						 */

						currentComponent = "tDBOutput_4";

						/**
						 * [tDBOutput_4 process_data_begin ] stop
						 */

						/**
						 * [tDBOutput_4 process_data_end ] start
						 */

						currentComponent = "tDBOutput_4";

						/**
						 * [tDBOutput_4 process_data_end ] stop
						 */

						/**
						 * [tDBInput_4 process_data_end ] start
						 */

						currentComponent = "tDBInput_4";

						/**
						 * [tDBInput_4 process_data_end ] stop
						 */

						/**
						 * [tDBInput_4 end ] start
						 */

						currentComponent = "tDBInput_4";

					}
				} finally {
					if (rs_tDBInput_4 != null) {
						rs_tDBInput_4.close();
					}
					if (stmt_tDBInput_4 != null) {
						stmt_tDBInput_4.close();
					}
					if (conn_tDBInput_4 != null && !conn_tDBInput_4.isClosed()) {

						conn_tDBInput_4.commit();

						conn_tDBInput_4.close();

					}

				}
				globalMap.put("tDBInput_4_NB_LINE", nb_line_tDBInput_4);

				ok_Hash.put("tDBInput_4", true);
				end_Hash.put("tDBInput_4", System.currentTimeMillis());

				tStatCatcher_1.addMessage(
						"end",
						"tDBInput_4",
						end_Hash.get("tDBInput_4")
								- start_Hash.get("tDBInput_4"));
				tStatCatcher_1Process(globalMap);
				talendStats_STATS.addMessage(
						"end",
						"tDBInput_4",
						end_Hash.get("tDBInput_4")
								- start_Hash.get("tDBInput_4"));
				talendStats_STATSProcess(globalMap);

				/**
				 * [tDBInput_4 end ] stop
				 */

				/**
				 * [tDBOutput_4 end ] start
				 */

				currentComponent = "tDBOutput_4";

				try {
					int countSum_tDBOutput_4 = 0;
					if (pstmt_tDBOutput_4 != null
							&& batchSizeCounter_tDBOutput_4 > 0) {

						for (int countEach_tDBOutput_4 : pstmt_tDBOutput_4
								.executeBatch()) {
							countSum_tDBOutput_4 += (countEach_tDBOutput_4 < 0 ? 0
									: countEach_tDBOutput_4);
						}

					}

					insertedCount_tDBOutput_4 += countSum_tDBOutput_4;

				} catch (java.sql.BatchUpdateException e_tDBOutput_4) {
					java.sql.SQLException ne_tDBOutput_4 = e_tDBOutput_4
							.getNextException(), sqle_tDBOutput_4 = null;
					String errormessage_tDBOutput_4;
					if (ne_tDBOutput_4 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_4 = new java.sql.SQLException(
								e_tDBOutput_4.getMessage() + "\ncaused by: "
										+ ne_tDBOutput_4.getMessage(),
								ne_tDBOutput_4.getSQLState(),
								ne_tDBOutput_4.getErrorCode(), ne_tDBOutput_4);
						errormessage_tDBOutput_4 = sqle_tDBOutput_4
								.getMessage();
					} else {
						errormessage_tDBOutput_4 = e_tDBOutput_4.getMessage();
					}

					int countSum_tDBOutput_4 = 0;
					for (int countEach_tDBOutput_4 : e_tDBOutput_4
							.getUpdateCounts()) {
						countSum_tDBOutput_4 += (countEach_tDBOutput_4 < 0 ? 0
								: countEach_tDBOutput_4);
					}

					insertedCount_tDBOutput_4 += countSum_tDBOutput_4;

					System.err.println(errormessage_tDBOutput_4);

				}

				if (pstmt_tDBOutput_4 != null) {

					pstmt_tDBOutput_4.close();
					resourceMap.remove("pstmt_tDBOutput_4");
				}
				resourceMap.put("statementClosed_tDBOutput_4", true);

				conn_tDBOutput_4.commit();

				conn_tDBOutput_4.close();

				resourceMap.put("finish_tDBOutput_4", true);

				nb_line_deleted_tDBOutput_4 = nb_line_deleted_tDBOutput_4
						+ deletedCount_tDBOutput_4;
				nb_line_update_tDBOutput_4 = nb_line_update_tDBOutput_4
						+ updatedCount_tDBOutput_4;
				nb_line_inserted_tDBOutput_4 = nb_line_inserted_tDBOutput_4
						+ insertedCount_tDBOutput_4;
				nb_line_rejected_tDBOutput_4 = nb_line_rejected_tDBOutput_4
						+ rejectedCount_tDBOutput_4;

				globalMap.put("tDBOutput_4_NB_LINE", nb_line_tDBOutput_4);
				globalMap.put("tDBOutput_4_NB_LINE_UPDATED",
						nb_line_update_tDBOutput_4);
				globalMap.put("tDBOutput_4_NB_LINE_INSERTED",
						nb_line_inserted_tDBOutput_4);
				globalMap.put("tDBOutput_4_NB_LINE_DELETED",
						nb_line_deleted_tDBOutput_4);
				globalMap.put("tDBOutput_4_NB_LINE_REJECTED",
						nb_line_rejected_tDBOutput_4);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row4" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tDBOutput_4", true);
				end_Hash.put("tDBOutput_4", System.currentTimeMillis());

				tStatCatcher_1.addMessage(
						"end",
						"tDBOutput_4",
						end_Hash.get("tDBOutput_4")
								- start_Hash.get("tDBOutput_4"));
				tStatCatcher_1Process(globalMap);
				talendStats_STATS.addMessage(
						"end",
						"tDBOutput_4",
						end_Hash.get("tDBOutput_4")
								- start_Hash.get("tDBOutput_4"));
				talendStats_STATSProcess(globalMap);

				/**
				 * [tDBOutput_4 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_4 finally ] start
				 */

				currentComponent = "tDBInput_4";

				/**
				 * [tDBInput_4 finally ] stop
				 */

				/**
				 * [tDBOutput_4 finally ] start
				 */

				currentComponent = "tDBOutput_4";

				try {
					if (resourceMap.get("statementClosed_tDBOutput_4") == null) {
						java.sql.PreparedStatement pstmtToClose_tDBOutput_4 = null;
						if ((pstmtToClose_tDBOutput_4 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmt_tDBOutput_4")) != null) {
							pstmtToClose_tDBOutput_4.close();
						}
					}
				} finally {
					if (resourceMap.get("finish_tDBOutput_4") == null) {
						java.sql.Connection ctn_tDBOutput_4 = null;
						if ((ctn_tDBOutput_4 = (java.sql.Connection) resourceMap
								.get("conn_tDBOutput_4")) != null) {
							try {
								ctn_tDBOutput_4.close();
							} catch (java.sql.SQLException sqlEx_tDBOutput_4) {
								String errorMessage_tDBOutput_4 = "failed to close the connection in tDBOutput_4 :"
										+ sqlEx_tDBOutput_4.getMessage();
								System.err.println(errorMessage_tDBOutput_4);
							}
						}
					}
				}

				/**
				 * [tDBOutput_4 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_4_SUBPROCESS_STATE", 1);
	}

	public static class row5Struct implements
			routines.system.IPersistableRow<row5Struct> {
		final static byte[] commonByteArrayLock_ORDER_ETL_OLD_RL_ETL = new byte[0];
		static byte[] commonByteArray_ORDER_ETL_OLD_RL_ETL = new byte[0];

		public BigDecimal dwo_licensee_dimension_uid;

		public BigDecimal getDwo_licensee_dimension_uid() {
			return this.dwo_licensee_dimension_uid;
		}

		public Long source_system_licensee_uid;

		public Long getSource_system_licensee_uid() {
			return this.source_system_licensee_uid;
		}

		public String licensee_name;

		public String getLicensee_name() {
			return this.licensee_name;
		}

		public String licensee_contact_email;

		public String getLicensee_contact_email() {
			return this.licensee_contact_email;
		}

		public String licensee_sub_type;

		public String getLicensee_sub_type() {
			return this.licensee_sub_type;
		}

		public String parent_organization_uid;

		public String getParent_organization_uid() {
			return this.parent_organization_uid;
		}

		public String licensee_oracle_party_number;

		public String getLicensee_oracle_party_number() {
			return this.licensee_oracle_party_number;
		}

		public String licensee_tax_country;

		public String getLicensee_tax_country() {
			return this.licensee_tax_country;
		}

		public Boolean not_for_profit_flag;

		public Boolean getNot_for_profit_flag() {
			return this.not_for_profit_flag;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ORDER_ETL_OLD_RL_ETL.length) {
					if (length < 1024
							&& commonByteArray_ORDER_ETL_OLD_RL_ETL.length == 0) {
						commonByteArray_ORDER_ETL_OLD_RL_ETL = new byte[1024];
					} else {
						commonByteArray_ORDER_ETL_OLD_RL_ETL = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ORDER_ETL_OLD_RL_ETL, 0, length);
				strReturn = new String(commonByteArray_ORDER_ETL_OLD_RL_ETL, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ORDER_ETL_OLD_RL_ETL) {

				try {

					int length = 0;

					this.dwo_licensee_dimension_uid = (BigDecimal) dis
							.readObject();

					length = dis.readByte();
					if (length == -1) {
						this.source_system_licensee_uid = null;
					} else {
						this.source_system_licensee_uid = dis.readLong();
					}

					this.licensee_name = readString(dis);

					this.licensee_contact_email = readString(dis);

					this.licensee_sub_type = readString(dis);

					this.parent_organization_uid = readString(dis);

					this.licensee_oracle_party_number = readString(dis);

					this.licensee_tax_country = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.not_for_profit_flag = null;
					} else {
						this.not_for_profit_flag = dis.readBoolean();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// BigDecimal

				dos.writeObject(this.dwo_licensee_dimension_uid);

				// Long

				if (this.source_system_licensee_uid == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.source_system_licensee_uid);
				}

				// String

				writeString(this.licensee_name, dos);

				// String

				writeString(this.licensee_contact_email, dos);

				// String

				writeString(this.licensee_sub_type, dos);

				// String

				writeString(this.parent_organization_uid, dos);

				// String

				writeString(this.licensee_oracle_party_number, dos);

				// String

				writeString(this.licensee_tax_country, dos);

				// Boolean

				if (this.not_for_profit_flag == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.not_for_profit_flag);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("dwo_licensee_dimension_uid="
					+ String.valueOf(dwo_licensee_dimension_uid));
			sb.append(",source_system_licensee_uid="
					+ String.valueOf(source_system_licensee_uid));
			sb.append(",licensee_name=" + licensee_name);
			sb.append(",licensee_contact_email=" + licensee_contact_email);
			sb.append(",licensee_sub_type=" + licensee_sub_type);
			sb.append(",parent_organization_uid=" + parent_organization_uid);
			sb.append(",licensee_oracle_party_number="
					+ licensee_oracle_party_number);
			sb.append(",licensee_tax_country=" + licensee_tax_country);
			sb.append(",not_for_profit_flag="
					+ String.valueOf(not_for_profit_flag));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row5Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_5Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDBInput_5_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row5Struct row5 = new row5Struct();

				/**
				 * [tDBOutput_5 begin ] start
				 */

				ok_Hash.put("tDBOutput_5", false);
				start_Hash.put("tDBOutput_5", System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tDBOutput_5");
				tStatCatcher_1Process(globalMap);

				talendStats_STATS.addMessage("begin", "tDBOutput_5");
				talendStats_STATSProcess(globalMap);

				currentComponent = "tDBOutput_5";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row5" + iterateId, 0, 0);

					}
				}

				int tos_count_tDBOutput_5 = 0;

				String dbschema_tDBOutput_5 = null;
				dbschema_tDBOutput_5 = context.data_warehouse_order_dwos_schema;

				String tableName_tDBOutput_5 = null;
				if (dbschema_tDBOutput_5 == null
						|| dbschema_tDBOutput_5.trim().length() == 0) {
					tableName_tDBOutput_5 = "dwo_licensee_dimension";
				} else {
					tableName_tDBOutput_5 = dbschema_tDBOutput_5 + "\".\""
							+ "dwo_licensee_dimension";
				}

				int nb_line_tDBOutput_5 = 0;
				int nb_line_update_tDBOutput_5 = 0;
				int nb_line_inserted_tDBOutput_5 = 0;
				int nb_line_deleted_tDBOutput_5 = 0;
				int nb_line_rejected_tDBOutput_5 = 0;

				int deletedCount_tDBOutput_5 = 0;
				int updatedCount_tDBOutput_5 = 0;
				int insertedCount_tDBOutput_5 = 0;
				int rejectedCount_tDBOutput_5 = 0;

				boolean whetherReject_tDBOutput_5 = false;

				java.sql.Connection conn_tDBOutput_5 = null;
				String dbUser_tDBOutput_5 = null;

				java.lang.Class.forName("org.postgresql.Driver");
				String url_tDBOutput_5 = "jdbc:postgresql://"
						+ context.data_warehouse_order_dwos_host + ":"
						+ context.data_warehouse_order_dwos_port + "/"
						+ context.data_warehouse_order_dwos_database;
				dbUser_tDBOutput_5 = context.data_warehouse_order_dwos_username;

				final String decryptedPassword_tDBOutput_5 = context.data_warehouse_order_dwos_password;

				String dbPwd_tDBOutput_5 = decryptedPassword_tDBOutput_5;

				conn_tDBOutput_5 = java.sql.DriverManager.getConnection(
						url_tDBOutput_5, dbUser_tDBOutput_5, dbPwd_tDBOutput_5);

				resourceMap.put("conn_tDBOutput_5", conn_tDBOutput_5);
				conn_tDBOutput_5.setAutoCommit(false);
				int commitEvery_tDBOutput_5 = 10000;
				int commitCounter_tDBOutput_5 = 0;

				int batchSize_tDBOutput_5 = 10000;
				int batchSizeCounter_tDBOutput_5 = 0;

				int count_tDBOutput_5 = 0;
				String insert_tDBOutput_5 = "INSERT INTO \""
						+ tableName_tDBOutput_5
						+ "\" (\"dwo_licensee_dimension_uid\",\"source_system_licensee_uid\",\"licensee_name\",\"licensee_contact_email\",\"licensee_sub_type\",\"parent_organization_uid\",\"licensee_oracle_party_number\",\"licensee_tax_country\",\"not_for_profit_flag\") VALUES (?,?,?,?,?,?,?,?,?)";

				java.sql.PreparedStatement pstmt_tDBOutput_5 = conn_tDBOutput_5
						.prepareStatement(insert_tDBOutput_5);
				resourceMap.put("pstmt_tDBOutput_5", pstmt_tDBOutput_5);

				/**
				 * [tDBOutput_5 begin ] stop
				 */

				/**
				 * [tDBInput_5 begin ] start
				 */

				ok_Hash.put("tDBInput_5", false);
				start_Hash.put("tDBInput_5", System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tDBInput_5");
				tStatCatcher_1Process(globalMap);

				talendStats_STATS.addMessage("begin", "tDBInput_5");
				talendStats_STATSProcess(globalMap);

				currentComponent = "tDBInput_5";

				int tos_count_tDBInput_5 = 0;

				int nb_line_tDBInput_5 = 0;
				java.sql.Connection conn_tDBInput_5 = null;
				String driverClass_tDBInput_5 = "org.postgresql.Driver";
				java.lang.Class.forName(driverClass_tDBInput_5);
				String dbUser_tDBInput_5 = context.data_warehouse_order_dwos_username;

				final String decryptedPassword_tDBInput_5 = context.data_warehouse_order_dwos_password;

				String dbPwd_tDBInput_5 = decryptedPassword_tDBInput_5;

				String url_tDBInput_5 = "jdbc:postgresql://"
						+ context.data_warehouse_order_dwos_host + ":"
						+ context.data_warehouse_order_dwos_port + "/"
						+ context.data_warehouse_order_dwos_database;

				conn_tDBInput_5 = java.sql.DriverManager.getConnection(
						url_tDBInput_5, dbUser_tDBInput_5, dbPwd_tDBInput_5);

				conn_tDBInput_5.setAutoCommit(false);

				java.sql.Statement stmt_tDBInput_5 = conn_tDBInput_5
						.createStatement();
				stmt_tDBInput_5.setFetchSize(1000);

				String dbquery_tDBInput_5 = "SELECT fr.licensee_dimension_uid::NUMERIC as dwo_licensee_dimension_uid,\n       fr.licensee_uid as source_system_licens"
						+ "ee_uid,\n       fr.licensee_name as licensee_name,\n       fr.licensee_contact_email as licensee_contact_email,\n       fr."
						+ "licensee_sub_type as licensee_sub_type,\n       fr.parent_organization_uid as parent_organization_uid,\n       fr.licensee"
						+ "_organization_party_number as licensee_oracle_party_number,\n       fr.licensee_tax_country as licensee_tax_country,\n    "
						+ "   CASE WHEN fr.not_for_profit_flag = 0 THEN 'False'::Boolean\n       ELSE 'True'::Boolean\n       END as not_for_profit_f"
						+ "lag\nFROM staging.dwo_rl_v_finance_report fr";

				globalMap.put("tDBInput_5_QUERY", dbquery_tDBInput_5);
				java.sql.ResultSet rs_tDBInput_5 = null;

				try {
					rs_tDBInput_5 = stmt_tDBInput_5
							.executeQuery(dbquery_tDBInput_5);
					java.sql.ResultSetMetaData rsmd_tDBInput_5 = rs_tDBInput_5
							.getMetaData();
					int colQtyInRs_tDBInput_5 = rsmd_tDBInput_5
							.getColumnCount();

					String tmpContent_tDBInput_5 = null;

					while (rs_tDBInput_5.next()) {
						nb_line_tDBInput_5++;

						if (colQtyInRs_tDBInput_5 < 1) {
							row5.dwo_licensee_dimension_uid = null;
						} else {

							if (rs_tDBInput_5.getObject(1) != null) {
								row5.dwo_licensee_dimension_uid = rs_tDBInput_5
										.getBigDecimal(1);
							} else {
								row5.dwo_licensee_dimension_uid = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 2) {
							row5.source_system_licensee_uid = null;
						} else {

							if (rs_tDBInput_5.getObject(2) != null) {
								row5.source_system_licensee_uid = rs_tDBInput_5
										.getLong(2);
							} else {
								row5.source_system_licensee_uid = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 3) {
							row5.licensee_name = null;
						} else {

							row5.licensee_name = routines.system.JDBCUtil
									.getString(rs_tDBInput_5, 3, false);
						}
						if (colQtyInRs_tDBInput_5 < 4) {
							row5.licensee_contact_email = null;
						} else {

							row5.licensee_contact_email = routines.system.JDBCUtil
									.getString(rs_tDBInput_5, 4, false);
						}
						if (colQtyInRs_tDBInput_5 < 5) {
							row5.licensee_sub_type = null;
						} else {

							row5.licensee_sub_type = routines.system.JDBCUtil
									.getString(rs_tDBInput_5, 5, false);
						}
						if (colQtyInRs_tDBInput_5 < 6) {
							row5.parent_organization_uid = null;
						} else {

							row5.parent_organization_uid = routines.system.JDBCUtil
									.getString(rs_tDBInput_5, 6, false);
						}
						if (colQtyInRs_tDBInput_5 < 7) {
							row5.licensee_oracle_party_number = null;
						} else {

							row5.licensee_oracle_party_number = routines.system.JDBCUtil
									.getString(rs_tDBInput_5, 7, false);
						}
						if (colQtyInRs_tDBInput_5 < 8) {
							row5.licensee_tax_country = null;
						} else {

							row5.licensee_tax_country = routines.system.JDBCUtil
									.getString(rs_tDBInput_5, 8, false);
						}
						if (colQtyInRs_tDBInput_5 < 9) {
							row5.not_for_profit_flag = null;
						} else {

							if (rs_tDBInput_5.getObject(9) != null) {
								row5.not_for_profit_flag = rs_tDBInput_5
										.getBoolean(9);
							} else {
								row5.not_for_profit_flag = null;
							}
						}

						/**
						 * [tDBInput_5 begin ] stop
						 */

						/**
						 * [tDBInput_5 main ] start
						 */

						currentComponent = "tDBInput_5";

						tos_count_tDBInput_5++;

						/**
						 * [tDBInput_5 main ] stop
						 */

						/**
						 * [tDBInput_5 process_data_begin ] start
						 */

						currentComponent = "tDBInput_5";

						/**
						 * [tDBInput_5 process_data_begin ] stop
						 */

						/**
						 * [tDBOutput_5 main ] start
						 */

						currentComponent = "tDBOutput_5";

						// row5
						// row5

						if (execStat) {
							runStat.updateStatOnConnection("row5" + iterateId,
									1, 1);
						}

						whetherReject_tDBOutput_5 = false;
						pstmt_tDBOutput_5.setBigDecimal(1,
								row5.dwo_licensee_dimension_uid);

						if (row5.source_system_licensee_uid == null) {
							pstmt_tDBOutput_5
									.setNull(2, java.sql.Types.INTEGER);
						} else {
							pstmt_tDBOutput_5.setLong(2,
									row5.source_system_licensee_uid);
						}

						if (row5.licensee_name == null) {
							pstmt_tDBOutput_5
									.setNull(3, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_5.setString(3, row5.licensee_name);
						}

						if (row5.licensee_contact_email == null) {
							pstmt_tDBOutput_5
									.setNull(4, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_5.setString(4,
									row5.licensee_contact_email);
						}

						if (row5.licensee_sub_type == null) {
							pstmt_tDBOutput_5
									.setNull(5, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_5.setString(5,
									row5.licensee_sub_type);
						}

						if (row5.parent_organization_uid == null) {
							pstmt_tDBOutput_5
									.setNull(6, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_5.setString(6,
									row5.parent_organization_uid);
						}

						if (row5.licensee_oracle_party_number == null) {
							pstmt_tDBOutput_5
									.setNull(7, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_5.setString(7,
									row5.licensee_oracle_party_number);
						}

						if (row5.licensee_tax_country == null) {
							pstmt_tDBOutput_5
									.setNull(8, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_5.setString(8,
									row5.licensee_tax_country);
						}

						if (row5.not_for_profit_flag == null) {
							pstmt_tDBOutput_5
									.setNull(9, java.sql.Types.BOOLEAN);
						} else {
							pstmt_tDBOutput_5.setBoolean(9,
									row5.not_for_profit_flag);
						}

						pstmt_tDBOutput_5.addBatch();
						nb_line_tDBOutput_5++;

						batchSizeCounter_tDBOutput_5++;

						if ((batchSize_tDBOutput_5 > 0)
								&& (batchSize_tDBOutput_5 <= batchSizeCounter_tDBOutput_5)) {
							try {
								int countSum_tDBOutput_5 = 0;

								for (int countEach_tDBOutput_5 : pstmt_tDBOutput_5
										.executeBatch()) {
									countSum_tDBOutput_5 += (countEach_tDBOutput_5 < 0 ? 0
											: countEach_tDBOutput_5);
								}

								insertedCount_tDBOutput_5 += countSum_tDBOutput_5;

								batchSizeCounter_tDBOutput_5 = 0;
							} catch (java.sql.BatchUpdateException e_tDBOutput_5) {
								java.sql.SQLException ne_tDBOutput_5 = e_tDBOutput_5
										.getNextException(), sqle_tDBOutput_5 = null;
								String errormessage_tDBOutput_5;
								if (ne_tDBOutput_5 != null) {
									// build new exception to provide the
									// original cause
									sqle_tDBOutput_5 = new java.sql.SQLException(
											e_tDBOutput_5.getMessage()
													+ "\ncaused by: "
													+ ne_tDBOutput_5
															.getMessage(),
											ne_tDBOutput_5.getSQLState(),
											ne_tDBOutput_5.getErrorCode(),
											ne_tDBOutput_5);
									errormessage_tDBOutput_5 = sqle_tDBOutput_5
											.getMessage();
								} else {
									errormessage_tDBOutput_5 = e_tDBOutput_5
											.getMessage();
								}

								int countSum_tDBOutput_5 = 0;
								for (int countEach_tDBOutput_5 : e_tDBOutput_5
										.getUpdateCounts()) {
									countSum_tDBOutput_5 += (countEach_tDBOutput_5 < 0 ? 0
											: countEach_tDBOutput_5);
								}

								insertedCount_tDBOutput_5 += countSum_tDBOutput_5;

								System.err.println(errormessage_tDBOutput_5);

							}
						}

						commitCounter_tDBOutput_5++;
						if (commitEvery_tDBOutput_5 <= commitCounter_tDBOutput_5) {
							if ((batchSize_tDBOutput_5 > 0)
									&& (batchSizeCounter_tDBOutput_5 > 0)) {
								try {
									int countSum_tDBOutput_5 = 0;

									for (int countEach_tDBOutput_5 : pstmt_tDBOutput_5
											.executeBatch()) {
										countSum_tDBOutput_5 += (countEach_tDBOutput_5 < 0 ? 0
												: countEach_tDBOutput_5);
									}

									insertedCount_tDBOutput_5 += countSum_tDBOutput_5;

									batchSizeCounter_tDBOutput_5 = 0;
								} catch (java.sql.BatchUpdateException e_tDBOutput_5) {
									java.sql.SQLException ne_tDBOutput_5 = e_tDBOutput_5
											.getNextException(), sqle_tDBOutput_5 = null;
									String errormessage_tDBOutput_5;
									if (ne_tDBOutput_5 != null) {
										// build new exception to provide the
										// original cause
										sqle_tDBOutput_5 = new java.sql.SQLException(
												e_tDBOutput_5.getMessage()
														+ "\ncaused by: "
														+ ne_tDBOutput_5
																.getMessage(),
												ne_tDBOutput_5.getSQLState(),
												ne_tDBOutput_5.getErrorCode(),
												ne_tDBOutput_5);
										errormessage_tDBOutput_5 = sqle_tDBOutput_5
												.getMessage();
									} else {
										errormessage_tDBOutput_5 = e_tDBOutput_5
												.getMessage();
									}

									int countSum_tDBOutput_5 = 0;
									for (int countEach_tDBOutput_5 : e_tDBOutput_5
											.getUpdateCounts()) {
										countSum_tDBOutput_5 += (countEach_tDBOutput_5 < 0 ? 0
												: countEach_tDBOutput_5);
									}

									insertedCount_tDBOutput_5 += countSum_tDBOutput_5;

									System.err
											.println(errormessage_tDBOutput_5);

								}
							}
							conn_tDBOutput_5.commit();

							commitCounter_tDBOutput_5 = 0;
						}

						tos_count_tDBOutput_5++;

						/**
						 * [tDBOutput_5 main ] stop
						 */

						/**
						 * [tDBOutput_5 process_data_begin ] start
						 */

						currentComponent = "tDBOutput_5";

						/**
						 * [tDBOutput_5 process_data_begin ] stop
						 */

						/**
						 * [tDBOutput_5 process_data_end ] start
						 */

						currentComponent = "tDBOutput_5";

						/**
						 * [tDBOutput_5 process_data_end ] stop
						 */

						/**
						 * [tDBInput_5 process_data_end ] start
						 */

						currentComponent = "tDBInput_5";

						/**
						 * [tDBInput_5 process_data_end ] stop
						 */

						/**
						 * [tDBInput_5 end ] start
						 */

						currentComponent = "tDBInput_5";

					}
				} finally {
					if (rs_tDBInput_5 != null) {
						rs_tDBInput_5.close();
					}
					if (stmt_tDBInput_5 != null) {
						stmt_tDBInput_5.close();
					}
					if (conn_tDBInput_5 != null && !conn_tDBInput_5.isClosed()) {

						conn_tDBInput_5.commit();

						conn_tDBInput_5.close();

					}

				}
				globalMap.put("tDBInput_5_NB_LINE", nb_line_tDBInput_5);

				ok_Hash.put("tDBInput_5", true);
				end_Hash.put("tDBInput_5", System.currentTimeMillis());

				tStatCatcher_1.addMessage(
						"end",
						"tDBInput_5",
						end_Hash.get("tDBInput_5")
								- start_Hash.get("tDBInput_5"));
				tStatCatcher_1Process(globalMap);
				talendStats_STATS.addMessage(
						"end",
						"tDBInput_5",
						end_Hash.get("tDBInput_5")
								- start_Hash.get("tDBInput_5"));
				talendStats_STATSProcess(globalMap);

				/**
				 * [tDBInput_5 end ] stop
				 */

				/**
				 * [tDBOutput_5 end ] start
				 */

				currentComponent = "tDBOutput_5";

				try {
					int countSum_tDBOutput_5 = 0;
					if (pstmt_tDBOutput_5 != null
							&& batchSizeCounter_tDBOutput_5 > 0) {

						for (int countEach_tDBOutput_5 : pstmt_tDBOutput_5
								.executeBatch()) {
							countSum_tDBOutput_5 += (countEach_tDBOutput_5 < 0 ? 0
									: countEach_tDBOutput_5);
						}

					}

					insertedCount_tDBOutput_5 += countSum_tDBOutput_5;

				} catch (java.sql.BatchUpdateException e_tDBOutput_5) {
					java.sql.SQLException ne_tDBOutput_5 = e_tDBOutput_5
							.getNextException(), sqle_tDBOutput_5 = null;
					String errormessage_tDBOutput_5;
					if (ne_tDBOutput_5 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_5 = new java.sql.SQLException(
								e_tDBOutput_5.getMessage() + "\ncaused by: "
										+ ne_tDBOutput_5.getMessage(),
								ne_tDBOutput_5.getSQLState(),
								ne_tDBOutput_5.getErrorCode(), ne_tDBOutput_5);
						errormessage_tDBOutput_5 = sqle_tDBOutput_5
								.getMessage();
					} else {
						errormessage_tDBOutput_5 = e_tDBOutput_5.getMessage();
					}

					int countSum_tDBOutput_5 = 0;
					for (int countEach_tDBOutput_5 : e_tDBOutput_5
							.getUpdateCounts()) {
						countSum_tDBOutput_5 += (countEach_tDBOutput_5 < 0 ? 0
								: countEach_tDBOutput_5);
					}

					insertedCount_tDBOutput_5 += countSum_tDBOutput_5;

					System.err.println(errormessage_tDBOutput_5);

				}

				if (pstmt_tDBOutput_5 != null) {

					pstmt_tDBOutput_5.close();
					resourceMap.remove("pstmt_tDBOutput_5");
				}
				resourceMap.put("statementClosed_tDBOutput_5", true);

				conn_tDBOutput_5.commit();

				conn_tDBOutput_5.close();

				resourceMap.put("finish_tDBOutput_5", true);

				nb_line_deleted_tDBOutput_5 = nb_line_deleted_tDBOutput_5
						+ deletedCount_tDBOutput_5;
				nb_line_update_tDBOutput_5 = nb_line_update_tDBOutput_5
						+ updatedCount_tDBOutput_5;
				nb_line_inserted_tDBOutput_5 = nb_line_inserted_tDBOutput_5
						+ insertedCount_tDBOutput_5;
				nb_line_rejected_tDBOutput_5 = nb_line_rejected_tDBOutput_5
						+ rejectedCount_tDBOutput_5;

				globalMap.put("tDBOutput_5_NB_LINE", nb_line_tDBOutput_5);
				globalMap.put("tDBOutput_5_NB_LINE_UPDATED",
						nb_line_update_tDBOutput_5);
				globalMap.put("tDBOutput_5_NB_LINE_INSERTED",
						nb_line_inserted_tDBOutput_5);
				globalMap.put("tDBOutput_5_NB_LINE_DELETED",
						nb_line_deleted_tDBOutput_5);
				globalMap.put("tDBOutput_5_NB_LINE_REJECTED",
						nb_line_rejected_tDBOutput_5);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row5" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tDBOutput_5", true);
				end_Hash.put("tDBOutput_5", System.currentTimeMillis());

				tStatCatcher_1.addMessage(
						"end",
						"tDBOutput_5",
						end_Hash.get("tDBOutput_5")
								- start_Hash.get("tDBOutput_5"));
				tStatCatcher_1Process(globalMap);
				talendStats_STATS.addMessage(
						"end",
						"tDBOutput_5",
						end_Hash.get("tDBOutput_5")
								- start_Hash.get("tDBOutput_5"));
				talendStats_STATSProcess(globalMap);

				/**
				 * [tDBOutput_5 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_5 finally ] start
				 */

				currentComponent = "tDBInput_5";

				/**
				 * [tDBInput_5 finally ] stop
				 */

				/**
				 * [tDBOutput_5 finally ] start
				 */

				currentComponent = "tDBOutput_5";

				try {
					if (resourceMap.get("statementClosed_tDBOutput_5") == null) {
						java.sql.PreparedStatement pstmtToClose_tDBOutput_5 = null;
						if ((pstmtToClose_tDBOutput_5 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmt_tDBOutput_5")) != null) {
							pstmtToClose_tDBOutput_5.close();
						}
					}
				} finally {
					if (resourceMap.get("finish_tDBOutput_5") == null) {
						java.sql.Connection ctn_tDBOutput_5 = null;
						if ((ctn_tDBOutput_5 = (java.sql.Connection) resourceMap
								.get("conn_tDBOutput_5")) != null) {
							try {
								ctn_tDBOutput_5.close();
							} catch (java.sql.SQLException sqlEx_tDBOutput_5) {
								String errorMessage_tDBOutput_5 = "failed to close the connection in tDBOutput_5 :"
										+ sqlEx_tDBOutput_5.getMessage();
								System.err.println(errorMessage_tDBOutput_5);
							}
						}
					}
				}

				/**
				 * [tDBOutput_5 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_5_SUBPROCESS_STATE", 1);
	}

	public static class row7Struct implements
			routines.system.IPersistableRow<row7Struct> {
		final static byte[] commonByteArrayLock_ORDER_ETL_OLD_RL_ETL = new byte[0];
		static byte[] commonByteArray_ORDER_ETL_OLD_RL_ETL = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String dwo_product_dimension_uid;

		public String getDwo_product_dimension_uid() {
			return this.dwo_product_dimension_uid;
		}

		public String source_system_products_uid;

		public String getSource_system_products_uid() {
			return this.source_system_products_uid;
		}

		public String product_name;

		public String getProduct_name() {
			return this.product_name;
		}

		public String product_family_code;

		public String getProduct_family_code() {
			return this.product_family_code;
		}

		public String product_family_name;

		public String getProduct_family_name() {
			return this.product_family_name;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.dwo_product_dimension_uid == null) ? 0
								: this.dwo_product_dimension_uid.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row7Struct other = (row7Struct) obj;

			if (this.dwo_product_dimension_uid == null) {
				if (other.dwo_product_dimension_uid != null)
					return false;

			} else if (!this.dwo_product_dimension_uid
					.equals(other.dwo_product_dimension_uid))

				return false;

			return true;
		}

		public void copyDataTo(row7Struct other) {

			other.dwo_product_dimension_uid = this.dwo_product_dimension_uid;
			other.source_system_products_uid = this.source_system_products_uid;
			other.product_name = this.product_name;
			other.product_family_code = this.product_family_code;
			other.product_family_name = this.product_family_name;

		}

		public void copyKeysDataTo(row7Struct other) {

			other.dwo_product_dimension_uid = this.dwo_product_dimension_uid;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ORDER_ETL_OLD_RL_ETL.length) {
					if (length < 1024
							&& commonByteArray_ORDER_ETL_OLD_RL_ETL.length == 0) {
						commonByteArray_ORDER_ETL_OLD_RL_ETL = new byte[1024];
					} else {
						commonByteArray_ORDER_ETL_OLD_RL_ETL = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ORDER_ETL_OLD_RL_ETL, 0, length);
				strReturn = new String(commonByteArray_ORDER_ETL_OLD_RL_ETL, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ORDER_ETL_OLD_RL_ETL) {

				try {

					int length = 0;

					this.dwo_product_dimension_uid = readString(dis);

					this.source_system_products_uid = readString(dis);

					this.product_name = readString(dis);

					this.product_family_code = readString(dis);

					this.product_family_name = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.dwo_product_dimension_uid, dos);

				// String

				writeString(this.source_system_products_uid, dos);

				// String

				writeString(this.product_name, dos);

				// String

				writeString(this.product_family_code, dos);

				// String

				writeString(this.product_family_name, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("dwo_product_dimension_uid=" + dwo_product_dimension_uid);
			sb.append(",source_system_products_uid="
					+ source_system_products_uid);
			sb.append(",product_name=" + product_name);
			sb.append(",product_family_code=" + product_family_code);
			sb.append(",product_family_name=" + product_family_name);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row7Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.dwo_product_dimension_uid,
					other.dwo_product_dimension_uid);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_6Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDBInput_6_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row7Struct row7 = new row7Struct();

				/**
				 * [tDBOutput_6 begin ] start
				 */

				ok_Hash.put("tDBOutput_6", false);
				start_Hash.put("tDBOutput_6", System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tDBOutput_6");
				tStatCatcher_1Process(globalMap);

				talendStats_STATS.addMessage("begin", "tDBOutput_6");
				talendStats_STATSProcess(globalMap);

				currentComponent = "tDBOutput_6";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row7" + iterateId, 0, 0);

					}
				}

				int tos_count_tDBOutput_6 = 0;

				String dbschema_tDBOutput_6 = null;
				dbschema_tDBOutput_6 = context.data_warehouse_order_dwos_schema;

				String tableName_tDBOutput_6 = null;
				if (dbschema_tDBOutput_6 == null
						|| dbschema_tDBOutput_6.trim().length() == 0) {
					tableName_tDBOutput_6 = "dwo_products_dimension";
				} else {
					tableName_tDBOutput_6 = dbschema_tDBOutput_6 + "\".\""
							+ "dwo_products_dimension";
				}

				int updateKeyCount_tDBOutput_6 = 1;
				if (updateKeyCount_tDBOutput_6 < 1) {
					throw new RuntimeException(
							"For update, Schema must have a key");
				}
				int nb_line_tDBOutput_6 = 0;
				int nb_line_update_tDBOutput_6 = 0;
				int nb_line_inserted_tDBOutput_6 = 0;
				int nb_line_deleted_tDBOutput_6 = 0;
				int nb_line_rejected_tDBOutput_6 = 0;

				int deletedCount_tDBOutput_6 = 0;
				int updatedCount_tDBOutput_6 = 0;
				int insertedCount_tDBOutput_6 = 0;
				int rejectedCount_tDBOutput_6 = 0;

				boolean whetherReject_tDBOutput_6 = false;

				java.sql.Connection conn_tDBOutput_6 = null;
				String dbUser_tDBOutput_6 = null;

				java.lang.Class.forName("org.postgresql.Driver");
				String url_tDBOutput_6 = "jdbc:postgresql://"
						+ context.data_warehouse_order_dwos_host + ":"
						+ context.data_warehouse_order_dwos_port + "/"
						+ context.data_warehouse_order_dwos_database;
				dbUser_tDBOutput_6 = context.data_warehouse_order_dwos_username;

				final String decryptedPassword_tDBOutput_6 = context.data_warehouse_order_dwos_password;

				String dbPwd_tDBOutput_6 = decryptedPassword_tDBOutput_6;

				conn_tDBOutput_6 = java.sql.DriverManager.getConnection(
						url_tDBOutput_6, dbUser_tDBOutput_6, dbPwd_tDBOutput_6);

				resourceMap.put("conn_tDBOutput_6", conn_tDBOutput_6);
				conn_tDBOutput_6.setAutoCommit(false);
				int commitEvery_tDBOutput_6 = 10000;
				int commitCounter_tDBOutput_6 = 0;

				int count_tDBOutput_6 = 0;
				java.sql.PreparedStatement pstmt_tDBOutput_6 = conn_tDBOutput_6
						.prepareStatement("SELECT COUNT(1) FROM \""
								+ tableName_tDBOutput_6
								+ "\" WHERE \"dwo_product_dimension_uid\" = ?");
				resourceMap.put("pstmt_tDBOutput_6", pstmt_tDBOutput_6);
				String insert_tDBOutput_6 = "INSERT INTO \""
						+ tableName_tDBOutput_6
						+ "\" (\"dwo_product_dimension_uid\",\"source_system_products_uid\",\"product_name\",\"product_family_code\",\"product_family_name\") VALUES (?,?,?,?,?)";
				java.sql.PreparedStatement pstmtInsert_tDBOutput_6 = conn_tDBOutput_6
						.prepareStatement(insert_tDBOutput_6);
				resourceMap.put("pstmtInsert_tDBOutput_6",
						pstmtInsert_tDBOutput_6);
				String update_tDBOutput_6 = "UPDATE \""
						+ tableName_tDBOutput_6
						+ "\" SET \"source_system_products_uid\" = ?,\"product_name\" = ?,\"product_family_code\" = ?,\"product_family_name\" = ? WHERE \"dwo_product_dimension_uid\" = ?";
				java.sql.PreparedStatement pstmtUpdate_tDBOutput_6 = conn_tDBOutput_6
						.prepareStatement(update_tDBOutput_6);
				resourceMap.put("pstmtUpdate_tDBOutput_6",
						pstmtUpdate_tDBOutput_6);

				/**
				 * [tDBOutput_6 begin ] stop
				 */

				/**
				 * [tDBInput_6 begin ] start
				 */

				ok_Hash.put("tDBInput_6", false);
				start_Hash.put("tDBInput_6", System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tDBInput_6");
				tStatCatcher_1Process(globalMap);

				talendStats_STATS.addMessage("begin", "tDBInput_6");
				talendStats_STATSProcess(globalMap);

				currentComponent = "tDBInput_6";

				int tos_count_tDBInput_6 = 0;

				int nb_line_tDBInput_6 = 0;
				java.sql.Connection conn_tDBInput_6 = null;
				String driverClass_tDBInput_6 = "org.postgresql.Driver";
				java.lang.Class.forName(driverClass_tDBInput_6);
				String dbUser_tDBInput_6 = context.data_warehouse_order_dwos_username;

				final String decryptedPassword_tDBInput_6 = context.data_warehouse_order_dwos_password;

				String dbPwd_tDBInput_6 = decryptedPassword_tDBInput_6;

				String url_tDBInput_6 = "jdbc:postgresql://"
						+ context.data_warehouse_order_dwos_host + ":"
						+ context.data_warehouse_order_dwos_port + "/"
						+ context.data_warehouse_order_dwos_database;

				conn_tDBInput_6 = java.sql.DriverManager.getConnection(
						url_tDBInput_6, dbUser_tDBInput_6, dbPwd_tDBInput_6);

				conn_tDBInput_6.setAutoCommit(false);

				java.sql.Statement stmt_tDBInput_6 = conn_tDBInput_6
						.createStatement();
				stmt_tDBInput_6.setFetchSize(1000);

				String dbquery_tDBInput_6 = "SELECT distinct rlv.product_name as dwo_product_dimension_uid,\n       rlv.product_name as source_system_products_uid,\n "
						+ "      rlv.product_name as product_name,\n       'NONE' as product_family_code,\n       'NONE' as product_family_name\nfrom "
						+ "staging.dwo_rl_v_finance_report rlv\norder by product_name";

				globalMap.put("tDBInput_6_QUERY", dbquery_tDBInput_6);
				java.sql.ResultSet rs_tDBInput_6 = null;

				try {
					rs_tDBInput_6 = stmt_tDBInput_6
							.executeQuery(dbquery_tDBInput_6);
					java.sql.ResultSetMetaData rsmd_tDBInput_6 = rs_tDBInput_6
							.getMetaData();
					int colQtyInRs_tDBInput_6 = rsmd_tDBInput_6
							.getColumnCount();

					String tmpContent_tDBInput_6 = null;

					while (rs_tDBInput_6.next()) {
						nb_line_tDBInput_6++;

						if (colQtyInRs_tDBInput_6 < 1) {
							row7.dwo_product_dimension_uid = null;
						} else {

							row7.dwo_product_dimension_uid = routines.system.JDBCUtil
									.getString(rs_tDBInput_6, 1, false);
						}
						if (colQtyInRs_tDBInput_6 < 2) {
							row7.source_system_products_uid = null;
						} else {

							row7.source_system_products_uid = routines.system.JDBCUtil
									.getString(rs_tDBInput_6, 2, false);
						}
						if (colQtyInRs_tDBInput_6 < 3) {
							row7.product_name = null;
						} else {

							row7.product_name = routines.system.JDBCUtil
									.getString(rs_tDBInput_6, 3, false);
						}
						if (colQtyInRs_tDBInput_6 < 4) {
							row7.product_family_code = null;
						} else {

							row7.product_family_code = routines.system.JDBCUtil
									.getString(rs_tDBInput_6, 4, false);
						}
						if (colQtyInRs_tDBInput_6 < 5) {
							row7.product_family_name = null;
						} else {

							row7.product_family_name = routines.system.JDBCUtil
									.getString(rs_tDBInput_6, 5, false);
						}

						/**
						 * [tDBInput_6 begin ] stop
						 */

						/**
						 * [tDBInput_6 main ] start
						 */

						currentComponent = "tDBInput_6";

						tos_count_tDBInput_6++;

						/**
						 * [tDBInput_6 main ] stop
						 */

						/**
						 * [tDBInput_6 process_data_begin ] start
						 */

						currentComponent = "tDBInput_6";

						/**
						 * [tDBInput_6 process_data_begin ] stop
						 */

						/**
						 * [tDBOutput_6 main ] start
						 */

						currentComponent = "tDBOutput_6";

						// row7
						// row7

						if (execStat) {
							runStat.updateStatOnConnection("row7" + iterateId,
									1, 1);
						}

						whetherReject_tDBOutput_6 = false;
						if (row7.dwo_product_dimension_uid == null) {
							pstmt_tDBOutput_6
									.setNull(1, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_6.setString(1,
									row7.dwo_product_dimension_uid);
						}

						int checkCount_tDBOutput_6 = -1;
						try (java.sql.ResultSet rs_tDBOutput_6 = pstmt_tDBOutput_6
								.executeQuery()) {
							while (rs_tDBOutput_6.next()) {
								checkCount_tDBOutput_6 = rs_tDBOutput_6
										.getInt(1);
							}
						}
						if (checkCount_tDBOutput_6 > 0) {
							if (row7.source_system_products_uid == null) {
								pstmtUpdate_tDBOutput_6.setNull(1,
										java.sql.Types.VARCHAR);
							} else {
								pstmtUpdate_tDBOutput_6.setString(1,
										row7.source_system_products_uid);
							}

							if (row7.product_name == null) {
								pstmtUpdate_tDBOutput_6.setNull(2,
										java.sql.Types.VARCHAR);
							} else {
								pstmtUpdate_tDBOutput_6.setString(2,
										row7.product_name);
							}

							if (row7.product_family_code == null) {
								pstmtUpdate_tDBOutput_6.setNull(3,
										java.sql.Types.VARCHAR);
							} else {
								pstmtUpdate_tDBOutput_6.setString(3,
										row7.product_family_code);
							}

							if (row7.product_family_name == null) {
								pstmtUpdate_tDBOutput_6.setNull(4,
										java.sql.Types.VARCHAR);
							} else {
								pstmtUpdate_tDBOutput_6.setString(4,
										row7.product_family_name);
							}

							if (row7.dwo_product_dimension_uid == null) {
								pstmtUpdate_tDBOutput_6.setNull(
										5 + count_tDBOutput_6,
										java.sql.Types.VARCHAR);
							} else {
								pstmtUpdate_tDBOutput_6.setString(
										5 + count_tDBOutput_6,
										row7.dwo_product_dimension_uid);
							}

							try {

								updatedCount_tDBOutput_6 = updatedCount_tDBOutput_6
										+ pstmtUpdate_tDBOutput_6
												.executeUpdate();
								nb_line_tDBOutput_6++;

							} catch (java.lang.Exception e) {

								whetherReject_tDBOutput_6 = true;
								nb_line_tDBOutput_6++;
								System.err.print(e.getMessage());
							}
						} else {
							if (row7.dwo_product_dimension_uid == null) {
								pstmtInsert_tDBOutput_6.setNull(1,
										java.sql.Types.VARCHAR);
							} else {
								pstmtInsert_tDBOutput_6.setString(1,
										row7.dwo_product_dimension_uid);
							}

							if (row7.source_system_products_uid == null) {
								pstmtInsert_tDBOutput_6.setNull(2,
										java.sql.Types.VARCHAR);
							} else {
								pstmtInsert_tDBOutput_6.setString(2,
										row7.source_system_products_uid);
							}

							if (row7.product_name == null) {
								pstmtInsert_tDBOutput_6.setNull(3,
										java.sql.Types.VARCHAR);
							} else {
								pstmtInsert_tDBOutput_6.setString(3,
										row7.product_name);
							}

							if (row7.product_family_code == null) {
								pstmtInsert_tDBOutput_6.setNull(4,
										java.sql.Types.VARCHAR);
							} else {
								pstmtInsert_tDBOutput_6.setString(4,
										row7.product_family_code);
							}

							if (row7.product_family_name == null) {
								pstmtInsert_tDBOutput_6.setNull(5,
										java.sql.Types.VARCHAR);
							} else {
								pstmtInsert_tDBOutput_6.setString(5,
										row7.product_family_name);
							}

							try {

								insertedCount_tDBOutput_6 = insertedCount_tDBOutput_6
										+ pstmtInsert_tDBOutput_6
												.executeUpdate();
								nb_line_tDBOutput_6++;

							} catch (java.lang.Exception e) {

								whetherReject_tDBOutput_6 = true;
								nb_line_tDBOutput_6++;
								System.err.print(e.getMessage());
							}
						}
						if (!whetherReject_tDBOutput_6) {
						}
						commitCounter_tDBOutput_6++;
						if (commitEvery_tDBOutput_6 <= commitCounter_tDBOutput_6) {
							conn_tDBOutput_6.commit();

							commitCounter_tDBOutput_6 = 0;
						}

						tos_count_tDBOutput_6++;

						/**
						 * [tDBOutput_6 main ] stop
						 */

						/**
						 * [tDBOutput_6 process_data_begin ] start
						 */

						currentComponent = "tDBOutput_6";

						/**
						 * [tDBOutput_6 process_data_begin ] stop
						 */

						/**
						 * [tDBOutput_6 process_data_end ] start
						 */

						currentComponent = "tDBOutput_6";

						/**
						 * [tDBOutput_6 process_data_end ] stop
						 */

						/**
						 * [tDBInput_6 process_data_end ] start
						 */

						currentComponent = "tDBInput_6";

						/**
						 * [tDBInput_6 process_data_end ] stop
						 */

						/**
						 * [tDBInput_6 end ] start
						 */

						currentComponent = "tDBInput_6";

					}
				} finally {
					if (rs_tDBInput_6 != null) {
						rs_tDBInput_6.close();
					}
					if (stmt_tDBInput_6 != null) {
						stmt_tDBInput_6.close();
					}
					if (conn_tDBInput_6 != null && !conn_tDBInput_6.isClosed()) {

						conn_tDBInput_6.commit();

						conn_tDBInput_6.close();

					}

				}
				globalMap.put("tDBInput_6_NB_LINE", nb_line_tDBInput_6);

				ok_Hash.put("tDBInput_6", true);
				end_Hash.put("tDBInput_6", System.currentTimeMillis());

				tStatCatcher_1.addMessage(
						"end",
						"tDBInput_6",
						end_Hash.get("tDBInput_6")
								- start_Hash.get("tDBInput_6"));
				tStatCatcher_1Process(globalMap);
				talendStats_STATS.addMessage(
						"end",
						"tDBInput_6",
						end_Hash.get("tDBInput_6")
								- start_Hash.get("tDBInput_6"));
				talendStats_STATSProcess(globalMap);

				/**
				 * [tDBInput_6 end ] stop
				 */

				/**
				 * [tDBOutput_6 end ] start
				 */

				currentComponent = "tDBOutput_6";

				if (pstmtUpdate_tDBOutput_6 != null) {
					pstmtUpdate_tDBOutput_6.close();
					resourceMap.remove("pstmtUpdate_tDBOutput_6");
				}
				if (pstmtInsert_tDBOutput_6 != null) {
					pstmtInsert_tDBOutput_6.close();
					resourceMap.remove("pstmtInsert_tDBOutput_6");
				}
				if (pstmt_tDBOutput_6 != null) {
					pstmt_tDBOutput_6.close();
					resourceMap.remove("pstmt_tDBOutput_6");
				}
				resourceMap.put("statementClosed_tDBOutput_6", true);

				conn_tDBOutput_6.commit();

				conn_tDBOutput_6.close();

				resourceMap.put("finish_tDBOutput_6", true);

				nb_line_deleted_tDBOutput_6 = nb_line_deleted_tDBOutput_6
						+ deletedCount_tDBOutput_6;
				nb_line_update_tDBOutput_6 = nb_line_update_tDBOutput_6
						+ updatedCount_tDBOutput_6;
				nb_line_inserted_tDBOutput_6 = nb_line_inserted_tDBOutput_6
						+ insertedCount_tDBOutput_6;
				nb_line_rejected_tDBOutput_6 = nb_line_rejected_tDBOutput_6
						+ rejectedCount_tDBOutput_6;

				globalMap.put("tDBOutput_6_NB_LINE", nb_line_tDBOutput_6);
				globalMap.put("tDBOutput_6_NB_LINE_UPDATED",
						nb_line_update_tDBOutput_6);
				globalMap.put("tDBOutput_6_NB_LINE_INSERTED",
						nb_line_inserted_tDBOutput_6);
				globalMap.put("tDBOutput_6_NB_LINE_DELETED",
						nb_line_deleted_tDBOutput_6);
				globalMap.put("tDBOutput_6_NB_LINE_REJECTED",
						nb_line_rejected_tDBOutput_6);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row7" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tDBOutput_6", true);
				end_Hash.put("tDBOutput_6", System.currentTimeMillis());

				tStatCatcher_1.addMessage(
						"end",
						"tDBOutput_6",
						end_Hash.get("tDBOutput_6")
								- start_Hash.get("tDBOutput_6"));
				tStatCatcher_1Process(globalMap);
				talendStats_STATS.addMessage(
						"end",
						"tDBOutput_6",
						end_Hash.get("tDBOutput_6")
								- start_Hash.get("tDBOutput_6"));
				talendStats_STATSProcess(globalMap);
				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk2", 0, "ok");
				}
				tDBInput_7Process(globalMap);

				/**
				 * [tDBOutput_6 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_6 finally ] start
				 */

				currentComponent = "tDBInput_6";

				/**
				 * [tDBInput_6 finally ] stop
				 */

				/**
				 * [tDBOutput_6 finally ] start
				 */

				currentComponent = "tDBOutput_6";

				try {
					if (resourceMap.get("statementClosed_tDBOutput_6") == null) {
						java.sql.PreparedStatement pstmtUpdateToClose_tDBOutput_6 = null;
						if ((pstmtUpdateToClose_tDBOutput_6 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmtUpdate_tDBOutput_6")) != null) {
							pstmtUpdateToClose_tDBOutput_6.close();
						}
						java.sql.PreparedStatement pstmtInsertToClose_tDBOutput_6 = null;
						if ((pstmtInsertToClose_tDBOutput_6 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmtInsert_tDBOutput_6")) != null) {
							pstmtInsertToClose_tDBOutput_6.close();
						}
						java.sql.PreparedStatement pstmtToClose_tDBOutput_6 = null;
						if ((pstmtToClose_tDBOutput_6 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmt_tDBOutput_6")) != null) {
							pstmtToClose_tDBOutput_6.close();
						}
					}
				} finally {
					if (resourceMap.get("finish_tDBOutput_6") == null) {
						java.sql.Connection ctn_tDBOutput_6 = null;
						if ((ctn_tDBOutput_6 = (java.sql.Connection) resourceMap
								.get("conn_tDBOutput_6")) != null) {
							try {
								ctn_tDBOutput_6.close();
							} catch (java.sql.SQLException sqlEx_tDBOutput_6) {
								String errorMessage_tDBOutput_6 = "failed to close the connection in tDBOutput_6 :"
										+ sqlEx_tDBOutput_6.getMessage();
								System.err.println(errorMessage_tDBOutput_6);
							}
						}
					}
				}

				/**
				 * [tDBOutput_6 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_6_SUBPROCESS_STATE", 1);
	}

	public static class row6Struct implements
			routines.system.IPersistableRow<row6Struct> {
		final static byte[] commonByteArrayLock_ORDER_ETL_OLD_RL_ETL = new byte[0];
		static byte[] commonByteArray_ORDER_ETL_OLD_RL_ETL = new byte[0];

		public Long dwo_order_fact_uid;

		public Long getDwo_order_fact_uid() {
			return this.dwo_order_fact_uid;
		}

		public BigDecimal dwo_licensee_dimension_uid;

		public BigDecimal getDwo_licensee_dimension_uid() {
			return this.dwo_licensee_dimension_uid;
		}

		public BigDecimal dwo_invoice_dimension_uid;

		public BigDecimal getDwo_invoice_dimension_uid() {
			return this.dwo_invoice_dimension_uid;
		}

		public String dwo_product_dimension_uid;

		public String getDwo_product_dimension_uid() {
			return this.dwo_product_dimension_uid;
		}

		public BigDecimal dwo_time_dimension_uid;

		public BigDecimal getDwo_time_dimension_uid() {
			return this.dwo_time_dimension_uid;
		}

		public BigDecimal dwo_order_header_dimension_uid;

		public BigDecimal getDwo_order_header_dimension_uid() {
			return this.dwo_order_header_dimension_uid;
		}

		public BigDecimal dwo_order_detail_dimension_uid;

		public BigDecimal getDwo_order_detail_dimension_uid() {
			return this.dwo_order_detail_dimension_uid;
		}

		public BigDecimal amount_of_tax;

		public BigDecimal getAmount_of_tax() {
			return this.amount_of_tax;
		}

		public BigDecimal rights_holder_payable_amount;

		public BigDecimal getRights_holder_payable_amount() {
			return this.rights_holder_payable_amount;
		}

		public BigDecimal rights_holder_payable_discount_amount;

		public BigDecimal getRights_holder_payable_discount_amount() {
			return this.rights_holder_payable_discount_amount;
		}

		public BigDecimal ccc_revenue_amount;

		public BigDecimal getCcc_revenue_amount() {
			return this.ccc_revenue_amount;
		}

		public BigDecimal ccc_revenue_discount_amount;

		public BigDecimal getCcc_revenue_discount_amount() {
			return this.ccc_revenue_discount_amount;
		}

		public BigDecimal transaction_fee_amount;

		public BigDecimal getTransaction_fee_amount() {
			return this.transaction_fee_amount;
		}

		public BigDecimal transaction_fee_discount_amount;

		public BigDecimal getTransaction_fee_discount_amount() {
			return this.transaction_fee_discount_amount;
		}

		public BigDecimal shipping_amount;

		public BigDecimal getShipping_amount() {
			return this.shipping_amount;
		}

		public BigDecimal total_amount;

		public BigDecimal getTotal_amount() {
			return this.total_amount;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ORDER_ETL_OLD_RL_ETL.length) {
					if (length < 1024
							&& commonByteArray_ORDER_ETL_OLD_RL_ETL.length == 0) {
						commonByteArray_ORDER_ETL_OLD_RL_ETL = new byte[1024];
					} else {
						commonByteArray_ORDER_ETL_OLD_RL_ETL = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ORDER_ETL_OLD_RL_ETL, 0, length);
				strReturn = new String(commonByteArray_ORDER_ETL_OLD_RL_ETL, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ORDER_ETL_OLD_RL_ETL) {

				try {

					int length = 0;

					length = dis.readByte();
					if (length == -1) {
						this.dwo_order_fact_uid = null;
					} else {
						this.dwo_order_fact_uid = dis.readLong();
					}

					this.dwo_licensee_dimension_uid = (BigDecimal) dis
							.readObject();

					this.dwo_invoice_dimension_uid = (BigDecimal) dis
							.readObject();

					this.dwo_product_dimension_uid = readString(dis);

					this.dwo_time_dimension_uid = (BigDecimal) dis.readObject();

					this.dwo_order_header_dimension_uid = (BigDecimal) dis
							.readObject();

					this.dwo_order_detail_dimension_uid = (BigDecimal) dis
							.readObject();

					this.amount_of_tax = (BigDecimal) dis.readObject();

					this.rights_holder_payable_amount = (BigDecimal) dis
							.readObject();

					this.rights_holder_payable_discount_amount = (BigDecimal) dis
							.readObject();

					this.ccc_revenue_amount = (BigDecimal) dis.readObject();

					this.ccc_revenue_discount_amount = (BigDecimal) dis
							.readObject();

					this.transaction_fee_amount = (BigDecimal) dis.readObject();

					this.transaction_fee_discount_amount = (BigDecimal) dis
							.readObject();

					this.shipping_amount = (BigDecimal) dis.readObject();

					this.total_amount = (BigDecimal) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Long

				if (this.dwo_order_fact_uid == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.dwo_order_fact_uid);
				}

				// BigDecimal

				dos.writeObject(this.dwo_licensee_dimension_uid);

				// BigDecimal

				dos.writeObject(this.dwo_invoice_dimension_uid);

				// String

				writeString(this.dwo_product_dimension_uid, dos);

				// BigDecimal

				dos.writeObject(this.dwo_time_dimension_uid);

				// BigDecimal

				dos.writeObject(this.dwo_order_header_dimension_uid);

				// BigDecimal

				dos.writeObject(this.dwo_order_detail_dimension_uid);

				// BigDecimal

				dos.writeObject(this.amount_of_tax);

				// BigDecimal

				dos.writeObject(this.rights_holder_payable_amount);

				// BigDecimal

				dos.writeObject(this.rights_holder_payable_discount_amount);

				// BigDecimal

				dos.writeObject(this.ccc_revenue_amount);

				// BigDecimal

				dos.writeObject(this.ccc_revenue_discount_amount);

				// BigDecimal

				dos.writeObject(this.transaction_fee_amount);

				// BigDecimal

				dos.writeObject(this.transaction_fee_discount_amount);

				// BigDecimal

				dos.writeObject(this.shipping_amount);

				// BigDecimal

				dos.writeObject(this.total_amount);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("dwo_order_fact_uid="
					+ String.valueOf(dwo_order_fact_uid));
			sb.append(",dwo_licensee_dimension_uid="
					+ String.valueOf(dwo_licensee_dimension_uid));
			sb.append(",dwo_invoice_dimension_uid="
					+ String.valueOf(dwo_invoice_dimension_uid));
			sb.append(",dwo_product_dimension_uid=" + dwo_product_dimension_uid);
			sb.append(",dwo_time_dimension_uid="
					+ String.valueOf(dwo_time_dimension_uid));
			sb.append(",dwo_order_header_dimension_uid="
					+ String.valueOf(dwo_order_header_dimension_uid));
			sb.append(",dwo_order_detail_dimension_uid="
					+ String.valueOf(dwo_order_detail_dimension_uid));
			sb.append(",amount_of_tax=" + String.valueOf(amount_of_tax));
			sb.append(",rights_holder_payable_amount="
					+ String.valueOf(rights_holder_payable_amount));
			sb.append(",rights_holder_payable_discount_amount="
					+ String.valueOf(rights_holder_payable_discount_amount));
			sb.append(",ccc_revenue_amount="
					+ String.valueOf(ccc_revenue_amount));
			sb.append(",ccc_revenue_discount_amount="
					+ String.valueOf(ccc_revenue_discount_amount));
			sb.append(",transaction_fee_amount="
					+ String.valueOf(transaction_fee_amount));
			sb.append(",transaction_fee_discount_amount="
					+ String.valueOf(transaction_fee_discount_amount));
			sb.append(",shipping_amount=" + String.valueOf(shipping_amount));
			sb.append(",total_amount=" + String.valueOf(total_amount));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row6Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_7Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDBInput_7_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row6Struct row6 = new row6Struct();

				/**
				 * [tDBOutput_7 begin ] start
				 */

				ok_Hash.put("tDBOutput_7", false);
				start_Hash.put("tDBOutput_7", System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tDBOutput_7");
				tStatCatcher_1Process(globalMap);

				talendStats_STATS.addMessage("begin", "tDBOutput_7");
				talendStats_STATSProcess(globalMap);

				currentComponent = "tDBOutput_7";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row6" + iterateId, 0, 0);

					}
				}

				int tos_count_tDBOutput_7 = 0;

				String dbschema_tDBOutput_7 = null;
				dbschema_tDBOutput_7 = context.data_warehouse_order_dwos_schema;

				String tableName_tDBOutput_7 = null;
				if (dbschema_tDBOutput_7 == null
						|| dbschema_tDBOutput_7.trim().length() == 0) {
					tableName_tDBOutput_7 = "dwo_order_fact";
				} else {
					tableName_tDBOutput_7 = dbschema_tDBOutput_7 + "\".\""
							+ "dwo_order_fact";
				}

				int nb_line_tDBOutput_7 = 0;
				int nb_line_update_tDBOutput_7 = 0;
				int nb_line_inserted_tDBOutput_7 = 0;
				int nb_line_deleted_tDBOutput_7 = 0;
				int nb_line_rejected_tDBOutput_7 = 0;

				int deletedCount_tDBOutput_7 = 0;
				int updatedCount_tDBOutput_7 = 0;
				int insertedCount_tDBOutput_7 = 0;
				int rejectedCount_tDBOutput_7 = 0;

				boolean whetherReject_tDBOutput_7 = false;

				java.sql.Connection conn_tDBOutput_7 = null;
				String dbUser_tDBOutput_7 = null;

				java.lang.Class.forName("org.postgresql.Driver");
				String url_tDBOutput_7 = "jdbc:postgresql://"
						+ context.data_warehouse_order_dwos_host + ":"
						+ context.data_warehouse_order_dwos_port + "/"
						+ context.data_warehouse_order_dwos_database;
				dbUser_tDBOutput_7 = context.data_warehouse_order_dwos_username;

				final String decryptedPassword_tDBOutput_7 = context.data_warehouse_order_dwos_password;

				String dbPwd_tDBOutput_7 = decryptedPassword_tDBOutput_7;

				conn_tDBOutput_7 = java.sql.DriverManager.getConnection(
						url_tDBOutput_7, dbUser_tDBOutput_7, dbPwd_tDBOutput_7);

				resourceMap.put("conn_tDBOutput_7", conn_tDBOutput_7);
				conn_tDBOutput_7.setAutoCommit(false);
				int commitEvery_tDBOutput_7 = 10000;
				int commitCounter_tDBOutput_7 = 0;

				int batchSize_tDBOutput_7 = 10000;
				int batchSizeCounter_tDBOutput_7 = 0;

				int count_tDBOutput_7 = 0;
				String insert_tDBOutput_7 = "INSERT INTO \""
						+ tableName_tDBOutput_7
						+ "\" (\"dwo_order_fact_uid\",\"dwo_licensee_dimension_uid\",\"dwo_invoice_dimension_uid\",\"dwo_product_dimension_uid\",\"dwo_time_dimension_uid\",\"dwo_order_header_dimension_uid\",\"dwo_order_detail_dimension_uid\",\"amount_of_tax\",\"rights_holder_payable_amount\",\"rights_holder_payable_discount_amount\",\"ccc_revenue_amount\",\"ccc_revenue_discount_amount\",\"transaction_fee_amount\",\"transaction_fee_discount_amount\",\"shipping_amount\",\"total_amount\") VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

				java.sql.PreparedStatement pstmt_tDBOutput_7 = conn_tDBOutput_7
						.prepareStatement(insert_tDBOutput_7);
				resourceMap.put("pstmt_tDBOutput_7", pstmt_tDBOutput_7);

				/**
				 * [tDBOutput_7 begin ] stop
				 */

				/**
				 * [tDBInput_7 begin ] start
				 */

				ok_Hash.put("tDBInput_7", false);
				start_Hash.put("tDBInput_7", System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tDBInput_7");
				tStatCatcher_1Process(globalMap);

				talendStats_STATS.addMessage("begin", "tDBInput_7");
				talendStats_STATSProcess(globalMap);

				currentComponent = "tDBInput_7";

				int tos_count_tDBInput_7 = 0;

				int nb_line_tDBInput_7 = 0;
				java.sql.Connection conn_tDBInput_7 = null;
				String driverClass_tDBInput_7 = "org.postgresql.Driver";
				java.lang.Class.forName(driverClass_tDBInput_7);
				String dbUser_tDBInput_7 = context.data_warehouse_order_dwos_username;

				final String decryptedPassword_tDBInput_7 = context.data_warehouse_order_dwos_password;

				String dbPwd_tDBInput_7 = decryptedPassword_tDBInput_7;

				String url_tDBInput_7 = "jdbc:postgresql://"
						+ context.data_warehouse_order_dwos_host + ":"
						+ context.data_warehouse_order_dwos_port + "/"
						+ context.data_warehouse_order_dwos_database;

				conn_tDBInput_7 = java.sql.DriverManager.getConnection(
						url_tDBInput_7, dbUser_tDBInput_7, dbPwd_tDBInput_7);

				conn_tDBInput_7.setAutoCommit(false);

				java.sql.Statement stmt_tDBInput_7 = conn_tDBInput_7
						.createStatement();
				stmt_tDBInput_7.setFetchSize(1000);

				String dbquery_tDBInput_7 = "select nextval('staging.order_fact_seq') as dwo_order_fact_uid,\n       v.licensee_dimension_uid::NUMERIC as dwo_license"
						+ "e_dimension_uid,\n       v.invoice_dimension_uid::NUMERIC as dwo_invoice_dimension_uid,\n       v.product_dimension_uid as"
						+ " dwo_product_dimension_uid,\n        coalesce(to_char(v.order_date, 'YYYYMMDD'), '00000000')::NUMERIC as dwo_time_dimensi"
						+ "on_uid,\n       v.order_header_dimension_uid::NUMERIC as dwo_order_header_dimension_uid,\n       v.order_detail_dimension_"
						+ "uid::NUMERIC as dwo_order_detail_dimension_uid,\n       v.tax_amount as amount_of_tax,\n       v.rights_holder_payable_amo"
						+ "unt as rights_holder_payable_amount,\n       NULL::NUMERIC as rights_holder_payable_discount_amount,\n       v.ccc_revenue"
						+ "_amount as ccc_revenue_amount,\n       v.discount_amount as ccc_revenue_discount_amount,\n       v.transaction_fee_amount "
						+ "as transaction_fee_amount,\n       v.price_adjustment as transaction_fee_discount_amount,\n       v.shipping_amount as shi"
						+ "pping_amount,\n       case when v.credit_memo_created_datetime is not null\n         then 0 - v.total_amount\n       else v"
						+ ".total_amount\n       end as total_amount\nfrom staging.dwo_rl_v_finance_report v\nwhere v.invoice_created_datetime > '2017"
						+ "-06-30 23:59:59'\nand v.payment_status != 'CANCELED'\n-- and v.payment_status not like '%Credited%'\nand v.publisher != 'CC"
						+ "C Republication'\nand v.organization_name != 'TESTING'";

				globalMap.put("tDBInput_7_QUERY", dbquery_tDBInput_7);
				java.sql.ResultSet rs_tDBInput_7 = null;

				try {
					rs_tDBInput_7 = stmt_tDBInput_7
							.executeQuery(dbquery_tDBInput_7);
					java.sql.ResultSetMetaData rsmd_tDBInput_7 = rs_tDBInput_7
							.getMetaData();
					int colQtyInRs_tDBInput_7 = rsmd_tDBInput_7
							.getColumnCount();

					String tmpContent_tDBInput_7 = null;

					while (rs_tDBInput_7.next()) {
						nb_line_tDBInput_7++;

						if (colQtyInRs_tDBInput_7 < 1) {
							row6.dwo_order_fact_uid = null;
						} else {

							if (rs_tDBInput_7.getObject(1) != null) {
								row6.dwo_order_fact_uid = rs_tDBInput_7
										.getLong(1);
							} else {
								row6.dwo_order_fact_uid = null;
							}
						}
						if (colQtyInRs_tDBInput_7 < 2) {
							row6.dwo_licensee_dimension_uid = null;
						} else {

							if (rs_tDBInput_7.getObject(2) != null) {
								row6.dwo_licensee_dimension_uid = rs_tDBInput_7
										.getBigDecimal(2);
							} else {
								row6.dwo_licensee_dimension_uid = null;
							}
						}
						if (colQtyInRs_tDBInput_7 < 3) {
							row6.dwo_invoice_dimension_uid = null;
						} else {

							if (rs_tDBInput_7.getObject(3) != null) {
								row6.dwo_invoice_dimension_uid = rs_tDBInput_7
										.getBigDecimal(3);
							} else {
								row6.dwo_invoice_dimension_uid = null;
							}
						}
						if (colQtyInRs_tDBInput_7 < 4) {
							row6.dwo_product_dimension_uid = null;
						} else {

							row6.dwo_product_dimension_uid = routines.system.JDBCUtil
									.getString(rs_tDBInput_7, 4, false);
						}
						if (colQtyInRs_tDBInput_7 < 5) {
							row6.dwo_time_dimension_uid = null;
						} else {

							if (rs_tDBInput_7.getObject(5) != null) {
								row6.dwo_time_dimension_uid = rs_tDBInput_7
										.getBigDecimal(5);
							} else {
								row6.dwo_time_dimension_uid = null;
							}
						}
						if (colQtyInRs_tDBInput_7 < 6) {
							row6.dwo_order_header_dimension_uid = null;
						} else {

							if (rs_tDBInput_7.getObject(6) != null) {
								row6.dwo_order_header_dimension_uid = rs_tDBInput_7
										.getBigDecimal(6);
							} else {
								row6.dwo_order_header_dimension_uid = null;
							}
						}
						if (colQtyInRs_tDBInput_7 < 7) {
							row6.dwo_order_detail_dimension_uid = null;
						} else {

							if (rs_tDBInput_7.getObject(7) != null) {
								row6.dwo_order_detail_dimension_uid = rs_tDBInput_7
										.getBigDecimal(7);
							} else {
								row6.dwo_order_detail_dimension_uid = null;
							}
						}
						if (colQtyInRs_tDBInput_7 < 8) {
							row6.amount_of_tax = null;
						} else {

							if (rs_tDBInput_7.getObject(8) != null) {
								row6.amount_of_tax = rs_tDBInput_7
										.getBigDecimal(8);
							} else {
								row6.amount_of_tax = null;
							}
						}
						if (colQtyInRs_tDBInput_7 < 9) {
							row6.rights_holder_payable_amount = null;
						} else {

							if (rs_tDBInput_7.getObject(9) != null) {
								row6.rights_holder_payable_amount = rs_tDBInput_7
										.getBigDecimal(9);
							} else {
								row6.rights_holder_payable_amount = null;
							}
						}
						if (colQtyInRs_tDBInput_7 < 10) {
							row6.rights_holder_payable_discount_amount = null;
						} else {

							if (rs_tDBInput_7.getObject(10) != null) {
								row6.rights_holder_payable_discount_amount = rs_tDBInput_7
										.getBigDecimal(10);
							} else {
								row6.rights_holder_payable_discount_amount = null;
							}
						}
						if (colQtyInRs_tDBInput_7 < 11) {
							row6.ccc_revenue_amount = null;
						} else {

							if (rs_tDBInput_7.getObject(11) != null) {
								row6.ccc_revenue_amount = rs_tDBInput_7
										.getBigDecimal(11);
							} else {
								row6.ccc_revenue_amount = null;
							}
						}
						if (colQtyInRs_tDBInput_7 < 12) {
							row6.ccc_revenue_discount_amount = null;
						} else {

							if (rs_tDBInput_7.getObject(12) != null) {
								row6.ccc_revenue_discount_amount = rs_tDBInput_7
										.getBigDecimal(12);
							} else {
								row6.ccc_revenue_discount_amount = null;
							}
						}
						if (colQtyInRs_tDBInput_7 < 13) {
							row6.transaction_fee_amount = null;
						} else {

							if (rs_tDBInput_7.getObject(13) != null) {
								row6.transaction_fee_amount = rs_tDBInput_7
										.getBigDecimal(13);
							} else {
								row6.transaction_fee_amount = null;
							}
						}
						if (colQtyInRs_tDBInput_7 < 14) {
							row6.transaction_fee_discount_amount = null;
						} else {

							if (rs_tDBInput_7.getObject(14) != null) {
								row6.transaction_fee_discount_amount = rs_tDBInput_7
										.getBigDecimal(14);
							} else {
								row6.transaction_fee_discount_amount = null;
							}
						}
						if (colQtyInRs_tDBInput_7 < 15) {
							row6.shipping_amount = null;
						} else {

							if (rs_tDBInput_7.getObject(15) != null) {
								row6.shipping_amount = rs_tDBInput_7
										.getBigDecimal(15);
							} else {
								row6.shipping_amount = null;
							}
						}
						if (colQtyInRs_tDBInput_7 < 16) {
							row6.total_amount = null;
						} else {

							if (rs_tDBInput_7.getObject(16) != null) {
								row6.total_amount = rs_tDBInput_7
										.getBigDecimal(16);
							} else {
								row6.total_amount = null;
							}
						}

						/**
						 * [tDBInput_7 begin ] stop
						 */

						/**
						 * [tDBInput_7 main ] start
						 */

						currentComponent = "tDBInput_7";

						tos_count_tDBInput_7++;

						/**
						 * [tDBInput_7 main ] stop
						 */

						/**
						 * [tDBInput_7 process_data_begin ] start
						 */

						currentComponent = "tDBInput_7";

						/**
						 * [tDBInput_7 process_data_begin ] stop
						 */

						/**
						 * [tDBOutput_7 main ] start
						 */

						currentComponent = "tDBOutput_7";

						// row6
						// row6

						if (execStat) {
							runStat.updateStatOnConnection("row6" + iterateId,
									1, 1);
						}

						whetherReject_tDBOutput_7 = false;
						if (row6.dwo_order_fact_uid == null) {
							pstmt_tDBOutput_7
									.setNull(1, java.sql.Types.INTEGER);
						} else {
							pstmt_tDBOutput_7.setLong(1,
									row6.dwo_order_fact_uid);
						}

						pstmt_tDBOutput_7.setBigDecimal(2,
								row6.dwo_licensee_dimension_uid);

						pstmt_tDBOutput_7.setBigDecimal(3,
								row6.dwo_invoice_dimension_uid);

						if (row6.dwo_product_dimension_uid == null) {
							pstmt_tDBOutput_7
									.setNull(4, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_7.setString(4,
									row6.dwo_product_dimension_uid);
						}

						pstmt_tDBOutput_7.setBigDecimal(5,
								row6.dwo_time_dimension_uid);

						pstmt_tDBOutput_7.setBigDecimal(6,
								row6.dwo_order_header_dimension_uid);

						pstmt_tDBOutput_7.setBigDecimal(7,
								row6.dwo_order_detail_dimension_uid);

						pstmt_tDBOutput_7.setBigDecimal(8, row6.amount_of_tax);

						pstmt_tDBOutput_7.setBigDecimal(9,
								row6.rights_holder_payable_amount);

						pstmt_tDBOutput_7.setBigDecimal(10,
								row6.rights_holder_payable_discount_amount);

						pstmt_tDBOutput_7.setBigDecimal(11,
								row6.ccc_revenue_amount);

						pstmt_tDBOutput_7.setBigDecimal(12,
								row6.ccc_revenue_discount_amount);

						pstmt_tDBOutput_7.setBigDecimal(13,
								row6.transaction_fee_amount);

						pstmt_tDBOutput_7.setBigDecimal(14,
								row6.transaction_fee_discount_amount);

						pstmt_tDBOutput_7.setBigDecimal(15,
								row6.shipping_amount);

						pstmt_tDBOutput_7.setBigDecimal(16, row6.total_amount);

						pstmt_tDBOutput_7.addBatch();
						nb_line_tDBOutput_7++;

						batchSizeCounter_tDBOutput_7++;

						if ((batchSize_tDBOutput_7 > 0)
								&& (batchSize_tDBOutput_7 <= batchSizeCounter_tDBOutput_7)) {
							try {
								int countSum_tDBOutput_7 = 0;

								for (int countEach_tDBOutput_7 : pstmt_tDBOutput_7
										.executeBatch()) {
									countSum_tDBOutput_7 += (countEach_tDBOutput_7 < 0 ? 0
											: countEach_tDBOutput_7);
								}

								insertedCount_tDBOutput_7 += countSum_tDBOutput_7;

								batchSizeCounter_tDBOutput_7 = 0;
							} catch (java.sql.BatchUpdateException e_tDBOutput_7) {
								java.sql.SQLException ne_tDBOutput_7 = e_tDBOutput_7
										.getNextException(), sqle_tDBOutput_7 = null;
								String errormessage_tDBOutput_7;
								if (ne_tDBOutput_7 != null) {
									// build new exception to provide the
									// original cause
									sqle_tDBOutput_7 = new java.sql.SQLException(
											e_tDBOutput_7.getMessage()
													+ "\ncaused by: "
													+ ne_tDBOutput_7
															.getMessage(),
											ne_tDBOutput_7.getSQLState(),
											ne_tDBOutput_7.getErrorCode(),
											ne_tDBOutput_7);
									errormessage_tDBOutput_7 = sqle_tDBOutput_7
											.getMessage();
								} else {
									errormessage_tDBOutput_7 = e_tDBOutput_7
											.getMessage();
								}

								int countSum_tDBOutput_7 = 0;
								for (int countEach_tDBOutput_7 : e_tDBOutput_7
										.getUpdateCounts()) {
									countSum_tDBOutput_7 += (countEach_tDBOutput_7 < 0 ? 0
											: countEach_tDBOutput_7);
								}

								insertedCount_tDBOutput_7 += countSum_tDBOutput_7;

								System.err.println(errormessage_tDBOutput_7);

							}
						}

						commitCounter_tDBOutput_7++;
						if (commitEvery_tDBOutput_7 <= commitCounter_tDBOutput_7) {
							if ((batchSize_tDBOutput_7 > 0)
									&& (batchSizeCounter_tDBOutput_7 > 0)) {
								try {
									int countSum_tDBOutput_7 = 0;

									for (int countEach_tDBOutput_7 : pstmt_tDBOutput_7
											.executeBatch()) {
										countSum_tDBOutput_7 += (countEach_tDBOutput_7 < 0 ? 0
												: countEach_tDBOutput_7);
									}

									insertedCount_tDBOutput_7 += countSum_tDBOutput_7;

									batchSizeCounter_tDBOutput_7 = 0;
								} catch (java.sql.BatchUpdateException e_tDBOutput_7) {
									java.sql.SQLException ne_tDBOutput_7 = e_tDBOutput_7
											.getNextException(), sqle_tDBOutput_7 = null;
									String errormessage_tDBOutput_7;
									if (ne_tDBOutput_7 != null) {
										// build new exception to provide the
										// original cause
										sqle_tDBOutput_7 = new java.sql.SQLException(
												e_tDBOutput_7.getMessage()
														+ "\ncaused by: "
														+ ne_tDBOutput_7
																.getMessage(),
												ne_tDBOutput_7.getSQLState(),
												ne_tDBOutput_7.getErrorCode(),
												ne_tDBOutput_7);
										errormessage_tDBOutput_7 = sqle_tDBOutput_7
												.getMessage();
									} else {
										errormessage_tDBOutput_7 = e_tDBOutput_7
												.getMessage();
									}

									int countSum_tDBOutput_7 = 0;
									for (int countEach_tDBOutput_7 : e_tDBOutput_7
											.getUpdateCounts()) {
										countSum_tDBOutput_7 += (countEach_tDBOutput_7 < 0 ? 0
												: countEach_tDBOutput_7);
									}

									insertedCount_tDBOutput_7 += countSum_tDBOutput_7;

									System.err
											.println(errormessage_tDBOutput_7);

								}
							}
							conn_tDBOutput_7.commit();

							commitCounter_tDBOutput_7 = 0;
						}

						tos_count_tDBOutput_7++;

						/**
						 * [tDBOutput_7 main ] stop
						 */

						/**
						 * [tDBOutput_7 process_data_begin ] start
						 */

						currentComponent = "tDBOutput_7";

						/**
						 * [tDBOutput_7 process_data_begin ] stop
						 */

						/**
						 * [tDBOutput_7 process_data_end ] start
						 */

						currentComponent = "tDBOutput_7";

						/**
						 * [tDBOutput_7 process_data_end ] stop
						 */

						/**
						 * [tDBInput_7 process_data_end ] start
						 */

						currentComponent = "tDBInput_7";

						/**
						 * [tDBInput_7 process_data_end ] stop
						 */

						/**
						 * [tDBInput_7 end ] start
						 */

						currentComponent = "tDBInput_7";

					}
				} finally {
					if (rs_tDBInput_7 != null) {
						rs_tDBInput_7.close();
					}
					if (stmt_tDBInput_7 != null) {
						stmt_tDBInput_7.close();
					}
					if (conn_tDBInput_7 != null && !conn_tDBInput_7.isClosed()) {

						conn_tDBInput_7.commit();

						conn_tDBInput_7.close();

					}

				}
				globalMap.put("tDBInput_7_NB_LINE", nb_line_tDBInput_7);

				ok_Hash.put("tDBInput_7", true);
				end_Hash.put("tDBInput_7", System.currentTimeMillis());

				tStatCatcher_1.addMessage(
						"end",
						"tDBInput_7",
						end_Hash.get("tDBInput_7")
								- start_Hash.get("tDBInput_7"));
				tStatCatcher_1Process(globalMap);
				talendStats_STATS.addMessage(
						"end",
						"tDBInput_7",
						end_Hash.get("tDBInput_7")
								- start_Hash.get("tDBInput_7"));
				talendStats_STATSProcess(globalMap);

				/**
				 * [tDBInput_7 end ] stop
				 */

				/**
				 * [tDBOutput_7 end ] start
				 */

				currentComponent = "tDBOutput_7";

				try {
					int countSum_tDBOutput_7 = 0;
					if (pstmt_tDBOutput_7 != null
							&& batchSizeCounter_tDBOutput_7 > 0) {

						for (int countEach_tDBOutput_7 : pstmt_tDBOutput_7
								.executeBatch()) {
							countSum_tDBOutput_7 += (countEach_tDBOutput_7 < 0 ? 0
									: countEach_tDBOutput_7);
						}

					}

					insertedCount_tDBOutput_7 += countSum_tDBOutput_7;

				} catch (java.sql.BatchUpdateException e_tDBOutput_7) {
					java.sql.SQLException ne_tDBOutput_7 = e_tDBOutput_7
							.getNextException(), sqle_tDBOutput_7 = null;
					String errormessage_tDBOutput_7;
					if (ne_tDBOutput_7 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_7 = new java.sql.SQLException(
								e_tDBOutput_7.getMessage() + "\ncaused by: "
										+ ne_tDBOutput_7.getMessage(),
								ne_tDBOutput_7.getSQLState(),
								ne_tDBOutput_7.getErrorCode(), ne_tDBOutput_7);
						errormessage_tDBOutput_7 = sqle_tDBOutput_7
								.getMessage();
					} else {
						errormessage_tDBOutput_7 = e_tDBOutput_7.getMessage();
					}

					int countSum_tDBOutput_7 = 0;
					for (int countEach_tDBOutput_7 : e_tDBOutput_7
							.getUpdateCounts()) {
						countSum_tDBOutput_7 += (countEach_tDBOutput_7 < 0 ? 0
								: countEach_tDBOutput_7);
					}

					insertedCount_tDBOutput_7 += countSum_tDBOutput_7;

					System.err.println(errormessage_tDBOutput_7);

				}

				if (pstmt_tDBOutput_7 != null) {

					pstmt_tDBOutput_7.close();
					resourceMap.remove("pstmt_tDBOutput_7");
				}
				resourceMap.put("statementClosed_tDBOutput_7", true);

				conn_tDBOutput_7.commit();

				conn_tDBOutput_7.close();

				resourceMap.put("finish_tDBOutput_7", true);

				nb_line_deleted_tDBOutput_7 = nb_line_deleted_tDBOutput_7
						+ deletedCount_tDBOutput_7;
				nb_line_update_tDBOutput_7 = nb_line_update_tDBOutput_7
						+ updatedCount_tDBOutput_7;
				nb_line_inserted_tDBOutput_7 = nb_line_inserted_tDBOutput_7
						+ insertedCount_tDBOutput_7;
				nb_line_rejected_tDBOutput_7 = nb_line_rejected_tDBOutput_7
						+ rejectedCount_tDBOutput_7;

				globalMap.put("tDBOutput_7_NB_LINE", nb_line_tDBOutput_7);
				globalMap.put("tDBOutput_7_NB_LINE_UPDATED",
						nb_line_update_tDBOutput_7);
				globalMap.put("tDBOutput_7_NB_LINE_INSERTED",
						nb_line_inserted_tDBOutput_7);
				globalMap.put("tDBOutput_7_NB_LINE_DELETED",
						nb_line_deleted_tDBOutput_7);
				globalMap.put("tDBOutput_7_NB_LINE_REJECTED",
						nb_line_rejected_tDBOutput_7);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row6" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tDBOutput_7", true);
				end_Hash.put("tDBOutput_7", System.currentTimeMillis());

				tStatCatcher_1.addMessage(
						"end",
						"tDBOutput_7",
						end_Hash.get("tDBOutput_7")
								- start_Hash.get("tDBOutput_7"));
				tStatCatcher_1Process(globalMap);
				talendStats_STATS.addMessage(
						"end",
						"tDBOutput_7",
						end_Hash.get("tDBOutput_7")
								- start_Hash.get("tDBOutput_7"));
				talendStats_STATSProcess(globalMap);

				/**
				 * [tDBOutput_7 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_7 finally ] start
				 */

				currentComponent = "tDBInput_7";

				/**
				 * [tDBInput_7 finally ] stop
				 */

				/**
				 * [tDBOutput_7 finally ] start
				 */

				currentComponent = "tDBOutput_7";

				try {
					if (resourceMap.get("statementClosed_tDBOutput_7") == null) {
						java.sql.PreparedStatement pstmtToClose_tDBOutput_7 = null;
						if ((pstmtToClose_tDBOutput_7 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmt_tDBOutput_7")) != null) {
							pstmtToClose_tDBOutput_7.close();
						}
					}
				} finally {
					if (resourceMap.get("finish_tDBOutput_7") == null) {
						java.sql.Connection ctn_tDBOutput_7 = null;
						if ((ctn_tDBOutput_7 = (java.sql.Connection) resourceMap
								.get("conn_tDBOutput_7")) != null) {
							try {
								ctn_tDBOutput_7.close();
							} catch (java.sql.SQLException sqlEx_tDBOutput_7) {
								String errorMessage_tDBOutput_7 = "failed to close the connection in tDBOutput_7 :"
										+ sqlEx_tDBOutput_7.getMessage();
								System.err.println(errorMessage_tDBOutput_7);
							}
						}
					}
				}

				/**
				 * [tDBOutput_7 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_7_SUBPROCESS_STATE", 1);
	}

	public static class row12Struct implements
			routines.system.IPersistableRow<row12Struct> {
		final static byte[] commonByteArrayLock_ORDER_ETL_OLD_RL_ETL = new byte[0];
		static byte[] commonByteArray_ORDER_ETL_OLD_RL_ETL = new byte[0];

		public java.util.Date moment;

		public java.util.Date getMoment() {
			return this.moment;
		}

		public String pid;

		public String getPid() {
			return this.pid;
		}

		public String root_pid;

		public String getRoot_pid() {
			return this.root_pid;
		}

		public String father_pid;

		public String getFather_pid() {
			return this.father_pid;
		}

		public String project;

		public String getProject() {
			return this.project;
		}

		public String job;

		public String getJob() {
			return this.job;
		}

		public String context;

		public String getContext() {
			return this.context;
		}

		public Integer priority;

		public Integer getPriority() {
			return this.priority;
		}

		public String type;

		public String getType() {
			return this.type;
		}

		public String origin;

		public String getOrigin() {
			return this.origin;
		}

		public String message;

		public String getMessage() {
			return this.message;
		}

		public Integer code;

		public Integer getCode() {
			return this.code;
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ORDER_ETL_OLD_RL_ETL.length) {
					if (length < 1024
							&& commonByteArray_ORDER_ETL_OLD_RL_ETL.length == 0) {
						commonByteArray_ORDER_ETL_OLD_RL_ETL = new byte[1024];
					} else {
						commonByteArray_ORDER_ETL_OLD_RL_ETL = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ORDER_ETL_OLD_RL_ETL, 0, length);
				strReturn = new String(commonByteArray_ORDER_ETL_OLD_RL_ETL, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ORDER_ETL_OLD_RL_ETL) {

				try {

					int length = 0;

					this.moment = readDate(dis);

					this.pid = readString(dis);

					this.root_pid = readString(dis);

					this.father_pid = readString(dis);

					this.project = readString(dis);

					this.job = readString(dis);

					this.context = readString(dis);

					this.priority = readInteger(dis);

					this.type = readString(dis);

					this.origin = readString(dis);

					this.message = readString(dis);

					this.code = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.moment, dos);

				// String

				writeString(this.pid, dos);

				// String

				writeString(this.root_pid, dos);

				// String

				writeString(this.father_pid, dos);

				// String

				writeString(this.project, dos);

				// String

				writeString(this.job, dos);

				// String

				writeString(this.context, dos);

				// Integer

				writeInteger(this.priority, dos);

				// String

				writeString(this.type, dos);

				// String

				writeString(this.origin, dos);

				// String

				writeString(this.message, dos);

				// Integer

				writeInteger(this.code, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("moment=" + String.valueOf(moment));
			sb.append(",pid=" + pid);
			sb.append(",root_pid=" + root_pid);
			sb.append(",father_pid=" + father_pid);
			sb.append(",project=" + project);
			sb.append(",job=" + job);
			sb.append(",context=" + context);
			sb.append(",priority=" + String.valueOf(priority));
			sb.append(",type=" + type);
			sb.append(",origin=" + origin);
			sb.append(",message=" + message);
			sb.append(",code=" + String.valueOf(code));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row12Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tLogCatcher_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tLogCatcher_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row12Struct row12 = new row12Struct();

				/**
				 * [tLogRow_2 begin ] start
				 */

				ok_Hash.put("tLogRow_2", false);
				start_Hash.put("tLogRow_2", System.currentTimeMillis());

				currentComponent = "tLogRow_2";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row12" + iterateId, 0,
								0);

					}
				}

				int tos_count_tLogRow_2 = 0;

				// /////////////////////

				final String OUTPUT_FIELD_SEPARATOR_tLogRow_2 = "|";
				java.io.PrintStream consoleOut_tLogRow_2 = null;

				StringBuilder strBuffer_tLogRow_2 = null;
				int nb_line_tLogRow_2 = 0;
				// /////////////////////

				/**
				 * [tLogRow_2 begin ] stop
				 */

				/**
				 * [tLogCatcher_1 begin ] start
				 */

				ok_Hash.put("tLogCatcher_1", false);
				start_Hash.put("tLogCatcher_1", System.currentTimeMillis());

				currentComponent = "tLogCatcher_1";

				int tos_count_tLogCatcher_1 = 0;

				try {
					for (LogCatcherUtils.LogCatcherMessage lcm : tLogCatcher_1
							.getMessages()) {
						row12.type = lcm.getType();
						row12.origin = (lcm.getOrigin() == null
								|| lcm.getOrigin().length() < 1 ? null : lcm
								.getOrigin());
						row12.priority = lcm.getPriority();
						row12.message = lcm.getMessage();
						row12.code = lcm.getCode();

						row12.moment = java.util.Calendar.getInstance()
								.getTime();

						row12.pid = pid;
						row12.root_pid = rootPid;
						row12.father_pid = fatherPid;

						row12.project = projectName;
						row12.job = jobName;
						row12.context = contextStr;

						/**
						 * [tLogCatcher_1 begin ] stop
						 */

						/**
						 * [tLogCatcher_1 main ] start
						 */

						currentComponent = "tLogCatcher_1";

						tos_count_tLogCatcher_1++;

						/**
						 * [tLogCatcher_1 main ] stop
						 */

						/**
						 * [tLogCatcher_1 process_data_begin ] start
						 */

						currentComponent = "tLogCatcher_1";

						/**
						 * [tLogCatcher_1 process_data_begin ] stop
						 */

						/**
						 * [tLogRow_2 main ] start
						 */

						currentComponent = "tLogRow_2";

						// row12
						// row12

						if (execStat) {
							runStat.updateStatOnConnection("row12" + iterateId,
									1, 1);
						}

						// /////////////////////

						strBuffer_tLogRow_2 = new StringBuilder();

						if (row12.moment != null) { //

							strBuffer_tLogRow_2.append(FormatterUtils
									.format_Date(row12.moment,
											"yyyy-MM-dd HH:mm:ss"));

						} //

						strBuffer_tLogRow_2.append("|");

						if (row12.pid != null) { //

							strBuffer_tLogRow_2.append(String
									.valueOf(row12.pid));

						} //

						strBuffer_tLogRow_2.append("|");

						if (row12.root_pid != null) { //

							strBuffer_tLogRow_2.append(String
									.valueOf(row12.root_pid));

						} //

						strBuffer_tLogRow_2.append("|");

						if (row12.father_pid != null) { //

							strBuffer_tLogRow_2.append(String
									.valueOf(row12.father_pid));

						} //

						strBuffer_tLogRow_2.append("|");

						if (row12.project != null) { //

							strBuffer_tLogRow_2.append(String
									.valueOf(row12.project));

						} //

						strBuffer_tLogRow_2.append("|");

						if (row12.job != null) { //

							strBuffer_tLogRow_2.append(String
									.valueOf(row12.job));

						} //

						strBuffer_tLogRow_2.append("|");

						if (row12.context != null) { //

							strBuffer_tLogRow_2.append(String
									.valueOf(row12.context));

						} //

						strBuffer_tLogRow_2.append("|");

						if (row12.priority != null) { //

							strBuffer_tLogRow_2.append(String
									.valueOf(row12.priority));

						} //

						strBuffer_tLogRow_2.append("|");

						if (row12.type != null) { //

							strBuffer_tLogRow_2.append(String
									.valueOf(row12.type));

						} //

						strBuffer_tLogRow_2.append("|");

						if (row12.origin != null) { //

							strBuffer_tLogRow_2.append(String
									.valueOf(row12.origin));

						} //

						strBuffer_tLogRow_2.append("|");

						if (row12.message != null) { //

							strBuffer_tLogRow_2.append(String
									.valueOf(row12.message));

						} //

						strBuffer_tLogRow_2.append("|");

						if (row12.code != null) { //

							strBuffer_tLogRow_2.append(String
									.valueOf(row12.code));

						} //

						if (globalMap.get("tLogRow_CONSOLE") != null) {
							consoleOut_tLogRow_2 = (java.io.PrintStream) globalMap
									.get("tLogRow_CONSOLE");
						} else {
							consoleOut_tLogRow_2 = new java.io.PrintStream(
									new java.io.BufferedOutputStream(System.out));
							globalMap.put("tLogRow_CONSOLE",
									consoleOut_tLogRow_2);
						}
						consoleOut_tLogRow_2.println(strBuffer_tLogRow_2
								.toString());
						consoleOut_tLogRow_2.flush();
						nb_line_tLogRow_2++;
						// ////

						// ////

						// /////////////////////

						tos_count_tLogRow_2++;

						/**
						 * [tLogRow_2 main ] stop
						 */

						/**
						 * [tLogRow_2 process_data_begin ] start
						 */

						currentComponent = "tLogRow_2";

						/**
						 * [tLogRow_2 process_data_begin ] stop
						 */

						/**
						 * [tLogRow_2 process_data_end ] start
						 */

						currentComponent = "tLogRow_2";

						/**
						 * [tLogRow_2 process_data_end ] stop
						 */

						/**
						 * [tLogCatcher_1 process_data_end ] start
						 */

						currentComponent = "tLogCatcher_1";

						/**
						 * [tLogCatcher_1 process_data_end ] stop
						 */

						/**
						 * [tLogCatcher_1 end ] start
						 */

						currentComponent = "tLogCatcher_1";

					}
				} catch (Exception e_tLogCatcher_1) {
					logIgnoredError(
							String.format(
									"tLogCatcher_1 - tLogCatcher failed to process log message(s) due to internal error: %s",
									e_tLogCatcher_1), e_tLogCatcher_1);
				}

				ok_Hash.put("tLogCatcher_1", true);
				end_Hash.put("tLogCatcher_1", System.currentTimeMillis());

				/**
				 * [tLogCatcher_1 end ] stop
				 */

				/**
				 * [tLogRow_2 end ] start
				 */

				currentComponent = "tLogRow_2";

				// ////
				// ////
				globalMap.put("tLogRow_2_NB_LINE", nb_line_tLogRow_2);

				// /////////////////////

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row12" + iterateId, 2,
								0);
					}
				}

				ok_Hash.put("tLogRow_2", true);
				end_Hash.put("tLogRow_2", System.currentTimeMillis());

				/**
				 * [tLogRow_2 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tLogCatcher_1 finally ] start
				 */

				currentComponent = "tLogCatcher_1";

				/**
				 * [tLogCatcher_1 finally ] stop
				 */

				/**
				 * [tLogRow_2 finally ] start
				 */

				currentComponent = "tLogRow_2";

				/**
				 * [tLogRow_2 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tLogCatcher_1_SUBPROCESS_STATE", 1);
	}

	public static class row11Struct implements
			routines.system.IPersistableRow<row11Struct> {
		final static byte[] commonByteArrayLock_ORDER_ETL_OLD_RL_ETL = new byte[0];
		static byte[] commonByteArray_ORDER_ETL_OLD_RL_ETL = new byte[0];

		public java.util.Date moment;

		public java.util.Date getMoment() {
			return this.moment;
		}

		public String pid;

		public String getPid() {
			return this.pid;
		}

		public String father_pid;

		public String getFather_pid() {
			return this.father_pid;
		}

		public String root_pid;

		public String getRoot_pid() {
			return this.root_pid;
		}

		public Long system_pid;

		public Long getSystem_pid() {
			return this.system_pid;
		}

		public String project;

		public String getProject() {
			return this.project;
		}

		public String job;

		public String getJob() {
			return this.job;
		}

		public String job_repository_id;

		public String getJob_repository_id() {
			return this.job_repository_id;
		}

		public String job_version;

		public String getJob_version() {
			return this.job_version;
		}

		public String context;

		public String getContext() {
			return this.context;
		}

		public String origin;

		public String getOrigin() {
			return this.origin;
		}

		public String message_type;

		public String getMessage_type() {
			return this.message_type;
		}

		public String message;

		public String getMessage() {
			return this.message;
		}

		public Long duration;

		public Long getDuration() {
			return this.duration;
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ORDER_ETL_OLD_RL_ETL.length) {
					if (length < 1024
							&& commonByteArray_ORDER_ETL_OLD_RL_ETL.length == 0) {
						commonByteArray_ORDER_ETL_OLD_RL_ETL = new byte[1024];
					} else {
						commonByteArray_ORDER_ETL_OLD_RL_ETL = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ORDER_ETL_OLD_RL_ETL, 0, length);
				strReturn = new String(commonByteArray_ORDER_ETL_OLD_RL_ETL, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ORDER_ETL_OLD_RL_ETL) {

				try {

					int length = 0;

					this.moment = readDate(dis);

					this.pid = readString(dis);

					this.father_pid = readString(dis);

					this.root_pid = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.system_pid = null;
					} else {
						this.system_pid = dis.readLong();
					}

					this.project = readString(dis);

					this.job = readString(dis);

					this.job_repository_id = readString(dis);

					this.job_version = readString(dis);

					this.context = readString(dis);

					this.origin = readString(dis);

					this.message_type = readString(dis);

					this.message = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.duration = null;
					} else {
						this.duration = dis.readLong();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.moment, dos);

				// String

				writeString(this.pid, dos);

				// String

				writeString(this.father_pid, dos);

				// String

				writeString(this.root_pid, dos);

				// Long

				if (this.system_pid == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.system_pid);
				}

				// String

				writeString(this.project, dos);

				// String

				writeString(this.job, dos);

				// String

				writeString(this.job_repository_id, dos);

				// String

				writeString(this.job_version, dos);

				// String

				writeString(this.context, dos);

				// String

				writeString(this.origin, dos);

				// String

				writeString(this.message_type, dos);

				// String

				writeString(this.message, dos);

				// Long

				if (this.duration == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.duration);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("moment=" + String.valueOf(moment));
			sb.append(",pid=" + pid);
			sb.append(",father_pid=" + father_pid);
			sb.append(",root_pid=" + root_pid);
			sb.append(",system_pid=" + String.valueOf(system_pid));
			sb.append(",project=" + project);
			sb.append(",job=" + job);
			sb.append(",job_repository_id=" + job_repository_id);
			sb.append(",job_version=" + job_version);
			sb.append(",context=" + context);
			sb.append(",origin=" + origin);
			sb.append(",message_type=" + message_type);
			sb.append(",message=" + message);
			sb.append(",duration=" + String.valueOf(duration));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row11Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tStatCatcher_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tStatCatcher_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row11Struct row11 = new row11Struct();

				/**
				 * [tLogRow_1 begin ] start
				 */

				ok_Hash.put("tLogRow_1", false);
				start_Hash.put("tLogRow_1", System.currentTimeMillis());

				currentComponent = "tLogRow_1";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row11" + iterateId, 0,
								0);

					}
				}

				int tos_count_tLogRow_1 = 0;

				// /////////////////////

				final String OUTPUT_FIELD_SEPARATOR_tLogRow_1 = "|";
				java.io.PrintStream consoleOut_tLogRow_1 = null;

				StringBuilder strBuffer_tLogRow_1 = null;
				int nb_line_tLogRow_1 = 0;
				// /////////////////////

				/**
				 * [tLogRow_1 begin ] stop
				 */

				/**
				 * [tStatCatcher_1 begin ] start
				 */

				ok_Hash.put("tStatCatcher_1", false);
				start_Hash.put("tStatCatcher_1", System.currentTimeMillis());

				currentComponent = "tStatCatcher_1";

				int tos_count_tStatCatcher_1 = 0;

				for (StatCatcherUtils.StatCatcherMessage scm : tStatCatcher_1
						.getMessages()) {
					row11.pid = pid;
					row11.root_pid = rootPid;
					row11.father_pid = fatherPid;
					row11.project = projectName;
					row11.job = jobName;
					row11.context = contextStr;
					row11.origin = (scm.getOrigin() == null
							|| scm.getOrigin().length() < 1 ? null : scm
							.getOrigin());
					row11.message = scm.getMessage();
					row11.duration = scm.getDuration();
					row11.moment = scm.getMoment();
					row11.message_type = scm.getMessageType();
					row11.job_version = scm.getJobVersion();
					row11.job_repository_id = scm.getJobId();
					row11.system_pid = scm.getSystemPid();

					/**
					 * [tStatCatcher_1 begin ] stop
					 */

					/**
					 * [tStatCatcher_1 main ] start
					 */

					currentComponent = "tStatCatcher_1";

					tos_count_tStatCatcher_1++;

					/**
					 * [tStatCatcher_1 main ] stop
					 */

					/**
					 * [tStatCatcher_1 process_data_begin ] start
					 */

					currentComponent = "tStatCatcher_1";

					/**
					 * [tStatCatcher_1 process_data_begin ] stop
					 */

					/**
					 * [tLogRow_1 main ] start
					 */

					currentComponent = "tLogRow_1";

					// row11
					// row11

					if (execStat) {
						runStat.updateStatOnConnection("row11" + iterateId, 1,
								1);
					}

					// /////////////////////

					strBuffer_tLogRow_1 = new StringBuilder();
					strBuffer_tLogRow_1.append("[tLogRow_1] ");

					if (row11.moment != null) { //

						strBuffer_tLogRow_1.append(FormatterUtils.format_Date(
								row11.moment, "yyyy-MM-dd HH:mm:ss"));

					} //

					strBuffer_tLogRow_1.append("|");

					if (row11.pid != null) { //

						strBuffer_tLogRow_1.append(String.valueOf(row11.pid));

					} //

					strBuffer_tLogRow_1.append("|");

					if (row11.father_pid != null) { //

						strBuffer_tLogRow_1.append(String
								.valueOf(row11.father_pid));

					} //

					strBuffer_tLogRow_1.append("|");

					if (row11.root_pid != null) { //

						strBuffer_tLogRow_1.append(String
								.valueOf(row11.root_pid));

					} //

					strBuffer_tLogRow_1.append("|");

					if (row11.system_pid != null) { //

						strBuffer_tLogRow_1.append(String
								.valueOf(row11.system_pid));

					} //

					strBuffer_tLogRow_1.append("|");

					if (row11.project != null) { //

						strBuffer_tLogRow_1.append(String
								.valueOf(row11.project));

					} //

					strBuffer_tLogRow_1.append("|");

					if (row11.job != null) { //

						strBuffer_tLogRow_1.append(String.valueOf(row11.job));

					} //

					strBuffer_tLogRow_1.append("|");

					if (row11.job_repository_id != null) { //

						strBuffer_tLogRow_1.append(String
								.valueOf(row11.job_repository_id));

					} //

					strBuffer_tLogRow_1.append("|");

					if (row11.job_version != null) { //

						strBuffer_tLogRow_1.append(String
								.valueOf(row11.job_version));

					} //

					strBuffer_tLogRow_1.append("|");

					if (row11.context != null) { //

						strBuffer_tLogRow_1.append(String
								.valueOf(row11.context));

					} //

					strBuffer_tLogRow_1.append("|");

					if (row11.origin != null) { //

						strBuffer_tLogRow_1
								.append(String.valueOf(row11.origin));

					} //

					strBuffer_tLogRow_1.append("|");

					if (row11.message_type != null) { //

						strBuffer_tLogRow_1.append(String
								.valueOf(row11.message_type));

					} //

					strBuffer_tLogRow_1.append("|");

					if (row11.message != null) { //

						strBuffer_tLogRow_1.append(String
								.valueOf(row11.message));

					} //

					strBuffer_tLogRow_1.append("|");

					if (row11.duration != null) { //

						strBuffer_tLogRow_1.append(String
								.valueOf(row11.duration));

					} //

					if (globalMap.get("tLogRow_CONSOLE") != null) {
						consoleOut_tLogRow_1 = (java.io.PrintStream) globalMap
								.get("tLogRow_CONSOLE");
					} else {
						consoleOut_tLogRow_1 = new java.io.PrintStream(
								new java.io.BufferedOutputStream(System.out));
						globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_1);
					}
					consoleOut_tLogRow_1
							.println(strBuffer_tLogRow_1.toString());
					consoleOut_tLogRow_1.flush();
					nb_line_tLogRow_1++;
					// ////

					// ////

					// /////////////////////

					tos_count_tLogRow_1++;

					/**
					 * [tLogRow_1 main ] stop
					 */

					/**
					 * [tLogRow_1 process_data_begin ] start
					 */

					currentComponent = "tLogRow_1";

					/**
					 * [tLogRow_1 process_data_begin ] stop
					 */

					/**
					 * [tLogRow_1 process_data_end ] start
					 */

					currentComponent = "tLogRow_1";

					/**
					 * [tLogRow_1 process_data_end ] stop
					 */

					/**
					 * [tStatCatcher_1 process_data_end ] start
					 */

					currentComponent = "tStatCatcher_1";

					/**
					 * [tStatCatcher_1 process_data_end ] stop
					 */

					/**
					 * [tStatCatcher_1 end ] start
					 */

					currentComponent = "tStatCatcher_1";

				}

				ok_Hash.put("tStatCatcher_1", true);
				end_Hash.put("tStatCatcher_1", System.currentTimeMillis());

				/**
				 * [tStatCatcher_1 end ] stop
				 */

				/**
				 * [tLogRow_1 end ] start
				 */

				currentComponent = "tLogRow_1";

				// ////
				// ////
				globalMap.put("tLogRow_1_NB_LINE", nb_line_tLogRow_1);

				// /////////////////////

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row11" + iterateId, 2,
								0);
					}
				}

				ok_Hash.put("tLogRow_1", true);
				end_Hash.put("tLogRow_1", System.currentTimeMillis());

				/**
				 * [tLogRow_1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tStatCatcher_1 finally ] start
				 */

				currentComponent = "tStatCatcher_1";

				/**
				 * [tStatCatcher_1 finally ] stop
				 */

				/**
				 * [tLogRow_1 finally ] start
				 */

				currentComponent = "tLogRow_1";

				/**
				 * [tLogRow_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tStatCatcher_1_SUBPROCESS_STATE", 1);
	}

	public static class row_talendStats_STATSStruct implements
			routines.system.IPersistableRow<row_talendStats_STATSStruct> {
		final static byte[] commonByteArrayLock_ORDER_ETL_OLD_RL_ETL = new byte[0];
		static byte[] commonByteArray_ORDER_ETL_OLD_RL_ETL = new byte[0];

		public java.util.Date moment;

		public java.util.Date getMoment() {
			return this.moment;
		}

		public String pid;

		public String getPid() {
			return this.pid;
		}

		public String father_pid;

		public String getFather_pid() {
			return this.father_pid;
		}

		public String root_pid;

		public String getRoot_pid() {
			return this.root_pid;
		}

		public Long system_pid;

		public Long getSystem_pid() {
			return this.system_pid;
		}

		public String project;

		public String getProject() {
			return this.project;
		}

		public String job;

		public String getJob() {
			return this.job;
		}

		public String job_repository_id;

		public String getJob_repository_id() {
			return this.job_repository_id;
		}

		public String job_version;

		public String getJob_version() {
			return this.job_version;
		}

		public String context;

		public String getContext() {
			return this.context;
		}

		public String origin;

		public String getOrigin() {
			return this.origin;
		}

		public String message_type;

		public String getMessage_type() {
			return this.message_type;
		}

		public String message;

		public String getMessage() {
			return this.message;
		}

		public Long duration;

		public Long getDuration() {
			return this.duration;
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ORDER_ETL_OLD_RL_ETL.length) {
					if (length < 1024
							&& commonByteArray_ORDER_ETL_OLD_RL_ETL.length == 0) {
						commonByteArray_ORDER_ETL_OLD_RL_ETL = new byte[1024];
					} else {
						commonByteArray_ORDER_ETL_OLD_RL_ETL = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ORDER_ETL_OLD_RL_ETL, 0, length);
				strReturn = new String(commonByteArray_ORDER_ETL_OLD_RL_ETL, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ORDER_ETL_OLD_RL_ETL) {

				try {

					int length = 0;

					this.moment = readDate(dis);

					this.pid = readString(dis);

					this.father_pid = readString(dis);

					this.root_pid = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.system_pid = null;
					} else {
						this.system_pid = dis.readLong();
					}

					this.project = readString(dis);

					this.job = readString(dis);

					this.job_repository_id = readString(dis);

					this.job_version = readString(dis);

					this.context = readString(dis);

					this.origin = readString(dis);

					this.message_type = readString(dis);

					this.message = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.duration = null;
					} else {
						this.duration = dis.readLong();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.moment, dos);

				// String

				writeString(this.pid, dos);

				// String

				writeString(this.father_pid, dos);

				// String

				writeString(this.root_pid, dos);

				// Long

				if (this.system_pid == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.system_pid);
				}

				// String

				writeString(this.project, dos);

				// String

				writeString(this.job, dos);

				// String

				writeString(this.job_repository_id, dos);

				// String

				writeString(this.job_version, dos);

				// String

				writeString(this.context, dos);

				// String

				writeString(this.origin, dos);

				// String

				writeString(this.message_type, dos);

				// String

				writeString(this.message, dos);

				// Long

				if (this.duration == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.duration);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("moment=" + String.valueOf(moment));
			sb.append(",pid=" + pid);
			sb.append(",father_pid=" + father_pid);
			sb.append(",root_pid=" + root_pid);
			sb.append(",system_pid=" + String.valueOf(system_pid));
			sb.append(",project=" + project);
			sb.append(",job=" + job);
			sb.append(",job_repository_id=" + job_repository_id);
			sb.append(",job_version=" + job_version);
			sb.append(",context=" + context);
			sb.append(",origin=" + origin);
			sb.append(",message_type=" + message_type);
			sb.append(",message=" + message);
			sb.append(",duration=" + String.valueOf(duration));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row_talendStats_STATSStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void talendStats_STATSProcess(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("talendStats_STATS_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row_talendStats_STATSStruct row_talendStats_STATS = new row_talendStats_STATSStruct();

				/**
				 * [talendStats_FILE begin ] start
				 */

				ok_Hash.put("talendStats_FILE", false);
				start_Hash.put("talendStats_FILE", System.currentTimeMillis());

				currentVirtualComponent = "talendStats_FILE";

				currentComponent = "talendStats_FILE";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("Main" + iterateId, 0, 0);

					}
				}

				int tos_count_talendStats_FILE = 0;

				String fileName_talendStats_FILE = "";
				fileName_talendStats_FILE = (new java.io.File("/r01/log" + "/"
						+ "stats_file.txt")).getAbsolutePath().replace("\\",
						"/");
				String fullName_talendStats_FILE = null;
				String extension_talendStats_FILE = null;
				String directory_talendStats_FILE = null;
				if ((fileName_talendStats_FILE.indexOf("/") != -1)) {
					if (fileName_talendStats_FILE.lastIndexOf(".") < fileName_talendStats_FILE
							.lastIndexOf("/")) {
						fullName_talendStats_FILE = fileName_talendStats_FILE;
						extension_talendStats_FILE = "";
					} else {
						fullName_talendStats_FILE = fileName_talendStats_FILE
								.substring(0, fileName_talendStats_FILE
										.lastIndexOf("."));
						extension_talendStats_FILE = fileName_talendStats_FILE
								.substring(fileName_talendStats_FILE
										.lastIndexOf("."));
					}
					directory_talendStats_FILE = fileName_talendStats_FILE
							.substring(0,
									fileName_talendStats_FILE.lastIndexOf("/"));
				} else {
					if (fileName_talendStats_FILE.lastIndexOf(".") != -1) {
						fullName_talendStats_FILE = fileName_talendStats_FILE
								.substring(0, fileName_talendStats_FILE
										.lastIndexOf("."));
						extension_talendStats_FILE = fileName_talendStats_FILE
								.substring(fileName_talendStats_FILE
										.lastIndexOf("."));
					} else {
						fullName_talendStats_FILE = fileName_talendStats_FILE;
						extension_talendStats_FILE = "";
					}
					directory_talendStats_FILE = "";
				}
				boolean isFileGenerated_talendStats_FILE = true;
				java.io.File filetalendStats_FILE = new java.io.File(
						fileName_talendStats_FILE);
				globalMap.put("talendStats_FILE_FILE_NAME",
						fileName_talendStats_FILE);
				if (filetalendStats_FILE.exists()) {
					isFileGenerated_talendStats_FILE = false;
				}
				int nb_line_talendStats_FILE = 0;
				int splitedFileNo_talendStats_FILE = 0;
				int currentRow_talendStats_FILE = 0;

				final String OUT_DELIM_talendStats_FILE = /**
				 * Start field
				 * talendStats_FILE:FIELDSEPARATOR
				 */
				";"/** End field talendStats_FILE:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_talendStats_FILE = /**
				 * Start field
				 * talendStats_FILE:ROWSEPARATOR
				 */
				"\n"/** End field talendStats_FILE:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_talendStats_FILE != null
						&& directory_talendStats_FILE.trim().length() != 0) {
					java.io.File dir_talendStats_FILE = new java.io.File(
							directory_talendStats_FILE);
					if (!dir_talendStats_FILE.exists()) {
						dir_talendStats_FILE.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtalendStats_FILE = null;

				outtalendStats_FILE = new java.io.BufferedWriter(
						new java.io.OutputStreamWriter(
								new java.io.FileOutputStream(
										fileName_talendStats_FILE, true),
								"UTF-8"));

				resourceMap.put("out_talendStats_FILE", outtalendStats_FILE);
				resourceMap.put("nb_line_talendStats_FILE",
						nb_line_talendStats_FILE);

				/**
				 * [talendStats_FILE begin ] stop
				 */

				/**
				 * [talendStats_STATS begin ] start
				 */

				ok_Hash.put("talendStats_STATS", false);
				start_Hash.put("talendStats_STATS", System.currentTimeMillis());

				currentVirtualComponent = "talendStats_STATS";

				currentComponent = "talendStats_STATS";

				int tos_count_talendStats_STATS = 0;

				for (StatCatcherUtils.StatCatcherMessage scm : talendStats_STATS
						.getMessages()) {
					row_talendStats_STATS.pid = pid;
					row_talendStats_STATS.root_pid = rootPid;
					row_talendStats_STATS.father_pid = fatherPid;
					row_talendStats_STATS.project = projectName;
					row_talendStats_STATS.job = jobName;
					row_talendStats_STATS.context = contextStr;
					row_talendStats_STATS.origin = (scm.getOrigin() == null
							|| scm.getOrigin().length() < 1 ? null : scm
							.getOrigin());
					row_talendStats_STATS.message = scm.getMessage();
					row_talendStats_STATS.duration = scm.getDuration();
					row_talendStats_STATS.moment = scm.getMoment();
					row_talendStats_STATS.message_type = scm.getMessageType();
					row_talendStats_STATS.job_version = scm.getJobVersion();
					row_talendStats_STATS.job_repository_id = scm.getJobId();
					row_talendStats_STATS.system_pid = scm.getSystemPid();

					/**
					 * [talendStats_STATS begin ] stop
					 */

					/**
					 * [talendStats_STATS main ] start
					 */

					currentVirtualComponent = "talendStats_STATS";

					currentComponent = "talendStats_STATS";

					tos_count_talendStats_STATS++;

					/**
					 * [talendStats_STATS main ] stop
					 */

					/**
					 * [talendStats_STATS process_data_begin ] start
					 */

					currentVirtualComponent = "talendStats_STATS";

					currentComponent = "talendStats_STATS";

					/**
					 * [talendStats_STATS process_data_begin ] stop
					 */

					/**
					 * [talendStats_FILE main ] start
					 */

					currentVirtualComponent = "talendStats_FILE";

					currentComponent = "talendStats_FILE";

					// Main
					// row_talendStats_STATS

					if (execStat) {
						runStat.updateStatOnConnection("Main" + iterateId, 1, 1);
					}

					StringBuilder sb_talendStats_FILE = new StringBuilder();
					if (row_talendStats_STATS.moment != null) {
						sb_talendStats_FILE.append(FormatterUtils.format_Date(
								row_talendStats_STATS.moment,
								"yyyy-MM-dd HH:mm:ss"));
					}
					sb_talendStats_FILE.append(OUT_DELIM_talendStats_FILE);
					if (row_talendStats_STATS.pid != null) {
						sb_talendStats_FILE.append(row_talendStats_STATS.pid);
					}
					sb_talendStats_FILE.append(OUT_DELIM_talendStats_FILE);
					if (row_talendStats_STATS.father_pid != null) {
						sb_talendStats_FILE
								.append(row_talendStats_STATS.father_pid);
					}
					sb_talendStats_FILE.append(OUT_DELIM_talendStats_FILE);
					if (row_talendStats_STATS.root_pid != null) {
						sb_talendStats_FILE
								.append(row_talendStats_STATS.root_pid);
					}
					sb_talendStats_FILE.append(OUT_DELIM_talendStats_FILE);
					if (row_talendStats_STATS.system_pid != null) {
						sb_talendStats_FILE
								.append(row_talendStats_STATS.system_pid);
					}
					sb_talendStats_FILE.append(OUT_DELIM_talendStats_FILE);
					if (row_talendStats_STATS.project != null) {
						sb_talendStats_FILE
								.append(row_talendStats_STATS.project);
					}
					sb_talendStats_FILE.append(OUT_DELIM_talendStats_FILE);
					if (row_talendStats_STATS.job != null) {
						sb_talendStats_FILE.append(row_talendStats_STATS.job);
					}
					sb_talendStats_FILE.append(OUT_DELIM_talendStats_FILE);
					if (row_talendStats_STATS.job_repository_id != null) {
						sb_talendStats_FILE
								.append(row_talendStats_STATS.job_repository_id);
					}
					sb_talendStats_FILE.append(OUT_DELIM_talendStats_FILE);
					if (row_talendStats_STATS.job_version != null) {
						sb_talendStats_FILE
								.append(row_talendStats_STATS.job_version);
					}
					sb_talendStats_FILE.append(OUT_DELIM_talendStats_FILE);
					if (row_talendStats_STATS.context != null) {
						sb_talendStats_FILE
								.append(row_talendStats_STATS.context);
					}
					sb_talendStats_FILE.append(OUT_DELIM_talendStats_FILE);
					if (row_talendStats_STATS.origin != null) {
						sb_talendStats_FILE
								.append(row_talendStats_STATS.origin);
					}
					sb_talendStats_FILE.append(OUT_DELIM_talendStats_FILE);
					if (row_talendStats_STATS.message_type != null) {
						sb_talendStats_FILE
								.append(row_talendStats_STATS.message_type);
					}
					sb_talendStats_FILE.append(OUT_DELIM_talendStats_FILE);
					if (row_talendStats_STATS.message != null) {
						sb_talendStats_FILE
								.append(row_talendStats_STATS.message);
					}
					sb_talendStats_FILE.append(OUT_DELIM_talendStats_FILE);
					if (row_talendStats_STATS.duration != null) {
						sb_talendStats_FILE
								.append(row_talendStats_STATS.duration);
					}
					sb_talendStats_FILE
							.append(OUT_DELIM_ROWSEP_talendStats_FILE);

					nb_line_talendStats_FILE++;
					resourceMap.put("nb_line_talendStats_FILE",
							nb_line_talendStats_FILE);

					outtalendStats_FILE.write(sb_talendStats_FILE.toString());

					tos_count_talendStats_FILE++;

					/**
					 * [talendStats_FILE main ] stop
					 */

					/**
					 * [talendStats_FILE process_data_begin ] start
					 */

					currentVirtualComponent = "talendStats_FILE";

					currentComponent = "talendStats_FILE";

					/**
					 * [talendStats_FILE process_data_begin ] stop
					 */

					/**
					 * [talendStats_FILE process_data_end ] start
					 */

					currentVirtualComponent = "talendStats_FILE";

					currentComponent = "talendStats_FILE";

					/**
					 * [talendStats_FILE process_data_end ] stop
					 */

					/**
					 * [talendStats_STATS process_data_end ] start
					 */

					currentVirtualComponent = "talendStats_STATS";

					currentComponent = "talendStats_STATS";

					/**
					 * [talendStats_STATS process_data_end ] stop
					 */

					/**
					 * [talendStats_STATS end ] start
					 */

					currentVirtualComponent = "talendStats_STATS";

					currentComponent = "talendStats_STATS";

				}

				ok_Hash.put("talendStats_STATS", true);
				end_Hash.put("talendStats_STATS", System.currentTimeMillis());

				/**
				 * [talendStats_STATS end ] stop
				 */

				/**
				 * [talendStats_FILE end ] start
				 */

				currentVirtualComponent = "talendStats_FILE";

				currentComponent = "talendStats_FILE";

				if (outtalendStats_FILE != null) {
					outtalendStats_FILE.flush();
					outtalendStats_FILE.close();
				}

				globalMap.put("talendStats_FILE_NB_LINE",
						nb_line_talendStats_FILE);
				globalMap.put("talendStats_FILE_FILE_NAME",
						fileName_talendStats_FILE);

				resourceMap.put("finish_talendStats_FILE", true);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("Main" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("talendStats_FILE", true);
				end_Hash.put("talendStats_FILE", System.currentTimeMillis());

				/**
				 * [talendStats_FILE end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [talendStats_STATS finally ] start
				 */

				currentVirtualComponent = "talendStats_STATS";

				currentComponent = "talendStats_STATS";

				/**
				 * [talendStats_STATS finally ] stop
				 */

				/**
				 * [talendStats_FILE finally ] start
				 */

				currentVirtualComponent = "talendStats_FILE";

				currentComponent = "talendStats_FILE";

				if (resourceMap.get("finish_talendStats_FILE") == null) {

					java.io.Writer outtalendStats_FILE = (java.io.Writer) resourceMap
							.get("out_talendStats_FILE");
					if (outtalendStats_FILE != null) {
						outtalendStats_FILE.flush();
						outtalendStats_FILE.close();
					}

				}

				/**
				 * [talendStats_FILE finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("talendStats_STATS_SUBPROCESS_STATE", 1);
	}

	public static class row_talendLogs_LOGSStruct implements
			routines.system.IPersistableRow<row_talendLogs_LOGSStruct> {
		final static byte[] commonByteArrayLock_ORDER_ETL_OLD_RL_ETL = new byte[0];
		static byte[] commonByteArray_ORDER_ETL_OLD_RL_ETL = new byte[0];

		public java.util.Date moment;

		public java.util.Date getMoment() {
			return this.moment;
		}

		public String pid;

		public String getPid() {
			return this.pid;
		}

		public String root_pid;

		public String getRoot_pid() {
			return this.root_pid;
		}

		public String father_pid;

		public String getFather_pid() {
			return this.father_pid;
		}

		public String project;

		public String getProject() {
			return this.project;
		}

		public String job;

		public String getJob() {
			return this.job;
		}

		public String context;

		public String getContext() {
			return this.context;
		}

		public Integer priority;

		public Integer getPriority() {
			return this.priority;
		}

		public String type;

		public String getType() {
			return this.type;
		}

		public String origin;

		public String getOrigin() {
			return this.origin;
		}

		public String message;

		public String getMessage() {
			return this.message;
		}

		public Integer code;

		public Integer getCode() {
			return this.code;
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ORDER_ETL_OLD_RL_ETL.length) {
					if (length < 1024
							&& commonByteArray_ORDER_ETL_OLD_RL_ETL.length == 0) {
						commonByteArray_ORDER_ETL_OLD_RL_ETL = new byte[1024];
					} else {
						commonByteArray_ORDER_ETL_OLD_RL_ETL = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ORDER_ETL_OLD_RL_ETL, 0, length);
				strReturn = new String(commonByteArray_ORDER_ETL_OLD_RL_ETL, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ORDER_ETL_OLD_RL_ETL) {

				try {

					int length = 0;

					this.moment = readDate(dis);

					this.pid = readString(dis);

					this.root_pid = readString(dis);

					this.father_pid = readString(dis);

					this.project = readString(dis);

					this.job = readString(dis);

					this.context = readString(dis);

					this.priority = readInteger(dis);

					this.type = readString(dis);

					this.origin = readString(dis);

					this.message = readString(dis);

					this.code = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.moment, dos);

				// String

				writeString(this.pid, dos);

				// String

				writeString(this.root_pid, dos);

				// String

				writeString(this.father_pid, dos);

				// String

				writeString(this.project, dos);

				// String

				writeString(this.job, dos);

				// String

				writeString(this.context, dos);

				// Integer

				writeInteger(this.priority, dos);

				// String

				writeString(this.type, dos);

				// String

				writeString(this.origin, dos);

				// String

				writeString(this.message, dos);

				// Integer

				writeInteger(this.code, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("moment=" + String.valueOf(moment));
			sb.append(",pid=" + pid);
			sb.append(",root_pid=" + root_pid);
			sb.append(",father_pid=" + father_pid);
			sb.append(",project=" + project);
			sb.append(",job=" + job);
			sb.append(",context=" + context);
			sb.append(",priority=" + String.valueOf(priority));
			sb.append(",type=" + type);
			sb.append(",origin=" + origin);
			sb.append(",message=" + message);
			sb.append(",code=" + String.valueOf(code));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row_talendLogs_LOGSStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void talendLogs_LOGSProcess(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("talendLogs_LOGS_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row_talendLogs_LOGSStruct row_talendLogs_LOGS = new row_talendLogs_LOGSStruct();

				/**
				 * [talendLogs_FILE begin ] start
				 */

				ok_Hash.put("talendLogs_FILE", false);
				start_Hash.put("talendLogs_FILE", System.currentTimeMillis());

				currentVirtualComponent = "talendLogs_FILE";

				currentComponent = "talendLogs_FILE";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("Main" + iterateId, 0, 0);

					}
				}

				int tos_count_talendLogs_FILE = 0;

				String fileName_talendLogs_FILE = "";
				fileName_talendLogs_FILE = (new java.io.File("/r01/log" + "/"
						+ "logs_file.txt")).getAbsolutePath()
						.replace("\\", "/");
				String fullName_talendLogs_FILE = null;
				String extension_talendLogs_FILE = null;
				String directory_talendLogs_FILE = null;
				if ((fileName_talendLogs_FILE.indexOf("/") != -1)) {
					if (fileName_talendLogs_FILE.lastIndexOf(".") < fileName_talendLogs_FILE
							.lastIndexOf("/")) {
						fullName_talendLogs_FILE = fileName_talendLogs_FILE;
						extension_talendLogs_FILE = "";
					} else {
						fullName_talendLogs_FILE = fileName_talendLogs_FILE
								.substring(0, fileName_talendLogs_FILE
										.lastIndexOf("."));
						extension_talendLogs_FILE = fileName_talendLogs_FILE
								.substring(fileName_talendLogs_FILE
										.lastIndexOf("."));
					}
					directory_talendLogs_FILE = fileName_talendLogs_FILE
							.substring(0,
									fileName_talendLogs_FILE.lastIndexOf("/"));
				} else {
					if (fileName_talendLogs_FILE.lastIndexOf(".") != -1) {
						fullName_talendLogs_FILE = fileName_talendLogs_FILE
								.substring(0, fileName_talendLogs_FILE
										.lastIndexOf("."));
						extension_talendLogs_FILE = fileName_talendLogs_FILE
								.substring(fileName_talendLogs_FILE
										.lastIndexOf("."));
					} else {
						fullName_talendLogs_FILE = fileName_talendLogs_FILE;
						extension_talendLogs_FILE = "";
					}
					directory_talendLogs_FILE = "";
				}
				boolean isFileGenerated_talendLogs_FILE = true;
				java.io.File filetalendLogs_FILE = new java.io.File(
						fileName_talendLogs_FILE);
				globalMap.put("talendLogs_FILE_FILE_NAME",
						fileName_talendLogs_FILE);
				if (filetalendLogs_FILE.exists()) {
					isFileGenerated_talendLogs_FILE = false;
				}
				int nb_line_talendLogs_FILE = 0;
				int splitedFileNo_talendLogs_FILE = 0;
				int currentRow_talendLogs_FILE = 0;

				final String OUT_DELIM_talendLogs_FILE = /**
				 * Start field
				 * talendLogs_FILE:FIELDSEPARATOR
				 */
				";"/** End field talendLogs_FILE:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_talendLogs_FILE = /**
				 * Start field
				 * talendLogs_FILE:ROWSEPARATOR
				 */
				"\n"/** End field talendLogs_FILE:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_talendLogs_FILE != null
						&& directory_talendLogs_FILE.trim().length() != 0) {
					java.io.File dir_talendLogs_FILE = new java.io.File(
							directory_talendLogs_FILE);
					if (!dir_talendLogs_FILE.exists()) {
						dir_talendLogs_FILE.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtalendLogs_FILE = null;

				outtalendLogs_FILE = new java.io.BufferedWriter(
						new java.io.OutputStreamWriter(
								new java.io.FileOutputStream(
										fileName_talendLogs_FILE, true),
								"UTF-8"));

				resourceMap.put("out_talendLogs_FILE", outtalendLogs_FILE);
				resourceMap.put("nb_line_talendLogs_FILE",
						nb_line_talendLogs_FILE);

				/**
				 * [talendLogs_FILE begin ] stop
				 */

				/**
				 * [talendLogs_LOGS begin ] start
				 */

				ok_Hash.put("talendLogs_LOGS", false);
				start_Hash.put("talendLogs_LOGS", System.currentTimeMillis());

				currentVirtualComponent = "talendLogs_LOGS";

				currentComponent = "talendLogs_LOGS";

				int tos_count_talendLogs_LOGS = 0;

				try {
					for (LogCatcherUtils.LogCatcherMessage lcm : talendLogs_LOGS
							.getMessages()) {
						row_talendLogs_LOGS.type = lcm.getType();
						row_talendLogs_LOGS.origin = (lcm.getOrigin() == null
								|| lcm.getOrigin().length() < 1 ? null : lcm
								.getOrigin());
						row_talendLogs_LOGS.priority = lcm.getPriority();
						row_talendLogs_LOGS.message = lcm.getMessage();
						row_talendLogs_LOGS.code = lcm.getCode();

						row_talendLogs_LOGS.moment = java.util.Calendar
								.getInstance().getTime();

						row_talendLogs_LOGS.pid = pid;
						row_talendLogs_LOGS.root_pid = rootPid;
						row_talendLogs_LOGS.father_pid = fatherPid;

						row_talendLogs_LOGS.project = projectName;
						row_talendLogs_LOGS.job = jobName;
						row_talendLogs_LOGS.context = contextStr;

						/**
						 * [talendLogs_LOGS begin ] stop
						 */

						/**
						 * [talendLogs_LOGS main ] start
						 */

						currentVirtualComponent = "talendLogs_LOGS";

						currentComponent = "talendLogs_LOGS";

						tos_count_talendLogs_LOGS++;

						/**
						 * [talendLogs_LOGS main ] stop
						 */

						/**
						 * [talendLogs_LOGS process_data_begin ] start
						 */

						currentVirtualComponent = "talendLogs_LOGS";

						currentComponent = "talendLogs_LOGS";

						/**
						 * [talendLogs_LOGS process_data_begin ] stop
						 */

						/**
						 * [talendLogs_FILE main ] start
						 */

						currentVirtualComponent = "talendLogs_FILE";

						currentComponent = "talendLogs_FILE";

						// Main
						// row_talendLogs_LOGS

						if (execStat) {
							runStat.updateStatOnConnection("Main" + iterateId,
									1, 1);
						}

						StringBuilder sb_talendLogs_FILE = new StringBuilder();
						if (row_talendLogs_LOGS.moment != null) {
							sb_talendLogs_FILE.append(FormatterUtils
									.format_Date(row_talendLogs_LOGS.moment,
											"yyyy-MM-dd HH:mm:ss"));
						}
						sb_talendLogs_FILE.append(OUT_DELIM_talendLogs_FILE);
						if (row_talendLogs_LOGS.pid != null) {
							sb_talendLogs_FILE.append(row_talendLogs_LOGS.pid);
						}
						sb_talendLogs_FILE.append(OUT_DELIM_talendLogs_FILE);
						if (row_talendLogs_LOGS.root_pid != null) {
							sb_talendLogs_FILE
									.append(row_talendLogs_LOGS.root_pid);
						}
						sb_talendLogs_FILE.append(OUT_DELIM_talendLogs_FILE);
						if (row_talendLogs_LOGS.father_pid != null) {
							sb_talendLogs_FILE
									.append(row_talendLogs_LOGS.father_pid);
						}
						sb_talendLogs_FILE.append(OUT_DELIM_talendLogs_FILE);
						if (row_talendLogs_LOGS.project != null) {
							sb_talendLogs_FILE
									.append(row_talendLogs_LOGS.project);
						}
						sb_talendLogs_FILE.append(OUT_DELIM_talendLogs_FILE);
						if (row_talendLogs_LOGS.job != null) {
							sb_talendLogs_FILE.append(row_talendLogs_LOGS.job);
						}
						sb_talendLogs_FILE.append(OUT_DELIM_talendLogs_FILE);
						if (row_talendLogs_LOGS.context != null) {
							sb_talendLogs_FILE
									.append(row_talendLogs_LOGS.context);
						}
						sb_talendLogs_FILE.append(OUT_DELIM_talendLogs_FILE);
						if (row_talendLogs_LOGS.priority != null) {
							sb_talendLogs_FILE
									.append(row_talendLogs_LOGS.priority);
						}
						sb_talendLogs_FILE.append(OUT_DELIM_talendLogs_FILE);
						if (row_talendLogs_LOGS.type != null) {
							sb_talendLogs_FILE.append(row_talendLogs_LOGS.type);
						}
						sb_talendLogs_FILE.append(OUT_DELIM_talendLogs_FILE);
						if (row_talendLogs_LOGS.origin != null) {
							sb_talendLogs_FILE
									.append(row_talendLogs_LOGS.origin);
						}
						sb_talendLogs_FILE.append(OUT_DELIM_talendLogs_FILE);
						if (row_talendLogs_LOGS.message != null) {
							sb_talendLogs_FILE
									.append(row_talendLogs_LOGS.message);
						}
						sb_talendLogs_FILE.append(OUT_DELIM_talendLogs_FILE);
						if (row_talendLogs_LOGS.code != null) {
							sb_talendLogs_FILE.append(row_talendLogs_LOGS.code);
						}
						sb_talendLogs_FILE
								.append(OUT_DELIM_ROWSEP_talendLogs_FILE);

						nb_line_talendLogs_FILE++;
						resourceMap.put("nb_line_talendLogs_FILE",
								nb_line_talendLogs_FILE);

						outtalendLogs_FILE.write(sb_talendLogs_FILE.toString());

						tos_count_talendLogs_FILE++;

						/**
						 * [talendLogs_FILE main ] stop
						 */

						/**
						 * [talendLogs_FILE process_data_begin ] start
						 */

						currentVirtualComponent = "talendLogs_FILE";

						currentComponent = "talendLogs_FILE";

						/**
						 * [talendLogs_FILE process_data_begin ] stop
						 */

						/**
						 * [talendLogs_FILE process_data_end ] start
						 */

						currentVirtualComponent = "talendLogs_FILE";

						currentComponent = "talendLogs_FILE";

						/**
						 * [talendLogs_FILE process_data_end ] stop
						 */

						/**
						 * [talendLogs_LOGS process_data_end ] start
						 */

						currentVirtualComponent = "talendLogs_LOGS";

						currentComponent = "talendLogs_LOGS";

						/**
						 * [talendLogs_LOGS process_data_end ] stop
						 */

						/**
						 * [talendLogs_LOGS end ] start
						 */

						currentVirtualComponent = "talendLogs_LOGS";

						currentComponent = "talendLogs_LOGS";

					}
				} catch (Exception e_talendLogs_LOGS) {
					logIgnoredError(
							String.format(
									"talendLogs_LOGS - tLogCatcher failed to process log message(s) due to internal error: %s",
									e_talendLogs_LOGS), e_talendLogs_LOGS);
				}

				ok_Hash.put("talendLogs_LOGS", true);
				end_Hash.put("talendLogs_LOGS", System.currentTimeMillis());

				/**
				 * [talendLogs_LOGS end ] stop
				 */

				/**
				 * [talendLogs_FILE end ] start
				 */

				currentVirtualComponent = "talendLogs_FILE";

				currentComponent = "talendLogs_FILE";

				if (outtalendLogs_FILE != null) {
					outtalendLogs_FILE.flush();
					outtalendLogs_FILE.close();
				}

				globalMap.put("talendLogs_FILE_NB_LINE",
						nb_line_talendLogs_FILE);
				globalMap.put("talendLogs_FILE_FILE_NAME",
						fileName_talendLogs_FILE);

				resourceMap.put("finish_talendLogs_FILE", true);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("Main" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("talendLogs_FILE", true);
				end_Hash.put("talendLogs_FILE", System.currentTimeMillis());

				/**
				 * [talendLogs_FILE end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [talendLogs_LOGS finally ] start
				 */

				currentVirtualComponent = "talendLogs_LOGS";

				currentComponent = "talendLogs_LOGS";

				/**
				 * [talendLogs_LOGS finally ] stop
				 */

				/**
				 * [talendLogs_FILE finally ] start
				 */

				currentVirtualComponent = "talendLogs_FILE";

				currentComponent = "talendLogs_FILE";

				if (resourceMap.get("finish_talendLogs_FILE") == null) {

					java.io.Writer outtalendLogs_FILE = (java.io.Writer) resourceMap
							.get("out_talendLogs_FILE");
					if (outtalendLogs_FILE != null) {
						outtalendLogs_FILE.flush();
						outtalendLogs_FILE.close();
					}

				}

				/**
				 * [talendLogs_FILE finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("talendLogs_LOGS_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final OLD_RL_ETL OLD_RL_ETLClass = new OLD_RL_ETL();

		int exitCode = OLD_RL_ETLClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket
				// can't open
				System.err.println("The statistics socket port " + portStats
						+ " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}

		try {
			// call job/subjob with an existing context, like:
			// --context=production. if without this parameter, there will use
			// the default context instead.
			java.io.InputStream inContext = OLD_RL_ETL.class.getClassLoader()
					.getResourceAsStream(
							"order_etl/old_rl_etl_0_1/contexts/" + contextStr
									+ ".properties");
			if (inContext == null) {
				inContext = OLD_RL_ETL.class
						.getClassLoader()
						.getResourceAsStream(
								"config/contexts/" + contextStr + ".properties");
			}
			if (inContext != null) {
				// defaultProps is in order to keep the original context value
				defaultProps.load(inContext);
				inContext.close();
				context = new ContextProperties(defaultProps);
			} else if (!isDefaultContext) {
				// print info and job continue to run, for case: context_param
				// is not empty.
				System.err.println("Could not find the context " + contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param
							.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
			context.setContextType("data_warehouse_order_rl_host", "id_String");

			context.data_warehouse_order_rl_host = (String) context
					.getProperty("data_warehouse_order_rl_host");
			context.setContextType("data_warehouse_order_rl_port", "id_String");

			context.data_warehouse_order_rl_port = (String) context
					.getProperty("data_warehouse_order_rl_port");
			context.setContextType("data_warehouse_order_rl_database",
					"id_String");

			context.data_warehouse_order_rl_database = (String) context
					.getProperty("data_warehouse_order_rl_database");
			context.setContextType("data_warehouse_order_rl_schema",
					"id_String");

			context.data_warehouse_order_rl_schema = (String) context
					.getProperty("data_warehouse_order_rl_schema");
			context.setContextType("data_warehouse_order_rl_username",
					"id_String");

			context.data_warehouse_order_rl_username = (String) context
					.getProperty("data_warehouse_order_rl_username");
			context.setContextType("data_warehouse_order_rl_password",
					"id_String");

			context.data_warehouse_order_rl_password = (String) context
					.getProperty("data_warehouse_order_rl_password");
			context.setContextType("data_warehouse_order_dwos_host",
					"id_String");

			context.data_warehouse_order_dwos_host = (String) context
					.getProperty("data_warehouse_order_dwos_host");
			context.setContextType("data_warehouse_order_dwos_port",
					"id_String");

			context.data_warehouse_order_dwos_port = (String) context
					.getProperty("data_warehouse_order_dwos_port");
			context.setContextType("data_warehouse_order_dwos_database",
					"id_String");

			context.data_warehouse_order_dwos_database = (String) context
					.getProperty("data_warehouse_order_dwos_database");
			context.setContextType("data_warehouse_order_dwos_schema",
					"id_String");

			context.data_warehouse_order_dwos_schema = (String) context
					.getProperty("data_warehouse_order_dwos_schema");
			context.setContextType("data_warehouse_order_dwos_username",
					"id_String");

			context.data_warehouse_order_dwos_username = (String) context
					.getProperty("data_warehouse_order_dwos_username");
			context.setContextType("data_warehouse_order_dwos_password",
					"id_String");

			context.data_warehouse_order_dwos_password = (String) context
					.getProperty("data_warehouse_order_dwos_password");
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
			if (parentContextMap.containsKey("data_warehouse_order_rl_host")) {
				context.data_warehouse_order_rl_host = (String) parentContextMap
						.get("data_warehouse_order_rl_host");
			}
			if (parentContextMap.containsKey("data_warehouse_order_rl_port")) {
				context.data_warehouse_order_rl_port = (String) parentContextMap
						.get("data_warehouse_order_rl_port");
			}
			if (parentContextMap
					.containsKey("data_warehouse_order_rl_database")) {
				context.data_warehouse_order_rl_database = (String) parentContextMap
						.get("data_warehouse_order_rl_database");
			}
			if (parentContextMap.containsKey("data_warehouse_order_rl_schema")) {
				context.data_warehouse_order_rl_schema = (String) parentContextMap
						.get("data_warehouse_order_rl_schema");
			}
			if (parentContextMap
					.containsKey("data_warehouse_order_rl_username")) {
				context.data_warehouse_order_rl_username = (String) parentContextMap
						.get("data_warehouse_order_rl_username");
			}
			if (parentContextMap
					.containsKey("data_warehouse_order_rl_password")) {
				context.data_warehouse_order_rl_password = (String) parentContextMap
						.get("data_warehouse_order_rl_password");
			}
			if (parentContextMap.containsKey("data_warehouse_order_dwos_host")) {
				context.data_warehouse_order_dwos_host = (String) parentContextMap
						.get("data_warehouse_order_dwos_host");
			}
			if (parentContextMap.containsKey("data_warehouse_order_dwos_port")) {
				context.data_warehouse_order_dwos_port = (String) parentContextMap
						.get("data_warehouse_order_dwos_port");
			}
			if (parentContextMap
					.containsKey("data_warehouse_order_dwos_database")) {
				context.data_warehouse_order_dwos_database = (String) parentContextMap
						.get("data_warehouse_order_dwos_database");
			}
			if (parentContextMap
					.containsKey("data_warehouse_order_dwos_schema")) {
				context.data_warehouse_order_dwos_schema = (String) parentContextMap
						.get("data_warehouse_order_dwos_schema");
			}
			if (parentContextMap
					.containsKey("data_warehouse_order_dwos_username")) {
				context.data_warehouse_order_dwos_username = (String) parentContextMap
						.get("data_warehouse_order_dwos_username");
			}
			if (parentContextMap
					.containsKey("data_warehouse_order_dwos_password")) {
				context.data_warehouse_order_dwos_password = (String) parentContextMap
						.get("data_warehouse_order_dwos_password");
			}
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil
				.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName,
				jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName,
				parent_part_launcher, Thread.currentThread().getId() + "", "",
				"", "", "",
				resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();
		tStatCatcher_1.addMessage("begin");
		talendStats_STATS.addMessage("begin");

		this.globalResumeTicket = true;// to run tPreJob

		try {
			tStatCatcher_1Process(globalMap);
		} catch (java.lang.Exception e) {
			e.printStackTrace();
		}
		try {
			talendStats_STATSProcess(globalMap);
		} catch (java.lang.Exception e) {
			e.printStackTrace();
		}

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tFileInputProperties_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tFileInputProperties_1) {
			globalMap.put("tFileInputProperties_1_SUBPROCESS_STATE", -1);

			e_tFileInputProperties_1.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println((endUsedMemory - startUsedMemory)
					+ " bytes memory increase when running : OLD_RL_ETL");
		}
		tStatCatcher_1.addMessage(status == "" ? "end" : status,
				(end - startTime));
		try {
			tStatCatcher_1Process(globalMap);
		} catch (java.lang.Exception e) {
			e.printStackTrace();
		}
		talendStats_STATS.addMessage(status == "" ? "end" : status,
				(end - startTime));
		try {
			talendStats_STATSProcess(globalMap);
		} catch (java.lang.Exception e) {
			e.printStackTrace();
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher,
				Thread.currentThread().getId() + "", "", "" + returnCode, "",
				"", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {
		closeSqlDbConnections();

	}

	private void closeSqlDbConnections() {
		try {
			Object obj_conn;
			obj_conn = globalMap.remove("conn_tDBConnection_1");
			if (null != obj_conn) {
				((java.sql.Connection) obj_conn).close();
			}
		} catch (java.lang.Exception e) {
		}
	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
		connections.put("conn_tDBConnection_1",
				globalMap.get("conn_tDBConnection_1"));

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		}

	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" },
			{ "\\'", "\'" }, { "\\r", "\r" }, { "\\f", "\f" }, { "\\b", "\b" },
			{ "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex,
							index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left
			// into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 426180 characters generated by Talend Open Studio for Data Integration on the
 * November 27, 2019 11:32:40 AM EST
 ************************************************************************************************/

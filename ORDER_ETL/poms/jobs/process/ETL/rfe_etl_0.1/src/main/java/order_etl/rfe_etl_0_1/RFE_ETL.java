// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package order_etl.rfe_etl_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")
/**
 * Job: RFE_ETL Purpose: <br>
 * Description: Extract data from RightFind Enterprise (RFE) source tables and load them into staging tables, including dimension and fact tables. <br>
 * @author user@talend.com
 * @version 7.1.1.20181026_1147
 * @status 
 */
public class RFE_ETL implements TalendJob {

	protected static void logIgnoredError(String message, Throwable cause) {
		System.err.println(message);
		if (cause != null) {
			cause.printStackTrace();
		}

	}

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset
			.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

		}

	}

	private ContextProperties context = new ContextProperties();

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "RFE_ETL";
	private final String projectName = "ORDER_ETL";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(
			java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources
				.entrySet()) {
			talendDataSources.put(
					dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry
							.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap
				.put(KEY_DB_DATASOURCES_RAW,
						new java.util.HashMap<String, javax.sql.DataSource>(
								dataSources));
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
			new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent,
				final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null
						&& currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE",
							getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE",
						getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent
						+ " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					RFE_ETL.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass()
							.getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(RFE_ETL.this, new Object[] { e,
									currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tDBConnection_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBConnection_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBConnection_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_2_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBConnection_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tDBConnection_1 begin ] start
				 */

				ok_Hash.put("tDBConnection_1", false);
				start_Hash.put("tDBConnection_1", System.currentTimeMillis());

				currentComponent = "tDBConnection_1";

				int tos_count_tDBConnection_1 = 0;

				String url_tDBConnection_1 = "jdbc:jtds:sqlserver://"
						+ "devrfesqlapp.corp.infotrieve.com";
				String port_tDBConnection_1 = "1433";
				String dbname_tDBConnection_1 = "ReportServer";
				if (!"".equals(port_tDBConnection_1)) {
					url_tDBConnection_1 += ":" + "1433";
				}
				if (!"".equals(dbname_tDBConnection_1)) {

					url_tDBConnection_1 += "//" + "ReportServer";
				}
				url_tDBConnection_1 += ";appName=" + projectName + ";"
						+ "instance=devrfesqlapp";
				String dbUser_tDBConnection_1 = "gstreet";

				final String decryptedPassword_tDBConnection_1 = routines.system.PasswordEncryptUtil
						.decryptPassword("77f7954940c7cfe07391afd0016d8009");
				String dbPwd_tDBConnection_1 = decryptedPassword_tDBConnection_1;

				java.sql.Connection conn_tDBConnection_1 = null;

				String driverClass_tDBConnection_1 = "net.sourceforge.jtds.jdbc.Driver";
				java.lang.Class.forName(driverClass_tDBConnection_1);

				conn_tDBConnection_1 = java.sql.DriverManager.getConnection(
						url_tDBConnection_1, dbUser_tDBConnection_1,
						dbPwd_tDBConnection_1);

				globalMap.put("conn_tDBConnection_1", conn_tDBConnection_1);
				if (null != conn_tDBConnection_1) {

					conn_tDBConnection_1.setAutoCommit(false);
				}

				globalMap.put("dbschema_tDBConnection_1", "dbo");

				globalMap.put("db_tDBConnection_1", "ReportServer");

				globalMap.put("conn_tDBConnection_1", conn_tDBConnection_1);

				globalMap.put("shareIdentitySetting_tDBConnection_1", false);

				/**
				 * [tDBConnection_1 begin ] stop
				 */

				/**
				 * [tDBConnection_1 main ] start
				 */

				currentComponent = "tDBConnection_1";

				tos_count_tDBConnection_1++;

				/**
				 * [tDBConnection_1 main ] stop
				 */

				/**
				 * [tDBConnection_1 process_data_begin ] start
				 */

				currentComponent = "tDBConnection_1";

				/**
				 * [tDBConnection_1 process_data_begin ] stop
				 */

				/**
				 * [tDBConnection_1 process_data_end ] start
				 */

				currentComponent = "tDBConnection_1";

				/**
				 * [tDBConnection_1 process_data_end ] stop
				 */

				/**
				 * [tDBConnection_1 end ] start
				 */

				currentComponent = "tDBConnection_1";

				ok_Hash.put("tDBConnection_1", true);
				end_Hash.put("tDBConnection_1", System.currentTimeMillis());

				/**
				 * [tDBConnection_1 end ] stop
				 */
			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tDBConnection_1:OnSubjobOk1",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk1", 0, "ok");
			}

			tDBInput_1Process(globalMap);

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tDBConnection_1:OnSubjobOk2",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk2", 0, "ok");
			}

			tDBInput_2Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBConnection_1 finally ] start
				 */

				currentComponent = "tDBConnection_1";

				/**
				 * [tDBConnection_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 1);
	}

	public static class row1Struct implements
			routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_ORDER_ETL_RFE_ETL = new byte[0];
		static byte[] commonByteArray_ORDER_ETL_RFE_ETL = new byte[0];

		public int UserId;

		public int getUserId() {
			return this.UserId;
		}

		public int ClientId;

		public int getClientId() {
			return this.ClientId;
		}

		public String Email;

		public String getEmail() {
			return this.Email;
		}

		public String Password;

		public String getPassword() {
			return this.Password;
		}

		public String FriendlyName;

		public String getFriendlyName() {
			return this.FriendlyName;
		}

		public int DepartmentId;

		public int getDepartmentId() {
			return this.DepartmentId;
		}

		public int LocationId;

		public int getLocationId() {
			return this.LocationId;
		}

		public int ContactId;

		public int getContactId() {
			return this.ContactId;
		}

		public String PasswordSalt;

		public String getPasswordSalt() {
			return this.PasswordSalt;
		}

		public String PasswordQuestion;

		public String getPasswordQuestion() {
			return this.PasswordQuestion;
		}

		public String PasswordAnswer;

		public String getPasswordAnswer() {
			return this.PasswordAnswer;
		}

		public String AnswerSalt;

		public String getAnswerSalt() {
			return this.AnswerSalt;
		}

		public short Status;

		public short getStatus() {
			return this.Status;
		}

		public short IsLockedOut;

		public short getIsLockedOut() {
			return this.IsLockedOut;
		}

		public java.util.Date LastLoginTime;

		public java.util.Date getLastLoginTime() {
			return this.LastLoginTime;
		}

		public java.util.Date LastPasswordChangeTime;

		public java.util.Date getLastPasswordChangeTime() {
			return this.LastPasswordChangeTime;
		}

		public java.util.Date LastLockoutTime;

		public java.util.Date getLastLockoutTime() {
			return this.LastLockoutTime;
		}

		public java.util.Date LastActivityTime;

		public java.util.Date getLastActivityTime() {
			return this.LastActivityTime;
		}

		public int FpaCount;

		public int getFpaCount() {
			return this.FpaCount;
		}

		public java.util.Date FpaWindowStart;

		public java.util.Date getFpaWindowStart() {
			return this.FpaWindowStart;
		}

		public int FpaAnswerCount;

		public int getFpaAnswerCount() {
			return this.FpaAnswerCount;
		}

		public java.util.Date FpaAnswerWindowStart;

		public java.util.Date getFpaAnswerWindowStart() {
			return this.FpaAnswerWindowStart;
		}

		public String Comments;

		public String getComments() {
			return this.Comments;
		}

		public java.util.Date CreateTime;

		public java.util.Date getCreateTime() {
			return this.CreateTime;
		}

		public Object PriceLimit;

		public Object getPriceLimit() {
			return this.PriceLimit;
		}

		public short TimeZone;

		public short getTimeZone() {
			return this.TimeZone;
		}

		public int Culture;

		public int getCulture() {
			return this.Culture;
		}

		public java.util.Date LastUpdate;

		public java.util.Date getLastUpdate() {
			return this.LastUpdate;
		}

		public String CostCenterDefault;

		public String getCostCenterDefault() {
			return this.CostCenterDefault;
		}

		public String CustomId;

		public String getCustomId() {
			return this.CustomId;
		}

		public String BillRefDefault;

		public String getBillRefDefault() {
			return this.BillRefDefault;
		}

		public String PODefault;

		public String getPODefault() {
			return this.PODefault;
		}

		public String CustOrderDefault;

		public String getCustOrderDefault() {
			return this.CustOrderDefault;
		}

		public int ImpersonationGroup;

		public int getImpersonationGroup() {
			return this.ImpersonationGroup;
		}

		public short LinkoutHandling;

		public short getLinkoutHandling() {
			return this.LinkoutHandling;
		}

		public String ILLId;

		public String getILLId() {
			return this.ILLId;
		}

		public int BillingMethod;

		public int getBillingMethod() {
			return this.BillingMethod;
		}

		public int Language;

		public int getLanguage() {
			return this.Language;
		}

		public int SpecTreatment;

		public int getSpecTreatment() {
			return this.SpecTreatment;
		}

		public String JobTitle;

		public String getJobTitle() {
			return this.JobTitle;
		}

		public long ExternalId;

		public long getExternalId() {
			return this.ExternalId;
		}

		public String CustomIdScope;

		public String getCustomIdScope() {
			return this.CustomIdScope;
		}

		public int Sector;

		public int getSector() {
			return this.Sector;
		}

		public Object CurrentCreditAmount;

		public Object getCurrentCreditAmount() {
			return this.CurrentCreditAmount;
		}

		public Object LastCreditAmount;

		public Object getLastCreditAmount() {
			return this.LastCreditAmount;
		}

		public java.util.Date LastCreditDate;

		public java.util.Date getLastCreditDate() {
			return this.LastCreditDate;
		}

		public int MobileProviderId;

		public int getMobileProviderId() {
			return this.MobileProviderId;
		}

		public String AltPassword;

		public String getAltPassword() {
			return this.AltPassword;
		}

		public String BravoUsername;

		public String getBravoUsername() {
			return this.BravoUsername;
		}

		public String BravoPassword;

		public String getBravoPassword() {
			return this.BravoPassword;
		}

		public java.util.Date CreditAvailableDate;

		public java.util.Date getCreditAvailableDate() {
			return this.CreditAvailableDate;
		}

		public int DefaultUsageId;

		public int getDefaultUsageId() {
			return this.DefaultUsageId;
		}

		public String ExtTokenKey;

		public String getExtTokenKey() {
			return this.ExtTokenKey;
		}

		public java.util.Date SubjectAreaAutoUpdateDate;

		public java.util.Date getSubjectAreaAutoUpdateDate() {
			return this.SubjectAreaAutoUpdateDate;
		}

		public String ReqCCOverrides;

		public String getReqCCOverrides() {
			return this.ReqCCOverrides;
		}

		public short PriceQuoteHandling;

		public short getPriceQuoteHandling() {
			return this.PriceQuoteHandling;
		}

		public Object PriceQuoteIncreases;

		public Object getPriceQuoteIncreases() {
			return this.PriceQuoteIncreases;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ORDER_ETL_RFE_ETL.length) {
					if (length < 1024
							&& commonByteArray_ORDER_ETL_RFE_ETL.length == 0) {
						commonByteArray_ORDER_ETL_RFE_ETL = new byte[1024];
					} else {
						commonByteArray_ORDER_ETL_RFE_ETL = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ORDER_ETL_RFE_ETL, 0, length);
				strReturn = new String(commonByteArray_ORDER_ETL_RFE_ETL, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ORDER_ETL_RFE_ETL) {

				try {

					int length = 0;

					this.UserId = dis.readInt();

					this.ClientId = dis.readInt();

					this.Email = readString(dis);

					this.Password = readString(dis);

					this.FriendlyName = readString(dis);

					this.DepartmentId = dis.readInt();

					this.LocationId = dis.readInt();

					this.ContactId = dis.readInt();

					this.PasswordSalt = readString(dis);

					this.PasswordQuestion = readString(dis);

					this.PasswordAnswer = readString(dis);

					this.AnswerSalt = readString(dis);

					this.Status = dis.readShort();

					this.IsLockedOut = dis.readShort();

					this.LastLoginTime = readDate(dis);

					this.LastPasswordChangeTime = readDate(dis);

					this.LastLockoutTime = readDate(dis);

					this.LastActivityTime = readDate(dis);

					this.FpaCount = dis.readInt();

					this.FpaWindowStart = readDate(dis);

					this.FpaAnswerCount = dis.readInt();

					this.FpaAnswerWindowStart = readDate(dis);

					this.Comments = readString(dis);

					this.CreateTime = readDate(dis);

					this.PriceLimit = (Object) dis.readObject();

					this.TimeZone = dis.readShort();

					this.Culture = dis.readInt();

					this.LastUpdate = readDate(dis);

					this.CostCenterDefault = readString(dis);

					this.CustomId = readString(dis);

					this.BillRefDefault = readString(dis);

					this.PODefault = readString(dis);

					this.CustOrderDefault = readString(dis);

					this.ImpersonationGroup = dis.readInt();

					this.LinkoutHandling = dis.readShort();

					this.ILLId = readString(dis);

					this.BillingMethod = dis.readInt();

					this.Language = dis.readInt();

					this.SpecTreatment = dis.readInt();

					this.JobTitle = readString(dis);

					this.ExternalId = dis.readLong();

					this.CustomIdScope = readString(dis);

					this.Sector = dis.readInt();

					this.CurrentCreditAmount = (Object) dis.readObject();

					this.LastCreditAmount = (Object) dis.readObject();

					this.LastCreditDate = readDate(dis);

					this.MobileProviderId = dis.readInt();

					this.AltPassword = readString(dis);

					this.BravoUsername = readString(dis);

					this.BravoPassword = readString(dis);

					this.CreditAvailableDate = readDate(dis);

					this.DefaultUsageId = dis.readInt();

					this.ExtTokenKey = readString(dis);

					this.SubjectAreaAutoUpdateDate = readDate(dis);

					this.ReqCCOverrides = readString(dis);

					this.PriceQuoteHandling = dis.readShort();

					this.PriceQuoteIncreases = (Object) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.UserId);

				// int

				dos.writeInt(this.ClientId);

				// String

				writeString(this.Email, dos);

				// String

				writeString(this.Password, dos);

				// String

				writeString(this.FriendlyName, dos);

				// int

				dos.writeInt(this.DepartmentId);

				// int

				dos.writeInt(this.LocationId);

				// int

				dos.writeInt(this.ContactId);

				// String

				writeString(this.PasswordSalt, dos);

				// String

				writeString(this.PasswordQuestion, dos);

				// String

				writeString(this.PasswordAnswer, dos);

				// String

				writeString(this.AnswerSalt, dos);

				// short

				dos.writeShort(this.Status);

				// short

				dos.writeShort(this.IsLockedOut);

				// java.util.Date

				writeDate(this.LastLoginTime, dos);

				// java.util.Date

				writeDate(this.LastPasswordChangeTime, dos);

				// java.util.Date

				writeDate(this.LastLockoutTime, dos);

				// java.util.Date

				writeDate(this.LastActivityTime, dos);

				// int

				dos.writeInt(this.FpaCount);

				// java.util.Date

				writeDate(this.FpaWindowStart, dos);

				// int

				dos.writeInt(this.FpaAnswerCount);

				// java.util.Date

				writeDate(this.FpaAnswerWindowStart, dos);

				// String

				writeString(this.Comments, dos);

				// java.util.Date

				writeDate(this.CreateTime, dos);

				// Object

				dos.writeObject(this.PriceLimit);

				// short

				dos.writeShort(this.TimeZone);

				// int

				dos.writeInt(this.Culture);

				// java.util.Date

				writeDate(this.LastUpdate, dos);

				// String

				writeString(this.CostCenterDefault, dos);

				// String

				writeString(this.CustomId, dos);

				// String

				writeString(this.BillRefDefault, dos);

				// String

				writeString(this.PODefault, dos);

				// String

				writeString(this.CustOrderDefault, dos);

				// int

				dos.writeInt(this.ImpersonationGroup);

				// short

				dos.writeShort(this.LinkoutHandling);

				// String

				writeString(this.ILLId, dos);

				// int

				dos.writeInt(this.BillingMethod);

				// int

				dos.writeInt(this.Language);

				// int

				dos.writeInt(this.SpecTreatment);

				// String

				writeString(this.JobTitle, dos);

				// long

				dos.writeLong(this.ExternalId);

				// String

				writeString(this.CustomIdScope, dos);

				// int

				dos.writeInt(this.Sector);

				// Object

				dos.writeObject(this.CurrentCreditAmount);

				// Object

				dos.writeObject(this.LastCreditAmount);

				// java.util.Date

				writeDate(this.LastCreditDate, dos);

				// int

				dos.writeInt(this.MobileProviderId);

				// String

				writeString(this.AltPassword, dos);

				// String

				writeString(this.BravoUsername, dos);

				// String

				writeString(this.BravoPassword, dos);

				// java.util.Date

				writeDate(this.CreditAvailableDate, dos);

				// int

				dos.writeInt(this.DefaultUsageId);

				// String

				writeString(this.ExtTokenKey, dos);

				// java.util.Date

				writeDate(this.SubjectAreaAutoUpdateDate, dos);

				// String

				writeString(this.ReqCCOverrides, dos);

				// short

				dos.writeShort(this.PriceQuoteHandling);

				// Object

				dos.writeObject(this.PriceQuoteIncreases);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("UserId=" + String.valueOf(UserId));
			sb.append(",ClientId=" + String.valueOf(ClientId));
			sb.append(",Email=" + Email);
			sb.append(",Password=" + Password);
			sb.append(",FriendlyName=" + FriendlyName);
			sb.append(",DepartmentId=" + String.valueOf(DepartmentId));
			sb.append(",LocationId=" + String.valueOf(LocationId));
			sb.append(",ContactId=" + String.valueOf(ContactId));
			sb.append(",PasswordSalt=" + PasswordSalt);
			sb.append(",PasswordQuestion=" + PasswordQuestion);
			sb.append(",PasswordAnswer=" + PasswordAnswer);
			sb.append(",AnswerSalt=" + AnswerSalt);
			sb.append(",Status=" + String.valueOf(Status));
			sb.append(",IsLockedOut=" + String.valueOf(IsLockedOut));
			sb.append(",LastLoginTime=" + String.valueOf(LastLoginTime));
			sb.append(",LastPasswordChangeTime="
					+ String.valueOf(LastPasswordChangeTime));
			sb.append(",LastLockoutTime=" + String.valueOf(LastLockoutTime));
			sb.append(",LastActivityTime=" + String.valueOf(LastActivityTime));
			sb.append(",FpaCount=" + String.valueOf(FpaCount));
			sb.append(",FpaWindowStart=" + String.valueOf(FpaWindowStart));
			sb.append(",FpaAnswerCount=" + String.valueOf(FpaAnswerCount));
			sb.append(",FpaAnswerWindowStart="
					+ String.valueOf(FpaAnswerWindowStart));
			sb.append(",Comments=" + Comments);
			sb.append(",CreateTime=" + String.valueOf(CreateTime));
			sb.append(",PriceLimit=" + String.valueOf(PriceLimit));
			sb.append(",TimeZone=" + String.valueOf(TimeZone));
			sb.append(",Culture=" + String.valueOf(Culture));
			sb.append(",LastUpdate=" + String.valueOf(LastUpdate));
			sb.append(",CostCenterDefault=" + CostCenterDefault);
			sb.append(",CustomId=" + CustomId);
			sb.append(",BillRefDefault=" + BillRefDefault);
			sb.append(",PODefault=" + PODefault);
			sb.append(",CustOrderDefault=" + CustOrderDefault);
			sb.append(",ImpersonationGroup="
					+ String.valueOf(ImpersonationGroup));
			sb.append(",LinkoutHandling=" + String.valueOf(LinkoutHandling));
			sb.append(",ILLId=" + ILLId);
			sb.append(",BillingMethod=" + String.valueOf(BillingMethod));
			sb.append(",Language=" + String.valueOf(Language));
			sb.append(",SpecTreatment=" + String.valueOf(SpecTreatment));
			sb.append(",JobTitle=" + JobTitle);
			sb.append(",ExternalId=" + String.valueOf(ExternalId));
			sb.append(",CustomIdScope=" + CustomIdScope);
			sb.append(",Sector=" + String.valueOf(Sector));
			sb.append(",CurrentCreditAmount="
					+ String.valueOf(CurrentCreditAmount));
			sb.append(",LastCreditAmount=" + String.valueOf(LastCreditAmount));
			sb.append(",LastCreditDate=" + String.valueOf(LastCreditDate));
			sb.append(",MobileProviderId=" + String.valueOf(MobileProviderId));
			sb.append(",AltPassword=" + AltPassword);
			sb.append(",BravoUsername=" + BravoUsername);
			sb.append(",BravoPassword=" + BravoPassword);
			sb.append(",CreditAvailableDate="
					+ String.valueOf(CreditAvailableDate));
			sb.append(",DefaultUsageId=" + String.valueOf(DefaultUsageId));
			sb.append(",ExtTokenKey=" + ExtTokenKey);
			sb.append(",SubjectAreaAutoUpdateDate="
					+ String.valueOf(SubjectAreaAutoUpdateDate));
			sb.append(",ReqCCOverrides=" + ReqCCOverrides);
			sb.append(",PriceQuoteHandling="
					+ String.valueOf(PriceQuoteHandling));
			sb.append(",PriceQuoteIncreases="
					+ String.valueOf(PriceQuoteIncreases));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row1Struct row1 = new row1Struct();

				/**
				 * [tDBOutput_1 begin ] start
				 */

				ok_Hash.put("tDBOutput_1", false);
				start_Hash.put("tDBOutput_1", System.currentTimeMillis());

				currentComponent = "tDBOutput_1";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row1" + iterateId, 0, 0);

					}
				}

				int tos_count_tDBOutput_1 = 0;

				String dbschema_tDBOutput_1 = null;
				dbschema_tDBOutput_1 = "staging";

				String tableName_tDBOutput_1 = null;
				if (dbschema_tDBOutput_1 == null
						|| dbschema_tDBOutput_1.trim().length() == 0) {
					tableName_tDBOutput_1 = "stg_rfe_appuser";
				} else {
					tableName_tDBOutput_1 = dbschema_tDBOutput_1 + "\".\""
							+ "stg_rfe_appuser";
				}

				int nb_line_tDBOutput_1 = 0;
				int nb_line_update_tDBOutput_1 = 0;
				int nb_line_inserted_tDBOutput_1 = 0;
				int nb_line_deleted_tDBOutput_1 = 0;
				int nb_line_rejected_tDBOutput_1 = 0;

				int deletedCount_tDBOutput_1 = 0;
				int updatedCount_tDBOutput_1 = 0;
				int insertedCount_tDBOutput_1 = 0;
				int rejectedCount_tDBOutput_1 = 0;

				boolean whetherReject_tDBOutput_1 = false;

				java.sql.Connection conn_tDBOutput_1 = null;
				String dbUser_tDBOutput_1 = null;

				java.lang.Class.forName("org.postgresql.Driver");
				String url_tDBOutput_1 = "jdbc:postgresql://" + "localhost"
						+ ":" + "5432" + "/" + "rup";
				dbUser_tDBOutput_1 = "rup";

				final String decryptedPassword_tDBOutput_1 = routines.system.PasswordEncryptUtil
						.decryptPassword("544d653f2c2bdc61");

				String dbPwd_tDBOutput_1 = decryptedPassword_tDBOutput_1;

				conn_tDBOutput_1 = java.sql.DriverManager.getConnection(
						url_tDBOutput_1, dbUser_tDBOutput_1, dbPwd_tDBOutput_1);

				resourceMap.put("conn_tDBOutput_1", conn_tDBOutput_1);
				conn_tDBOutput_1.setAutoCommit(false);
				int commitEvery_tDBOutput_1 = 10000;
				int commitCounter_tDBOutput_1 = 0;

				int batchSize_tDBOutput_1 = 10000;
				int batchSizeCounter_tDBOutput_1 = 0;

				int count_tDBOutput_1 = 0;
				String insert_tDBOutput_1 = "INSERT INTO \""
						+ tableName_tDBOutput_1
						+ "\" (\"userid\",\"clientid\",\"email\",\"password\",\"friendlyname\",\"departmentid\",\"locationid\",\"contactid\",\"passwordsalt\",\"passwordquestion\",\"passwordanswer\",\"answersalt\",\"status\",\"islockedout\",\"lastlogintime\",\"lastpasswordchangetime\",\"lastlockouttime\",\"lastactivitytime\",\"fpacount\",\"fpawindowstart\",\"fpaanswercount\",\"fpaanswerwindowstart\",\"comments\",\"createtime\",\"pricelimit\",\"timezone\",\"culture\",\"lastupdate\",\"costcenterdefault\",\"customid\",\"billrefdefault\",\"podefault\",\"custorderdefault\",\"impersonationgroup\",\"linkouthandling\",\"illid\",\"billingmethod\",\"language\",\"spectreatment\",\"jobtitle\",\"externalid\",\"customidscope\",\"sector\",\"currentcreditamount\",\"lastcreditamount\",\"lastcreditdate\",\"mobileproviderid\",\"altpassword\",\"bravousername\",\"bravopassword\",\"creditavailabledate\",\"defaultusageid\",\"exttokenkey\",\"subjectareaautoupdatedate\",\"reqccoverrides\",\"pricequotehandling\",\"pricequoteincreases\") VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

				java.sql.PreparedStatement pstmt_tDBOutput_1 = conn_tDBOutput_1
						.prepareStatement(insert_tDBOutput_1);
				resourceMap.put("pstmt_tDBOutput_1", pstmt_tDBOutput_1);

				/**
				 * [tDBOutput_1 begin ] stop
				 */

				/**
				 * [tDBInput_1 begin ] start
				 */

				ok_Hash.put("tDBInput_1", false);
				start_Hash.put("tDBInput_1", System.currentTimeMillis());

				currentComponent = "tDBInput_1";

				int tos_count_tDBInput_1 = 0;

				org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_1 = org.talend.designer.components.util.mssql.MSSqlUtilFactory
						.getMSSqlGenerateTimestampUtil();

				java.util.List<String> talendToDBList_tDBInput_1 = new java.util.ArrayList();
				String[] talendToDBArray_tDBInput_1 = new String[] { "FLOAT",
						"NUMERIC", "NUMERIC IDENTITY", "DECIMAL",
						"DECIMAL IDENTITY", "REAL" };
				java.util.Collections.addAll(talendToDBList_tDBInput_1,
						talendToDBArray_tDBInput_1);
				int nb_line_tDBInput_1 = 0;
				java.sql.Connection conn_tDBInput_1 = null;
				conn_tDBInput_1 = (java.sql.Connection) globalMap
						.get("conn_tDBConnection_1");
				String dbschema_tDBInput_1 = (String) globalMap
						.get("dbschema_tDBConnection_1");

				java.sql.Statement stmt_tDBInput_1 = conn_tDBInput_1
						.createStatement();

				String dbquery_tDBInput_1 = "SELECT * FROM RFEDEV.dbo.AppUser";

				globalMap.put("tDBInput_1_QUERY", dbquery_tDBInput_1);
				java.sql.ResultSet rs_tDBInput_1 = null;

				try {
					rs_tDBInput_1 = stmt_tDBInput_1
							.executeQuery(dbquery_tDBInput_1);
					java.sql.ResultSetMetaData rsmd_tDBInput_1 = rs_tDBInput_1
							.getMetaData();
					int colQtyInRs_tDBInput_1 = rsmd_tDBInput_1
							.getColumnCount();

					String tmpContent_tDBInput_1 = null;

					while (rs_tDBInput_1.next()) {
						nb_line_tDBInput_1++;

						if (colQtyInRs_tDBInput_1 < 1) {
							row1.UserId = 0;
						} else {

							if (rs_tDBInput_1.getObject(1) != null) {
								row1.UserId = rs_tDBInput_1.getInt(1);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 2) {
							row1.ClientId = 0;
						} else {

							if (rs_tDBInput_1.getObject(2) != null) {
								row1.ClientId = rs_tDBInput_1.getInt(2);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 3) {
							row1.Email = null;
						} else {

							tmpContent_tDBInput_1 = rs_tDBInput_1.getString(3);
							if (tmpContent_tDBInput_1 != null) {
								if (talendToDBList_tDBInput_1
										.contains(rsmd_tDBInput_1
												.getColumnTypeName(3)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row1.Email = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_1);
								} else {
									row1.Email = tmpContent_tDBInput_1;
								}
							} else {
								row1.Email = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 4) {
							row1.Password = null;
						} else {

							tmpContent_tDBInput_1 = rs_tDBInput_1.getString(4);
							if (tmpContent_tDBInput_1 != null) {
								if (talendToDBList_tDBInput_1
										.contains(rsmd_tDBInput_1
												.getColumnTypeName(4)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row1.Password = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_1);
								} else {
									row1.Password = tmpContent_tDBInput_1;
								}
							} else {
								row1.Password = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 5) {
							row1.FriendlyName = null;
						} else {

							tmpContent_tDBInput_1 = rs_tDBInput_1.getString(5);
							if (tmpContent_tDBInput_1 != null) {
								if (talendToDBList_tDBInput_1
										.contains(rsmd_tDBInput_1
												.getColumnTypeName(5)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row1.FriendlyName = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_1);
								} else {
									row1.FriendlyName = tmpContent_tDBInput_1;
								}
							} else {
								row1.FriendlyName = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 6) {
							row1.DepartmentId = 0;
						} else {

							if (rs_tDBInput_1.getObject(6) != null) {
								row1.DepartmentId = rs_tDBInput_1.getInt(6);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 7) {
							row1.LocationId = 0;
						} else {

							if (rs_tDBInput_1.getObject(7) != null) {
								row1.LocationId = rs_tDBInput_1.getInt(7);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 8) {
							row1.ContactId = 0;
						} else {

							if (rs_tDBInput_1.getObject(8) != null) {
								row1.ContactId = rs_tDBInput_1.getInt(8);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 9) {
							row1.PasswordSalt = null;
						} else {

							tmpContent_tDBInput_1 = rs_tDBInput_1.getString(9);
							if (tmpContent_tDBInput_1 != null) {
								if (talendToDBList_tDBInput_1
										.contains(rsmd_tDBInput_1
												.getColumnTypeName(9)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row1.PasswordSalt = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_1);
								} else {
									row1.PasswordSalt = tmpContent_tDBInput_1;
								}
							} else {
								row1.PasswordSalt = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 10) {
							row1.PasswordQuestion = null;
						} else {

							tmpContent_tDBInput_1 = rs_tDBInput_1.getString(10);
							if (tmpContent_tDBInput_1 != null) {
								if (talendToDBList_tDBInput_1
										.contains(rsmd_tDBInput_1
												.getColumnTypeName(10)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row1.PasswordQuestion = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_1);
								} else {
									row1.PasswordQuestion = tmpContent_tDBInput_1;
								}
							} else {
								row1.PasswordQuestion = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 11) {
							row1.PasswordAnswer = null;
						} else {

							tmpContent_tDBInput_1 = rs_tDBInput_1.getString(11);
							if (tmpContent_tDBInput_1 != null) {
								if (talendToDBList_tDBInput_1
										.contains(rsmd_tDBInput_1
												.getColumnTypeName(11)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row1.PasswordAnswer = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_1);
								} else {
									row1.PasswordAnswer = tmpContent_tDBInput_1;
								}
							} else {
								row1.PasswordAnswer = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 12) {
							row1.AnswerSalt = null;
						} else {

							tmpContent_tDBInput_1 = rs_tDBInput_1.getString(12);
							if (tmpContent_tDBInput_1 != null) {
								if (talendToDBList_tDBInput_1
										.contains(rsmd_tDBInput_1
												.getColumnTypeName(12)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row1.AnswerSalt = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_1);
								} else {
									row1.AnswerSalt = tmpContent_tDBInput_1;
								}
							} else {
								row1.AnswerSalt = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 13) {
							row1.Status = 0;
						} else {

							if (rs_tDBInput_1.getObject(13) != null) {
								row1.Status = rs_tDBInput_1.getShort(13);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 14) {
							row1.IsLockedOut = 0;
						} else {

							if (rs_tDBInput_1.getObject(14) != null) {
								row1.IsLockedOut = rs_tDBInput_1.getShort(14);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 15) {
							row1.LastLoginTime = null;
						} else {

							row1.LastLoginTime = mssqlGTU_tDBInput_1.getDate(
									rsmd_tDBInput_1, rs_tDBInput_1, 15);

						}
						if (colQtyInRs_tDBInput_1 < 16) {
							row1.LastPasswordChangeTime = null;
						} else {

							row1.LastPasswordChangeTime = mssqlGTU_tDBInput_1
									.getDate(rsmd_tDBInput_1, rs_tDBInput_1, 16);

						}
						if (colQtyInRs_tDBInput_1 < 17) {
							row1.LastLockoutTime = null;
						} else {

							row1.LastLockoutTime = mssqlGTU_tDBInput_1.getDate(
									rsmd_tDBInput_1, rs_tDBInput_1, 17);

						}
						if (colQtyInRs_tDBInput_1 < 18) {
							row1.LastActivityTime = null;
						} else {

							row1.LastActivityTime = mssqlGTU_tDBInput_1
									.getDate(rsmd_tDBInput_1, rs_tDBInput_1, 18);

						}
						if (colQtyInRs_tDBInput_1 < 19) {
							row1.FpaCount = 0;
						} else {

							if (rs_tDBInput_1.getObject(19) != null) {
								row1.FpaCount = rs_tDBInput_1.getInt(19);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 20) {
							row1.FpaWindowStart = null;
						} else {

							row1.FpaWindowStart = mssqlGTU_tDBInput_1.getDate(
									rsmd_tDBInput_1, rs_tDBInput_1, 20);

						}
						if (colQtyInRs_tDBInput_1 < 21) {
							row1.FpaAnswerCount = 0;
						} else {

							if (rs_tDBInput_1.getObject(21) != null) {
								row1.FpaAnswerCount = rs_tDBInput_1.getInt(21);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 22) {
							row1.FpaAnswerWindowStart = null;
						} else {

							row1.FpaAnswerWindowStart = mssqlGTU_tDBInput_1
									.getDate(rsmd_tDBInput_1, rs_tDBInput_1, 22);

						}
						if (colQtyInRs_tDBInput_1 < 23) {
							row1.Comments = null;
						} else {

							tmpContent_tDBInput_1 = rs_tDBInput_1.getString(23);
							if (tmpContent_tDBInput_1 != null) {
								if (talendToDBList_tDBInput_1
										.contains(rsmd_tDBInput_1
												.getColumnTypeName(23)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row1.Comments = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_1);
								} else {
									row1.Comments = tmpContent_tDBInput_1;
								}
							} else {
								row1.Comments = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 24) {
							row1.CreateTime = null;
						} else {

							row1.CreateTime = mssqlGTU_tDBInput_1.getDate(
									rsmd_tDBInput_1, rs_tDBInput_1, 24);

						}
						if (colQtyInRs_tDBInput_1 < 25) {
							row1.PriceLimit = null;
						} else {

							if (rs_tDBInput_1.getObject(25) != null) {
								row1.PriceLimit = rs_tDBInput_1.getObject(25);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 26) {
							row1.TimeZone = 0;
						} else {

							if (rs_tDBInput_1.getObject(26) != null) {
								row1.TimeZone = rs_tDBInput_1.getShort(26);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 27) {
							row1.Culture = 0;
						} else {

							if (rs_tDBInput_1.getObject(27) != null) {
								row1.Culture = rs_tDBInput_1.getInt(27);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 28) {
							row1.LastUpdate = null;
						} else {

							row1.LastUpdate = mssqlGTU_tDBInput_1.getDate(
									rsmd_tDBInput_1, rs_tDBInput_1, 28);

						}
						if (colQtyInRs_tDBInput_1 < 29) {
							row1.CostCenterDefault = null;
						} else {

							tmpContent_tDBInput_1 = rs_tDBInput_1.getString(29);
							if (tmpContent_tDBInput_1 != null) {
								if (talendToDBList_tDBInput_1
										.contains(rsmd_tDBInput_1
												.getColumnTypeName(29)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row1.CostCenterDefault = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_1);
								} else {
									row1.CostCenterDefault = tmpContent_tDBInput_1;
								}
							} else {
								row1.CostCenterDefault = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 30) {
							row1.CustomId = null;
						} else {

							tmpContent_tDBInput_1 = rs_tDBInput_1.getString(30);
							if (tmpContent_tDBInput_1 != null) {
								if (talendToDBList_tDBInput_1
										.contains(rsmd_tDBInput_1
												.getColumnTypeName(30)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row1.CustomId = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_1);
								} else {
									row1.CustomId = tmpContent_tDBInput_1;
								}
							} else {
								row1.CustomId = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 31) {
							row1.BillRefDefault = null;
						} else {

							tmpContent_tDBInput_1 = rs_tDBInput_1.getString(31);
							if (tmpContent_tDBInput_1 != null) {
								if (talendToDBList_tDBInput_1
										.contains(rsmd_tDBInput_1
												.getColumnTypeName(31)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row1.BillRefDefault = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_1);
								} else {
									row1.BillRefDefault = tmpContent_tDBInput_1;
								}
							} else {
								row1.BillRefDefault = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 32) {
							row1.PODefault = null;
						} else {

							tmpContent_tDBInput_1 = rs_tDBInput_1.getString(32);
							if (tmpContent_tDBInput_1 != null) {
								if (talendToDBList_tDBInput_1
										.contains(rsmd_tDBInput_1
												.getColumnTypeName(32)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row1.PODefault = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_1);
								} else {
									row1.PODefault = tmpContent_tDBInput_1;
								}
							} else {
								row1.PODefault = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 33) {
							row1.CustOrderDefault = null;
						} else {

							tmpContent_tDBInput_1 = rs_tDBInput_1.getString(33);
							if (tmpContent_tDBInput_1 != null) {
								if (talendToDBList_tDBInput_1
										.contains(rsmd_tDBInput_1
												.getColumnTypeName(33)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row1.CustOrderDefault = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_1);
								} else {
									row1.CustOrderDefault = tmpContent_tDBInput_1;
								}
							} else {
								row1.CustOrderDefault = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 34) {
							row1.ImpersonationGroup = 0;
						} else {

							if (rs_tDBInput_1.getObject(34) != null) {
								row1.ImpersonationGroup = rs_tDBInput_1
										.getInt(34);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 35) {
							row1.LinkoutHandling = 0;
						} else {

							if (rs_tDBInput_1.getObject(35) != null) {
								row1.LinkoutHandling = rs_tDBInput_1
										.getShort(35);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 36) {
							row1.ILLId = null;
						} else {

							tmpContent_tDBInput_1 = rs_tDBInput_1.getString(36);
							if (tmpContent_tDBInput_1 != null) {
								if (talendToDBList_tDBInput_1
										.contains(rsmd_tDBInput_1
												.getColumnTypeName(36)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row1.ILLId = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_1);
								} else {
									row1.ILLId = tmpContent_tDBInput_1;
								}
							} else {
								row1.ILLId = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 37) {
							row1.BillingMethod = 0;
						} else {

							if (rs_tDBInput_1.getObject(37) != null) {
								row1.BillingMethod = rs_tDBInput_1.getInt(37);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 38) {
							row1.Language = 0;
						} else {

							if (rs_tDBInput_1.getObject(38) != null) {
								row1.Language = rs_tDBInput_1.getInt(38);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 39) {
							row1.SpecTreatment = 0;
						} else {

							if (rs_tDBInput_1.getObject(39) != null) {
								row1.SpecTreatment = rs_tDBInput_1.getInt(39);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 40) {
							row1.JobTitle = null;
						} else {

							tmpContent_tDBInput_1 = rs_tDBInput_1.getString(40);
							if (tmpContent_tDBInput_1 != null) {
								if (talendToDBList_tDBInput_1
										.contains(rsmd_tDBInput_1
												.getColumnTypeName(40)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row1.JobTitle = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_1);
								} else {
									row1.JobTitle = tmpContent_tDBInput_1;
								}
							} else {
								row1.JobTitle = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 41) {
							row1.ExternalId = 0;
						} else {

							if (rs_tDBInput_1.getObject(41) != null) {
								row1.ExternalId = rs_tDBInput_1.getLong(41);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 42) {
							row1.CustomIdScope = null;
						} else {

							tmpContent_tDBInput_1 = rs_tDBInput_1.getString(42);
							if (tmpContent_tDBInput_1 != null) {
								if (talendToDBList_tDBInput_1
										.contains(rsmd_tDBInput_1
												.getColumnTypeName(42)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row1.CustomIdScope = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_1);
								} else {
									row1.CustomIdScope = tmpContent_tDBInput_1;
								}
							} else {
								row1.CustomIdScope = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 43) {
							row1.Sector = 0;
						} else {

							if (rs_tDBInput_1.getObject(43) != null) {
								row1.Sector = rs_tDBInput_1.getInt(43);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 44) {
							row1.CurrentCreditAmount = null;
						} else {

							if (rs_tDBInput_1.getObject(44) != null) {
								row1.CurrentCreditAmount = rs_tDBInput_1
										.getObject(44);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 45) {
							row1.LastCreditAmount = null;
						} else {

							if (rs_tDBInput_1.getObject(45) != null) {
								row1.LastCreditAmount = rs_tDBInput_1
										.getObject(45);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 46) {
							row1.LastCreditDate = null;
						} else {

							row1.LastCreditDate = mssqlGTU_tDBInput_1.getDate(
									rsmd_tDBInput_1, rs_tDBInput_1, 46);

						}
						if (colQtyInRs_tDBInput_1 < 47) {
							row1.MobileProviderId = 0;
						} else {

							if (rs_tDBInput_1.getObject(47) != null) {
								row1.MobileProviderId = rs_tDBInput_1
										.getInt(47);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 48) {
							row1.AltPassword = null;
						} else {

							tmpContent_tDBInput_1 = rs_tDBInput_1.getString(48);
							if (tmpContent_tDBInput_1 != null) {
								if (talendToDBList_tDBInput_1
										.contains(rsmd_tDBInput_1
												.getColumnTypeName(48)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row1.AltPassword = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_1);
								} else {
									row1.AltPassword = tmpContent_tDBInput_1;
								}
							} else {
								row1.AltPassword = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 49) {
							row1.BravoUsername = null;
						} else {

							tmpContent_tDBInput_1 = rs_tDBInput_1.getString(49);
							if (tmpContent_tDBInput_1 != null) {
								if (talendToDBList_tDBInput_1
										.contains(rsmd_tDBInput_1
												.getColumnTypeName(49)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row1.BravoUsername = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_1);
								} else {
									row1.BravoUsername = tmpContent_tDBInput_1;
								}
							} else {
								row1.BravoUsername = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 50) {
							row1.BravoPassword = null;
						} else {

							tmpContent_tDBInput_1 = rs_tDBInput_1.getString(50);
							if (tmpContent_tDBInput_1 != null) {
								if (talendToDBList_tDBInput_1
										.contains(rsmd_tDBInput_1
												.getColumnTypeName(50)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row1.BravoPassword = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_1);
								} else {
									row1.BravoPassword = tmpContent_tDBInput_1;
								}
							} else {
								row1.BravoPassword = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 51) {
							row1.CreditAvailableDate = null;
						} else {

							row1.CreditAvailableDate = mssqlGTU_tDBInput_1
									.getDate(rsmd_tDBInput_1, rs_tDBInput_1, 51);

						}
						if (colQtyInRs_tDBInput_1 < 52) {
							row1.DefaultUsageId = 0;
						} else {

							if (rs_tDBInput_1.getObject(52) != null) {
								row1.DefaultUsageId = rs_tDBInput_1.getInt(52);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 53) {
							row1.ExtTokenKey = null;
						} else {

							tmpContent_tDBInput_1 = rs_tDBInput_1.getString(53);
							if (tmpContent_tDBInput_1 != null) {
								if (talendToDBList_tDBInput_1
										.contains(rsmd_tDBInput_1
												.getColumnTypeName(53)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row1.ExtTokenKey = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_1);
								} else {
									row1.ExtTokenKey = tmpContent_tDBInput_1;
								}
							} else {
								row1.ExtTokenKey = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 54) {
							row1.SubjectAreaAutoUpdateDate = null;
						} else {

							row1.SubjectAreaAutoUpdateDate = mssqlGTU_tDBInput_1
									.getDate(rsmd_tDBInput_1, rs_tDBInput_1, 54);

						}
						if (colQtyInRs_tDBInput_1 < 55) {
							row1.ReqCCOverrides = null;
						} else {

							tmpContent_tDBInput_1 = rs_tDBInput_1.getString(55);
							if (tmpContent_tDBInput_1 != null) {
								if (talendToDBList_tDBInput_1
										.contains(rsmd_tDBInput_1
												.getColumnTypeName(55)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row1.ReqCCOverrides = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_1);
								} else {
									row1.ReqCCOverrides = tmpContent_tDBInput_1;
								}
							} else {
								row1.ReqCCOverrides = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 56) {
							row1.PriceQuoteHandling = 0;
						} else {

							if (rs_tDBInput_1.getObject(56) != null) {
								row1.PriceQuoteHandling = rs_tDBInput_1
										.getShort(56);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 57) {
							row1.PriceQuoteIncreases = null;
						} else {

							if (rs_tDBInput_1.getObject(57) != null) {
								row1.PriceQuoteIncreases = rs_tDBInput_1
										.getObject(57);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}

						/**
						 * [tDBInput_1 begin ] stop
						 */

						/**
						 * [tDBInput_1 main ] start
						 */

						currentComponent = "tDBInput_1";

						tos_count_tDBInput_1++;

						/**
						 * [tDBInput_1 main ] stop
						 */

						/**
						 * [tDBInput_1 process_data_begin ] start
						 */

						currentComponent = "tDBInput_1";

						/**
						 * [tDBInput_1 process_data_begin ] stop
						 */

						/**
						 * [tDBOutput_1 main ] start
						 */

						currentComponent = "tDBOutput_1";

						// row1
						// row1

						if (execStat) {
							runStat.updateStatOnConnection("row1" + iterateId,
									1, 1);
						}

						whetherReject_tDBOutput_1 = false;
						pstmt_tDBOutput_1.setInt(1, row1.UserId);

						pstmt_tDBOutput_1.setInt(2, row1.ClientId);

						if (row1.Email == null) {
							pstmt_tDBOutput_1
									.setNull(3, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(3, row1.Email);
						}

						if (row1.Password == null) {
							pstmt_tDBOutput_1
									.setNull(4, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(4, row1.Password);
						}

						if (row1.FriendlyName == null) {
							pstmt_tDBOutput_1
									.setNull(5, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(5, row1.FriendlyName);
						}

						pstmt_tDBOutput_1.setInt(6, row1.DepartmentId);

						pstmt_tDBOutput_1.setInt(7, row1.LocationId);

						pstmt_tDBOutput_1.setInt(8, row1.ContactId);

						if (row1.PasswordSalt == null) {
							pstmt_tDBOutput_1
									.setNull(9, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(9, row1.PasswordSalt);
						}

						if (row1.PasswordQuestion == null) {
							pstmt_tDBOutput_1.setNull(10,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(10,
									row1.PasswordQuestion);
						}

						if (row1.PasswordAnswer == null) {
							pstmt_tDBOutput_1.setNull(11,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1
									.setString(11, row1.PasswordAnswer);
						}

						if (row1.AnswerSalt == null) {
							pstmt_tDBOutput_1.setNull(12,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(12, row1.AnswerSalt);
						}

						pstmt_tDBOutput_1.setShort(13, row1.Status);

						pstmt_tDBOutput_1.setShort(14, row1.IsLockedOut);

						if (row1.LastLoginTime != null) {
							pstmt_tDBOutput_1.setTimestamp(
									15,
									new java.sql.Timestamp(row1.LastLoginTime
											.getTime()));
						} else {
							pstmt_tDBOutput_1.setNull(15,
									java.sql.Types.TIMESTAMP);
						}

						if (row1.LastPasswordChangeTime != null) {
							pstmt_tDBOutput_1.setTimestamp(
									16,
									new java.sql.Timestamp(
											row1.LastPasswordChangeTime
													.getTime()));
						} else {
							pstmt_tDBOutput_1.setNull(16,
									java.sql.Types.TIMESTAMP);
						}

						if (row1.LastLockoutTime != null) {
							pstmt_tDBOutput_1.setTimestamp(
									17,
									new java.sql.Timestamp(row1.LastLockoutTime
											.getTime()));
						} else {
							pstmt_tDBOutput_1.setNull(17,
									java.sql.Types.TIMESTAMP);
						}

						if (row1.LastActivityTime != null) {
							pstmt_tDBOutput_1.setTimestamp(18,
									new java.sql.Timestamp(
											row1.LastActivityTime.getTime()));
						} else {
							pstmt_tDBOutput_1.setNull(18,
									java.sql.Types.TIMESTAMP);
						}

						pstmt_tDBOutput_1.setInt(19, row1.FpaCount);

						if (row1.FpaWindowStart != null) {
							pstmt_tDBOutput_1.setTimestamp(
									20,
									new java.sql.Timestamp(row1.FpaWindowStart
											.getTime()));
						} else {
							pstmt_tDBOutput_1.setNull(20,
									java.sql.Types.TIMESTAMP);
						}

						pstmt_tDBOutput_1.setInt(21, row1.FpaAnswerCount);

						if (row1.FpaAnswerWindowStart != null) {
							pstmt_tDBOutput_1
									.setTimestamp(
											22,
											new java.sql.Timestamp(
													row1.FpaAnswerWindowStart
															.getTime()));
						} else {
							pstmt_tDBOutput_1.setNull(22,
									java.sql.Types.TIMESTAMP);
						}

						if (row1.Comments == null) {
							pstmt_tDBOutput_1.setNull(23,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(23, row1.Comments);
						}

						if (row1.CreateTime != null) {
							pstmt_tDBOutput_1.setTimestamp(
									24,
									new java.sql.Timestamp(row1.CreateTime
											.getTime()));
						} else {
							pstmt_tDBOutput_1.setNull(24,
									java.sql.Types.TIMESTAMP);
						}

						if (row1.PriceLimit == null) {
							pstmt_tDBOutput_1.setNull(25, java.sql.Types.OTHER);
						} else {
							pstmt_tDBOutput_1.setObject(25, row1.PriceLimit);
						}

						pstmt_tDBOutput_1.setShort(26, row1.TimeZone);

						pstmt_tDBOutput_1.setInt(27, row1.Culture);

						if (row1.LastUpdate != null) {
							pstmt_tDBOutput_1.setTimestamp(
									28,
									new java.sql.Timestamp(row1.LastUpdate
											.getTime()));
						} else {
							pstmt_tDBOutput_1.setNull(28,
									java.sql.Types.TIMESTAMP);
						}

						if (row1.CostCenterDefault == null) {
							pstmt_tDBOutput_1.setNull(29,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(29,
									row1.CostCenterDefault);
						}

						if (row1.CustomId == null) {
							pstmt_tDBOutput_1.setNull(30,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(30, row1.CustomId);
						}

						if (row1.BillRefDefault == null) {
							pstmt_tDBOutput_1.setNull(31,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1
									.setString(31, row1.BillRefDefault);
						}

						if (row1.PODefault == null) {
							pstmt_tDBOutput_1.setNull(32,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(32, row1.PODefault);
						}

						if (row1.CustOrderDefault == null) {
							pstmt_tDBOutput_1.setNull(33,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(33,
									row1.CustOrderDefault);
						}

						pstmt_tDBOutput_1.setInt(34, row1.ImpersonationGroup);

						pstmt_tDBOutput_1.setShort(35, row1.LinkoutHandling);

						if (row1.ILLId == null) {
							pstmt_tDBOutput_1.setNull(36,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(36, row1.ILLId);
						}

						pstmt_tDBOutput_1.setInt(37, row1.BillingMethod);

						pstmt_tDBOutput_1.setInt(38, row1.Language);

						pstmt_tDBOutput_1.setInt(39, row1.SpecTreatment);

						if (row1.JobTitle == null) {
							pstmt_tDBOutput_1.setNull(40,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(40, row1.JobTitle);
						}

						pstmt_tDBOutput_1.setLong(41, row1.ExternalId);

						if (row1.CustomIdScope == null) {
							pstmt_tDBOutput_1.setNull(42,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(42, row1.CustomIdScope);
						}

						pstmt_tDBOutput_1.setInt(43, row1.Sector);

						if (row1.CurrentCreditAmount == null) {
							pstmt_tDBOutput_1.setNull(44, java.sql.Types.OTHER);
						} else {
							pstmt_tDBOutput_1.setObject(44,
									row1.CurrentCreditAmount);
						}

						if (row1.LastCreditAmount == null) {
							pstmt_tDBOutput_1.setNull(45, java.sql.Types.OTHER);
						} else {
							pstmt_tDBOutput_1.setObject(45,
									row1.LastCreditAmount);
						}

						if (row1.LastCreditDate != null) {
							pstmt_tDBOutput_1.setTimestamp(
									46,
									new java.sql.Timestamp(row1.LastCreditDate
											.getTime()));
						} else {
							pstmt_tDBOutput_1.setNull(46,
									java.sql.Types.TIMESTAMP);
						}

						pstmt_tDBOutput_1.setInt(47, row1.MobileProviderId);

						if (row1.AltPassword == null) {
							pstmt_tDBOutput_1.setNull(48,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(48, row1.AltPassword);
						}

						if (row1.BravoUsername == null) {
							pstmt_tDBOutput_1.setNull(49,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(49, row1.BravoUsername);
						}

						if (row1.BravoPassword == null) {
							pstmt_tDBOutput_1.setNull(50,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(50, row1.BravoPassword);
						}

						if (row1.CreditAvailableDate != null) {
							pstmt_tDBOutput_1
									.setTimestamp(51, new java.sql.Timestamp(
											row1.CreditAvailableDate.getTime()));
						} else {
							pstmt_tDBOutput_1.setNull(51,
									java.sql.Types.TIMESTAMP);
						}

						pstmt_tDBOutput_1.setInt(52, row1.DefaultUsageId);

						if (row1.ExtTokenKey == null) {
							pstmt_tDBOutput_1.setNull(53,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(53, row1.ExtTokenKey);
						}

						if (row1.SubjectAreaAutoUpdateDate != null) {
							pstmt_tDBOutput_1.setTimestamp(
									54,
									new java.sql.Timestamp(
											row1.SubjectAreaAutoUpdateDate
													.getTime()));
						} else {
							pstmt_tDBOutput_1.setNull(54,
									java.sql.Types.TIMESTAMP);
						}

						if (row1.ReqCCOverrides == null) {
							pstmt_tDBOutput_1.setNull(55,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1
									.setString(55, row1.ReqCCOverrides);
						}

						pstmt_tDBOutput_1.setShort(56, row1.PriceQuoteHandling);

						if (row1.PriceQuoteIncreases == null) {
							pstmt_tDBOutput_1.setNull(57, java.sql.Types.OTHER);
						} else {
							pstmt_tDBOutput_1.setObject(57,
									row1.PriceQuoteIncreases);
						}

						pstmt_tDBOutput_1.addBatch();
						nb_line_tDBOutput_1++;

						batchSizeCounter_tDBOutput_1++;

						if ((batchSize_tDBOutput_1 > 0)
								&& (batchSize_tDBOutput_1 <= batchSizeCounter_tDBOutput_1)) {
							try {
								int countSum_tDBOutput_1 = 0;

								for (int countEach_tDBOutput_1 : pstmt_tDBOutput_1
										.executeBatch()) {
									countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0
											: countEach_tDBOutput_1);
								}

								insertedCount_tDBOutput_1 += countSum_tDBOutput_1;

								batchSizeCounter_tDBOutput_1 = 0;
							} catch (java.sql.BatchUpdateException e_tDBOutput_1) {
								java.sql.SQLException ne_tDBOutput_1 = e_tDBOutput_1
										.getNextException(), sqle_tDBOutput_1 = null;
								String errormessage_tDBOutput_1;
								if (ne_tDBOutput_1 != null) {
									// build new exception to provide the
									// original cause
									sqle_tDBOutput_1 = new java.sql.SQLException(
											e_tDBOutput_1.getMessage()
													+ "\ncaused by: "
													+ ne_tDBOutput_1
															.getMessage(),
											ne_tDBOutput_1.getSQLState(),
											ne_tDBOutput_1.getErrorCode(),
											ne_tDBOutput_1);
									errormessage_tDBOutput_1 = sqle_tDBOutput_1
											.getMessage();
								} else {
									errormessage_tDBOutput_1 = e_tDBOutput_1
											.getMessage();
								}

								int countSum_tDBOutput_1 = 0;
								for (int countEach_tDBOutput_1 : e_tDBOutput_1
										.getUpdateCounts()) {
									countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0
											: countEach_tDBOutput_1);
								}

								insertedCount_tDBOutput_1 += countSum_tDBOutput_1;

								System.err.println(errormessage_tDBOutput_1);

							}
						}

						commitCounter_tDBOutput_1++;
						if (commitEvery_tDBOutput_1 <= commitCounter_tDBOutput_1) {
							if ((batchSize_tDBOutput_1 > 0)
									&& (batchSizeCounter_tDBOutput_1 > 0)) {
								try {
									int countSum_tDBOutput_1 = 0;

									for (int countEach_tDBOutput_1 : pstmt_tDBOutput_1
											.executeBatch()) {
										countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0
												: countEach_tDBOutput_1);
									}

									insertedCount_tDBOutput_1 += countSum_tDBOutput_1;

									batchSizeCounter_tDBOutput_1 = 0;
								} catch (java.sql.BatchUpdateException e_tDBOutput_1) {
									java.sql.SQLException ne_tDBOutput_1 = e_tDBOutput_1
											.getNextException(), sqle_tDBOutput_1 = null;
									String errormessage_tDBOutput_1;
									if (ne_tDBOutput_1 != null) {
										// build new exception to provide the
										// original cause
										sqle_tDBOutput_1 = new java.sql.SQLException(
												e_tDBOutput_1.getMessage()
														+ "\ncaused by: "
														+ ne_tDBOutput_1
																.getMessage(),
												ne_tDBOutput_1.getSQLState(),
												ne_tDBOutput_1.getErrorCode(),
												ne_tDBOutput_1);
										errormessage_tDBOutput_1 = sqle_tDBOutput_1
												.getMessage();
									} else {
										errormessage_tDBOutput_1 = e_tDBOutput_1
												.getMessage();
									}

									int countSum_tDBOutput_1 = 0;
									for (int countEach_tDBOutput_1 : e_tDBOutput_1
											.getUpdateCounts()) {
										countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0
												: countEach_tDBOutput_1);
									}

									insertedCount_tDBOutput_1 += countSum_tDBOutput_1;

									System.err
											.println(errormessage_tDBOutput_1);

								}
							}
							conn_tDBOutput_1.commit();

							commitCounter_tDBOutput_1 = 0;
						}

						tos_count_tDBOutput_1++;

						/**
						 * [tDBOutput_1 main ] stop
						 */

						/**
						 * [tDBOutput_1 process_data_begin ] start
						 */

						currentComponent = "tDBOutput_1";

						/**
						 * [tDBOutput_1 process_data_begin ] stop
						 */

						/**
						 * [tDBOutput_1 process_data_end ] start
						 */

						currentComponent = "tDBOutput_1";

						/**
						 * [tDBOutput_1 process_data_end ] stop
						 */

						/**
						 * [tDBInput_1 process_data_end ] start
						 */

						currentComponent = "tDBInput_1";

						/**
						 * [tDBInput_1 process_data_end ] stop
						 */

						/**
						 * [tDBInput_1 end ] start
						 */

						currentComponent = "tDBInput_1";

					}
				} finally {
					if (rs_tDBInput_1 != null) {
						rs_tDBInput_1.close();
					}
					if (stmt_tDBInput_1 != null) {
						stmt_tDBInput_1.close();
					}
				}
				globalMap.put("tDBInput_1_NB_LINE", nb_line_tDBInput_1);

				ok_Hash.put("tDBInput_1", true);
				end_Hash.put("tDBInput_1", System.currentTimeMillis());

				/**
				 * [tDBInput_1 end ] stop
				 */

				/**
				 * [tDBOutput_1 end ] start
				 */

				currentComponent = "tDBOutput_1";

				try {
					int countSum_tDBOutput_1 = 0;
					if (pstmt_tDBOutput_1 != null
							&& batchSizeCounter_tDBOutput_1 > 0) {

						for (int countEach_tDBOutput_1 : pstmt_tDBOutput_1
								.executeBatch()) {
							countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0
									: countEach_tDBOutput_1);
						}

					}

					insertedCount_tDBOutput_1 += countSum_tDBOutput_1;

				} catch (java.sql.BatchUpdateException e_tDBOutput_1) {
					java.sql.SQLException ne_tDBOutput_1 = e_tDBOutput_1
							.getNextException(), sqle_tDBOutput_1 = null;
					String errormessage_tDBOutput_1;
					if (ne_tDBOutput_1 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_1 = new java.sql.SQLException(
								e_tDBOutput_1.getMessage() + "\ncaused by: "
										+ ne_tDBOutput_1.getMessage(),
								ne_tDBOutput_1.getSQLState(),
								ne_tDBOutput_1.getErrorCode(), ne_tDBOutput_1);
						errormessage_tDBOutput_1 = sqle_tDBOutput_1
								.getMessage();
					} else {
						errormessage_tDBOutput_1 = e_tDBOutput_1.getMessage();
					}

					int countSum_tDBOutput_1 = 0;
					for (int countEach_tDBOutput_1 : e_tDBOutput_1
							.getUpdateCounts()) {
						countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0
								: countEach_tDBOutput_1);
					}

					insertedCount_tDBOutput_1 += countSum_tDBOutput_1;

					System.err.println(errormessage_tDBOutput_1);

				}

				if (pstmt_tDBOutput_1 != null) {

					pstmt_tDBOutput_1.close();
					resourceMap.remove("pstmt_tDBOutput_1");
				}
				resourceMap.put("statementClosed_tDBOutput_1", true);

				conn_tDBOutput_1.commit();

				conn_tDBOutput_1.close();

				resourceMap.put("finish_tDBOutput_1", true);

				nb_line_deleted_tDBOutput_1 = nb_line_deleted_tDBOutput_1
						+ deletedCount_tDBOutput_1;
				nb_line_update_tDBOutput_1 = nb_line_update_tDBOutput_1
						+ updatedCount_tDBOutput_1;
				nb_line_inserted_tDBOutput_1 = nb_line_inserted_tDBOutput_1
						+ insertedCount_tDBOutput_1;
				nb_line_rejected_tDBOutput_1 = nb_line_rejected_tDBOutput_1
						+ rejectedCount_tDBOutput_1;

				globalMap.put("tDBOutput_1_NB_LINE", nb_line_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_UPDATED",
						nb_line_update_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_INSERTED",
						nb_line_inserted_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_DELETED",
						nb_line_deleted_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_REJECTED",
						nb_line_rejected_tDBOutput_1);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row1" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tDBOutput_1", true);
				end_Hash.put("tDBOutput_1", System.currentTimeMillis());

				/**
				 * [tDBOutput_1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_1 finally ] start
				 */

				currentComponent = "tDBInput_1";

				/**
				 * [tDBInput_1 finally ] stop
				 */

				/**
				 * [tDBOutput_1 finally ] start
				 */

				currentComponent = "tDBOutput_1";

				try {
					if (resourceMap.get("statementClosed_tDBOutput_1") == null) {
						java.sql.PreparedStatement pstmtToClose_tDBOutput_1 = null;
						if ((pstmtToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmt_tDBOutput_1")) != null) {
							pstmtToClose_tDBOutput_1.close();
						}
					}
				} finally {
					if (resourceMap.get("finish_tDBOutput_1") == null) {
						java.sql.Connection ctn_tDBOutput_1 = null;
						if ((ctn_tDBOutput_1 = (java.sql.Connection) resourceMap
								.get("conn_tDBOutput_1")) != null) {
							try {
								ctn_tDBOutput_1.close();
							} catch (java.sql.SQLException sqlEx_tDBOutput_1) {
								String errorMessage_tDBOutput_1 = "failed to close the connection in tDBOutput_1 :"
										+ sqlEx_tDBOutput_1.getMessage();
								System.err.println(errorMessage_tDBOutput_1);
							}
						}
					}
				}

				/**
				 * [tDBOutput_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 1);
	}

	public static class row2Struct implements
			routines.system.IPersistableRow<row2Struct> {
		final static byte[] commonByteArrayLock_ORDER_ETL_RFE_ETL = new byte[0];
		static byte[] commonByteArray_ORDER_ETL_RFE_ETL = new byte[0];

		public int OrderItemId;

		public int getOrderItemId() {
			return this.OrderItemId;
		}

		public short Type;

		public short getType() {
			return this.Type;
		}

		public short ItemType;

		public short getItemType() {
			return this.ItemType;
		}

		public short Status;

		public short getStatus() {
			return this.Status;
		}

		public short CopyrightStatus;

		public short getCopyrightStatus() {
			return this.CopyrightStatus;
		}

		public short CloseReason;

		public short getCloseReason() {
			return this.CloseReason;
		}

		public java.util.Date CreatedTime;

		public java.util.Date getCreatedTime() {
			return this.CreatedTime;
		}

		public String CreatedByEmail;

		public String getCreatedByEmail() {
			return this.CreatedByEmail;
		}

		public String CreatedByName;

		public String getCreatedByName() {
			return this.CreatedByName;
		}

		public String Usage;

		public String getUsage() {
			return this.Usage;
		}

		public String UserEmail;

		public String getUserEmail() {
			return this.UserEmail;
		}

		public String UserName;

		public String getUserName() {
			return this.UserName;
		}

		public short PageCount;

		public short getPageCount() {
			return this.PageCount;
		}

		public short DeliveryUrgency;

		public short getDeliveryUrgency() {
			return this.DeliveryUrgency;
		}

		public java.util.Date NeededByDate;

		public java.util.Date getNeededByDate() {
			return this.NeededByDate;
		}

		public java.util.Date PromisedDate;

		public java.util.Date getPromisedDate() {
			return this.PromisedDate;
		}

		public Object FeeTransaction;

		public Object getFeeTransaction() {
			return this.FeeTransaction;
		}

		public Object FeeCR;

		public Object getFeeCR() {
			return this.FeeCR;
		}

		public Object FeeCRServices;

		public Object getFeeCRServices() {
			return this.FeeCRServices;
		}

		public Object FeeFF;

		public Object getFeeFF() {
			return this.FeeFF;
		}

		public Object FeeAdvRef;

		public Object getFeeAdvRef() {
			return this.FeeAdvRef;
		}

		public Object FeeSH;

		public Object getFeeSH() {
			return this.FeeSH;
		}

		public Object FeeOther;

		public Object getFeeOther() {
			return this.FeeOther;
		}

		public Object FeeTax;

		public Object getFeeTax() {
			return this.FeeTax;
		}

		public Object FeeTotal;

		public Object getFeeTotal() {
			return this.FeeTotal;
		}

		public String Link;

		public String getLink() {
			return this.Link;
		}

		public java.util.Date LinkExpiration;

		public java.util.Date getLinkExpiration() {
			return this.LinkExpiration;
		}

		public String CostCenter;

		public String getCostCenter() {
			return this.CostCenter;
		}

		public String BillRef;

		public String getBillRef() {
			return this.BillRef;
		}

		public String PubDescription;

		public String getPubDescription() {
			return this.PubDescription;
		}

		public String UsageStatement;

		public String getUsageStatement() {
			return this.UsageStatement;
		}

		public int ClientId;

		public int getClientId() {
			return this.ClientId;
		}

		public String ClientName;

		public String getClientName() {
			return this.ClientName;
		}

		public short DeliveryMethod;

		public short getDeliveryMethod() {
			return this.DeliveryMethod;
		}

		public String SpecialInstruct;

		public String getSpecialInstruct() {
			return this.SpecialInstruct;
		}

		public String CustSpecialInstruct;

		public String getCustSpecialInstruct() {
			return this.CustSpecialInstruct;
		}

		public Object FeeAlternate;

		public Object getFeeAlternate() {
			return this.FeeAlternate;
		}

		public String DeliveryAddr;

		public String getDeliveryAddr() {
			return this.DeliveryAddr;
		}

		public String DeliveryCity;

		public String getDeliveryCity() {
			return this.DeliveryCity;
		}

		public String DeliveryState;

		public String getDeliveryState() {
			return this.DeliveryState;
		}

		public String DeliveryCountry;

		public String getDeliveryCountry() {
			return this.DeliveryCountry;
		}

		public String DeliveryZip;

		public String getDeliveryZip() {
			return this.DeliveryZip;
		}

		public String DeliveryTracking;

		public String getDeliveryTracking() {
			return this.DeliveryTracking;
		}

		public java.util.Date DeliveryTime;

		public java.util.Date getDeliveryTime() {
			return this.DeliveryTime;
		}

		public String RightsGranted;

		public String getRightsGranted() {
			return this.RightsGranted;
		}

		public short AllowedViewsOrig;

		public short getAllowedViewsOrig() {
			return this.AllowedViewsOrig;
		}

		public short AllowedViewsLeft;

		public short getAllowedViewsLeft() {
			return this.AllowedViewsLeft;
		}

		public short AllowedPrintsOrig;

		public short getAllowedPrintsOrig() {
			return this.AllowedPrintsOrig;
		}

		public short AllowedPrintsLeft;

		public short getAllowedPrintsLeft() {
			return this.AllowedPrintsLeft;
		}

		public String CRTerms;

		public String getCRTerms() {
			return this.CRTerms;
		}

		public String PO;

		public String getPO() {
			return this.PO;
		}

		public String CustOrderNum;

		public String getCustOrderNum() {
			return this.CustOrderNum;
		}

		public Object PriceLimit;

		public Object getPriceLimit() {
			return this.PriceLimit;
		}

		public String Title;

		public String getTitle() {
			return this.Title;
		}

		public String Authors;

		public String getAuthors() {
			return this.Authors;
		}

		public String Issue;

		public String getIssue() {
			return this.Issue;
		}

		public String Volume;

		public String getVolume() {
			return this.Volume;
		}

		public String Pages;

		public String getPages() {
			return this.Pages;
		}

		public String Publication;

		public String getPublication() {
			return this.Publication;
		}

		public String PubDate;

		public String getPubDate() {
			return this.PubDate;
		}

		public String StdNum;

		public String getStdNum() {
			return this.StdNum;
		}

		public String FormattedStdNum;

		public String getFormattedStdNum() {
			return this.FormattedStdNum;
		}

		public String Publisher;

		public String getPublisher() {
			return this.Publisher;
		}

		public String DOI;

		public String getDOI() {
			return this.DOI;
		}

		public String UCustomId;

		public String getUCustomId() {
			return this.UCustomId;
		}

		public String CCustomId;

		public String getCCustomId() {
			return this.CCustomId;
		}

		public String ucLastName;

		public String getUcLastName() {
			return this.ucLastName;
		}

		public String ucFirstName;

		public String getUcFirstName() {
			return this.ucFirstName;
		}

		public String ccLastName;

		public String getCcLastName() {
			return this.ccLastName;
		}

		public String ccFirstName;

		public String getCcFirstName() {
			return this.ccFirstName;
		}

		public int FFCollectionId;

		public int getFFCollectionId() {
			return this.FFCollectionId;
		}

		public int CRCollectionId;

		public int getCRCollectionId() {
			return this.CRCollectionId;
		}

		public int CRAltProvId;

		public int getCRAltProvId() {
			return this.CRAltProvId;
		}

		public String FFCollectionName;

		public String getFFCollectionName() {
			return this.FFCollectionName;
		}

		public String ClientFFCollectionName;

		public String getClientFFCollectionName() {
			return this.ClientFFCollectionName;
		}

		public String CRCollectionName;

		public String getCRCollectionName() {
			return this.CRCollectionName;
		}

		public Boolean InternalFill;

		public Boolean getInternalFill() {
			return this.InternalFill;
		}

		public String DivisionName;

		public String getDivisionName() {
			return this.DivisionName;
		}

		public String DepartmentName;

		public String getDepartmentName() {
			return this.DepartmentName;
		}

		public String LocationName;

		public String getLocationName() {
			return this.LocationName;
		}

		public String OrigCitText;

		public String getOrigCitText() {
			return this.OrigCitText;
		}

		public short TurnaroundMinutes;

		public short getTurnaroundMinutes() {
			return this.TurnaroundMinutes;
		}

		public short WorkMinutes;

		public short getWorkMinutes() {
			return this.WorkMinutes;
		}

		public java.util.Date ReferenceTime;

		public java.util.Date getReferenceTime() {
			return this.ReferenceTime;
		}

		public short UseCopies;

		public short getUseCopies() {
			return this.UseCopies;
		}

		public String Source;

		public String getSource() {
			return this.Source;
		}

		public String PMID;

		public String getPMID() {
			return this.PMID;
		}

		public Object PayCR;

		public Object getPayCR() {
			return this.PayCR;
		}

		public int ClientGroupId;

		public int getClientGroupId() {
			return this.ClientGroupId;
		}

		public Boolean DRMApplied;

		public Boolean getDRMApplied() {
			return this.DRMApplied;
		}

		public int InvoiceId;

		public int getInvoiceId() {
			return this.InvoiceId;
		}

		public Object GST_HST;

		public Object getGST_HST() {
			return this.GST_HST;
		}

		public Object PST;

		public Object getPST() {
			return this.PST;
		}

		public short PartnerId;

		public short getPartnerId() {
			return this.PartnerId;
		}

		public String PartnerClientId;

		public String getPartnerClientId() {
			return this.PartnerClientId;
		}

		public int AssignedToId;

		public int getAssignedToId() {
			return this.AssignedToId;
		}

		public String AssignedToEmail;

		public String getAssignedToEmail() {
			return this.AssignedToEmail;
		}

		public Boolean IsTestOrder;

		public Boolean getIsTestOrder() {
			return this.IsTestOrder;
		}

		public Integer WorkStatus;

		public Integer getWorkStatus() {
			return this.WorkStatus;
		}

		public Integer SuspendedReason;

		public Integer getSuspendedReason() {
			return this.SuspendedReason;
		}

		public java.util.Date WorkAssignedTime;

		public java.util.Date getWorkAssignedTime() {
			return this.WorkAssignedTime;
		}

		public java.util.Date WorkCreatedTime;

		public java.util.Date getWorkCreatedTime() {
			return this.WorkCreatedTime;
		}

		public Boolean CRVerificationRequired;

		public Boolean getCRVerificationRequired() {
			return this.CRVerificationRequired;
		}

		public Boolean CRVerificationVerified;

		public Boolean getCRVerificationVerified() {
			return this.CRVerificationVerified;
		}

		public Boolean CRVerificationNotFound;

		public Boolean getCRVerificationNotFound() {
			return this.CRVerificationNotFound;
		}

		public Boolean CRVerificationDenied;

		public Boolean getCRVerificationDenied() {
			return this.CRVerificationDenied;
		}

		public int ContentId;

		public int getContentId() {
			return this.ContentId;
		}

		public int PartOfContentId;

		public int getPartOfContentId() {
			return this.PartOfContentId;
		}

		public String PartOfTitle;

		public String getPartOfTitle() {
			return this.PartOfTitle;
		}

		public Integer PublicationId;

		public Integer getPublicationId() {
			return this.PublicationId;
		}

		public Integer ArticleId;

		public Integer getArticleId() {
			return this.ArticleId;
		}

		public short FFMethod;

		public short getFFMethod() {
			return this.FFMethod;
		}

		public java.util.Date LastNotify;

		public java.util.Date getLastNotify() {
			return this.LastNotify;
		}

		public Boolean ReferencingRequired;

		public Boolean getReferencingRequired() {
			return this.ReferencingRequired;
		}

		public String RightsRequired;

		public String getRightsRequired() {
			return this.RightsRequired;
		}

		public short FFSourceType;

		public short getFFSourceType() {
			return this.FFSourceType;
		}

		public Object ClientCosts;

		public Object getClientCosts() {
			return this.ClientCosts;
		}

		public int FFHoldingId;

		public int getFFHoldingId() {
			return this.FFHoldingId;
		}

		public int CRHoldingId;

		public int getCRHoldingId() {
			return this.CRHoldingId;
		}

		public Object TotalPublisherVendorFee;

		public Object getTotalPublisherVendorFee() {
			return this.TotalPublisherVendorFee;
		}

		public Object WireTransferFee;

		public Object getWireTransferFee() {
			return this.WireTransferFee;
		}

		public Object CreditCardCharge;

		public Object getCreditCardCharge() {
			return this.CreditCardCharge;
		}

		public Object ResellerFeeTransaction;

		public Object getResellerFeeTransaction() {
			return this.ResellerFeeTransaction;
		}

		public Object ResellerFeeCR;

		public Object getResellerFeeCR() {
			return this.ResellerFeeCR;
		}

		public Object ResellerFeeCRSErvices;

		public Object getResellerFeeCRSErvices() {
			return this.ResellerFeeCRSErvices;
		}

		public Object ResellerFeeFF;

		public Object getResellerFeeFF() {
			return this.ResellerFeeFF;
		}

		public Object ResellerFeeAdvRef;

		public Object getResellerFeeAdvRef() {
			return this.ResellerFeeAdvRef;
		}

		public Object ResellerFeeSH;

		public Object getResellerFeeSH() {
			return this.ResellerFeeSH;
		}

		public Object ResellerFeeOther;

		public Object getResellerFeeOther() {
			return this.ResellerFeeOther;
		}

		public Object ResellerFeeTax;

		public Object getResellerFeeTax() {
			return this.ResellerFeeTax;
		}

		public Object ResellerFeeTotal;

		public Object getResellerFeeTotal() {
			return this.ResellerFeeTotal;
		}

		public Boolean InDigitalLibrary;

		public Boolean getInDigitalLibrary() {
			return this.InDigitalLibrary;
		}

		public String LinkWithHeader;

		public String getLinkWithHeader() {
			return this.LinkWithHeader;
		}

		public String BritishLibraryId;

		public String getBritishLibraryId() {
			return this.BritishLibraryId;
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ORDER_ETL_RFE_ETL.length) {
					if (length < 1024
							&& commonByteArray_ORDER_ETL_RFE_ETL.length == 0) {
						commonByteArray_ORDER_ETL_RFE_ETL = new byte[1024];
					} else {
						commonByteArray_ORDER_ETL_RFE_ETL = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ORDER_ETL_RFE_ETL, 0, length);
				strReturn = new String(commonByteArray_ORDER_ETL_RFE_ETL, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ORDER_ETL_RFE_ETL) {

				try {

					int length = 0;

					this.OrderItemId = dis.readInt();

					this.Type = dis.readShort();

					this.ItemType = dis.readShort();

					this.Status = dis.readShort();

					this.CopyrightStatus = dis.readShort();

					this.CloseReason = dis.readShort();

					this.CreatedTime = readDate(dis);

					this.CreatedByEmail = readString(dis);

					this.CreatedByName = readString(dis);

					this.Usage = readString(dis);

					this.UserEmail = readString(dis);

					this.UserName = readString(dis);

					this.PageCount = dis.readShort();

					this.DeliveryUrgency = dis.readShort();

					this.NeededByDate = readDate(dis);

					this.PromisedDate = readDate(dis);

					this.FeeTransaction = (Object) dis.readObject();

					this.FeeCR = (Object) dis.readObject();

					this.FeeCRServices = (Object) dis.readObject();

					this.FeeFF = (Object) dis.readObject();

					this.FeeAdvRef = (Object) dis.readObject();

					this.FeeSH = (Object) dis.readObject();

					this.FeeOther = (Object) dis.readObject();

					this.FeeTax = (Object) dis.readObject();

					this.FeeTotal = (Object) dis.readObject();

					this.Link = readString(dis);

					this.LinkExpiration = readDate(dis);

					this.CostCenter = readString(dis);

					this.BillRef = readString(dis);

					this.PubDescription = readString(dis);

					this.UsageStatement = readString(dis);

					this.ClientId = dis.readInt();

					this.ClientName = readString(dis);

					this.DeliveryMethod = dis.readShort();

					this.SpecialInstruct = readString(dis);

					this.CustSpecialInstruct = readString(dis);

					this.FeeAlternate = (Object) dis.readObject();

					this.DeliveryAddr = readString(dis);

					this.DeliveryCity = readString(dis);

					this.DeliveryState = readString(dis);

					this.DeliveryCountry = readString(dis);

					this.DeliveryZip = readString(dis);

					this.DeliveryTracking = readString(dis);

					this.DeliveryTime = readDate(dis);

					this.RightsGranted = readString(dis);

					this.AllowedViewsOrig = dis.readShort();

					this.AllowedViewsLeft = dis.readShort();

					this.AllowedPrintsOrig = dis.readShort();

					this.AllowedPrintsLeft = dis.readShort();

					this.CRTerms = readString(dis);

					this.PO = readString(dis);

					this.CustOrderNum = readString(dis);

					this.PriceLimit = (Object) dis.readObject();

					this.Title = readString(dis);

					this.Authors = readString(dis);

					this.Issue = readString(dis);

					this.Volume = readString(dis);

					this.Pages = readString(dis);

					this.Publication = readString(dis);

					this.PubDate = readString(dis);

					this.StdNum = readString(dis);

					this.FormattedStdNum = readString(dis);

					this.Publisher = readString(dis);

					this.DOI = readString(dis);

					this.UCustomId = readString(dis);

					this.CCustomId = readString(dis);

					this.ucLastName = readString(dis);

					this.ucFirstName = readString(dis);

					this.ccLastName = readString(dis);

					this.ccFirstName = readString(dis);

					this.FFCollectionId = dis.readInt();

					this.CRCollectionId = dis.readInt();

					this.CRAltProvId = dis.readInt();

					this.FFCollectionName = readString(dis);

					this.ClientFFCollectionName = readString(dis);

					this.CRCollectionName = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.InternalFill = null;
					} else {
						this.InternalFill = dis.readBoolean();
					}

					this.DivisionName = readString(dis);

					this.DepartmentName = readString(dis);

					this.LocationName = readString(dis);

					this.OrigCitText = readString(dis);

					this.TurnaroundMinutes = dis.readShort();

					this.WorkMinutes = dis.readShort();

					this.ReferenceTime = readDate(dis);

					this.UseCopies = dis.readShort();

					this.Source = readString(dis);

					this.PMID = readString(dis);

					this.PayCR = (Object) dis.readObject();

					this.ClientGroupId = dis.readInt();

					length = dis.readByte();
					if (length == -1) {
						this.DRMApplied = null;
					} else {
						this.DRMApplied = dis.readBoolean();
					}

					this.InvoiceId = dis.readInt();

					this.GST_HST = (Object) dis.readObject();

					this.PST = (Object) dis.readObject();

					this.PartnerId = dis.readShort();

					this.PartnerClientId = readString(dis);

					this.AssignedToId = dis.readInt();

					this.AssignedToEmail = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.IsTestOrder = null;
					} else {
						this.IsTestOrder = dis.readBoolean();
					}

					this.WorkStatus = readInteger(dis);

					this.SuspendedReason = readInteger(dis);

					this.WorkAssignedTime = readDate(dis);

					this.WorkCreatedTime = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.CRVerificationRequired = null;
					} else {
						this.CRVerificationRequired = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.CRVerificationVerified = null;
					} else {
						this.CRVerificationVerified = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.CRVerificationNotFound = null;
					} else {
						this.CRVerificationNotFound = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.CRVerificationDenied = null;
					} else {
						this.CRVerificationDenied = dis.readBoolean();
					}

					this.ContentId = dis.readInt();

					this.PartOfContentId = dis.readInt();

					this.PartOfTitle = readString(dis);

					this.PublicationId = readInteger(dis);

					this.ArticleId = readInteger(dis);

					this.FFMethod = dis.readShort();

					this.LastNotify = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.ReferencingRequired = null;
					} else {
						this.ReferencingRequired = dis.readBoolean();
					}

					this.RightsRequired = readString(dis);

					this.FFSourceType = dis.readShort();

					this.ClientCosts = (Object) dis.readObject();

					this.FFHoldingId = dis.readInt();

					this.CRHoldingId = dis.readInt();

					this.TotalPublisherVendorFee = (Object) dis.readObject();

					this.WireTransferFee = (Object) dis.readObject();

					this.CreditCardCharge = (Object) dis.readObject();

					this.ResellerFeeTransaction = (Object) dis.readObject();

					this.ResellerFeeCR = (Object) dis.readObject();

					this.ResellerFeeCRSErvices = (Object) dis.readObject();

					this.ResellerFeeFF = (Object) dis.readObject();

					this.ResellerFeeAdvRef = (Object) dis.readObject();

					this.ResellerFeeSH = (Object) dis.readObject();

					this.ResellerFeeOther = (Object) dis.readObject();

					this.ResellerFeeTax = (Object) dis.readObject();

					this.ResellerFeeTotal = (Object) dis.readObject();

					length = dis.readByte();
					if (length == -1) {
						this.InDigitalLibrary = null;
					} else {
						this.InDigitalLibrary = dis.readBoolean();
					}

					this.LinkWithHeader = readString(dis);

					this.BritishLibraryId = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.OrderItemId);

				// short

				dos.writeShort(this.Type);

				// short

				dos.writeShort(this.ItemType);

				// short

				dos.writeShort(this.Status);

				// short

				dos.writeShort(this.CopyrightStatus);

				// short

				dos.writeShort(this.CloseReason);

				// java.util.Date

				writeDate(this.CreatedTime, dos);

				// String

				writeString(this.CreatedByEmail, dos);

				// String

				writeString(this.CreatedByName, dos);

				// String

				writeString(this.Usage, dos);

				// String

				writeString(this.UserEmail, dos);

				// String

				writeString(this.UserName, dos);

				// short

				dos.writeShort(this.PageCount);

				// short

				dos.writeShort(this.DeliveryUrgency);

				// java.util.Date

				writeDate(this.NeededByDate, dos);

				// java.util.Date

				writeDate(this.PromisedDate, dos);

				// Object

				dos.writeObject(this.FeeTransaction);

				// Object

				dos.writeObject(this.FeeCR);

				// Object

				dos.writeObject(this.FeeCRServices);

				// Object

				dos.writeObject(this.FeeFF);

				// Object

				dos.writeObject(this.FeeAdvRef);

				// Object

				dos.writeObject(this.FeeSH);

				// Object

				dos.writeObject(this.FeeOther);

				// Object

				dos.writeObject(this.FeeTax);

				// Object

				dos.writeObject(this.FeeTotal);

				// String

				writeString(this.Link, dos);

				// java.util.Date

				writeDate(this.LinkExpiration, dos);

				// String

				writeString(this.CostCenter, dos);

				// String

				writeString(this.BillRef, dos);

				// String

				writeString(this.PubDescription, dos);

				// String

				writeString(this.UsageStatement, dos);

				// int

				dos.writeInt(this.ClientId);

				// String

				writeString(this.ClientName, dos);

				// short

				dos.writeShort(this.DeliveryMethod);

				// String

				writeString(this.SpecialInstruct, dos);

				// String

				writeString(this.CustSpecialInstruct, dos);

				// Object

				dos.writeObject(this.FeeAlternate);

				// String

				writeString(this.DeliveryAddr, dos);

				// String

				writeString(this.DeliveryCity, dos);

				// String

				writeString(this.DeliveryState, dos);

				// String

				writeString(this.DeliveryCountry, dos);

				// String

				writeString(this.DeliveryZip, dos);

				// String

				writeString(this.DeliveryTracking, dos);

				// java.util.Date

				writeDate(this.DeliveryTime, dos);

				// String

				writeString(this.RightsGranted, dos);

				// short

				dos.writeShort(this.AllowedViewsOrig);

				// short

				dos.writeShort(this.AllowedViewsLeft);

				// short

				dos.writeShort(this.AllowedPrintsOrig);

				// short

				dos.writeShort(this.AllowedPrintsLeft);

				// String

				writeString(this.CRTerms, dos);

				// String

				writeString(this.PO, dos);

				// String

				writeString(this.CustOrderNum, dos);

				// Object

				dos.writeObject(this.PriceLimit);

				// String

				writeString(this.Title, dos);

				// String

				writeString(this.Authors, dos);

				// String

				writeString(this.Issue, dos);

				// String

				writeString(this.Volume, dos);

				// String

				writeString(this.Pages, dos);

				// String

				writeString(this.Publication, dos);

				// String

				writeString(this.PubDate, dos);

				// String

				writeString(this.StdNum, dos);

				// String

				writeString(this.FormattedStdNum, dos);

				// String

				writeString(this.Publisher, dos);

				// String

				writeString(this.DOI, dos);

				// String

				writeString(this.UCustomId, dos);

				// String

				writeString(this.CCustomId, dos);

				// String

				writeString(this.ucLastName, dos);

				// String

				writeString(this.ucFirstName, dos);

				// String

				writeString(this.ccLastName, dos);

				// String

				writeString(this.ccFirstName, dos);

				// int

				dos.writeInt(this.FFCollectionId);

				// int

				dos.writeInt(this.CRCollectionId);

				// int

				dos.writeInt(this.CRAltProvId);

				// String

				writeString(this.FFCollectionName, dos);

				// String

				writeString(this.ClientFFCollectionName, dos);

				// String

				writeString(this.CRCollectionName, dos);

				// Boolean

				if (this.InternalFill == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.InternalFill);
				}

				// String

				writeString(this.DivisionName, dos);

				// String

				writeString(this.DepartmentName, dos);

				// String

				writeString(this.LocationName, dos);

				// String

				writeString(this.OrigCitText, dos);

				// short

				dos.writeShort(this.TurnaroundMinutes);

				// short

				dos.writeShort(this.WorkMinutes);

				// java.util.Date

				writeDate(this.ReferenceTime, dos);

				// short

				dos.writeShort(this.UseCopies);

				// String

				writeString(this.Source, dos);

				// String

				writeString(this.PMID, dos);

				// Object

				dos.writeObject(this.PayCR);

				// int

				dos.writeInt(this.ClientGroupId);

				// Boolean

				if (this.DRMApplied == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.DRMApplied);
				}

				// int

				dos.writeInt(this.InvoiceId);

				// Object

				dos.writeObject(this.GST_HST);

				// Object

				dos.writeObject(this.PST);

				// short

				dos.writeShort(this.PartnerId);

				// String

				writeString(this.PartnerClientId, dos);

				// int

				dos.writeInt(this.AssignedToId);

				// String

				writeString(this.AssignedToEmail, dos);

				// Boolean

				if (this.IsTestOrder == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.IsTestOrder);
				}

				// Integer

				writeInteger(this.WorkStatus, dos);

				// Integer

				writeInteger(this.SuspendedReason, dos);

				// java.util.Date

				writeDate(this.WorkAssignedTime, dos);

				// java.util.Date

				writeDate(this.WorkCreatedTime, dos);

				// Boolean

				if (this.CRVerificationRequired == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.CRVerificationRequired);
				}

				// Boolean

				if (this.CRVerificationVerified == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.CRVerificationVerified);
				}

				// Boolean

				if (this.CRVerificationNotFound == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.CRVerificationNotFound);
				}

				// Boolean

				if (this.CRVerificationDenied == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.CRVerificationDenied);
				}

				// int

				dos.writeInt(this.ContentId);

				// int

				dos.writeInt(this.PartOfContentId);

				// String

				writeString(this.PartOfTitle, dos);

				// Integer

				writeInteger(this.PublicationId, dos);

				// Integer

				writeInteger(this.ArticleId, dos);

				// short

				dos.writeShort(this.FFMethod);

				// java.util.Date

				writeDate(this.LastNotify, dos);

				// Boolean

				if (this.ReferencingRequired == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.ReferencingRequired);
				}

				// String

				writeString(this.RightsRequired, dos);

				// short

				dos.writeShort(this.FFSourceType);

				// Object

				dos.writeObject(this.ClientCosts);

				// int

				dos.writeInt(this.FFHoldingId);

				// int

				dos.writeInt(this.CRHoldingId);

				// Object

				dos.writeObject(this.TotalPublisherVendorFee);

				// Object

				dos.writeObject(this.WireTransferFee);

				// Object

				dos.writeObject(this.CreditCardCharge);

				// Object

				dos.writeObject(this.ResellerFeeTransaction);

				// Object

				dos.writeObject(this.ResellerFeeCR);

				// Object

				dos.writeObject(this.ResellerFeeCRSErvices);

				// Object

				dos.writeObject(this.ResellerFeeFF);

				// Object

				dos.writeObject(this.ResellerFeeAdvRef);

				// Object

				dos.writeObject(this.ResellerFeeSH);

				// Object

				dos.writeObject(this.ResellerFeeOther);

				// Object

				dos.writeObject(this.ResellerFeeTax);

				// Object

				dos.writeObject(this.ResellerFeeTotal);

				// Boolean

				if (this.InDigitalLibrary == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.InDigitalLibrary);
				}

				// String

				writeString(this.LinkWithHeader, dos);

				// String

				writeString(this.BritishLibraryId, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("OrderItemId=" + String.valueOf(OrderItemId));
			sb.append(",Type=" + String.valueOf(Type));
			sb.append(",ItemType=" + String.valueOf(ItemType));
			sb.append(",Status=" + String.valueOf(Status));
			sb.append(",CopyrightStatus=" + String.valueOf(CopyrightStatus));
			sb.append(",CloseReason=" + String.valueOf(CloseReason));
			sb.append(",CreatedTime=" + String.valueOf(CreatedTime));
			sb.append(",CreatedByEmail=" + CreatedByEmail);
			sb.append(",CreatedByName=" + CreatedByName);
			sb.append(",Usage=" + Usage);
			sb.append(",UserEmail=" + UserEmail);
			sb.append(",UserName=" + UserName);
			sb.append(",PageCount=" + String.valueOf(PageCount));
			sb.append(",DeliveryUrgency=" + String.valueOf(DeliveryUrgency));
			sb.append(",NeededByDate=" + String.valueOf(NeededByDate));
			sb.append(",PromisedDate=" + String.valueOf(PromisedDate));
			sb.append(",FeeTransaction=" + String.valueOf(FeeTransaction));
			sb.append(",FeeCR=" + String.valueOf(FeeCR));
			sb.append(",FeeCRServices=" + String.valueOf(FeeCRServices));
			sb.append(",FeeFF=" + String.valueOf(FeeFF));
			sb.append(",FeeAdvRef=" + String.valueOf(FeeAdvRef));
			sb.append(",FeeSH=" + String.valueOf(FeeSH));
			sb.append(",FeeOther=" + String.valueOf(FeeOther));
			sb.append(",FeeTax=" + String.valueOf(FeeTax));
			sb.append(",FeeTotal=" + String.valueOf(FeeTotal));
			sb.append(",Link=" + Link);
			sb.append(",LinkExpiration=" + String.valueOf(LinkExpiration));
			sb.append(",CostCenter=" + CostCenter);
			sb.append(",BillRef=" + BillRef);
			sb.append(",PubDescription=" + PubDescription);
			sb.append(",UsageStatement=" + UsageStatement);
			sb.append(",ClientId=" + String.valueOf(ClientId));
			sb.append(",ClientName=" + ClientName);
			sb.append(",DeliveryMethod=" + String.valueOf(DeliveryMethod));
			sb.append(",SpecialInstruct=" + SpecialInstruct);
			sb.append(",CustSpecialInstruct=" + CustSpecialInstruct);
			sb.append(",FeeAlternate=" + String.valueOf(FeeAlternate));
			sb.append(",DeliveryAddr=" + DeliveryAddr);
			sb.append(",DeliveryCity=" + DeliveryCity);
			sb.append(",DeliveryState=" + DeliveryState);
			sb.append(",DeliveryCountry=" + DeliveryCountry);
			sb.append(",DeliveryZip=" + DeliveryZip);
			sb.append(",DeliveryTracking=" + DeliveryTracking);
			sb.append(",DeliveryTime=" + String.valueOf(DeliveryTime));
			sb.append(",RightsGranted=" + RightsGranted);
			sb.append(",AllowedViewsOrig=" + String.valueOf(AllowedViewsOrig));
			sb.append(",AllowedViewsLeft=" + String.valueOf(AllowedViewsLeft));
			sb.append(",AllowedPrintsOrig=" + String.valueOf(AllowedPrintsOrig));
			sb.append(",AllowedPrintsLeft=" + String.valueOf(AllowedPrintsLeft));
			sb.append(",CRTerms=" + CRTerms);
			sb.append(",PO=" + PO);
			sb.append(",CustOrderNum=" + CustOrderNum);
			sb.append(",PriceLimit=" + String.valueOf(PriceLimit));
			sb.append(",Title=" + Title);
			sb.append(",Authors=" + Authors);
			sb.append(",Issue=" + Issue);
			sb.append(",Volume=" + Volume);
			sb.append(",Pages=" + Pages);
			sb.append(",Publication=" + Publication);
			sb.append(",PubDate=" + PubDate);
			sb.append(",StdNum=" + StdNum);
			sb.append(",FormattedStdNum=" + FormattedStdNum);
			sb.append(",Publisher=" + Publisher);
			sb.append(",DOI=" + DOI);
			sb.append(",UCustomId=" + UCustomId);
			sb.append(",CCustomId=" + CCustomId);
			sb.append(",ucLastName=" + ucLastName);
			sb.append(",ucFirstName=" + ucFirstName);
			sb.append(",ccLastName=" + ccLastName);
			sb.append(",ccFirstName=" + ccFirstName);
			sb.append(",FFCollectionId=" + String.valueOf(FFCollectionId));
			sb.append(",CRCollectionId=" + String.valueOf(CRCollectionId));
			sb.append(",CRAltProvId=" + String.valueOf(CRAltProvId));
			sb.append(",FFCollectionName=" + FFCollectionName);
			sb.append(",ClientFFCollectionName=" + ClientFFCollectionName);
			sb.append(",CRCollectionName=" + CRCollectionName);
			sb.append(",InternalFill=" + String.valueOf(InternalFill));
			sb.append(",DivisionName=" + DivisionName);
			sb.append(",DepartmentName=" + DepartmentName);
			sb.append(",LocationName=" + LocationName);
			sb.append(",OrigCitText=" + OrigCitText);
			sb.append(",TurnaroundMinutes=" + String.valueOf(TurnaroundMinutes));
			sb.append(",WorkMinutes=" + String.valueOf(WorkMinutes));
			sb.append(",ReferenceTime=" + String.valueOf(ReferenceTime));
			sb.append(",UseCopies=" + String.valueOf(UseCopies));
			sb.append(",Source=" + Source);
			sb.append(",PMID=" + PMID);
			sb.append(",PayCR=" + String.valueOf(PayCR));
			sb.append(",ClientGroupId=" + String.valueOf(ClientGroupId));
			sb.append(",DRMApplied=" + String.valueOf(DRMApplied));
			sb.append(",InvoiceId=" + String.valueOf(InvoiceId));
			sb.append(",GST_HST=" + String.valueOf(GST_HST));
			sb.append(",PST=" + String.valueOf(PST));
			sb.append(",PartnerId=" + String.valueOf(PartnerId));
			sb.append(",PartnerClientId=" + PartnerClientId);
			sb.append(",AssignedToId=" + String.valueOf(AssignedToId));
			sb.append(",AssignedToEmail=" + AssignedToEmail);
			sb.append(",IsTestOrder=" + String.valueOf(IsTestOrder));
			sb.append(",WorkStatus=" + String.valueOf(WorkStatus));
			sb.append(",SuspendedReason=" + String.valueOf(SuspendedReason));
			sb.append(",WorkAssignedTime=" + String.valueOf(WorkAssignedTime));
			sb.append(",WorkCreatedTime=" + String.valueOf(WorkCreatedTime));
			sb.append(",CRVerificationRequired="
					+ String.valueOf(CRVerificationRequired));
			sb.append(",CRVerificationVerified="
					+ String.valueOf(CRVerificationVerified));
			sb.append(",CRVerificationNotFound="
					+ String.valueOf(CRVerificationNotFound));
			sb.append(",CRVerificationDenied="
					+ String.valueOf(CRVerificationDenied));
			sb.append(",ContentId=" + String.valueOf(ContentId));
			sb.append(",PartOfContentId=" + String.valueOf(PartOfContentId));
			sb.append(",PartOfTitle=" + PartOfTitle);
			sb.append(",PublicationId=" + String.valueOf(PublicationId));
			sb.append(",ArticleId=" + String.valueOf(ArticleId));
			sb.append(",FFMethod=" + String.valueOf(FFMethod));
			sb.append(",LastNotify=" + String.valueOf(LastNotify));
			sb.append(",ReferencingRequired="
					+ String.valueOf(ReferencingRequired));
			sb.append(",RightsRequired=" + RightsRequired);
			sb.append(",FFSourceType=" + String.valueOf(FFSourceType));
			sb.append(",ClientCosts=" + String.valueOf(ClientCosts));
			sb.append(",FFHoldingId=" + String.valueOf(FFHoldingId));
			sb.append(",CRHoldingId=" + String.valueOf(CRHoldingId));
			sb.append(",TotalPublisherVendorFee="
					+ String.valueOf(TotalPublisherVendorFee));
			sb.append(",WireTransferFee=" + String.valueOf(WireTransferFee));
			sb.append(",CreditCardCharge=" + String.valueOf(CreditCardCharge));
			sb.append(",ResellerFeeTransaction="
					+ String.valueOf(ResellerFeeTransaction));
			sb.append(",ResellerFeeCR=" + String.valueOf(ResellerFeeCR));
			sb.append(",ResellerFeeCRSErvices="
					+ String.valueOf(ResellerFeeCRSErvices));
			sb.append(",ResellerFeeFF=" + String.valueOf(ResellerFeeFF));
			sb.append(",ResellerFeeAdvRef=" + String.valueOf(ResellerFeeAdvRef));
			sb.append(",ResellerFeeSH=" + String.valueOf(ResellerFeeSH));
			sb.append(",ResellerFeeOther=" + String.valueOf(ResellerFeeOther));
			sb.append(",ResellerFeeTax=" + String.valueOf(ResellerFeeTax));
			sb.append(",ResellerFeeTotal=" + String.valueOf(ResellerFeeTotal));
			sb.append(",InDigitalLibrary=" + String.valueOf(InDigitalLibrary));
			sb.append(",LinkWithHeader=" + LinkWithHeader);
			sb.append(",BritishLibraryId=" + BritishLibraryId);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_2Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDBInput_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row2Struct row2 = new row2Struct();

				/**
				 * [tDBOutput_2 begin ] start
				 */

				ok_Hash.put("tDBOutput_2", false);
				start_Hash.put("tDBOutput_2", System.currentTimeMillis());

				currentComponent = "tDBOutput_2";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row2" + iterateId, 0, 0);

					}
				}

				int tos_count_tDBOutput_2 = 0;

				String dbschema_tDBOutput_2 = null;
				dbschema_tDBOutput_2 = "staging";

				String tableName_tDBOutput_2 = null;
				if (dbschema_tDBOutput_2 == null
						|| dbschema_tDBOutput_2.trim().length() == 0) {
					tableName_tDBOutput_2 = "stg_rfe_exporderitem";
				} else {
					tableName_tDBOutput_2 = dbschema_tDBOutput_2 + "\".\""
							+ "stg_rfe_exporderitem";
				}

				int nb_line_tDBOutput_2 = 0;
				int nb_line_update_tDBOutput_2 = 0;
				int nb_line_inserted_tDBOutput_2 = 0;
				int nb_line_deleted_tDBOutput_2 = 0;
				int nb_line_rejected_tDBOutput_2 = 0;

				int deletedCount_tDBOutput_2 = 0;
				int updatedCount_tDBOutput_2 = 0;
				int insertedCount_tDBOutput_2 = 0;
				int rejectedCount_tDBOutput_2 = 0;

				boolean whetherReject_tDBOutput_2 = false;

				java.sql.Connection conn_tDBOutput_2 = null;
				String dbUser_tDBOutput_2 = null;

				java.lang.Class.forName("org.postgresql.Driver");
				String url_tDBOutput_2 = "jdbc:postgresql://" + "localhost"
						+ ":" + "5432" + "/" + "rup";
				dbUser_tDBOutput_2 = "rup";

				final String decryptedPassword_tDBOutput_2 = routines.system.PasswordEncryptUtil
						.decryptPassword("544d653f2c2bdc61");

				String dbPwd_tDBOutput_2 = decryptedPassword_tDBOutput_2;

				conn_tDBOutput_2 = java.sql.DriverManager.getConnection(
						url_tDBOutput_2, dbUser_tDBOutput_2, dbPwd_tDBOutput_2);

				resourceMap.put("conn_tDBOutput_2", conn_tDBOutput_2);
				conn_tDBOutput_2.setAutoCommit(false);
				int commitEvery_tDBOutput_2 = 10000;
				int commitCounter_tDBOutput_2 = 0;

				int batchSize_tDBOutput_2 = 10000;
				int batchSizeCounter_tDBOutput_2 = 0;

				int count_tDBOutput_2 = 0;
				String insert_tDBOutput_2 = "INSERT INTO \""
						+ tableName_tDBOutput_2
						+ "\" (\"orderitemid\",\"type\",\"itemtype\",\"status\",\"copyrightstatus\",\"closereason\",\"createdtime\",\"createdbyemail\",\"createdbyname\",\"usage\",\"useremail\",\"username\",\"pagecount\",\"deliveryurgency\",\"neededbydate\",\"promiseddate\",\"feetransaction\",\"feecr\",\"feecrservices\",\"feeff\",\"feeadvref\",\"feesh\",\"feeother\",\"feetax\",\"feetotal\",\"link\",\"linkexpiration\",\"costcenter\",\"billref\",\"pubdescription\",\"usagestatement\",\"clientid\",\"clientname\",\"deliverymethod\",\"specialinstruct\",\"custspecialinstruct\",\"feealternate\",\"deliveryaddr\",\"deliverycity\",\"deliverystate\",\"deliverycountry\",\"deliveryzip\",\"deliverytracking\",\"deliverytime\",\"rightsgranted\",\"allowedviewsorig\",\"allowedviewsleft\",\"allowedprintsorig\",\"allowedprintsleft\",\"crterms\",\"po\",\"custordernum\",\"pricelimit\",\"title\",\"authors\",\"issue\",\"volume\",\"pages\",\"publication\",\"pubdate\",\"stdnum\",\"formattedstdnum\",\"publisher\",\"doi\",\"ucustomid\",\"ccustomid\",\"uclastname\",\"ucfirstname\",\"cclastname\",\"ccfirstname\",\"ffcollectionid\",\"crcollectionid\",\"craltprovid\",\"ffcollectionname\",\"clientffcollectionname\",\"crcollectionname\",\"internalfill\",\"divisionname\",\"departmentname\",\"locationname\",\"origcittext\",\"turnaroundminutes\",\"workminutes\",\"referencetime\",\"usecopies\",\"source\",\"pmid\",\"paycr\",\"clientgroupid\",\"drmapplied\",\"invoiceid\",\"gst_hst\",\"pst\",\"partnerid\",\"partnerclientid\",\"assignedtoid\",\"assignedtoemail\",\"istestorder\",\"workstatus\",\"suspendedreason\",\"workassignedtime\",\"workcreatedtime\",\"crverificationrequired\",\"crverificationverified\",\"crverificationnotfound\",\"crverificationdenied\",\"contentid\",\"partofcontentid\",\"partoftitle\",\"publicationid\",\"articleid\",\"ffmethod\",\"lastnotify\",\"referencingrequired\",\"rightsrequired\",\"ffsourcetype\",\"clientcosts\",\"ffholdingid\",\"crholdingid\",\"totalpublishervendorfee\",\"wiretransferfee\",\"creditcardcharge\",\"resellerfeetransaction\",\"resellerfeecr\",\"resellerfeecrservices\",\"resellerfeeff\",\"resellerfeeadvref\",\"resellerfeesh\",\"resellerfeeother\",\"resellerfeetax\",\"resellerfeetotal\",\"indigitallibrary\",\"linkwithheader\",\"britishlibraryid\") VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

				java.sql.PreparedStatement pstmt_tDBOutput_2 = conn_tDBOutput_2
						.prepareStatement(insert_tDBOutput_2);
				resourceMap.put("pstmt_tDBOutput_2", pstmt_tDBOutput_2);

				/**
				 * [tDBOutput_2 begin ] stop
				 */

				/**
				 * [tDBInput_2 begin ] start
				 */

				ok_Hash.put("tDBInput_2", false);
				start_Hash.put("tDBInput_2", System.currentTimeMillis());

				currentComponent = "tDBInput_2";

				int tos_count_tDBInput_2 = 0;

				org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_2 = org.talend.designer.components.util.mssql.MSSqlUtilFactory
						.getMSSqlGenerateTimestampUtil();

				java.util.List<String> talendToDBList_tDBInput_2 = new java.util.ArrayList();
				String[] talendToDBArray_tDBInput_2 = new String[] { "FLOAT",
						"NUMERIC", "NUMERIC IDENTITY", "DECIMAL",
						"DECIMAL IDENTITY", "REAL" };
				java.util.Collections.addAll(talendToDBList_tDBInput_2,
						talendToDBArray_tDBInput_2);
				int nb_line_tDBInput_2 = 0;
				java.sql.Connection conn_tDBInput_2 = null;
				conn_tDBInput_2 = (java.sql.Connection) globalMap
						.get("conn_tDBConnection_1");
				String dbschema_tDBInput_2 = (String) globalMap
						.get("dbschema_tDBConnection_1");

				java.sql.Statement stmt_tDBInput_2 = conn_tDBInput_2
						.createStatement();

				String dbquery_tDBInput_2 = "SELECT * FROM RFEDEV.dbo.ExpOrderItem";

				globalMap.put("tDBInput_2_QUERY", dbquery_tDBInput_2);
				java.sql.ResultSet rs_tDBInput_2 = null;

				try {
					rs_tDBInput_2 = stmt_tDBInput_2
							.executeQuery(dbquery_tDBInput_2);
					java.sql.ResultSetMetaData rsmd_tDBInput_2 = rs_tDBInput_2
							.getMetaData();
					int colQtyInRs_tDBInput_2 = rsmd_tDBInput_2
							.getColumnCount();

					String tmpContent_tDBInput_2 = null;

					while (rs_tDBInput_2.next()) {
						nb_line_tDBInput_2++;

						if (colQtyInRs_tDBInput_2 < 1) {
							row2.OrderItemId = 0;
						} else {

							if (rs_tDBInput_2.getObject(1) != null) {
								row2.OrderItemId = rs_tDBInput_2.getInt(1);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_2 < 2) {
							row2.Type = 0;
						} else {

							if (rs_tDBInput_2.getObject(2) != null) {
								row2.Type = rs_tDBInput_2.getShort(2);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_2 < 3) {
							row2.ItemType = 0;
						} else {

							if (rs_tDBInput_2.getObject(3) != null) {
								row2.ItemType = rs_tDBInput_2.getShort(3);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_2 < 4) {
							row2.Status = 0;
						} else {

							if (rs_tDBInput_2.getObject(4) != null) {
								row2.Status = rs_tDBInput_2.getShort(4);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_2 < 5) {
							row2.CopyrightStatus = 0;
						} else {

							if (rs_tDBInput_2.getObject(5) != null) {
								row2.CopyrightStatus = rs_tDBInput_2
										.getShort(5);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_2 < 6) {
							row2.CloseReason = 0;
						} else {

							if (rs_tDBInput_2.getObject(6) != null) {
								row2.CloseReason = rs_tDBInput_2.getShort(6);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_2 < 7) {
							row2.CreatedTime = null;
						} else {

							row2.CreatedTime = mssqlGTU_tDBInput_2.getDate(
									rsmd_tDBInput_2, rs_tDBInput_2, 7);

						}
						if (colQtyInRs_tDBInput_2 < 8) {
							row2.CreatedByEmail = null;
						} else {

							tmpContent_tDBInput_2 = rs_tDBInput_2.getString(8);
							if (tmpContent_tDBInput_2 != null) {
								if (talendToDBList_tDBInput_2
										.contains(rsmd_tDBInput_2
												.getColumnTypeName(8)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row2.CreatedByEmail = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_2);
								} else {
									row2.CreatedByEmail = tmpContent_tDBInput_2;
								}
							} else {
								row2.CreatedByEmail = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 9) {
							row2.CreatedByName = null;
						} else {

							tmpContent_tDBInput_2 = rs_tDBInput_2.getString(9);
							if (tmpContent_tDBInput_2 != null) {
								if (talendToDBList_tDBInput_2
										.contains(rsmd_tDBInput_2
												.getColumnTypeName(9)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row2.CreatedByName = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_2);
								} else {
									row2.CreatedByName = tmpContent_tDBInput_2;
								}
							} else {
								row2.CreatedByName = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 10) {
							row2.Usage = null;
						} else {

							tmpContent_tDBInput_2 = rs_tDBInput_2.getString(10);
							if (tmpContent_tDBInput_2 != null) {
								if (talendToDBList_tDBInput_2
										.contains(rsmd_tDBInput_2
												.getColumnTypeName(10)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row2.Usage = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_2);
								} else {
									row2.Usage = tmpContent_tDBInput_2;
								}
							} else {
								row2.Usage = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 11) {
							row2.UserEmail = null;
						} else {

							tmpContent_tDBInput_2 = rs_tDBInput_2.getString(11);
							if (tmpContent_tDBInput_2 != null) {
								if (talendToDBList_tDBInput_2
										.contains(rsmd_tDBInput_2
												.getColumnTypeName(11)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row2.UserEmail = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_2);
								} else {
									row2.UserEmail = tmpContent_tDBInput_2;
								}
							} else {
								row2.UserEmail = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 12) {
							row2.UserName = null;
						} else {

							tmpContent_tDBInput_2 = rs_tDBInput_2.getString(12);
							if (tmpContent_tDBInput_2 != null) {
								if (talendToDBList_tDBInput_2
										.contains(rsmd_tDBInput_2
												.getColumnTypeName(12)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row2.UserName = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_2);
								} else {
									row2.UserName = tmpContent_tDBInput_2;
								}
							} else {
								row2.UserName = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 13) {
							row2.PageCount = 0;
						} else {

							if (rs_tDBInput_2.getObject(13) != null) {
								row2.PageCount = rs_tDBInput_2.getShort(13);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_2 < 14) {
							row2.DeliveryUrgency = 0;
						} else {

							if (rs_tDBInput_2.getObject(14) != null) {
								row2.DeliveryUrgency = rs_tDBInput_2
										.getShort(14);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_2 < 15) {
							row2.NeededByDate = null;
						} else {

							row2.NeededByDate = mssqlGTU_tDBInput_2.getDate(
									rsmd_tDBInput_2, rs_tDBInput_2, 15);

						}
						if (colQtyInRs_tDBInput_2 < 16) {
							row2.PromisedDate = null;
						} else {

							row2.PromisedDate = mssqlGTU_tDBInput_2.getDate(
									rsmd_tDBInput_2, rs_tDBInput_2, 16);

						}
						if (colQtyInRs_tDBInput_2 < 17) {
							row2.FeeTransaction = null;
						} else {

							if (rs_tDBInput_2.getObject(17) != null) {
								row2.FeeTransaction = rs_tDBInput_2
										.getObject(17);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_2 < 18) {
							row2.FeeCR = null;
						} else {

							if (rs_tDBInput_2.getObject(18) != null) {
								row2.FeeCR = rs_tDBInput_2.getObject(18);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_2 < 19) {
							row2.FeeCRServices = null;
						} else {

							if (rs_tDBInput_2.getObject(19) != null) {
								row2.FeeCRServices = rs_tDBInput_2
										.getObject(19);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_2 < 20) {
							row2.FeeFF = null;
						} else {

							if (rs_tDBInput_2.getObject(20) != null) {
								row2.FeeFF = rs_tDBInput_2.getObject(20);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_2 < 21) {
							row2.FeeAdvRef = null;
						} else {

							if (rs_tDBInput_2.getObject(21) != null) {
								row2.FeeAdvRef = rs_tDBInput_2.getObject(21);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_2 < 22) {
							row2.FeeSH = null;
						} else {

							if (rs_tDBInput_2.getObject(22) != null) {
								row2.FeeSH = rs_tDBInput_2.getObject(22);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_2 < 23) {
							row2.FeeOther = null;
						} else {

							if (rs_tDBInput_2.getObject(23) != null) {
								row2.FeeOther = rs_tDBInput_2.getObject(23);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_2 < 24) {
							row2.FeeTax = null;
						} else {

							if (rs_tDBInput_2.getObject(24) != null) {
								row2.FeeTax = rs_tDBInput_2.getObject(24);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_2 < 25) {
							row2.FeeTotal = null;
						} else {

							if (rs_tDBInput_2.getObject(25) != null) {
								row2.FeeTotal = rs_tDBInput_2.getObject(25);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_2 < 26) {
							row2.Link = null;
						} else {

							tmpContent_tDBInput_2 = rs_tDBInput_2.getString(26);
							if (tmpContent_tDBInput_2 != null) {
								if (talendToDBList_tDBInput_2
										.contains(rsmd_tDBInput_2
												.getColumnTypeName(26)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row2.Link = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_2);
								} else {
									row2.Link = tmpContent_tDBInput_2;
								}
							} else {
								row2.Link = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 27) {
							row2.LinkExpiration = null;
						} else {

							row2.LinkExpiration = mssqlGTU_tDBInput_2.getDate(
									rsmd_tDBInput_2, rs_tDBInput_2, 27);

						}
						if (colQtyInRs_tDBInput_2 < 28) {
							row2.CostCenter = null;
						} else {

							tmpContent_tDBInput_2 = rs_tDBInput_2.getString(28);
							if (tmpContent_tDBInput_2 != null) {
								if (talendToDBList_tDBInput_2
										.contains(rsmd_tDBInput_2
												.getColumnTypeName(28)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row2.CostCenter = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_2);
								} else {
									row2.CostCenter = tmpContent_tDBInput_2;
								}
							} else {
								row2.CostCenter = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 29) {
							row2.BillRef = null;
						} else {

							tmpContent_tDBInput_2 = rs_tDBInput_2.getString(29);
							if (tmpContent_tDBInput_2 != null) {
								if (talendToDBList_tDBInput_2
										.contains(rsmd_tDBInput_2
												.getColumnTypeName(29)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row2.BillRef = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_2);
								} else {
									row2.BillRef = tmpContent_tDBInput_2;
								}
							} else {
								row2.BillRef = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 30) {
							row2.PubDescription = null;
						} else {

							tmpContent_tDBInput_2 = rs_tDBInput_2.getString(30);
							if (tmpContent_tDBInput_2 != null) {
								if (talendToDBList_tDBInput_2
										.contains(rsmd_tDBInput_2
												.getColumnTypeName(30)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row2.PubDescription = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_2);
								} else {
									row2.PubDescription = tmpContent_tDBInput_2;
								}
							} else {
								row2.PubDescription = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 31) {
							row2.UsageStatement = null;
						} else {

							tmpContent_tDBInput_2 = rs_tDBInput_2.getString(31);
							if (tmpContent_tDBInput_2 != null) {
								if (talendToDBList_tDBInput_2
										.contains(rsmd_tDBInput_2
												.getColumnTypeName(31)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row2.UsageStatement = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_2);
								} else {
									row2.UsageStatement = tmpContent_tDBInput_2;
								}
							} else {
								row2.UsageStatement = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 32) {
							row2.ClientId = 0;
						} else {

							if (rs_tDBInput_2.getObject(32) != null) {
								row2.ClientId = rs_tDBInput_2.getInt(32);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_2 < 33) {
							row2.ClientName = null;
						} else {

							tmpContent_tDBInput_2 = rs_tDBInput_2.getString(33);
							if (tmpContent_tDBInput_2 != null) {
								if (talendToDBList_tDBInput_2
										.contains(rsmd_tDBInput_2
												.getColumnTypeName(33)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row2.ClientName = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_2);
								} else {
									row2.ClientName = tmpContent_tDBInput_2;
								}
							} else {
								row2.ClientName = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 34) {
							row2.DeliveryMethod = 0;
						} else {

							if (rs_tDBInput_2.getObject(34) != null) {
								row2.DeliveryMethod = rs_tDBInput_2
										.getShort(34);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_2 < 35) {
							row2.SpecialInstruct = null;
						} else {

							tmpContent_tDBInput_2 = rs_tDBInput_2.getString(35);
							if (tmpContent_tDBInput_2 != null) {
								if (talendToDBList_tDBInput_2
										.contains(rsmd_tDBInput_2
												.getColumnTypeName(35)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row2.SpecialInstruct = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_2);
								} else {
									row2.SpecialInstruct = tmpContent_tDBInput_2;
								}
							} else {
								row2.SpecialInstruct = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 36) {
							row2.CustSpecialInstruct = null;
						} else {

							tmpContent_tDBInput_2 = rs_tDBInput_2.getString(36);
							if (tmpContent_tDBInput_2 != null) {
								if (talendToDBList_tDBInput_2
										.contains(rsmd_tDBInput_2
												.getColumnTypeName(36)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row2.CustSpecialInstruct = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_2);
								} else {
									row2.CustSpecialInstruct = tmpContent_tDBInput_2;
								}
							} else {
								row2.CustSpecialInstruct = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 37) {
							row2.FeeAlternate = null;
						} else {

							if (rs_tDBInput_2.getObject(37) != null) {
								row2.FeeAlternate = rs_tDBInput_2.getObject(37);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_2 < 38) {
							row2.DeliveryAddr = null;
						} else {

							tmpContent_tDBInput_2 = rs_tDBInput_2.getString(38);
							if (tmpContent_tDBInput_2 != null) {
								if (talendToDBList_tDBInput_2
										.contains(rsmd_tDBInput_2
												.getColumnTypeName(38)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row2.DeliveryAddr = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_2);
								} else {
									row2.DeliveryAddr = tmpContent_tDBInput_2;
								}
							} else {
								row2.DeliveryAddr = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 39) {
							row2.DeliveryCity = null;
						} else {

							tmpContent_tDBInput_2 = rs_tDBInput_2.getString(39);
							if (tmpContent_tDBInput_2 != null) {
								if (talendToDBList_tDBInput_2
										.contains(rsmd_tDBInput_2
												.getColumnTypeName(39)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row2.DeliveryCity = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_2);
								} else {
									row2.DeliveryCity = tmpContent_tDBInput_2;
								}
							} else {
								row2.DeliveryCity = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 40) {
							row2.DeliveryState = null;
						} else {

							tmpContent_tDBInput_2 = rs_tDBInput_2.getString(40);
							if (tmpContent_tDBInput_2 != null) {
								if (talendToDBList_tDBInput_2
										.contains(rsmd_tDBInput_2
												.getColumnTypeName(40)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row2.DeliveryState = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_2);
								} else {
									row2.DeliveryState = tmpContent_tDBInput_2;
								}
							} else {
								row2.DeliveryState = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 41) {
							row2.DeliveryCountry = null;
						} else {

							tmpContent_tDBInput_2 = rs_tDBInput_2.getString(41);
							if (tmpContent_tDBInput_2 != null) {
								if (talendToDBList_tDBInput_2
										.contains(rsmd_tDBInput_2
												.getColumnTypeName(41)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row2.DeliveryCountry = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_2);
								} else {
									row2.DeliveryCountry = tmpContent_tDBInput_2;
								}
							} else {
								row2.DeliveryCountry = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 42) {
							row2.DeliveryZip = null;
						} else {

							tmpContent_tDBInput_2 = rs_tDBInput_2.getString(42);
							if (tmpContent_tDBInput_2 != null) {
								if (talendToDBList_tDBInput_2
										.contains(rsmd_tDBInput_2
												.getColumnTypeName(42)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row2.DeliveryZip = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_2);
								} else {
									row2.DeliveryZip = tmpContent_tDBInput_2;
								}
							} else {
								row2.DeliveryZip = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 43) {
							row2.DeliveryTracking = null;
						} else {

							tmpContent_tDBInput_2 = rs_tDBInput_2.getString(43);
							if (tmpContent_tDBInput_2 != null) {
								if (talendToDBList_tDBInput_2
										.contains(rsmd_tDBInput_2
												.getColumnTypeName(43)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row2.DeliveryTracking = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_2);
								} else {
									row2.DeliveryTracking = tmpContent_tDBInput_2;
								}
							} else {
								row2.DeliveryTracking = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 44) {
							row2.DeliveryTime = null;
						} else {

							row2.DeliveryTime = mssqlGTU_tDBInput_2.getDate(
									rsmd_tDBInput_2, rs_tDBInput_2, 44);

						}
						if (colQtyInRs_tDBInput_2 < 45) {
							row2.RightsGranted = null;
						} else {

							tmpContent_tDBInput_2 = rs_tDBInput_2.getString(45);
							if (tmpContent_tDBInput_2 != null) {
								if (talendToDBList_tDBInput_2
										.contains(rsmd_tDBInput_2
												.getColumnTypeName(45)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row2.RightsGranted = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_2);
								} else {
									row2.RightsGranted = tmpContent_tDBInput_2;
								}
							} else {
								row2.RightsGranted = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 46) {
							row2.AllowedViewsOrig = 0;
						} else {

							if (rs_tDBInput_2.getObject(46) != null) {
								row2.AllowedViewsOrig = rs_tDBInput_2
										.getShort(46);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_2 < 47) {
							row2.AllowedViewsLeft = 0;
						} else {

							if (rs_tDBInput_2.getObject(47) != null) {
								row2.AllowedViewsLeft = rs_tDBInput_2
										.getShort(47);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_2 < 48) {
							row2.AllowedPrintsOrig = 0;
						} else {

							if (rs_tDBInput_2.getObject(48) != null) {
								row2.AllowedPrintsOrig = rs_tDBInput_2
										.getShort(48);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_2 < 49) {
							row2.AllowedPrintsLeft = 0;
						} else {

							if (rs_tDBInput_2.getObject(49) != null) {
								row2.AllowedPrintsLeft = rs_tDBInput_2
										.getShort(49);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_2 < 50) {
							row2.CRTerms = null;
						} else {

							tmpContent_tDBInput_2 = rs_tDBInput_2.getString(50);
							if (tmpContent_tDBInput_2 != null) {
								if (talendToDBList_tDBInput_2
										.contains(rsmd_tDBInput_2
												.getColumnTypeName(50)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row2.CRTerms = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_2);
								} else {
									row2.CRTerms = tmpContent_tDBInput_2;
								}
							} else {
								row2.CRTerms = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 51) {
							row2.PO = null;
						} else {

							tmpContent_tDBInput_2 = rs_tDBInput_2.getString(51);
							if (tmpContent_tDBInput_2 != null) {
								if (talendToDBList_tDBInput_2
										.contains(rsmd_tDBInput_2
												.getColumnTypeName(51)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row2.PO = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_2);
								} else {
									row2.PO = tmpContent_tDBInput_2;
								}
							} else {
								row2.PO = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 52) {
							row2.CustOrderNum = null;
						} else {

							tmpContent_tDBInput_2 = rs_tDBInput_2.getString(52);
							if (tmpContent_tDBInput_2 != null) {
								if (talendToDBList_tDBInput_2
										.contains(rsmd_tDBInput_2
												.getColumnTypeName(52)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row2.CustOrderNum = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_2);
								} else {
									row2.CustOrderNum = tmpContent_tDBInput_2;
								}
							} else {
								row2.CustOrderNum = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 53) {
							row2.PriceLimit = null;
						} else {

							if (rs_tDBInput_2.getObject(53) != null) {
								row2.PriceLimit = rs_tDBInput_2.getObject(53);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_2 < 54) {
							row2.Title = null;
						} else {

							tmpContent_tDBInput_2 = rs_tDBInput_2.getString(54);
							if (tmpContent_tDBInput_2 != null) {
								if (talendToDBList_tDBInput_2
										.contains(rsmd_tDBInput_2
												.getColumnTypeName(54)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row2.Title = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_2);
								} else {
									row2.Title = tmpContent_tDBInput_2;
								}
							} else {
								row2.Title = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 55) {
							row2.Authors = null;
						} else {

							tmpContent_tDBInput_2 = rs_tDBInput_2.getString(55);
							if (tmpContent_tDBInput_2 != null) {
								if (talendToDBList_tDBInput_2
										.contains(rsmd_tDBInput_2
												.getColumnTypeName(55)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row2.Authors = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_2);
								} else {
									row2.Authors = tmpContent_tDBInput_2;
								}
							} else {
								row2.Authors = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 56) {
							row2.Issue = null;
						} else {

							tmpContent_tDBInput_2 = rs_tDBInput_2.getString(56);
							if (tmpContent_tDBInput_2 != null) {
								if (talendToDBList_tDBInput_2
										.contains(rsmd_tDBInput_2
												.getColumnTypeName(56)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row2.Issue = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_2);
								} else {
									row2.Issue = tmpContent_tDBInput_2;
								}
							} else {
								row2.Issue = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 57) {
							row2.Volume = null;
						} else {

							tmpContent_tDBInput_2 = rs_tDBInput_2.getString(57);
							if (tmpContent_tDBInput_2 != null) {
								if (talendToDBList_tDBInput_2
										.contains(rsmd_tDBInput_2
												.getColumnTypeName(57)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row2.Volume = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_2);
								} else {
									row2.Volume = tmpContent_tDBInput_2;
								}
							} else {
								row2.Volume = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 58) {
							row2.Pages = null;
						} else {

							tmpContent_tDBInput_2 = rs_tDBInput_2.getString(58);
							if (tmpContent_tDBInput_2 != null) {
								if (talendToDBList_tDBInput_2
										.contains(rsmd_tDBInput_2
												.getColumnTypeName(58)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row2.Pages = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_2);
								} else {
									row2.Pages = tmpContent_tDBInput_2;
								}
							} else {
								row2.Pages = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 59) {
							row2.Publication = null;
						} else {

							tmpContent_tDBInput_2 = rs_tDBInput_2.getString(59);
							if (tmpContent_tDBInput_2 != null) {
								if (talendToDBList_tDBInput_2
										.contains(rsmd_tDBInput_2
												.getColumnTypeName(59)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row2.Publication = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_2);
								} else {
									row2.Publication = tmpContent_tDBInput_2;
								}
							} else {
								row2.Publication = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 60) {
							row2.PubDate = null;
						} else {

							tmpContent_tDBInput_2 = rs_tDBInput_2.getString(60);
							if (tmpContent_tDBInput_2 != null) {
								if (talendToDBList_tDBInput_2
										.contains(rsmd_tDBInput_2
												.getColumnTypeName(60)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row2.PubDate = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_2);
								} else {
									row2.PubDate = tmpContent_tDBInput_2;
								}
							} else {
								row2.PubDate = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 61) {
							row2.StdNum = null;
						} else {

							tmpContent_tDBInput_2 = rs_tDBInput_2.getString(61);
							if (tmpContent_tDBInput_2 != null) {
								if (talendToDBList_tDBInput_2
										.contains(rsmd_tDBInput_2
												.getColumnTypeName(61)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row2.StdNum = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_2);
								} else {
									row2.StdNum = tmpContent_tDBInput_2;
								}
							} else {
								row2.StdNum = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 62) {
							row2.FormattedStdNum = null;
						} else {

							tmpContent_tDBInput_2 = rs_tDBInput_2.getString(62);
							if (tmpContent_tDBInput_2 != null) {
								if (talendToDBList_tDBInput_2
										.contains(rsmd_tDBInput_2
												.getColumnTypeName(62)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row2.FormattedStdNum = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_2);
								} else {
									row2.FormattedStdNum = tmpContent_tDBInput_2;
								}
							} else {
								row2.FormattedStdNum = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 63) {
							row2.Publisher = null;
						} else {

							tmpContent_tDBInput_2 = rs_tDBInput_2.getString(63);
							if (tmpContent_tDBInput_2 != null) {
								if (talendToDBList_tDBInput_2
										.contains(rsmd_tDBInput_2
												.getColumnTypeName(63)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row2.Publisher = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_2);
								} else {
									row2.Publisher = tmpContent_tDBInput_2;
								}
							} else {
								row2.Publisher = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 64) {
							row2.DOI = null;
						} else {

							tmpContent_tDBInput_2 = rs_tDBInput_2.getString(64);
							if (tmpContent_tDBInput_2 != null) {
								if (talendToDBList_tDBInput_2
										.contains(rsmd_tDBInput_2
												.getColumnTypeName(64)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row2.DOI = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_2);
								} else {
									row2.DOI = tmpContent_tDBInput_2;
								}
							} else {
								row2.DOI = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 65) {
							row2.UCustomId = null;
						} else {

							tmpContent_tDBInput_2 = rs_tDBInput_2.getString(65);
							if (tmpContent_tDBInput_2 != null) {
								if (talendToDBList_tDBInput_2
										.contains(rsmd_tDBInput_2
												.getColumnTypeName(65)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row2.UCustomId = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_2);
								} else {
									row2.UCustomId = tmpContent_tDBInput_2;
								}
							} else {
								row2.UCustomId = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 66) {
							row2.CCustomId = null;
						} else {

							tmpContent_tDBInput_2 = rs_tDBInput_2.getString(66);
							if (tmpContent_tDBInput_2 != null) {
								if (talendToDBList_tDBInput_2
										.contains(rsmd_tDBInput_2
												.getColumnTypeName(66)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row2.CCustomId = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_2);
								} else {
									row2.CCustomId = tmpContent_tDBInput_2;
								}
							} else {
								row2.CCustomId = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 67) {
							row2.ucLastName = null;
						} else {

							tmpContent_tDBInput_2 = rs_tDBInput_2.getString(67);
							if (tmpContent_tDBInput_2 != null) {
								if (talendToDBList_tDBInput_2
										.contains(rsmd_tDBInput_2
												.getColumnTypeName(67)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row2.ucLastName = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_2);
								} else {
									row2.ucLastName = tmpContent_tDBInput_2;
								}
							} else {
								row2.ucLastName = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 68) {
							row2.ucFirstName = null;
						} else {

							tmpContent_tDBInput_2 = rs_tDBInput_2.getString(68);
							if (tmpContent_tDBInput_2 != null) {
								if (talendToDBList_tDBInput_2
										.contains(rsmd_tDBInput_2
												.getColumnTypeName(68)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row2.ucFirstName = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_2);
								} else {
									row2.ucFirstName = tmpContent_tDBInput_2;
								}
							} else {
								row2.ucFirstName = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 69) {
							row2.ccLastName = null;
						} else {

							tmpContent_tDBInput_2 = rs_tDBInput_2.getString(69);
							if (tmpContent_tDBInput_2 != null) {
								if (talendToDBList_tDBInput_2
										.contains(rsmd_tDBInput_2
												.getColumnTypeName(69)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row2.ccLastName = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_2);
								} else {
									row2.ccLastName = tmpContent_tDBInput_2;
								}
							} else {
								row2.ccLastName = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 70) {
							row2.ccFirstName = null;
						} else {

							tmpContent_tDBInput_2 = rs_tDBInput_2.getString(70);
							if (tmpContent_tDBInput_2 != null) {
								if (talendToDBList_tDBInput_2
										.contains(rsmd_tDBInput_2
												.getColumnTypeName(70)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row2.ccFirstName = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_2);
								} else {
									row2.ccFirstName = tmpContent_tDBInput_2;
								}
							} else {
								row2.ccFirstName = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 71) {
							row2.FFCollectionId = 0;
						} else {

							if (rs_tDBInput_2.getObject(71) != null) {
								row2.FFCollectionId = rs_tDBInput_2.getInt(71);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_2 < 72) {
							row2.CRCollectionId = 0;
						} else {

							if (rs_tDBInput_2.getObject(72) != null) {
								row2.CRCollectionId = rs_tDBInput_2.getInt(72);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_2 < 73) {
							row2.CRAltProvId = 0;
						} else {

							if (rs_tDBInput_2.getObject(73) != null) {
								row2.CRAltProvId = rs_tDBInput_2.getInt(73);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_2 < 74) {
							row2.FFCollectionName = null;
						} else {

							tmpContent_tDBInput_2 = rs_tDBInput_2.getString(74);
							if (tmpContent_tDBInput_2 != null) {
								if (talendToDBList_tDBInput_2
										.contains(rsmd_tDBInput_2
												.getColumnTypeName(74)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row2.FFCollectionName = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_2);
								} else {
									row2.FFCollectionName = tmpContent_tDBInput_2;
								}
							} else {
								row2.FFCollectionName = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 75) {
							row2.ClientFFCollectionName = null;
						} else {

							tmpContent_tDBInput_2 = rs_tDBInput_2.getString(75);
							if (tmpContent_tDBInput_2 != null) {
								if (talendToDBList_tDBInput_2
										.contains(rsmd_tDBInput_2
												.getColumnTypeName(75)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row2.ClientFFCollectionName = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_2);
								} else {
									row2.ClientFFCollectionName = tmpContent_tDBInput_2;
								}
							} else {
								row2.ClientFFCollectionName = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 76) {
							row2.CRCollectionName = null;
						} else {

							tmpContent_tDBInput_2 = rs_tDBInput_2.getString(76);
							if (tmpContent_tDBInput_2 != null) {
								if (talendToDBList_tDBInput_2
										.contains(rsmd_tDBInput_2
												.getColumnTypeName(76)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row2.CRCollectionName = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_2);
								} else {
									row2.CRCollectionName = tmpContent_tDBInput_2;
								}
							} else {
								row2.CRCollectionName = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 77) {
							row2.InternalFill = null;
						} else {

							if (rs_tDBInput_2.getObject(77) != null) {
								row2.InternalFill = rs_tDBInput_2
										.getBoolean(77);
							} else {
								row2.InternalFill = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 78) {
							row2.DivisionName = null;
						} else {

							tmpContent_tDBInput_2 = rs_tDBInput_2.getString(78);
							if (tmpContent_tDBInput_2 != null) {
								if (talendToDBList_tDBInput_2
										.contains(rsmd_tDBInput_2
												.getColumnTypeName(78)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row2.DivisionName = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_2);
								} else {
									row2.DivisionName = tmpContent_tDBInput_2;
								}
							} else {
								row2.DivisionName = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 79) {
							row2.DepartmentName = null;
						} else {

							tmpContent_tDBInput_2 = rs_tDBInput_2.getString(79);
							if (tmpContent_tDBInput_2 != null) {
								if (talendToDBList_tDBInput_2
										.contains(rsmd_tDBInput_2
												.getColumnTypeName(79)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row2.DepartmentName = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_2);
								} else {
									row2.DepartmentName = tmpContent_tDBInput_2;
								}
							} else {
								row2.DepartmentName = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 80) {
							row2.LocationName = null;
						} else {

							tmpContent_tDBInput_2 = rs_tDBInput_2.getString(80);
							if (tmpContent_tDBInput_2 != null) {
								if (talendToDBList_tDBInput_2
										.contains(rsmd_tDBInput_2
												.getColumnTypeName(80)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row2.LocationName = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_2);
								} else {
									row2.LocationName = tmpContent_tDBInput_2;
								}
							} else {
								row2.LocationName = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 81) {
							row2.OrigCitText = null;
						} else {

							tmpContent_tDBInput_2 = rs_tDBInput_2.getString(81);
							if (tmpContent_tDBInput_2 != null) {
								if (talendToDBList_tDBInput_2
										.contains(rsmd_tDBInput_2
												.getColumnTypeName(81)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row2.OrigCitText = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_2);
								} else {
									row2.OrigCitText = tmpContent_tDBInput_2;
								}
							} else {
								row2.OrigCitText = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 82) {
							row2.TurnaroundMinutes = 0;
						} else {

							if (rs_tDBInput_2.getObject(82) != null) {
								row2.TurnaroundMinutes = rs_tDBInput_2
										.getShort(82);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_2 < 83) {
							row2.WorkMinutes = 0;
						} else {

							if (rs_tDBInput_2.getObject(83) != null) {
								row2.WorkMinutes = rs_tDBInput_2.getShort(83);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_2 < 84) {
							row2.ReferenceTime = null;
						} else {

							row2.ReferenceTime = mssqlGTU_tDBInput_2.getDate(
									rsmd_tDBInput_2, rs_tDBInput_2, 84);

						}
						if (colQtyInRs_tDBInput_2 < 85) {
							row2.UseCopies = 0;
						} else {

							if (rs_tDBInput_2.getObject(85) != null) {
								row2.UseCopies = rs_tDBInput_2.getShort(85);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_2 < 86) {
							row2.Source = null;
						} else {

							tmpContent_tDBInput_2 = rs_tDBInput_2.getString(86);
							if (tmpContent_tDBInput_2 != null) {
								if (talendToDBList_tDBInput_2
										.contains(rsmd_tDBInput_2
												.getColumnTypeName(86)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row2.Source = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_2);
								} else {
									row2.Source = tmpContent_tDBInput_2;
								}
							} else {
								row2.Source = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 87) {
							row2.PMID = null;
						} else {

							tmpContent_tDBInput_2 = rs_tDBInput_2.getString(87);
							if (tmpContent_tDBInput_2 != null) {
								if (talendToDBList_tDBInput_2
										.contains(rsmd_tDBInput_2
												.getColumnTypeName(87)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row2.PMID = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_2);
								} else {
									row2.PMID = tmpContent_tDBInput_2;
								}
							} else {
								row2.PMID = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 88) {
							row2.PayCR = null;
						} else {

							if (rs_tDBInput_2.getObject(88) != null) {
								row2.PayCR = rs_tDBInput_2.getObject(88);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_2 < 89) {
							row2.ClientGroupId = 0;
						} else {

							if (rs_tDBInput_2.getObject(89) != null) {
								row2.ClientGroupId = rs_tDBInput_2.getInt(89);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_2 < 90) {
							row2.DRMApplied = null;
						} else {

							if (rs_tDBInput_2.getObject(90) != null) {
								row2.DRMApplied = rs_tDBInput_2.getBoolean(90);
							} else {
								row2.DRMApplied = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 91) {
							row2.InvoiceId = 0;
						} else {

							if (rs_tDBInput_2.getObject(91) != null) {
								row2.InvoiceId = rs_tDBInput_2.getInt(91);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_2 < 92) {
							row2.GST_HST = null;
						} else {

							if (rs_tDBInput_2.getObject(92) != null) {
								row2.GST_HST = rs_tDBInput_2.getObject(92);
							} else {
								row2.GST_HST = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 93) {
							row2.PST = null;
						} else {

							if (rs_tDBInput_2.getObject(93) != null) {
								row2.PST = rs_tDBInput_2.getObject(93);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_2 < 94) {
							row2.PartnerId = 0;
						} else {

							if (rs_tDBInput_2.getObject(94) != null) {
								row2.PartnerId = rs_tDBInput_2.getShort(94);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_2 < 95) {
							row2.PartnerClientId = null;
						} else {

							tmpContent_tDBInput_2 = rs_tDBInput_2.getString(95);
							if (tmpContent_tDBInput_2 != null) {
								if (talendToDBList_tDBInput_2
										.contains(rsmd_tDBInput_2
												.getColumnTypeName(95)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row2.PartnerClientId = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_2);
								} else {
									row2.PartnerClientId = tmpContent_tDBInput_2;
								}
							} else {
								row2.PartnerClientId = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 96) {
							row2.AssignedToId = 0;
						} else {

							if (rs_tDBInput_2.getObject(96) != null) {
								row2.AssignedToId = rs_tDBInput_2.getInt(96);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_2 < 97) {
							row2.AssignedToEmail = null;
						} else {

							tmpContent_tDBInput_2 = rs_tDBInput_2.getString(97);
							if (tmpContent_tDBInput_2 != null) {
								if (talendToDBList_tDBInput_2
										.contains(rsmd_tDBInput_2
												.getColumnTypeName(97)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row2.AssignedToEmail = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_2);
								} else {
									row2.AssignedToEmail = tmpContent_tDBInput_2;
								}
							} else {
								row2.AssignedToEmail = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 98) {
							row2.IsTestOrder = null;
						} else {

							if (rs_tDBInput_2.getObject(98) != null) {
								row2.IsTestOrder = rs_tDBInput_2.getBoolean(98);
							} else {
								row2.IsTestOrder = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 99) {
							row2.WorkStatus = null;
						} else {

							if (rs_tDBInput_2.getObject(99) != null) {
								row2.WorkStatus = rs_tDBInput_2.getInt(99);
							} else {
								row2.WorkStatus = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 100) {
							row2.SuspendedReason = null;
						} else {

							if (rs_tDBInput_2.getObject(100) != null) {
								row2.SuspendedReason = rs_tDBInput_2
										.getInt(100);
							} else {
								row2.SuspendedReason = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 101) {
							row2.WorkAssignedTime = null;
						} else {

							row2.WorkAssignedTime = mssqlGTU_tDBInput_2
									.getDate(rsmd_tDBInput_2, rs_tDBInput_2,
											101);

						}
						if (colQtyInRs_tDBInput_2 < 102) {
							row2.WorkCreatedTime = null;
						} else {

							row2.WorkCreatedTime = mssqlGTU_tDBInput_2.getDate(
									rsmd_tDBInput_2, rs_tDBInput_2, 102);

						}
						if (colQtyInRs_tDBInput_2 < 103) {
							row2.CRVerificationRequired = null;
						} else {

							if (rs_tDBInput_2.getObject(103) != null) {
								row2.CRVerificationRequired = rs_tDBInput_2
										.getBoolean(103);
							} else {
								row2.CRVerificationRequired = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 104) {
							row2.CRVerificationVerified = null;
						} else {

							if (rs_tDBInput_2.getObject(104) != null) {
								row2.CRVerificationVerified = rs_tDBInput_2
										.getBoolean(104);
							} else {
								row2.CRVerificationVerified = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 105) {
							row2.CRVerificationNotFound = null;
						} else {

							if (rs_tDBInput_2.getObject(105) != null) {
								row2.CRVerificationNotFound = rs_tDBInput_2
										.getBoolean(105);
							} else {
								row2.CRVerificationNotFound = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 106) {
							row2.CRVerificationDenied = null;
						} else {

							if (rs_tDBInput_2.getObject(106) != null) {
								row2.CRVerificationDenied = rs_tDBInput_2
										.getBoolean(106);
							} else {
								row2.CRVerificationDenied = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 107) {
							row2.ContentId = 0;
						} else {

							if (rs_tDBInput_2.getObject(107) != null) {
								row2.ContentId = rs_tDBInput_2.getInt(107);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_2 < 108) {
							row2.PartOfContentId = 0;
						} else {

							if (rs_tDBInput_2.getObject(108) != null) {
								row2.PartOfContentId = rs_tDBInput_2
										.getInt(108);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_2 < 109) {
							row2.PartOfTitle = null;
						} else {

							tmpContent_tDBInput_2 = rs_tDBInput_2
									.getString(109);
							if (tmpContent_tDBInput_2 != null) {
								if (talendToDBList_tDBInput_2
										.contains(rsmd_tDBInput_2
												.getColumnTypeName(109)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row2.PartOfTitle = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_2);
								} else {
									row2.PartOfTitle = tmpContent_tDBInput_2;
								}
							} else {
								row2.PartOfTitle = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 110) {
							row2.PublicationId = null;
						} else {

							if (rs_tDBInput_2.getObject(110) != null) {
								row2.PublicationId = rs_tDBInput_2.getInt(110);
							} else {
								row2.PublicationId = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 111) {
							row2.ArticleId = null;
						} else {

							if (rs_tDBInput_2.getObject(111) != null) {
								row2.ArticleId = rs_tDBInput_2.getInt(111);
							} else {
								row2.ArticleId = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 112) {
							row2.FFMethod = 0;
						} else {

							if (rs_tDBInput_2.getObject(112) != null) {
								row2.FFMethod = rs_tDBInput_2.getShort(112);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_2 < 113) {
							row2.LastNotify = null;
						} else {

							row2.LastNotify = mssqlGTU_tDBInput_2.getDate(
									rsmd_tDBInput_2, rs_tDBInput_2, 113);

						}
						if (colQtyInRs_tDBInput_2 < 114) {
							row2.ReferencingRequired = null;
						} else {

							if (rs_tDBInput_2.getObject(114) != null) {
								row2.ReferencingRequired = rs_tDBInput_2
										.getBoolean(114);
							} else {
								row2.ReferencingRequired = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 115) {
							row2.RightsRequired = null;
						} else {

							tmpContent_tDBInput_2 = rs_tDBInput_2
									.getString(115);
							if (tmpContent_tDBInput_2 != null) {
								if (talendToDBList_tDBInput_2
										.contains(rsmd_tDBInput_2
												.getColumnTypeName(115)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row2.RightsRequired = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_2);
								} else {
									row2.RightsRequired = tmpContent_tDBInput_2;
								}
							} else {
								row2.RightsRequired = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 116) {
							row2.FFSourceType = 0;
						} else {

							if (rs_tDBInput_2.getObject(116) != null) {
								row2.FFSourceType = rs_tDBInput_2.getShort(116);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_2 < 117) {
							row2.ClientCosts = null;
						} else {

							if (rs_tDBInput_2.getObject(117) != null) {
								row2.ClientCosts = rs_tDBInput_2.getObject(117);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_2 < 118) {
							row2.FFHoldingId = 0;
						} else {

							if (rs_tDBInput_2.getObject(118) != null) {
								row2.FFHoldingId = rs_tDBInput_2.getInt(118);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_2 < 119) {
							row2.CRHoldingId = 0;
						} else {

							if (rs_tDBInput_2.getObject(119) != null) {
								row2.CRHoldingId = rs_tDBInput_2.getInt(119);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_2 < 120) {
							row2.TotalPublisherVendorFee = null;
						} else {

							if (rs_tDBInput_2.getObject(120) != null) {
								row2.TotalPublisherVendorFee = rs_tDBInput_2
										.getObject(120);
							} else {
								row2.TotalPublisherVendorFee = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 121) {
							row2.WireTransferFee = null;
						} else {

							if (rs_tDBInput_2.getObject(121) != null) {
								row2.WireTransferFee = rs_tDBInput_2
										.getObject(121);
							} else {
								row2.WireTransferFee = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 122) {
							row2.CreditCardCharge = null;
						} else {

							if (rs_tDBInput_2.getObject(122) != null) {
								row2.CreditCardCharge = rs_tDBInput_2
										.getObject(122);
							} else {
								row2.CreditCardCharge = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 123) {
							row2.ResellerFeeTransaction = null;
						} else {

							if (rs_tDBInput_2.getObject(123) != null) {
								row2.ResellerFeeTransaction = rs_tDBInput_2
										.getObject(123);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_2 < 124) {
							row2.ResellerFeeCR = null;
						} else {

							if (rs_tDBInput_2.getObject(124) != null) {
								row2.ResellerFeeCR = rs_tDBInput_2
										.getObject(124);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_2 < 125) {
							row2.ResellerFeeCRSErvices = null;
						} else {

							if (rs_tDBInput_2.getObject(125) != null) {
								row2.ResellerFeeCRSErvices = rs_tDBInput_2
										.getObject(125);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_2 < 126) {
							row2.ResellerFeeFF = null;
						} else {

							if (rs_tDBInput_2.getObject(126) != null) {
								row2.ResellerFeeFF = rs_tDBInput_2
										.getObject(126);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_2 < 127) {
							row2.ResellerFeeAdvRef = null;
						} else {

							if (rs_tDBInput_2.getObject(127) != null) {
								row2.ResellerFeeAdvRef = rs_tDBInput_2
										.getObject(127);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_2 < 128) {
							row2.ResellerFeeSH = null;
						} else {

							if (rs_tDBInput_2.getObject(128) != null) {
								row2.ResellerFeeSH = rs_tDBInput_2
										.getObject(128);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_2 < 129) {
							row2.ResellerFeeOther = null;
						} else {

							if (rs_tDBInput_2.getObject(129) != null) {
								row2.ResellerFeeOther = rs_tDBInput_2
										.getObject(129);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_2 < 130) {
							row2.ResellerFeeTax = null;
						} else {

							if (rs_tDBInput_2.getObject(130) != null) {
								row2.ResellerFeeTax = rs_tDBInput_2
										.getObject(130);
							} else {
								row2.ResellerFeeTax = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 131) {
							row2.ResellerFeeTotal = null;
						} else {

							if (rs_tDBInput_2.getObject(131) != null) {
								row2.ResellerFeeTotal = rs_tDBInput_2
										.getObject(131);
							} else {
								row2.ResellerFeeTotal = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 132) {
							row2.InDigitalLibrary = null;
						} else {

							if (rs_tDBInput_2.getObject(132) != null) {
								row2.InDigitalLibrary = rs_tDBInput_2
										.getBoolean(132);
							} else {
								row2.InDigitalLibrary = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 133) {
							row2.LinkWithHeader = null;
						} else {

							tmpContent_tDBInput_2 = rs_tDBInput_2
									.getString(133);
							if (tmpContent_tDBInput_2 != null) {
								if (talendToDBList_tDBInput_2
										.contains(rsmd_tDBInput_2
												.getColumnTypeName(133)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row2.LinkWithHeader = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_2);
								} else {
									row2.LinkWithHeader = tmpContent_tDBInput_2;
								}
							} else {
								row2.LinkWithHeader = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 134) {
							row2.BritishLibraryId = null;
						} else {

							tmpContent_tDBInput_2 = rs_tDBInput_2
									.getString(134);
							if (tmpContent_tDBInput_2 != null) {
								if (talendToDBList_tDBInput_2
										.contains(rsmd_tDBInput_2
												.getColumnTypeName(134)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row2.BritishLibraryId = FormatterUtils
											.formatUnwithE(tmpContent_tDBInput_2);
								} else {
									row2.BritishLibraryId = tmpContent_tDBInput_2;
								}
							} else {
								row2.BritishLibraryId = null;
							}
						}

						/**
						 * [tDBInput_2 begin ] stop
						 */

						/**
						 * [tDBInput_2 main ] start
						 */

						currentComponent = "tDBInput_2";

						tos_count_tDBInput_2++;

						/**
						 * [tDBInput_2 main ] stop
						 */

						/**
						 * [tDBInput_2 process_data_begin ] start
						 */

						currentComponent = "tDBInput_2";

						/**
						 * [tDBInput_2 process_data_begin ] stop
						 */

						/**
						 * [tDBOutput_2 main ] start
						 */

						currentComponent = "tDBOutput_2";

						// row2
						// row2

						if (execStat) {
							runStat.updateStatOnConnection("row2" + iterateId,
									1, 1);
						}

						whetherReject_tDBOutput_2 = false;
						pstmt_tDBOutput_2.setInt(1, row2.OrderItemId);

						pstmt_tDBOutput_2.setShort(2, row2.Type);

						pstmt_tDBOutput_2.setShort(3, row2.ItemType);

						pstmt_tDBOutput_2.setShort(4, row2.Status);

						pstmt_tDBOutput_2.setShort(5, row2.CopyrightStatus);

						pstmt_tDBOutput_2.setShort(6, row2.CloseReason);

						if (row2.CreatedTime != null) {
							pstmt_tDBOutput_2.setTimestamp(
									7,
									new java.sql.Timestamp(row2.CreatedTime
											.getTime()));
						} else {
							pstmt_tDBOutput_2.setNull(7,
									java.sql.Types.TIMESTAMP);
						}

						if (row2.CreatedByEmail == null) {
							pstmt_tDBOutput_2
									.setNull(8, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(8, row2.CreatedByEmail);
						}

						if (row2.CreatedByName == null) {
							pstmt_tDBOutput_2
									.setNull(9, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(9, row2.CreatedByName);
						}

						if (row2.Usage == null) {
							pstmt_tDBOutput_2.setNull(10,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(10, row2.Usage);
						}

						if (row2.UserEmail == null) {
							pstmt_tDBOutput_2.setNull(11,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(11, row2.UserEmail);
						}

						if (row2.UserName == null) {
							pstmt_tDBOutput_2.setNull(12,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(12, row2.UserName);
						}

						pstmt_tDBOutput_2.setShort(13, row2.PageCount);

						pstmt_tDBOutput_2.setShort(14, row2.DeliveryUrgency);

						if (row2.NeededByDate != null) {
							pstmt_tDBOutput_2.setTimestamp(
									15,
									new java.sql.Timestamp(row2.NeededByDate
											.getTime()));
						} else {
							pstmt_tDBOutput_2.setNull(15,
									java.sql.Types.TIMESTAMP);
						}

						if (row2.PromisedDate != null) {
							pstmt_tDBOutput_2.setTimestamp(
									16,
									new java.sql.Timestamp(row2.PromisedDate
											.getTime()));
						} else {
							pstmt_tDBOutput_2.setNull(16,
									java.sql.Types.TIMESTAMP);
						}

						if (row2.FeeTransaction == null) {
							pstmt_tDBOutput_2.setNull(17, java.sql.Types.OTHER);
						} else {
							pstmt_tDBOutput_2
									.setObject(17, row2.FeeTransaction);
						}

						if (row2.FeeCR == null) {
							pstmt_tDBOutput_2.setNull(18, java.sql.Types.OTHER);
						} else {
							pstmt_tDBOutput_2.setObject(18, row2.FeeCR);
						}

						if (row2.FeeCRServices == null) {
							pstmt_tDBOutput_2.setNull(19, java.sql.Types.OTHER);
						} else {
							pstmt_tDBOutput_2.setObject(19, row2.FeeCRServices);
						}

						if (row2.FeeFF == null) {
							pstmt_tDBOutput_2.setNull(20, java.sql.Types.OTHER);
						} else {
							pstmt_tDBOutput_2.setObject(20, row2.FeeFF);
						}

						if (row2.FeeAdvRef == null) {
							pstmt_tDBOutput_2.setNull(21, java.sql.Types.OTHER);
						} else {
							pstmt_tDBOutput_2.setObject(21, row2.FeeAdvRef);
						}

						if (row2.FeeSH == null) {
							pstmt_tDBOutput_2.setNull(22, java.sql.Types.OTHER);
						} else {
							pstmt_tDBOutput_2.setObject(22, row2.FeeSH);
						}

						if (row2.FeeOther == null) {
							pstmt_tDBOutput_2.setNull(23, java.sql.Types.OTHER);
						} else {
							pstmt_tDBOutput_2.setObject(23, row2.FeeOther);
						}

						if (row2.FeeTax == null) {
							pstmt_tDBOutput_2.setNull(24, java.sql.Types.OTHER);
						} else {
							pstmt_tDBOutput_2.setObject(24, row2.FeeTax);
						}

						if (row2.FeeTotal == null) {
							pstmt_tDBOutput_2.setNull(25, java.sql.Types.OTHER);
						} else {
							pstmt_tDBOutput_2.setObject(25, row2.FeeTotal);
						}

						if (row2.Link == null) {
							pstmt_tDBOutput_2.setNull(26,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(26, row2.Link);
						}

						if (row2.LinkExpiration != null) {
							pstmt_tDBOutput_2.setTimestamp(
									27,
									new java.sql.Timestamp(row2.LinkExpiration
											.getTime()));
						} else {
							pstmt_tDBOutput_2.setNull(27,
									java.sql.Types.TIMESTAMP);
						}

						if (row2.CostCenter == null) {
							pstmt_tDBOutput_2.setNull(28,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(28, row2.CostCenter);
						}

						if (row2.BillRef == null) {
							pstmt_tDBOutput_2.setNull(29,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(29, row2.BillRef);
						}

						if (row2.PubDescription == null) {
							pstmt_tDBOutput_2.setNull(30,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2
									.setString(30, row2.PubDescription);
						}

						if (row2.UsageStatement == null) {
							pstmt_tDBOutput_2.setNull(31,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2
									.setString(31, row2.UsageStatement);
						}

						pstmt_tDBOutput_2.setInt(32, row2.ClientId);

						if (row2.ClientName == null) {
							pstmt_tDBOutput_2.setNull(33,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(33, row2.ClientName);
						}

						pstmt_tDBOutput_2.setShort(34, row2.DeliveryMethod);

						if (row2.SpecialInstruct == null) {
							pstmt_tDBOutput_2.setNull(35,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(35,
									row2.SpecialInstruct);
						}

						if (row2.CustSpecialInstruct == null) {
							pstmt_tDBOutput_2.setNull(36,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(36,
									row2.CustSpecialInstruct);
						}

						if (row2.FeeAlternate == null) {
							pstmt_tDBOutput_2.setNull(37, java.sql.Types.OTHER);
						} else {
							pstmt_tDBOutput_2.setObject(37, row2.FeeAlternate);
						}

						if (row2.DeliveryAddr == null) {
							pstmt_tDBOutput_2.setNull(38,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(38, row2.DeliveryAddr);
						}

						if (row2.DeliveryCity == null) {
							pstmt_tDBOutput_2.setNull(39,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(39, row2.DeliveryCity);
						}

						if (row2.DeliveryState == null) {
							pstmt_tDBOutput_2.setNull(40,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(40, row2.DeliveryState);
						}

						if (row2.DeliveryCountry == null) {
							pstmt_tDBOutput_2.setNull(41,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(41,
									row2.DeliveryCountry);
						}

						if (row2.DeliveryZip == null) {
							pstmt_tDBOutput_2.setNull(42,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(42, row2.DeliveryZip);
						}

						if (row2.DeliveryTracking == null) {
							pstmt_tDBOutput_2.setNull(43,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(43,
									row2.DeliveryTracking);
						}

						if (row2.DeliveryTime != null) {
							pstmt_tDBOutput_2.setTimestamp(
									44,
									new java.sql.Timestamp(row2.DeliveryTime
											.getTime()));
						} else {
							pstmt_tDBOutput_2.setNull(44,
									java.sql.Types.TIMESTAMP);
						}

						if (row2.RightsGranted == null) {
							pstmt_tDBOutput_2.setNull(45,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(45, row2.RightsGranted);
						}

						pstmt_tDBOutput_2.setShort(46, row2.AllowedViewsOrig);

						pstmt_tDBOutput_2.setShort(47, row2.AllowedViewsLeft);

						pstmt_tDBOutput_2.setShort(48, row2.AllowedPrintsOrig);

						pstmt_tDBOutput_2.setShort(49, row2.AllowedPrintsLeft);

						if (row2.CRTerms == null) {
							pstmt_tDBOutput_2.setNull(50,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(50, row2.CRTerms);
						}

						if (row2.PO == null) {
							pstmt_tDBOutput_2.setNull(51,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(51, row2.PO);
						}

						if (row2.CustOrderNum == null) {
							pstmt_tDBOutput_2.setNull(52,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(52, row2.CustOrderNum);
						}

						if (row2.PriceLimit == null) {
							pstmt_tDBOutput_2.setNull(53, java.sql.Types.OTHER);
						} else {
							pstmt_tDBOutput_2.setObject(53, row2.PriceLimit);
						}

						if (row2.Title == null) {
							pstmt_tDBOutput_2.setNull(54,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(54, row2.Title);
						}

						if (row2.Authors == null) {
							pstmt_tDBOutput_2.setNull(55,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(55, row2.Authors);
						}

						if (row2.Issue == null) {
							pstmt_tDBOutput_2.setNull(56,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(56, row2.Issue);
						}

						if (row2.Volume == null) {
							pstmt_tDBOutput_2.setNull(57,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(57, row2.Volume);
						}

						if (row2.Pages == null) {
							pstmt_tDBOutput_2.setNull(58,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(58, row2.Pages);
						}

						if (row2.Publication == null) {
							pstmt_tDBOutput_2.setNull(59,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(59, row2.Publication);
						}

						if (row2.PubDate == null) {
							pstmt_tDBOutput_2.setNull(60,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(60, row2.PubDate);
						}

						if (row2.StdNum == null) {
							pstmt_tDBOutput_2.setNull(61,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(61, row2.StdNum);
						}

						if (row2.FormattedStdNum == null) {
							pstmt_tDBOutput_2.setNull(62,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(62,
									row2.FormattedStdNum);
						}

						if (row2.Publisher == null) {
							pstmt_tDBOutput_2.setNull(63,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(63, row2.Publisher);
						}

						if (row2.DOI == null) {
							pstmt_tDBOutput_2.setNull(64,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(64, row2.DOI);
						}

						if (row2.UCustomId == null) {
							pstmt_tDBOutput_2.setNull(65,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(65, row2.UCustomId);
						}

						if (row2.CCustomId == null) {
							pstmt_tDBOutput_2.setNull(66,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(66, row2.CCustomId);
						}

						if (row2.ucLastName == null) {
							pstmt_tDBOutput_2.setNull(67,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(67, row2.ucLastName);
						}

						if (row2.ucFirstName == null) {
							pstmt_tDBOutput_2.setNull(68,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(68, row2.ucFirstName);
						}

						if (row2.ccLastName == null) {
							pstmt_tDBOutput_2.setNull(69,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(69, row2.ccLastName);
						}

						if (row2.ccFirstName == null) {
							pstmt_tDBOutput_2.setNull(70,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(70, row2.ccFirstName);
						}

						pstmt_tDBOutput_2.setInt(71, row2.FFCollectionId);

						pstmt_tDBOutput_2.setInt(72, row2.CRCollectionId);

						pstmt_tDBOutput_2.setInt(73, row2.CRAltProvId);

						if (row2.FFCollectionName == null) {
							pstmt_tDBOutput_2.setNull(74,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(74,
									row2.FFCollectionName);
						}

						if (row2.ClientFFCollectionName == null) {
							pstmt_tDBOutput_2.setNull(75,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(75,
									row2.ClientFFCollectionName);
						}

						if (row2.CRCollectionName == null) {
							pstmt_tDBOutput_2.setNull(76,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(76,
									row2.CRCollectionName);
						}

						if (row2.InternalFill == null) {
							pstmt_tDBOutput_2.setNull(77, java.sql.Types.ARRAY);
						} else {
							pstmt_tDBOutput_2.setBytes(77, row2.InternalFill);
						}

						if (row2.DivisionName == null) {
							pstmt_tDBOutput_2.setNull(78,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(78, row2.DivisionName);
						}

						if (row2.DepartmentName == null) {
							pstmt_tDBOutput_2.setNull(79,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2
									.setString(79, row2.DepartmentName);
						}

						if (row2.LocationName == null) {
							pstmt_tDBOutput_2.setNull(80,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(80, row2.LocationName);
						}

						if (row2.OrigCitText == null) {
							pstmt_tDBOutput_2.setNull(81,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(81, row2.OrigCitText);
						}

						pstmt_tDBOutput_2.setShort(82, row2.TurnaroundMinutes);

						pstmt_tDBOutput_2.setShort(83, row2.WorkMinutes);

						if (row2.ReferenceTime != null) {
							pstmt_tDBOutput_2.setTimestamp(
									84,
									new java.sql.Timestamp(row2.ReferenceTime
											.getTime()));
						} else {
							pstmt_tDBOutput_2.setNull(84,
									java.sql.Types.TIMESTAMP);
						}

						pstmt_tDBOutput_2.setShort(85, row2.UseCopies);

						if (row2.Source == null) {
							pstmt_tDBOutput_2.setNull(86,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(86, row2.Source);
						}

						if (row2.PMID == null) {
							pstmt_tDBOutput_2.setNull(87,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(87, row2.PMID);
						}

						if (row2.PayCR == null) {
							pstmt_tDBOutput_2.setNull(88, java.sql.Types.OTHER);
						} else {
							pstmt_tDBOutput_2.setObject(88, row2.PayCR);
						}

						pstmt_tDBOutput_2.setInt(89, row2.ClientGroupId);

						if (row2.DRMApplied == null) {
							pstmt_tDBOutput_2.setNull(90, java.sql.Types.ARRAY);
						} else {
							pstmt_tDBOutput_2.setBytes(90, row2.DRMApplied);
						}

						pstmt_tDBOutput_2.setInt(91, row2.InvoiceId);

						if (row2.GST_HST == null) {
							pstmt_tDBOutput_2.setNull(92, java.sql.Types.OTHER);
						} else {
							pstmt_tDBOutput_2.setObject(92, row2.GST_HST);
						}

						if (row2.PST == null) {
							pstmt_tDBOutput_2.setNull(93, java.sql.Types.OTHER);
						} else {
							pstmt_tDBOutput_2.setObject(93, row2.PST);
						}

						pstmt_tDBOutput_2.setShort(94, row2.PartnerId);

						if (row2.PartnerClientId == null) {
							pstmt_tDBOutput_2.setNull(95,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(95,
									row2.PartnerClientId);
						}

						pstmt_tDBOutput_2.setInt(96, row2.AssignedToId);

						if (row2.AssignedToEmail == null) {
							pstmt_tDBOutput_2.setNull(97,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(97,
									row2.AssignedToEmail);
						}

						if (row2.IsTestOrder == null) {
							pstmt_tDBOutput_2.setNull(98, java.sql.Types.ARRAY);
						} else {
							pstmt_tDBOutput_2.setBytes(98, row2.IsTestOrder);
						}

						if (row2.WorkStatus == null) {
							pstmt_tDBOutput_2.setNull(99,
									java.sql.Types.INTEGER);
						} else {
							pstmt_tDBOutput_2.setInt(99, row2.WorkStatus);
						}

						if (row2.SuspendedReason == null) {
							pstmt_tDBOutput_2.setNull(100,
									java.sql.Types.INTEGER);
						} else {
							pstmt_tDBOutput_2.setInt(100, row2.SuspendedReason);
						}

						if (row2.WorkAssignedTime != null) {
							pstmt_tDBOutput_2.setTimestamp(101,
									new java.sql.Timestamp(
											row2.WorkAssignedTime.getTime()));
						} else {
							pstmt_tDBOutput_2.setNull(101,
									java.sql.Types.TIMESTAMP);
						}

						if (row2.WorkCreatedTime != null) {
							pstmt_tDBOutput_2.setTimestamp(
									102,
									new java.sql.Timestamp(row2.WorkCreatedTime
											.getTime()));
						} else {
							pstmt_tDBOutput_2.setNull(102,
									java.sql.Types.TIMESTAMP);
						}

						if (row2.CRVerificationRequired == null) {
							pstmt_tDBOutput_2
									.setNull(103, java.sql.Types.ARRAY);
						} else {
							pstmt_tDBOutput_2.setBytes(103,
									row2.CRVerificationRequired);
						}

						if (row2.CRVerificationVerified == null) {
							pstmt_tDBOutput_2
									.setNull(104, java.sql.Types.ARRAY);
						} else {
							pstmt_tDBOutput_2.setBytes(104,
									row2.CRVerificationVerified);
						}

						if (row2.CRVerificationNotFound == null) {
							pstmt_tDBOutput_2
									.setNull(105, java.sql.Types.ARRAY);
						} else {
							pstmt_tDBOutput_2.setBytes(105,
									row2.CRVerificationNotFound);
						}

						if (row2.CRVerificationDenied == null) {
							pstmt_tDBOutput_2
									.setNull(106, java.sql.Types.ARRAY);
						} else {
							pstmt_tDBOutput_2.setBytes(106,
									row2.CRVerificationDenied);
						}

						pstmt_tDBOutput_2.setInt(107, row2.ContentId);

						pstmt_tDBOutput_2.setInt(108, row2.PartOfContentId);

						if (row2.PartOfTitle == null) {
							pstmt_tDBOutput_2.setNull(109,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(109, row2.PartOfTitle);
						}

						if (row2.PublicationId == null) {
							pstmt_tDBOutput_2.setNull(110,
									java.sql.Types.INTEGER);
						} else {
							pstmt_tDBOutput_2.setInt(110, row2.PublicationId);
						}

						if (row2.ArticleId == null) {
							pstmt_tDBOutput_2.setNull(111,
									java.sql.Types.INTEGER);
						} else {
							pstmt_tDBOutput_2.setInt(111, row2.ArticleId);
						}

						pstmt_tDBOutput_2.setShort(112, row2.FFMethod);

						if (row2.LastNotify != null) {
							pstmt_tDBOutput_2.setTimestamp(
									113,
									new java.sql.Timestamp(row2.LastNotify
											.getTime()));
						} else {
							pstmt_tDBOutput_2.setNull(113,
									java.sql.Types.TIMESTAMP);
						}

						if (row2.ReferencingRequired == null) {
							pstmt_tDBOutput_2
									.setNull(114, java.sql.Types.ARRAY);
						} else {
							pstmt_tDBOutput_2.setBytes(114,
									row2.ReferencingRequired);
						}

						if (row2.RightsRequired == null) {
							pstmt_tDBOutput_2.setNull(115,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(115,
									row2.RightsRequired);
						}

						pstmt_tDBOutput_2.setShort(116, row2.FFSourceType);

						if (row2.ClientCosts == null) {
							pstmt_tDBOutput_2
									.setNull(117, java.sql.Types.OTHER);
						} else {
							pstmt_tDBOutput_2.setObject(117, row2.ClientCosts);
						}

						pstmt_tDBOutput_2.setInt(118, row2.FFHoldingId);

						pstmt_tDBOutput_2.setInt(119, row2.CRHoldingId);

						if (row2.TotalPublisherVendorFee == null) {
							pstmt_tDBOutput_2
									.setNull(120, java.sql.Types.OTHER);
						} else {
							pstmt_tDBOutput_2.setObject(120,
									row2.TotalPublisherVendorFee);
						}

						if (row2.WireTransferFee == null) {
							pstmt_tDBOutput_2
									.setNull(121, java.sql.Types.OTHER);
						} else {
							pstmt_tDBOutput_2.setObject(121,
									row2.WireTransferFee);
						}

						if (row2.CreditCardCharge == null) {
							pstmt_tDBOutput_2
									.setNull(122, java.sql.Types.OTHER);
						} else {
							pstmt_tDBOutput_2.setObject(122,
									row2.CreditCardCharge);
						}

						if (row2.ResellerFeeTransaction == null) {
							pstmt_tDBOutput_2
									.setNull(123, java.sql.Types.OTHER);
						} else {
							pstmt_tDBOutput_2.setObject(123,
									row2.ResellerFeeTransaction);
						}

						if (row2.ResellerFeeCR == null) {
							pstmt_tDBOutput_2
									.setNull(124, java.sql.Types.OTHER);
						} else {
							pstmt_tDBOutput_2
									.setObject(124, row2.ResellerFeeCR);
						}

						if (row2.ResellerFeeCRSErvices == null) {
							pstmt_tDBOutput_2
									.setNull(125, java.sql.Types.OTHER);
						} else {
							pstmt_tDBOutput_2.setObject(125,
									row2.ResellerFeeCRSErvices);
						}

						if (row2.ResellerFeeFF == null) {
							pstmt_tDBOutput_2
									.setNull(126, java.sql.Types.OTHER);
						} else {
							pstmt_tDBOutput_2
									.setObject(126, row2.ResellerFeeFF);
						}

						if (row2.ResellerFeeAdvRef == null) {
							pstmt_tDBOutput_2
									.setNull(127, java.sql.Types.OTHER);
						} else {
							pstmt_tDBOutput_2.setObject(127,
									row2.ResellerFeeAdvRef);
						}

						if (row2.ResellerFeeSH == null) {
							pstmt_tDBOutput_2
									.setNull(128, java.sql.Types.OTHER);
						} else {
							pstmt_tDBOutput_2
									.setObject(128, row2.ResellerFeeSH);
						}

						if (row2.ResellerFeeOther == null) {
							pstmt_tDBOutput_2
									.setNull(129, java.sql.Types.OTHER);
						} else {
							pstmt_tDBOutput_2.setObject(129,
									row2.ResellerFeeOther);
						}

						if (row2.ResellerFeeTax == null) {
							pstmt_tDBOutput_2
									.setNull(130, java.sql.Types.OTHER);
						} else {
							pstmt_tDBOutput_2.setObject(130,
									row2.ResellerFeeTax);
						}

						if (row2.ResellerFeeTotal == null) {
							pstmt_tDBOutput_2
									.setNull(131, java.sql.Types.OTHER);
						} else {
							pstmt_tDBOutput_2.setObject(131,
									row2.ResellerFeeTotal);
						}

						if (row2.InDigitalLibrary == null) {
							pstmt_tDBOutput_2
									.setNull(132, java.sql.Types.ARRAY);
						} else {
							pstmt_tDBOutput_2.setBytes(132,
									row2.InDigitalLibrary);
						}

						if (row2.LinkWithHeader == null) {
							pstmt_tDBOutput_2.setNull(133,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(133,
									row2.LinkWithHeader);
						}

						if (row2.BritishLibraryId == null) {
							pstmt_tDBOutput_2.setNull(134,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(134,
									row2.BritishLibraryId);
						}

						pstmt_tDBOutput_2.addBatch();
						nb_line_tDBOutput_2++;

						batchSizeCounter_tDBOutput_2++;

						if ((batchSize_tDBOutput_2 > 0)
								&& (batchSize_tDBOutput_2 <= batchSizeCounter_tDBOutput_2)) {
							try {
								int countSum_tDBOutput_2 = 0;

								for (int countEach_tDBOutput_2 : pstmt_tDBOutput_2
										.executeBatch()) {
									countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0
											: countEach_tDBOutput_2);
								}

								insertedCount_tDBOutput_2 += countSum_tDBOutput_2;

								batchSizeCounter_tDBOutput_2 = 0;
							} catch (java.sql.BatchUpdateException e_tDBOutput_2) {
								java.sql.SQLException ne_tDBOutput_2 = e_tDBOutput_2
										.getNextException(), sqle_tDBOutput_2 = null;
								String errormessage_tDBOutput_2;
								if (ne_tDBOutput_2 != null) {
									// build new exception to provide the
									// original cause
									sqle_tDBOutput_2 = new java.sql.SQLException(
											e_tDBOutput_2.getMessage()
													+ "\ncaused by: "
													+ ne_tDBOutput_2
															.getMessage(),
											ne_tDBOutput_2.getSQLState(),
											ne_tDBOutput_2.getErrorCode(),
											ne_tDBOutput_2);
									errormessage_tDBOutput_2 = sqle_tDBOutput_2
											.getMessage();
								} else {
									errormessage_tDBOutput_2 = e_tDBOutput_2
											.getMessage();
								}

								int countSum_tDBOutput_2 = 0;
								for (int countEach_tDBOutput_2 : e_tDBOutput_2
										.getUpdateCounts()) {
									countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0
											: countEach_tDBOutput_2);
								}

								insertedCount_tDBOutput_2 += countSum_tDBOutput_2;

								System.err.println(errormessage_tDBOutput_2);

							}
						}

						commitCounter_tDBOutput_2++;
						if (commitEvery_tDBOutput_2 <= commitCounter_tDBOutput_2) {
							if ((batchSize_tDBOutput_2 > 0)
									&& (batchSizeCounter_tDBOutput_2 > 0)) {
								try {
									int countSum_tDBOutput_2 = 0;

									for (int countEach_tDBOutput_2 : pstmt_tDBOutput_2
											.executeBatch()) {
										countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0
												: countEach_tDBOutput_2);
									}

									insertedCount_tDBOutput_2 += countSum_tDBOutput_2;

									batchSizeCounter_tDBOutput_2 = 0;
								} catch (java.sql.BatchUpdateException e_tDBOutput_2) {
									java.sql.SQLException ne_tDBOutput_2 = e_tDBOutput_2
											.getNextException(), sqle_tDBOutput_2 = null;
									String errormessage_tDBOutput_2;
									if (ne_tDBOutput_2 != null) {
										// build new exception to provide the
										// original cause
										sqle_tDBOutput_2 = new java.sql.SQLException(
												e_tDBOutput_2.getMessage()
														+ "\ncaused by: "
														+ ne_tDBOutput_2
																.getMessage(),
												ne_tDBOutput_2.getSQLState(),
												ne_tDBOutput_2.getErrorCode(),
												ne_tDBOutput_2);
										errormessage_tDBOutput_2 = sqle_tDBOutput_2
												.getMessage();
									} else {
										errormessage_tDBOutput_2 = e_tDBOutput_2
												.getMessage();
									}

									int countSum_tDBOutput_2 = 0;
									for (int countEach_tDBOutput_2 : e_tDBOutput_2
											.getUpdateCounts()) {
										countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0
												: countEach_tDBOutput_2);
									}

									insertedCount_tDBOutput_2 += countSum_tDBOutput_2;

									System.err
											.println(errormessage_tDBOutput_2);

								}
							}
							conn_tDBOutput_2.commit();

							commitCounter_tDBOutput_2 = 0;
						}

						tos_count_tDBOutput_2++;

						/**
						 * [tDBOutput_2 main ] stop
						 */

						/**
						 * [tDBOutput_2 process_data_begin ] start
						 */

						currentComponent = "tDBOutput_2";

						/**
						 * [tDBOutput_2 process_data_begin ] stop
						 */

						/**
						 * [tDBOutput_2 process_data_end ] start
						 */

						currentComponent = "tDBOutput_2";

						/**
						 * [tDBOutput_2 process_data_end ] stop
						 */

						/**
						 * [tDBInput_2 process_data_end ] start
						 */

						currentComponent = "tDBInput_2";

						/**
						 * [tDBInput_2 process_data_end ] stop
						 */

						/**
						 * [tDBInput_2 end ] start
						 */

						currentComponent = "tDBInput_2";

					}
				} finally {
					if (rs_tDBInput_2 != null) {
						rs_tDBInput_2.close();
					}
					if (stmt_tDBInput_2 != null) {
						stmt_tDBInput_2.close();
					}
				}
				globalMap.put("tDBInput_2_NB_LINE", nb_line_tDBInput_2);

				ok_Hash.put("tDBInput_2", true);
				end_Hash.put("tDBInput_2", System.currentTimeMillis());

				/**
				 * [tDBInput_2 end ] stop
				 */

				/**
				 * [tDBOutput_2 end ] start
				 */

				currentComponent = "tDBOutput_2";

				try {
					int countSum_tDBOutput_2 = 0;
					if (pstmt_tDBOutput_2 != null
							&& batchSizeCounter_tDBOutput_2 > 0) {

						for (int countEach_tDBOutput_2 : pstmt_tDBOutput_2
								.executeBatch()) {
							countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0
									: countEach_tDBOutput_2);
						}

					}

					insertedCount_tDBOutput_2 += countSum_tDBOutput_2;

				} catch (java.sql.BatchUpdateException e_tDBOutput_2) {
					java.sql.SQLException ne_tDBOutput_2 = e_tDBOutput_2
							.getNextException(), sqle_tDBOutput_2 = null;
					String errormessage_tDBOutput_2;
					if (ne_tDBOutput_2 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_2 = new java.sql.SQLException(
								e_tDBOutput_2.getMessage() + "\ncaused by: "
										+ ne_tDBOutput_2.getMessage(),
								ne_tDBOutput_2.getSQLState(),
								ne_tDBOutput_2.getErrorCode(), ne_tDBOutput_2);
						errormessage_tDBOutput_2 = sqle_tDBOutput_2
								.getMessage();
					} else {
						errormessage_tDBOutput_2 = e_tDBOutput_2.getMessage();
					}

					int countSum_tDBOutput_2 = 0;
					for (int countEach_tDBOutput_2 : e_tDBOutput_2
							.getUpdateCounts()) {
						countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0
								: countEach_tDBOutput_2);
					}

					insertedCount_tDBOutput_2 += countSum_tDBOutput_2;

					System.err.println(errormessage_tDBOutput_2);

				}

				if (pstmt_tDBOutput_2 != null) {

					pstmt_tDBOutput_2.close();
					resourceMap.remove("pstmt_tDBOutput_2");
				}
				resourceMap.put("statementClosed_tDBOutput_2", true);

				conn_tDBOutput_2.commit();

				conn_tDBOutput_2.close();

				resourceMap.put("finish_tDBOutput_2", true);

				nb_line_deleted_tDBOutput_2 = nb_line_deleted_tDBOutput_2
						+ deletedCount_tDBOutput_2;
				nb_line_update_tDBOutput_2 = nb_line_update_tDBOutput_2
						+ updatedCount_tDBOutput_2;
				nb_line_inserted_tDBOutput_2 = nb_line_inserted_tDBOutput_2
						+ insertedCount_tDBOutput_2;
				nb_line_rejected_tDBOutput_2 = nb_line_rejected_tDBOutput_2
						+ rejectedCount_tDBOutput_2;

				globalMap.put("tDBOutput_2_NB_LINE", nb_line_tDBOutput_2);
				globalMap.put("tDBOutput_2_NB_LINE_UPDATED",
						nb_line_update_tDBOutput_2);
				globalMap.put("tDBOutput_2_NB_LINE_INSERTED",
						nb_line_inserted_tDBOutput_2);
				globalMap.put("tDBOutput_2_NB_LINE_DELETED",
						nb_line_deleted_tDBOutput_2);
				globalMap.put("tDBOutput_2_NB_LINE_REJECTED",
						nb_line_rejected_tDBOutput_2);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row2" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tDBOutput_2", true);
				end_Hash.put("tDBOutput_2", System.currentTimeMillis());

				/**
				 * [tDBOutput_2 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_2 finally ] start
				 */

				currentComponent = "tDBInput_2";

				/**
				 * [tDBInput_2 finally ] stop
				 */

				/**
				 * [tDBOutput_2 finally ] start
				 */

				currentComponent = "tDBOutput_2";

				try {
					if (resourceMap.get("statementClosed_tDBOutput_2") == null) {
						java.sql.PreparedStatement pstmtToClose_tDBOutput_2 = null;
						if ((pstmtToClose_tDBOutput_2 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmt_tDBOutput_2")) != null) {
							pstmtToClose_tDBOutput_2.close();
						}
					}
				} finally {
					if (resourceMap.get("finish_tDBOutput_2") == null) {
						java.sql.Connection ctn_tDBOutput_2 = null;
						if ((ctn_tDBOutput_2 = (java.sql.Connection) resourceMap
								.get("conn_tDBOutput_2")) != null) {
							try {
								ctn_tDBOutput_2.close();
							} catch (java.sql.SQLException sqlEx_tDBOutput_2) {
								String errorMessage_tDBOutput_2 = "failed to close the connection in tDBOutput_2 :"
										+ sqlEx_tDBOutput_2.getMessage();
								System.err.println(errorMessage_tDBOutput_2);
							}
						}
					}
				}

				/**
				 * [tDBOutput_2 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_2_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final RFE_ETL RFE_ETLClass = new RFE_ETL();

		int exitCode = RFE_ETLClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket
				// can't open
				System.err.println("The statistics socket port " + portStats
						+ " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}

		try {
			// call job/subjob with an existing context, like:
			// --context=production. if without this parameter, there will use
			// the default context instead.
			java.io.InputStream inContext = RFE_ETL.class.getClassLoader()
					.getResourceAsStream(
							"order_etl/rfe_etl_0_1/contexts/" + contextStr
									+ ".properties");
			if (inContext == null) {
				inContext = RFE_ETL.class.getClassLoader().getResourceAsStream(
						"config/contexts/" + contextStr + ".properties");
			}
			if (inContext != null) {
				// defaultProps is in order to keep the original context value
				defaultProps.load(inContext);
				inContext.close();
				context = new ContextProperties(defaultProps);
			} else if (!isDefaultContext) {
				// print info and job continue to run, for case: context_param
				// is not empty.
				System.err.println("Could not find the context " + contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param
							.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil
				.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName,
				jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName,
				parent_part_launcher, Thread.currentThread().getId() + "", "",
				"", "", "",
				resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tDBConnection_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tDBConnection_1) {
			globalMap.put("tDBConnection_1_SUBPROCESS_STATE", -1);

			e_tDBConnection_1.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println((endUsedMemory - startUsedMemory)
					+ " bytes memory increase when running : RFE_ETL");
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher,
				Thread.currentThread().getId() + "", "", "" + returnCode, "",
				"", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {
		closeSqlDbConnections();

	}

	private void closeSqlDbConnections() {
		try {
			Object obj_conn;
			obj_conn = globalMap.remove("conn_tDBConnection_1");
			if (null != obj_conn) {
				((java.sql.Connection) obj_conn).close();
			}
		} catch (java.lang.Exception e) {
		}
	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
		connections.put("conn_tDBConnection_1",
				globalMap.get("conn_tDBConnection_1"));

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		}

	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" },
			{ "\\'", "\'" }, { "\\r", "\r" }, { "\\f", "\f" }, { "\\b", "\b" },
			{ "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex,
							index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left
			// into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 244440 characters generated by Talend Open Studio for Data Integration on the
 * March 25, 2019 4:15:40 PM EDT
 ************************************************************************************************/

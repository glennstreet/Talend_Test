// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package order_etl.tf_etl_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")
/**
 * Job: TF_ETL Purpose: <br>
 * Description:  <br>
 * @author user@talend.com
 * @version 7.1.1.20181026_1147
 * @status 
 */
public class TF_ETL implements TalendJob {

	protected static void logIgnoredError(String message, Throwable cause) {
		System.err.println(message);
		if (cause != null) {
			cause.printStackTrace();
		}

	}

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private Object[] multiThreadLockWrite = new Object[0];

	private final static String defaultCharset = java.nio.charset.Charset
			.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

		}

	}

	private ContextProperties context = new ContextProperties();

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "TF_ETL";
	private final String projectName = "ORDER_ETL";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = java.util.Collections
			.synchronizedMap(new java.util.HashMap<String, Object>());

	private final java.util.Map<String, Long> start_Hash = java.util.Collections
			.synchronizedMap(new java.util.HashMap<String, Long>());
	private final java.util.Map<String, Long> end_Hash = java.util.Collections
			.synchronizedMap(new java.util.HashMap<String, Long>());
	private final java.util.Map<String, Boolean> ok_Hash = java.util.Collections
			.synchronizedMap(new java.util.HashMap<String, Boolean>());
	public final java.util.List<String[]> globalBuffer = java.util.Collections
			.synchronizedList(new java.util.ArrayList<String[]>());

	private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(
			java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources
				.entrySet()) {
			talendDataSources.put(
					dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry
							.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap
				.put(KEY_DB_DATASOURCES_RAW,
						new java.util.HashMap<String, javax.sql.DataSource>(
								dataSources));
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
			new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent,
				final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null
						&& currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE",
							getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE",
						getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent
						+ " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					TF_ETL.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass()
							.getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(TF_ETL.this, new Object[] { e,
									currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tDBConnection_3_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tDBConnection_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_7_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tDBInput_7_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_7_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tDBInput_7_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBConnection_4_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tDBConnection_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_8_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tDBInput_8_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_8_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tDBInput_8_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBConnection_5_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tDBConnection_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_5_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_5_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_6_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tDBInput_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_6_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tDBInput_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBConnection_3_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_3_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_7_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBConnection_4_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_4_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_8_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBConnection_5_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_5_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_2_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_6_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBConnection_3Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDBConnection_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tDBConnection_3 begin ] start
				 */

				ok_Hash.put("tDBConnection_3", false);
				start_Hash.put("tDBConnection_3", System.currentTimeMillis());

				currentComponent = "tDBConnection_3";

				int tos_count_tDBConnection_3 = 0;

				String url_tDBConnection_3 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host="
						+ "shnpc1dw1.aws-sh-npc.copyright.com"
						+ ")(port="
						+ "1541"
						+ "))(connect_data=(service_name="
						+ "dwd1.copyright.com" + ")))";
				globalMap.put("connectionType_" + "tDBConnection_3",
						"ORACLE_SERVICE_NAME");
				String dbUser_tDBConnection_3 = "dw_enterprise";

				final String decryptedPassword_tDBConnection_3 = routines.system.PasswordEncryptUtil
						.decryptPassword("317be83bb74b6d037f95c5bcaa9f0447");
				String dbPwd_tDBConnection_3 = decryptedPassword_tDBConnection_3;

				java.sql.Connection conn_tDBConnection_3 = null;

				String driverClass_tDBConnection_3 = "oracle.jdbc.OracleDriver";
				java.lang.Class.forName(driverClass_tDBConnection_3);

				conn_tDBConnection_3 = java.sql.DriverManager.getConnection(
						url_tDBConnection_3, dbUser_tDBConnection_3,
						dbPwd_tDBConnection_3);

				globalMap.put("conn_tDBConnection_3", conn_tDBConnection_3);
				if (null != conn_tDBConnection_3) {

					conn_tDBConnection_3.setAutoCommit(false);
				}
				globalMap.put("host_" + "tDBConnection_3",
						"shnpc1dw1.aws-sh-npc.copyright.com");
				globalMap.put("port_" + "tDBConnection_3", "1541");
				globalMap.put("dbname_" + "tDBConnection_3",
						"dwd1.copyright.com");

				globalMap
						.put("conn_" + "tDBConnection_3", conn_tDBConnection_3);
				globalMap.put("dbschema_" + "tDBConnection_3", "op_stage");
				globalMap.put("username_" + "tDBConnection_3", "dw_enterprise");
				globalMap.put("password_" + "tDBConnection_3",
						dbPwd_tDBConnection_3);

				/**
				 * [tDBConnection_3 begin ] stop
				 */

				/**
				 * [tDBConnection_3 main ] start
				 */

				currentComponent = "tDBConnection_3";

				tos_count_tDBConnection_3++;

				/**
				 * [tDBConnection_3 main ] stop
				 */

				/**
				 * [tDBConnection_3 process_data_begin ] start
				 */

				currentComponent = "tDBConnection_3";

				/**
				 * [tDBConnection_3 process_data_begin ] stop
				 */

				/**
				 * [tDBConnection_3 process_data_end ] start
				 */

				currentComponent = "tDBConnection_3";

				/**
				 * [tDBConnection_3 process_data_end ] stop
				 */

				/**
				 * [tDBConnection_3 end ] start
				 */

				currentComponent = "tDBConnection_3";

				ok_Hash.put("tDBConnection_3", true);
				end_Hash.put("tDBConnection_3", System.currentTimeMillis());

				/**
				 * [tDBConnection_3 end ] stop
				 */
			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tDBConnection_3:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk3", 0, "ok");
			}

			tDBInput_3Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBConnection_3 finally ] start
				 */

				currentComponent = "tDBConnection_3";

				/**
				 * [tDBConnection_3 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBConnection_3_SUBPROCESS_STATE", 1);
	}

	public static class row3Struct implements
			routines.system.IPersistableRow<row3Struct> {
		final static byte[] commonByteArrayLock_ORDER_ETL_TF_ETL = new byte[0];
		static byte[] commonByteArray_ORDER_ETL_TF_ETL = new byte[0];

		public String INVOICE_NO;

		public String getINVOICE_NO() {
			return this.INVOICE_NO;
		}

		public String InvSourceSystem;

		public String getInvSourceSystem() {
			return this.InvSourceSystem;
		}

		public java.util.Date InvDate;

		public java.util.Date getInvDate() {
			return this.InvDate;
		}

		public String InvStatus;

		public String getInvStatus() {
			return this.InvStatus;
		}

		public java.util.Date PaymentDate;

		public java.util.Date getPaymentDate() {
			return this.PaymentDate;
		}

		public BigDecimal InvoiceTotalAmount;

		public BigDecimal getInvoiceTotalAmount() {
			return this.InvoiceTotalAmount;
		}

		public BigDecimal InvoiceTaxAmt;

		public BigDecimal getInvoiceTaxAmt() {
			return this.InvoiceTaxAmt;
		}

		public BigDecimal InvoiceDiscountAmt;

		public BigDecimal getInvoiceDiscountAmt() {
			return this.InvoiceDiscountAmt;
		}

		public String InvoiceExchangeRate;

		public String getInvoiceExchangeRate() {
			return this.InvoiceExchangeRate;
		}

		public String Currency;

		public String getCurrency() {
			return this.Currency;
		}

		public String OrganizationName;

		public String getOrganizationName() {
			return this.OrganizationName;
		}

		public BigDecimal TotalTxnCurrency;

		public BigDecimal getTotalTxnCurrency() {
			return this.TotalTxnCurrency;
		}

		public BigDecimal OriginTxnCurrency;

		public BigDecimal getOriginTxnCurrency() {
			return this.OriginTxnCurrency;
		}

		public BigDecimal TaxAmtTxnCurrency;

		public BigDecimal getTaxAmtTxnCurrency() {
			return this.TaxAmtTxnCurrency;
		}

		public String PaymentStatus;

		public String getPaymentStatus() {
			return this.PaymentStatus;
		}

		public String InvoiceClass;

		public String getInvoiceClass() {
			return this.InvoiceClass;
		}

		public BigDecimal OrganizationUid;

		public BigDecimal getOrganizationUid() {
			return this.OrganizationUid;
		}

		public java.util.Date CreatedDate;

		public java.util.Date getCreatedDate() {
			return this.CreatedDate;
		}

		public String CreatedBy;

		public String getCreatedBy() {
			return this.CreatedBy;
		}

		public java.util.Date UpdatedDate;

		public java.util.Date getUpdatedDate() {
			return this.UpdatedDate;
		}

		public String UpdatedBy;

		public String getUpdatedBy() {
			return this.UpdatedBy;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ORDER_ETL_TF_ETL.length) {
					if (length < 1024
							&& commonByteArray_ORDER_ETL_TF_ETL.length == 0) {
						commonByteArray_ORDER_ETL_TF_ETL = new byte[1024];
					} else {
						commonByteArray_ORDER_ETL_TF_ETL = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ORDER_ETL_TF_ETL, 0, length);
				strReturn = new String(commonByteArray_ORDER_ETL_TF_ETL, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ORDER_ETL_TF_ETL) {

				try {

					int length = 0;

					this.INVOICE_NO = readString(dis);

					this.InvSourceSystem = readString(dis);

					this.InvDate = readDate(dis);

					this.InvStatus = readString(dis);

					this.PaymentDate = readDate(dis);

					this.InvoiceTotalAmount = (BigDecimal) dis.readObject();

					this.InvoiceTaxAmt = (BigDecimal) dis.readObject();

					this.InvoiceDiscountAmt = (BigDecimal) dis.readObject();

					this.InvoiceExchangeRate = readString(dis);

					this.Currency = readString(dis);

					this.OrganizationName = readString(dis);

					this.TotalTxnCurrency = (BigDecimal) dis.readObject();

					this.OriginTxnCurrency = (BigDecimal) dis.readObject();

					this.TaxAmtTxnCurrency = (BigDecimal) dis.readObject();

					this.PaymentStatus = readString(dis);

					this.InvoiceClass = readString(dis);

					this.OrganizationUid = (BigDecimal) dis.readObject();

					this.CreatedDate = readDate(dis);

					this.CreatedBy = readString(dis);

					this.UpdatedDate = readDate(dis);

					this.UpdatedBy = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.INVOICE_NO, dos);

				// String

				writeString(this.InvSourceSystem, dos);

				// java.util.Date

				writeDate(this.InvDate, dos);

				// String

				writeString(this.InvStatus, dos);

				// java.util.Date

				writeDate(this.PaymentDate, dos);

				// BigDecimal

				dos.writeObject(this.InvoiceTotalAmount);

				// BigDecimal

				dos.writeObject(this.InvoiceTaxAmt);

				// BigDecimal

				dos.writeObject(this.InvoiceDiscountAmt);

				// String

				writeString(this.InvoiceExchangeRate, dos);

				// String

				writeString(this.Currency, dos);

				// String

				writeString(this.OrganizationName, dos);

				// BigDecimal

				dos.writeObject(this.TotalTxnCurrency);

				// BigDecimal

				dos.writeObject(this.OriginTxnCurrency);

				// BigDecimal

				dos.writeObject(this.TaxAmtTxnCurrency);

				// String

				writeString(this.PaymentStatus, dos);

				// String

				writeString(this.InvoiceClass, dos);

				// BigDecimal

				dos.writeObject(this.OrganizationUid);

				// java.util.Date

				writeDate(this.CreatedDate, dos);

				// String

				writeString(this.CreatedBy, dos);

				// java.util.Date

				writeDate(this.UpdatedDate, dos);

				// String

				writeString(this.UpdatedBy, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("INVOICE_NO=" + INVOICE_NO);
			sb.append(",InvSourceSystem=" + InvSourceSystem);
			sb.append(",InvDate=" + String.valueOf(InvDate));
			sb.append(",InvStatus=" + InvStatus);
			sb.append(",PaymentDate=" + String.valueOf(PaymentDate));
			sb.append(",InvoiceTotalAmount="
					+ String.valueOf(InvoiceTotalAmount));
			sb.append(",InvoiceTaxAmt=" + String.valueOf(InvoiceTaxAmt));
			sb.append(",InvoiceDiscountAmt="
					+ String.valueOf(InvoiceDiscountAmt));
			sb.append(",InvoiceExchangeRate=" + InvoiceExchangeRate);
			sb.append(",Currency=" + Currency);
			sb.append(",OrganizationName=" + OrganizationName);
			sb.append(",TotalTxnCurrency=" + String.valueOf(TotalTxnCurrency));
			sb.append(",OriginTxnCurrency=" + String.valueOf(OriginTxnCurrency));
			sb.append(",TaxAmtTxnCurrency=" + String.valueOf(TaxAmtTxnCurrency));
			sb.append(",PaymentStatus=" + PaymentStatus);
			sb.append(",InvoiceClass=" + InvoiceClass);
			sb.append(",OrganizationUid=" + String.valueOf(OrganizationUid));
			sb.append(",CreatedDate=" + String.valueOf(CreatedDate));
			sb.append(",CreatedBy=" + CreatedBy);
			sb.append(",UpdatedDate=" + String.valueOf(UpdatedDate));
			sb.append(",UpdatedBy=" + UpdatedBy);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_3Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDBInput_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row3Struct row3 = new row3Struct();

				/**
				 * [tDBOutput_3 begin ] start
				 */

				ok_Hash.put("tDBOutput_3", false);
				start_Hash.put("tDBOutput_3", System.currentTimeMillis());

				currentComponent = "tDBOutput_3";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row3" + iterateId, 0, 0);

					}
				}

				int tos_count_tDBOutput_3 = 0;

				String dbschema_tDBOutput_3 = null;
				dbschema_tDBOutput_3 = "staging";

				String tableName_tDBOutput_3 = null;
				if (dbschema_tDBOutput_3 == null
						|| dbschema_tDBOutput_3.trim().length() == 0) {
					tableName_tDBOutput_3 = "stg_tf_rup_tfinvoices";
				} else {
					tableName_tDBOutput_3 = dbschema_tDBOutput_3 + "\".\""
							+ "stg_tf_rup_tfinvoices";
				}

				int nb_line_tDBOutput_3 = 0;
				int nb_line_update_tDBOutput_3 = 0;
				int nb_line_inserted_tDBOutput_3 = 0;
				int nb_line_deleted_tDBOutput_3 = 0;
				int nb_line_rejected_tDBOutput_3 = 0;

				int deletedCount_tDBOutput_3 = 0;
				int updatedCount_tDBOutput_3 = 0;
				int insertedCount_tDBOutput_3 = 0;
				int rejectedCount_tDBOutput_3 = 0;

				boolean whetherReject_tDBOutput_3 = false;

				java.sql.Connection conn_tDBOutput_3 = null;
				String dbUser_tDBOutput_3 = null;

				java.lang.Class.forName("org.postgresql.Driver");
				String url_tDBOutput_3 = "jdbc:postgresql://" + "localhost"
						+ ":" + "5432" + "/" + "rup";
				dbUser_tDBOutput_3 = "rup";

				final String decryptedPassword_tDBOutput_3 = routines.system.PasswordEncryptUtil
						.decryptPassword("544d653f2c2bdc61");

				String dbPwd_tDBOutput_3 = decryptedPassword_tDBOutput_3;

				conn_tDBOutput_3 = java.sql.DriverManager.getConnection(
						url_tDBOutput_3, dbUser_tDBOutput_3, dbPwd_tDBOutput_3);

				resourceMap.put("conn_tDBOutput_3", conn_tDBOutput_3);
				conn_tDBOutput_3.setAutoCommit(false);
				int commitEvery_tDBOutput_3 = 10000;
				int commitCounter_tDBOutput_3 = 0;

				int batchSize_tDBOutput_3 = 10000;
				int batchSizeCounter_tDBOutput_3 = 0;

				int count_tDBOutput_3 = 0;
				String insert_tDBOutput_3 = "INSERT INTO \""
						+ tableName_tDBOutput_3
						+ "\" (\"invoice_no\",\"invsourcesystem\",\"invdate\",\"invstatus\",\"paymentdate\",\"invoicetotalamount\",\"invoicetaxamt\",\"invoicediscountamt\",\"invoiceexchangerate\",\"currency\",\"organizationname\",\"totaltxncurrency\",\"origintxncurrency\",\"taxamttxncurrency\",\"paymentstatus\",\"invoiceclass\",\"organizationuid\",\"createddate\",\"createdby\",\"updateddate\",\"updatedby\") VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

				java.sql.PreparedStatement pstmt_tDBOutput_3 = conn_tDBOutput_3
						.prepareStatement(insert_tDBOutput_3);
				resourceMap.put("pstmt_tDBOutput_3", pstmt_tDBOutput_3);

				/**
				 * [tDBOutput_3 begin ] stop
				 */

				/**
				 * [tDBInput_3 begin ] start
				 */

				ok_Hash.put("tDBInput_3", false);
				start_Hash.put("tDBInput_3", System.currentTimeMillis());

				currentComponent = "tDBInput_3";

				int tos_count_tDBInput_3 = 0;

				int nb_line_tDBInput_3 = 0;
				java.sql.Connection conn_tDBInput_3 = null;
				conn_tDBInput_3 = (java.sql.Connection) globalMap
						.get("conn_tDBConnection_3");
				boolean isTimeZoneNull_tDBInput_3 = false;
				boolean isConnectionWrapped_tDBInput_3 = !(conn_tDBInput_3 instanceof oracle.jdbc.OracleConnection)
						&& conn_tDBInput_3
								.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tDBInput_3 = null;
				if (isConnectionWrapped_tDBInput_3) {
					unwrappedOraConn_tDBInput_3 = conn_tDBInput_3
							.unwrap(oracle.jdbc.OracleConnection.class);
					if (unwrappedOraConn_tDBInput_3 != null) {
						isTimeZoneNull_tDBInput_3 = (unwrappedOraConn_tDBInput_3
								.getSessionTimeZone() == null);
					}
				} else {
					isTimeZoneNull_tDBInput_3 = (((oracle.jdbc.OracleConnection) conn_tDBInput_3)
							.getSessionTimeZone() == null);
				}

				if (isTimeZoneNull_tDBInput_3) {
					java.sql.Statement stmtGetTZ_tDBInput_3 = conn_tDBInput_3
							.createStatement();
					java.sql.ResultSet rsGetTZ_tDBInput_3 = stmtGetTZ_tDBInput_3
							.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tDBInput_3 = java.util.TimeZone
							.getDefault().getID();
					while (rsGetTZ_tDBInput_3.next()) {
						sessionTimezone_tDBInput_3 = rsGetTZ_tDBInput_3
								.getString(1);
					}
					if (isConnectionWrapped_tDBInput_3
							&& unwrappedOraConn_tDBInput_3 != null) {
						unwrappedOraConn_tDBInput_3
								.setSessionTimeZone(sessionTimezone_tDBInput_3);
					} else {
						((oracle.jdbc.OracleConnection) conn_tDBInput_3)
								.setSessionTimeZone(sessionTimezone_tDBInput_3);
					}
				}

				java.sql.Statement stmt_tDBInput_3 = conn_tDBInput_3
						.createStatement();

				String dbquery_tDBInput_3 = "select * from op_stage.RUP_TFINVOICES_V\nWHERE to_char(\"InvDate\", 'YYYY-MM-DD') >= '2016-01-01'";

				globalMap.put("tDBInput_3_QUERY", dbquery_tDBInput_3);
				java.sql.ResultSet rs_tDBInput_3 = null;

				try {
					rs_tDBInput_3 = stmt_tDBInput_3
							.executeQuery(dbquery_tDBInput_3);
					java.sql.ResultSetMetaData rsmd_tDBInput_3 = rs_tDBInput_3
							.getMetaData();
					int colQtyInRs_tDBInput_3 = rsmd_tDBInput_3
							.getColumnCount();

					String tmpContent_tDBInput_3 = null;

					while (rs_tDBInput_3.next()) {
						nb_line_tDBInput_3++;

						if (colQtyInRs_tDBInput_3 < 1) {
							row3.INVOICE_NO = null;
						} else {

							row3.INVOICE_NO = routines.system.JDBCUtil
									.getString(rs_tDBInput_3, 1, false);
						}
						if (colQtyInRs_tDBInput_3 < 2) {
							row3.InvSourceSystem = null;
						} else {

							row3.InvSourceSystem = routines.system.JDBCUtil
									.getString(rs_tDBInput_3, 2, false);
						}
						if (colQtyInRs_tDBInput_3 < 3) {
							row3.InvDate = null;
						} else {

							row3.InvDate = routines.system.JDBCUtil.getDate(
									rs_tDBInput_3, 3);
						}
						if (colQtyInRs_tDBInput_3 < 4) {
							row3.InvStatus = null;
						} else {

							row3.InvStatus = routines.system.JDBCUtil
									.getString(rs_tDBInput_3, 4, false);
						}
						if (colQtyInRs_tDBInput_3 < 5) {
							row3.PaymentDate = null;
						} else {

							row3.PaymentDate = routines.system.JDBCUtil
									.getDate(rs_tDBInput_3, 5);
						}
						if (colQtyInRs_tDBInput_3 < 6) {
							row3.InvoiceTotalAmount = null;
						} else {

							if (rs_tDBInput_3.getObject(6) != null) {
								row3.InvoiceTotalAmount = rs_tDBInput_3
										.getBigDecimal(6);
							} else {

								row3.InvoiceTotalAmount = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 7) {
							row3.InvoiceTaxAmt = null;
						} else {

							if (rs_tDBInput_3.getObject(7) != null) {
								row3.InvoiceTaxAmt = rs_tDBInput_3
										.getBigDecimal(7);
							} else {

								row3.InvoiceTaxAmt = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 8) {
							row3.InvoiceDiscountAmt = null;
						} else {

							if (rs_tDBInput_3.getObject(8) != null) {
								row3.InvoiceDiscountAmt = rs_tDBInput_3
										.getBigDecimal(8);
							} else {

								row3.InvoiceDiscountAmt = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 9) {
							row3.InvoiceExchangeRate = null;
						} else {

							row3.InvoiceExchangeRate = routines.system.JDBCUtil
									.getString(rs_tDBInput_3, 9, false);
						}
						if (colQtyInRs_tDBInput_3 < 10) {
							row3.Currency = null;
						} else {

							row3.Currency = routines.system.JDBCUtil.getString(
									rs_tDBInput_3, 10, false);
						}
						if (colQtyInRs_tDBInput_3 < 11) {
							row3.OrganizationName = null;
						} else {

							row3.OrganizationName = routines.system.JDBCUtil
									.getString(rs_tDBInput_3, 11, false);
						}
						if (colQtyInRs_tDBInput_3 < 12) {
							row3.TotalTxnCurrency = null;
						} else {

							if (rs_tDBInput_3.getObject(12) != null) {
								row3.TotalTxnCurrency = rs_tDBInput_3
										.getBigDecimal(12);
							} else {

								row3.TotalTxnCurrency = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 13) {
							row3.OriginTxnCurrency = null;
						} else {

							if (rs_tDBInput_3.getObject(13) != null) {
								row3.OriginTxnCurrency = rs_tDBInput_3
										.getBigDecimal(13);
							} else {

								row3.OriginTxnCurrency = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 14) {
							row3.TaxAmtTxnCurrency = null;
						} else {

							if (rs_tDBInput_3.getObject(14) != null) {
								row3.TaxAmtTxnCurrency = rs_tDBInput_3
										.getBigDecimal(14);
							} else {

								row3.TaxAmtTxnCurrency = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 15) {
							row3.PaymentStatus = null;
						} else {

							row3.PaymentStatus = routines.system.JDBCUtil
									.getString(rs_tDBInput_3, 15, false);
						}
						if (colQtyInRs_tDBInput_3 < 16) {
							row3.InvoiceClass = null;
						} else {

							row3.InvoiceClass = routines.system.JDBCUtil
									.getString(rs_tDBInput_3, 16, false);
						}
						if (colQtyInRs_tDBInput_3 < 17) {
							row3.OrganizationUid = null;
						} else {

							if (rs_tDBInput_3.getObject(17) != null) {
								row3.OrganizationUid = rs_tDBInput_3
										.getBigDecimal(17);
							} else {

								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_3 < 18) {
							row3.CreatedDate = null;
						} else {

							row3.CreatedDate = routines.system.JDBCUtil
									.getDate(rs_tDBInput_3, 18);
						}
						if (colQtyInRs_tDBInput_3 < 19) {
							row3.CreatedBy = null;
						} else {

							row3.CreatedBy = routines.system.JDBCUtil
									.getString(rs_tDBInput_3, 19, false);
						}
						if (colQtyInRs_tDBInput_3 < 20) {
							row3.UpdatedDate = null;
						} else {

							row3.UpdatedDate = routines.system.JDBCUtil
									.getDate(rs_tDBInput_3, 20);
						}
						if (colQtyInRs_tDBInput_3 < 21) {
							row3.UpdatedBy = null;
						} else {

							row3.UpdatedBy = routines.system.JDBCUtil
									.getString(rs_tDBInput_3, 21, false);
						}

						/**
						 * [tDBInput_3 begin ] stop
						 */

						/**
						 * [tDBInput_3 main ] start
						 */

						currentComponent = "tDBInput_3";

						tos_count_tDBInput_3++;

						/**
						 * [tDBInput_3 main ] stop
						 */

						/**
						 * [tDBInput_3 process_data_begin ] start
						 */

						currentComponent = "tDBInput_3";

						/**
						 * [tDBInput_3 process_data_begin ] stop
						 */

						/**
						 * [tDBOutput_3 main ] start
						 */

						currentComponent = "tDBOutput_3";

						// row3
						// row3

						if (execStat) {
							runStat.updateStatOnConnection("row3" + iterateId,
									1, 1);
						}

						whetherReject_tDBOutput_3 = false;
						if (row3.INVOICE_NO == null) {
							pstmt_tDBOutput_3
									.setNull(1, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_3.setString(1, row3.INVOICE_NO);
						}

						if (row3.InvSourceSystem == null) {
							pstmt_tDBOutput_3
									.setNull(2, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_3
									.setString(2, row3.InvSourceSystem);
						}

						if (row3.InvDate != null) {
							pstmt_tDBOutput_3.setTimestamp(
									3,
									new java.sql.Timestamp(row3.InvDate
											.getTime()));
						} else {
							pstmt_tDBOutput_3.setNull(3,
									java.sql.Types.TIMESTAMP);
						}

						if (row3.InvStatus == null) {
							pstmt_tDBOutput_3
									.setNull(4, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_3.setString(4, row3.InvStatus);
						}

						if (row3.PaymentDate != null) {
							pstmt_tDBOutput_3.setTimestamp(
									5,
									new java.sql.Timestamp(row3.PaymentDate
											.getTime()));
						} else {
							pstmt_tDBOutput_3.setNull(5,
									java.sql.Types.TIMESTAMP);
						}

						pstmt_tDBOutput_3.setBigDecimal(6,
								row3.InvoiceTotalAmount);

						pstmt_tDBOutput_3.setBigDecimal(7, row3.InvoiceTaxAmt);

						pstmt_tDBOutput_3.setBigDecimal(8,
								row3.InvoiceDiscountAmt);

						if (row3.InvoiceExchangeRate == null) {
							pstmt_tDBOutput_3
									.setNull(9, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_3.setString(9,
									row3.InvoiceExchangeRate);
						}

						if (row3.Currency == null) {
							pstmt_tDBOutput_3.setNull(10,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_3.setString(10, row3.Currency);
						}

						if (row3.OrganizationName == null) {
							pstmt_tDBOutput_3.setNull(11,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_3.setString(11,
									row3.OrganizationName);
						}

						pstmt_tDBOutput_3.setBigDecimal(12,
								row3.TotalTxnCurrency);

						pstmt_tDBOutput_3.setBigDecimal(13,
								row3.OriginTxnCurrency);

						pstmt_tDBOutput_3.setBigDecimal(14,
								row3.TaxAmtTxnCurrency);

						if (row3.PaymentStatus == null) {
							pstmt_tDBOutput_3.setNull(15,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_3.setString(15, row3.PaymentStatus);
						}

						if (row3.InvoiceClass == null) {
							pstmt_tDBOutput_3.setNull(16,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_3.setString(16, row3.InvoiceClass);
						}

						pstmt_tDBOutput_3.setBigDecimal(17,
								row3.OrganizationUid);

						if (row3.CreatedDate != null) {
							pstmt_tDBOutput_3.setTimestamp(
									18,
									new java.sql.Timestamp(row3.CreatedDate
											.getTime()));
						} else {
							pstmt_tDBOutput_3.setNull(18,
									java.sql.Types.TIMESTAMP);
						}

						if (row3.CreatedBy == null) {
							pstmt_tDBOutput_3.setNull(19,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_3.setString(19, row3.CreatedBy);
						}

						if (row3.UpdatedDate != null) {
							pstmt_tDBOutput_3.setTimestamp(
									20,
									new java.sql.Timestamp(row3.UpdatedDate
											.getTime()));
						} else {
							pstmt_tDBOutput_3.setNull(20,
									java.sql.Types.TIMESTAMP);
						}

						if (row3.UpdatedBy == null) {
							pstmt_tDBOutput_3.setNull(21,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_3.setString(21, row3.UpdatedBy);
						}

						pstmt_tDBOutput_3.addBatch();
						nb_line_tDBOutput_3++;

						batchSizeCounter_tDBOutput_3++;

						if (!whetherReject_tDBOutput_3) {
						}
						if ((batchSize_tDBOutput_3 > 0)
								&& (batchSize_tDBOutput_3 <= batchSizeCounter_tDBOutput_3)) {
							try {
								int countSum_tDBOutput_3 = 0;

								for (int countEach_tDBOutput_3 : pstmt_tDBOutput_3
										.executeBatch()) {
									countSum_tDBOutput_3 += (countEach_tDBOutput_3 < 0 ? 0
											: countEach_tDBOutput_3);
								}

								insertedCount_tDBOutput_3 += countSum_tDBOutput_3;

								batchSizeCounter_tDBOutput_3 = 0;
							} catch (java.sql.BatchUpdateException e_tDBOutput_3) {
								java.sql.SQLException ne_tDBOutput_3 = e_tDBOutput_3
										.getNextException(), sqle_tDBOutput_3 = null;
								String errormessage_tDBOutput_3;
								if (ne_tDBOutput_3 != null) {
									// build new exception to provide the
									// original cause
									sqle_tDBOutput_3 = new java.sql.SQLException(
											e_tDBOutput_3.getMessage()
													+ "\ncaused by: "
													+ ne_tDBOutput_3
															.getMessage(),
											ne_tDBOutput_3.getSQLState(),
											ne_tDBOutput_3.getErrorCode(),
											ne_tDBOutput_3);
									errormessage_tDBOutput_3 = sqle_tDBOutput_3
											.getMessage();
								} else {
									errormessage_tDBOutput_3 = e_tDBOutput_3
											.getMessage();
								}

								int countSum_tDBOutput_3 = 0;
								for (int countEach_tDBOutput_3 : e_tDBOutput_3
										.getUpdateCounts()) {
									countSum_tDBOutput_3 += (countEach_tDBOutput_3 < 0 ? 0
											: countEach_tDBOutput_3);
								}

								insertedCount_tDBOutput_3 += countSum_tDBOutput_3;

								System.err.println(errormessage_tDBOutput_3);

							}
						}

						commitCounter_tDBOutput_3++;
						if (commitEvery_tDBOutput_3 <= commitCounter_tDBOutput_3) {
							if ((batchSize_tDBOutput_3 > 0)
									&& (batchSizeCounter_tDBOutput_3 > 0)) {
								try {
									int countSum_tDBOutput_3 = 0;

									for (int countEach_tDBOutput_3 : pstmt_tDBOutput_3
											.executeBatch()) {
										countSum_tDBOutput_3 += (countEach_tDBOutput_3 < 0 ? 0
												: countEach_tDBOutput_3);
									}

									insertedCount_tDBOutput_3 += countSum_tDBOutput_3;

									batchSizeCounter_tDBOutput_3 = 0;
								} catch (java.sql.BatchUpdateException e_tDBOutput_3) {
									java.sql.SQLException ne_tDBOutput_3 = e_tDBOutput_3
											.getNextException(), sqle_tDBOutput_3 = null;
									String errormessage_tDBOutput_3;
									if (ne_tDBOutput_3 != null) {
										// build new exception to provide the
										// original cause
										sqle_tDBOutput_3 = new java.sql.SQLException(
												e_tDBOutput_3.getMessage()
														+ "\ncaused by: "
														+ ne_tDBOutput_3
																.getMessage(),
												ne_tDBOutput_3.getSQLState(),
												ne_tDBOutput_3.getErrorCode(),
												ne_tDBOutput_3);
										errormessage_tDBOutput_3 = sqle_tDBOutput_3
												.getMessage();
									} else {
										errormessage_tDBOutput_3 = e_tDBOutput_3
												.getMessage();
									}

									int countSum_tDBOutput_3 = 0;
									for (int countEach_tDBOutput_3 : e_tDBOutput_3
											.getUpdateCounts()) {
										countSum_tDBOutput_3 += (countEach_tDBOutput_3 < 0 ? 0
												: countEach_tDBOutput_3);
									}

									insertedCount_tDBOutput_3 += countSum_tDBOutput_3;

									System.err
											.println(errormessage_tDBOutput_3);

								}
							}
							conn_tDBOutput_3.commit();

							commitCounter_tDBOutput_3 = 0;
						}

						tos_count_tDBOutput_3++;

						/**
						 * [tDBOutput_3 main ] stop
						 */

						/**
						 * [tDBOutput_3 process_data_begin ] start
						 */

						currentComponent = "tDBOutput_3";

						/**
						 * [tDBOutput_3 process_data_begin ] stop
						 */

						/**
						 * [tDBOutput_3 process_data_end ] start
						 */

						currentComponent = "tDBOutput_3";

						/**
						 * [tDBOutput_3 process_data_end ] stop
						 */

						/**
						 * [tDBInput_3 process_data_end ] start
						 */

						currentComponent = "tDBInput_3";

						/**
						 * [tDBInput_3 process_data_end ] stop
						 */

						/**
						 * [tDBInput_3 end ] start
						 */

						currentComponent = "tDBInput_3";

					}
				} finally {
					if (rs_tDBInput_3 != null) {
						rs_tDBInput_3.close();
					}
					if (stmt_tDBInput_3 != null) {
						stmt_tDBInput_3.close();
					}
				}

				globalMap.put("tDBInput_3_NB_LINE", nb_line_tDBInput_3);

				ok_Hash.put("tDBInput_3", true);
				end_Hash.put("tDBInput_3", System.currentTimeMillis());

				/**
				 * [tDBInput_3 end ] stop
				 */

				/**
				 * [tDBOutput_3 end ] start
				 */

				currentComponent = "tDBOutput_3";

				try {
					int countSum_tDBOutput_3 = 0;
					if (pstmt_tDBOutput_3 != null
							&& batchSizeCounter_tDBOutput_3 > 0) {

						for (int countEach_tDBOutput_3 : pstmt_tDBOutput_3
								.executeBatch()) {
							countSum_tDBOutput_3 += (countEach_tDBOutput_3 < 0 ? 0
									: countEach_tDBOutput_3);
						}

					}

					insertedCount_tDBOutput_3 += countSum_tDBOutput_3;

				} catch (java.sql.BatchUpdateException e_tDBOutput_3) {
					java.sql.SQLException ne_tDBOutput_3 = e_tDBOutput_3
							.getNextException(), sqle_tDBOutput_3 = null;
					String errormessage_tDBOutput_3;
					if (ne_tDBOutput_3 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_3 = new java.sql.SQLException(
								e_tDBOutput_3.getMessage() + "\ncaused by: "
										+ ne_tDBOutput_3.getMessage(),
								ne_tDBOutput_3.getSQLState(),
								ne_tDBOutput_3.getErrorCode(), ne_tDBOutput_3);
						errormessage_tDBOutput_3 = sqle_tDBOutput_3
								.getMessage();
					} else {
						errormessage_tDBOutput_3 = e_tDBOutput_3.getMessage();
					}

					int countSum_tDBOutput_3 = 0;
					for (int countEach_tDBOutput_3 : e_tDBOutput_3
							.getUpdateCounts()) {
						countSum_tDBOutput_3 += (countEach_tDBOutput_3 < 0 ? 0
								: countEach_tDBOutput_3);
					}

					insertedCount_tDBOutput_3 += countSum_tDBOutput_3;

					System.err.println(errormessage_tDBOutput_3);

				}

				if (pstmt_tDBOutput_3 != null) {

					pstmt_tDBOutput_3.close();
					resourceMap.remove("pstmt_tDBOutput_3");
				}
				resourceMap.put("statementClosed_tDBOutput_3", true);

				conn_tDBOutput_3.commit();

				conn_tDBOutput_3.close();

				resourceMap.put("finish_tDBOutput_3", true);

				nb_line_deleted_tDBOutput_3 = nb_line_deleted_tDBOutput_3
						+ deletedCount_tDBOutput_3;
				nb_line_update_tDBOutput_3 = nb_line_update_tDBOutput_3
						+ updatedCount_tDBOutput_3;
				nb_line_inserted_tDBOutput_3 = nb_line_inserted_tDBOutput_3
						+ insertedCount_tDBOutput_3;
				nb_line_rejected_tDBOutput_3 = nb_line_rejected_tDBOutput_3
						+ rejectedCount_tDBOutput_3;

				globalMap.put("tDBOutput_3_NB_LINE", nb_line_tDBOutput_3);
				globalMap.put("tDBOutput_3_NB_LINE_UPDATED",
						nb_line_update_tDBOutput_3);
				globalMap.put("tDBOutput_3_NB_LINE_INSERTED",
						nb_line_inserted_tDBOutput_3);
				globalMap.put("tDBOutput_3_NB_LINE_DELETED",
						nb_line_deleted_tDBOutput_3);
				globalMap.put("tDBOutput_3_NB_LINE_REJECTED",
						nb_line_rejected_tDBOutput_3);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row3" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tDBOutput_3", true);
				end_Hash.put("tDBOutput_3", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk3", 0, "ok");
				}
				tDBInput_7Process(globalMap);

				/**
				 * [tDBOutput_3 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_3 finally ] start
				 */

				currentComponent = "tDBInput_3";

				/**
				 * [tDBInput_3 finally ] stop
				 */

				/**
				 * [tDBOutput_3 finally ] start
				 */

				currentComponent = "tDBOutput_3";

				try {
					if (resourceMap.get("statementClosed_tDBOutput_3") == null) {
						java.sql.PreparedStatement pstmtToClose_tDBOutput_3 = null;
						if ((pstmtToClose_tDBOutput_3 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmt_tDBOutput_3")) != null) {
							pstmtToClose_tDBOutput_3.close();
						}
					}
				} finally {
					if (resourceMap.get("finish_tDBOutput_3") == null) {
						java.sql.Connection ctn_tDBOutput_3 = null;
						if ((ctn_tDBOutput_3 = (java.sql.Connection) resourceMap
								.get("conn_tDBOutput_3")) != null) {
							try {
								ctn_tDBOutput_3.close();
							} catch (java.sql.SQLException sqlEx_tDBOutput_3) {
								String errorMessage_tDBOutput_3 = "failed to close the connection in tDBOutput_3 :"
										+ sqlEx_tDBOutput_3.getMessage();
								System.err.println(errorMessage_tDBOutput_3);
							}
						}
					}
				}

				/**
				 * [tDBOutput_3 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_3_SUBPROCESS_STATE", 1);
	}

	public static class row7Struct implements
			routines.system.IPersistableRow<row7Struct> {
		final static byte[] commonByteArrayLock_ORDER_ETL_TF_ETL = new byte[0];
		static byte[] commonByteArray_ORDER_ETL_TF_ETL = new byte[0];

		public Long invoice_dimension_uid;

		public Long getInvoice_dimension_uid() {
			return this.invoice_dimension_uid;
		}

		public String source_system_invoice_uid;

		public String getSource_system_invoice_uid() {
			return this.source_system_invoice_uid;
		}

		public String invoice_number;

		public String getInvoice_number() {
			return this.invoice_number;
		}

		public String invoice_source_system;

		public String getInvoice_source_system() {
			return this.invoice_source_system;
		}

		public java.util.Date invoice_date;

		public java.util.Date getInvoice_date() {
			return this.invoice_date;
		}

		public String invoice_status;

		public String getInvoice_status() {
			return this.invoice_status;
		}

		public java.util.Date invoice_payment_date;

		public java.util.Date getInvoice_payment_date() {
			return this.invoice_payment_date;
		}

		public BigDecimal invoice_total_amount;

		public BigDecimal getInvoice_total_amount() {
			return this.invoice_total_amount;
		}

		public BigDecimal invoice_tax_amount;

		public BigDecimal getInvoice_tax_amount() {
			return this.invoice_tax_amount;
		}

		public BigDecimal invoice_discount_amount;

		public BigDecimal getInvoice_discount_amount() {
			return this.invoice_discount_amount;
		}

		public BigDecimal invoice_exchange_rate;

		public BigDecimal getInvoice_exchange_rate() {
			return this.invoice_exchange_rate;
		}

		public String channel;

		public String getChannel() {
			return this.channel;
		}

		public String currency;

		public String getCurrency() {
			return this.currency;
		}

		public String cart_type;

		public String getCart_type() {
			return this.cart_type;
		}

		public String organization_name;

		public String getOrganization_name() {
			return this.organization_name;
		}

		public BigDecimal total_amount_in_transaction_currency;

		public BigDecimal getTotal_amount_in_transaction_currency() {
			return this.total_amount_in_transaction_currency;
		}

		public BigDecimal original_amount_in_transaction_currency;

		public BigDecimal getOriginal_amount_in_transaction_currency() {
			return this.original_amount_in_transaction_currency;
		}

		public BigDecimal tax_amount_in_transaction_currency;

		public BigDecimal getTax_amount_in_transaction_currency() {
			return this.tax_amount_in_transaction_currency;
		}

		public String payment_status;

		public String getPayment_status() {
			return this.payment_status;
		}

		public String invoice_class;

		public String getInvoice_class() {
			return this.invoice_class;
		}

		public BigDecimal organization_uid;

		public BigDecimal getOrganization_uid() {
			return this.organization_uid;
		}

		public java.util.Date created_datetime;

		public java.util.Date getCreated_datetime() {
			return this.created_datetime;
		}

		public String created_by_user;

		public String getCreated_by_user() {
			return this.created_by_user;
		}

		public java.util.Date updated_datetime;

		public java.util.Date getUpdated_datetime() {
			return this.updated_datetime;
		}

		public String updated_by_user;

		public String getUpdated_by_user() {
			return this.updated_by_user;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ORDER_ETL_TF_ETL.length) {
					if (length < 1024
							&& commonByteArray_ORDER_ETL_TF_ETL.length == 0) {
						commonByteArray_ORDER_ETL_TF_ETL = new byte[1024];
					} else {
						commonByteArray_ORDER_ETL_TF_ETL = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ORDER_ETL_TF_ETL, 0, length);
				strReturn = new String(commonByteArray_ORDER_ETL_TF_ETL, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ORDER_ETL_TF_ETL) {

				try {

					int length = 0;

					length = dis.readByte();
					if (length == -1) {
						this.invoice_dimension_uid = null;
					} else {
						this.invoice_dimension_uid = dis.readLong();
					}

					this.source_system_invoice_uid = readString(dis);

					this.invoice_number = readString(dis);

					this.invoice_source_system = readString(dis);

					this.invoice_date = readDate(dis);

					this.invoice_status = readString(dis);

					this.invoice_payment_date = readDate(dis);

					this.invoice_total_amount = (BigDecimal) dis.readObject();

					this.invoice_tax_amount = (BigDecimal) dis.readObject();

					this.invoice_discount_amount = (BigDecimal) dis
							.readObject();

					this.invoice_exchange_rate = (BigDecimal) dis.readObject();

					this.channel = readString(dis);

					this.currency = readString(dis);

					this.cart_type = readString(dis);

					this.organization_name = readString(dis);

					this.total_amount_in_transaction_currency = (BigDecimal) dis
							.readObject();

					this.original_amount_in_transaction_currency = (BigDecimal) dis
							.readObject();

					this.tax_amount_in_transaction_currency = (BigDecimal) dis
							.readObject();

					this.payment_status = readString(dis);

					this.invoice_class = readString(dis);

					this.organization_uid = (BigDecimal) dis.readObject();

					this.created_datetime = readDate(dis);

					this.created_by_user = readString(dis);

					this.updated_datetime = readDate(dis);

					this.updated_by_user = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Long

				if (this.invoice_dimension_uid == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.invoice_dimension_uid);
				}

				// String

				writeString(this.source_system_invoice_uid, dos);

				// String

				writeString(this.invoice_number, dos);

				// String

				writeString(this.invoice_source_system, dos);

				// java.util.Date

				writeDate(this.invoice_date, dos);

				// String

				writeString(this.invoice_status, dos);

				// java.util.Date

				writeDate(this.invoice_payment_date, dos);

				// BigDecimal

				dos.writeObject(this.invoice_total_amount);

				// BigDecimal

				dos.writeObject(this.invoice_tax_amount);

				// BigDecimal

				dos.writeObject(this.invoice_discount_amount);

				// BigDecimal

				dos.writeObject(this.invoice_exchange_rate);

				// String

				writeString(this.channel, dos);

				// String

				writeString(this.currency, dos);

				// String

				writeString(this.cart_type, dos);

				// String

				writeString(this.organization_name, dos);

				// BigDecimal

				dos.writeObject(this.total_amount_in_transaction_currency);

				// BigDecimal

				dos.writeObject(this.original_amount_in_transaction_currency);

				// BigDecimal

				dos.writeObject(this.tax_amount_in_transaction_currency);

				// String

				writeString(this.payment_status, dos);

				// String

				writeString(this.invoice_class, dos);

				// BigDecimal

				dos.writeObject(this.organization_uid);

				// java.util.Date

				writeDate(this.created_datetime, dos);

				// String

				writeString(this.created_by_user, dos);

				// java.util.Date

				writeDate(this.updated_datetime, dos);

				// String

				writeString(this.updated_by_user, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("invoice_dimension_uid="
					+ String.valueOf(invoice_dimension_uid));
			sb.append(",source_system_invoice_uid=" + source_system_invoice_uid);
			sb.append(",invoice_number=" + invoice_number);
			sb.append(",invoice_source_system=" + invoice_source_system);
			sb.append(",invoice_date=" + String.valueOf(invoice_date));
			sb.append(",invoice_status=" + invoice_status);
			sb.append(",invoice_payment_date="
					+ String.valueOf(invoice_payment_date));
			sb.append(",invoice_total_amount="
					+ String.valueOf(invoice_total_amount));
			sb.append(",invoice_tax_amount="
					+ String.valueOf(invoice_tax_amount));
			sb.append(",invoice_discount_amount="
					+ String.valueOf(invoice_discount_amount));
			sb.append(",invoice_exchange_rate="
					+ String.valueOf(invoice_exchange_rate));
			sb.append(",channel=" + channel);
			sb.append(",currency=" + currency);
			sb.append(",cart_type=" + cart_type);
			sb.append(",organization_name=" + organization_name);
			sb.append(",total_amount_in_transaction_currency="
					+ String.valueOf(total_amount_in_transaction_currency));
			sb.append(",original_amount_in_transaction_currency="
					+ String.valueOf(original_amount_in_transaction_currency));
			sb.append(",tax_amount_in_transaction_currency="
					+ String.valueOf(tax_amount_in_transaction_currency));
			sb.append(",payment_status=" + payment_status);
			sb.append(",invoice_class=" + invoice_class);
			sb.append(",organization_uid=" + String.valueOf(organization_uid));
			sb.append(",created_datetime=" + String.valueOf(created_datetime));
			sb.append(",created_by_user=" + created_by_user);
			sb.append(",updated_datetime=" + String.valueOf(updated_datetime));
			sb.append(",updated_by_user=" + updated_by_user);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row7Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_7Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDBInput_7_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row7Struct row7 = new row7Struct();

				/**
				 * [tDBOutput_7 begin ] start
				 */

				ok_Hash.put("tDBOutput_7", false);
				start_Hash.put("tDBOutput_7", System.currentTimeMillis());

				currentComponent = "tDBOutput_7";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row7" + iterateId, 0, 0);

					}
				}

				int tos_count_tDBOutput_7 = 0;

				String dbschema_tDBOutput_7 = null;
				dbschema_tDBOutput_7 = "staging";

				String tableName_tDBOutput_7 = null;
				if (dbschema_tDBOutput_7 == null
						|| dbschema_tDBOutput_7.trim().length() == 0) {
					tableName_tDBOutput_7 = "stg_invoice_dimension";
				} else {
					tableName_tDBOutput_7 = dbschema_tDBOutput_7 + "\".\""
							+ "stg_invoice_dimension";
				}

				int nb_line_tDBOutput_7 = 0;
				int nb_line_update_tDBOutput_7 = 0;
				int nb_line_inserted_tDBOutput_7 = 0;
				int nb_line_deleted_tDBOutput_7 = 0;
				int nb_line_rejected_tDBOutput_7 = 0;

				int deletedCount_tDBOutput_7 = 0;
				int updatedCount_tDBOutput_7 = 0;
				int insertedCount_tDBOutput_7 = 0;
				int rejectedCount_tDBOutput_7 = 0;

				boolean whetherReject_tDBOutput_7 = false;

				java.sql.Connection conn_tDBOutput_7 = null;
				String dbUser_tDBOutput_7 = null;

				java.lang.Class.forName("org.postgresql.Driver");
				String url_tDBOutput_7 = "jdbc:postgresql://" + "localhost"
						+ ":" + "5432" + "/" + "rup";
				dbUser_tDBOutput_7 = "rup";

				final String decryptedPassword_tDBOutput_7 = routines.system.PasswordEncryptUtil
						.decryptPassword("544d653f2c2bdc61");

				String dbPwd_tDBOutput_7 = decryptedPassword_tDBOutput_7;

				conn_tDBOutput_7 = java.sql.DriverManager.getConnection(
						url_tDBOutput_7, dbUser_tDBOutput_7, dbPwd_tDBOutput_7);

				resourceMap.put("conn_tDBOutput_7", conn_tDBOutput_7);
				conn_tDBOutput_7.setAutoCommit(false);
				int commitEvery_tDBOutput_7 = 10000;
				int commitCounter_tDBOutput_7 = 0;

				int batchSize_tDBOutput_7 = 10000;
				int batchSizeCounter_tDBOutput_7 = 0;

				int count_tDBOutput_7 = 0;
				String insert_tDBOutput_7 = "INSERT INTO \""
						+ tableName_tDBOutput_7
						+ "\" (\"invoice_dimension_uid\",\"source_system_invoice_uid\",\"invoice_number\",\"invoice_source_system\",\"invoice_date\",\"invoice_status\",\"invoice_payment_date\",\"invoice_total_amount\",\"invoice_tax_amount\",\"invoice_discount_amount\",\"invoice_exchange_rate\",\"channel\",\"currency\",\"cart_type\",\"organization_name\",\"total_amount_in_transaction_currency\",\"original_amount_in_transaction_currency\",\"tax_amount_in_transaction_currency\",\"payment_status\",\"invoice_class\",\"organization_uid\",\"created_datetime\",\"created_by_user\",\"updated_datetime\",\"updated_by_user\") VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

				java.sql.PreparedStatement pstmt_tDBOutput_7 = conn_tDBOutput_7
						.prepareStatement(insert_tDBOutput_7);
				resourceMap.put("pstmt_tDBOutput_7", pstmt_tDBOutput_7);

				/**
				 * [tDBOutput_7 begin ] stop
				 */

				/**
				 * [tDBInput_7 begin ] start
				 */

				ok_Hash.put("tDBInput_7", false);
				start_Hash.put("tDBInput_7", System.currentTimeMillis());

				currentComponent = "tDBInput_7";

				int tos_count_tDBInput_7 = 0;

				int nb_line_tDBInput_7 = 0;
				java.sql.Connection conn_tDBInput_7 = null;
				String driverClass_tDBInput_7 = "org.postgresql.Driver";
				java.lang.Class.forName(driverClass_tDBInput_7);
				String dbUser_tDBInput_7 = "rup";

				final String decryptedPassword_tDBInput_7 = routines.system.PasswordEncryptUtil
						.decryptPassword("544d653f2c2bdc61");

				String dbPwd_tDBInput_7 = decryptedPassword_tDBInput_7;

				String url_tDBInput_7 = "jdbc:postgresql://" + "localhost"
						+ ":" + "5432" + "/" + "rup";

				conn_tDBInput_7 = java.sql.DriverManager.getConnection(
						url_tDBInput_7, dbUser_tDBInput_7, dbPwd_tDBInput_7);

				conn_tDBInput_7.setAutoCommit(false);

				java.sql.Statement stmt_tDBInput_7 = conn_tDBInput_7
						.createStatement();

				String dbquery_tDBInput_7 = "SELECT nextval('staging.invoice_dimension_seq') as invoice_dimension_uid,\n       tfi.invoice_no as source_system_invoic"
						+ "e_uid,\n       tfi.invoice_no as invoice_number,\n       tfi.invsourcesystem as invoice_source_system,\n       tfi.invdate "
						+ "as invoice_date,\n       tfi.invstatus as invoice_status,\n       tfi.paymentdate as invoice_payment_date,\n       tfi.invo"
						+ "icetotalamount as invoice_total_amount,\n       tfi.invoicetaxamt as invoice_tax_amount,\n       tfi.invoicediscountamt as"
						+ " invoice_discount_amount,\n       tfi.invoiceexchangerate as invoice_exchange_rate,\n       NULL as channel,\n       tfi.cu"
						+ "rrency as currency,\n       NULL as cart_type,\n       tfi.organizationname as organization_name,\n       tfi.totaltxncurre"
						+ "ncy as total_amount_in_transaction_currency,\n       tfi.origintxncurrency as original_amount_in_transaction_currency,\n  "
						+ "     tfi.taxamttxncurrency as tax_amount_in_transaction_currency,\n       tfi.paymentstatus as payment_status,\n       tfi"
						+ ".invoiceclass as invoice_class,\n       tfi.organizationuid as organization_uid,\n       tfi.createddate as created_dateti"
						+ "me,\n       tfi.createdby as created_by_user,\n       tfi.updateddate as updated_datetime,\n       tfi.updatedby as updated"
						+ "_by_user\nFROM staging.stg_tf_rup_tfinvoices tfi\nwhere tfi.invdate >= '2016-01-01'";

				globalMap.put("tDBInput_7_QUERY", dbquery_tDBInput_7);
				java.sql.ResultSet rs_tDBInput_7 = null;

				try {
					rs_tDBInput_7 = stmt_tDBInput_7
							.executeQuery(dbquery_tDBInput_7);
					java.sql.ResultSetMetaData rsmd_tDBInput_7 = rs_tDBInput_7
							.getMetaData();
					int colQtyInRs_tDBInput_7 = rsmd_tDBInput_7
							.getColumnCount();

					String tmpContent_tDBInput_7 = null;

					while (rs_tDBInput_7.next()) {
						nb_line_tDBInput_7++;

						if (colQtyInRs_tDBInput_7 < 1) {
							row7.invoice_dimension_uid = null;
						} else {

							if (rs_tDBInput_7.getObject(1) != null) {
								row7.invoice_dimension_uid = rs_tDBInput_7
										.getLong(1);
							} else {
								row7.invoice_dimension_uid = null;
							}
						}
						if (colQtyInRs_tDBInput_7 < 2) {
							row7.source_system_invoice_uid = null;
						} else {

							row7.source_system_invoice_uid = routines.system.JDBCUtil
									.getString(rs_tDBInput_7, 2, false);
						}
						if (colQtyInRs_tDBInput_7 < 3) {
							row7.invoice_number = null;
						} else {

							row7.invoice_number = routines.system.JDBCUtil
									.getString(rs_tDBInput_7, 3, false);
						}
						if (colQtyInRs_tDBInput_7 < 4) {
							row7.invoice_source_system = null;
						} else {

							row7.invoice_source_system = routines.system.JDBCUtil
									.getString(rs_tDBInput_7, 4, false);
						}
						if (colQtyInRs_tDBInput_7 < 5) {
							row7.invoice_date = null;
						} else {

							row7.invoice_date = routines.system.JDBCUtil
									.getDate(rs_tDBInput_7, 5);
						}
						if (colQtyInRs_tDBInput_7 < 6) {
							row7.invoice_status = null;
						} else {

							row7.invoice_status = routines.system.JDBCUtil
									.getString(rs_tDBInput_7, 6, false);
						}
						if (colQtyInRs_tDBInput_7 < 7) {
							row7.invoice_payment_date = null;
						} else {

							row7.invoice_payment_date = routines.system.JDBCUtil
									.getDate(rs_tDBInput_7, 7);
						}
						if (colQtyInRs_tDBInput_7 < 8) {
							row7.invoice_total_amount = null;
						} else {

							if (rs_tDBInput_7.getObject(8) != null) {
								row7.invoice_total_amount = rs_tDBInput_7
										.getBigDecimal(8);
							} else {
								row7.invoice_total_amount = null;
							}
						}
						if (colQtyInRs_tDBInput_7 < 9) {
							row7.invoice_tax_amount = null;
						} else {

							if (rs_tDBInput_7.getObject(9) != null) {
								row7.invoice_tax_amount = rs_tDBInput_7
										.getBigDecimal(9);
							} else {
								row7.invoice_tax_amount = null;
							}
						}
						if (colQtyInRs_tDBInput_7 < 10) {
							row7.invoice_discount_amount = null;
						} else {

							if (rs_tDBInput_7.getObject(10) != null) {
								row7.invoice_discount_amount = rs_tDBInput_7
										.getBigDecimal(10);
							} else {
								row7.invoice_discount_amount = null;
							}
						}
						if (colQtyInRs_tDBInput_7 < 11) {
							row7.invoice_exchange_rate = null;
						} else {

							if (rs_tDBInput_7.getObject(11) != null) {
								row7.invoice_exchange_rate = rs_tDBInput_7
										.getBigDecimal(11);
							} else {
								row7.invoice_exchange_rate = null;
							}
						}
						if (colQtyInRs_tDBInput_7 < 12) {
							row7.channel = null;
						} else {

							row7.channel = routines.system.JDBCUtil.getString(
									rs_tDBInput_7, 12, false);
						}
						if (colQtyInRs_tDBInput_7 < 13) {
							row7.currency = null;
						} else {

							row7.currency = routines.system.JDBCUtil.getString(
									rs_tDBInput_7, 13, false);
						}
						if (colQtyInRs_tDBInput_7 < 14) {
							row7.cart_type = null;
						} else {

							row7.cart_type = routines.system.JDBCUtil
									.getString(rs_tDBInput_7, 14, false);
						}
						if (colQtyInRs_tDBInput_7 < 15) {
							row7.organization_name = null;
						} else {

							row7.organization_name = routines.system.JDBCUtil
									.getString(rs_tDBInput_7, 15, false);
						}
						if (colQtyInRs_tDBInput_7 < 16) {
							row7.total_amount_in_transaction_currency = null;
						} else {

							if (rs_tDBInput_7.getObject(16) != null) {
								row7.total_amount_in_transaction_currency = rs_tDBInput_7
										.getBigDecimal(16);
							} else {
								row7.total_amount_in_transaction_currency = null;
							}
						}
						if (colQtyInRs_tDBInput_7 < 17) {
							row7.original_amount_in_transaction_currency = null;
						} else {

							if (rs_tDBInput_7.getObject(17) != null) {
								row7.original_amount_in_transaction_currency = rs_tDBInput_7
										.getBigDecimal(17);
							} else {
								row7.original_amount_in_transaction_currency = null;
							}
						}
						if (colQtyInRs_tDBInput_7 < 18) {
							row7.tax_amount_in_transaction_currency = null;
						} else {

							if (rs_tDBInput_7.getObject(18) != null) {
								row7.tax_amount_in_transaction_currency = rs_tDBInput_7
										.getBigDecimal(18);
							} else {
								row7.tax_amount_in_transaction_currency = null;
							}
						}
						if (colQtyInRs_tDBInput_7 < 19) {
							row7.payment_status = null;
						} else {

							row7.payment_status = routines.system.JDBCUtil
									.getString(rs_tDBInput_7, 19, false);
						}
						if (colQtyInRs_tDBInput_7 < 20) {
							row7.invoice_class = null;
						} else {

							row7.invoice_class = routines.system.JDBCUtil
									.getString(rs_tDBInput_7, 20, false);
						}
						if (colQtyInRs_tDBInput_7 < 21) {
							row7.organization_uid = null;
						} else {

							if (rs_tDBInput_7.getObject(21) != null) {
								row7.organization_uid = rs_tDBInput_7
										.getBigDecimal(21);
							} else {
								row7.organization_uid = null;
							}
						}
						if (colQtyInRs_tDBInput_7 < 22) {
							row7.created_datetime = null;
						} else {

							row7.created_datetime = routines.system.JDBCUtil
									.getDate(rs_tDBInput_7, 22);
						}
						if (colQtyInRs_tDBInput_7 < 23) {
							row7.created_by_user = null;
						} else {

							row7.created_by_user = routines.system.JDBCUtil
									.getString(rs_tDBInput_7, 23, false);
						}
						if (colQtyInRs_tDBInput_7 < 24) {
							row7.updated_datetime = null;
						} else {

							row7.updated_datetime = routines.system.JDBCUtil
									.getDate(rs_tDBInput_7, 24);
						}
						if (colQtyInRs_tDBInput_7 < 25) {
							row7.updated_by_user = null;
						} else {

							row7.updated_by_user = routines.system.JDBCUtil
									.getString(rs_tDBInput_7, 25, false);
						}

						/**
						 * [tDBInput_7 begin ] stop
						 */

						/**
						 * [tDBInput_7 main ] start
						 */

						currentComponent = "tDBInput_7";

						tos_count_tDBInput_7++;

						/**
						 * [tDBInput_7 main ] stop
						 */

						/**
						 * [tDBInput_7 process_data_begin ] start
						 */

						currentComponent = "tDBInput_7";

						/**
						 * [tDBInput_7 process_data_begin ] stop
						 */

						/**
						 * [tDBOutput_7 main ] start
						 */

						currentComponent = "tDBOutput_7";

						// row7
						// row7

						if (execStat) {
							runStat.updateStatOnConnection("row7" + iterateId,
									1, 1);
						}

						whetherReject_tDBOutput_7 = false;
						if (row7.invoice_dimension_uid == null) {
							pstmt_tDBOutput_7
									.setNull(1, java.sql.Types.INTEGER);
						} else {
							pstmt_tDBOutput_7.setLong(1,
									row7.invoice_dimension_uid);
						}

						if (row7.source_system_invoice_uid == null) {
							pstmt_tDBOutput_7
									.setNull(2, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_7.setString(2,
									row7.source_system_invoice_uid);
						}

						if (row7.invoice_number == null) {
							pstmt_tDBOutput_7
									.setNull(3, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_7.setString(3, row7.invoice_number);
						}

						if (row7.invoice_source_system == null) {
							pstmt_tDBOutput_7
									.setNull(4, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_7.setString(4,
									row7.invoice_source_system);
						}

						if (row7.invoice_date != null) {
							pstmt_tDBOutput_7.setTimestamp(
									5,
									new java.sql.Timestamp(row7.invoice_date
											.getTime()));
						} else {
							pstmt_tDBOutput_7.setNull(5,
									java.sql.Types.TIMESTAMP);
						}

						if (row7.invoice_status == null) {
							pstmt_tDBOutput_7
									.setNull(6, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_7.setString(6, row7.invoice_status);
						}

						if (row7.invoice_payment_date != null) {
							pstmt_tDBOutput_7
									.setTimestamp(
											7,
											new java.sql.Timestamp(
													row7.invoice_payment_date
															.getTime()));
						} else {
							pstmt_tDBOutput_7.setNull(7,
									java.sql.Types.TIMESTAMP);
						}

						pstmt_tDBOutput_7.setBigDecimal(8,
								row7.invoice_total_amount);

						pstmt_tDBOutput_7.setBigDecimal(9,
								row7.invoice_tax_amount);

						pstmt_tDBOutput_7.setBigDecimal(10,
								row7.invoice_discount_amount);

						pstmt_tDBOutput_7.setBigDecimal(11,
								row7.invoice_exchange_rate);

						if (row7.channel == null) {
							pstmt_tDBOutput_7.setNull(12,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_7.setString(12, row7.channel);
						}

						if (row7.currency == null) {
							pstmt_tDBOutput_7.setNull(13,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_7.setString(13, row7.currency);
						}

						if (row7.cart_type == null) {
							pstmt_tDBOutput_7.setNull(14,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_7.setString(14, row7.cart_type);
						}

						if (row7.organization_name == null) {
							pstmt_tDBOutput_7.setNull(15,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_7.setString(15,
									row7.organization_name);
						}

						pstmt_tDBOutput_7.setBigDecimal(16,
								row7.total_amount_in_transaction_currency);

						pstmt_tDBOutput_7.setBigDecimal(17,
								row7.original_amount_in_transaction_currency);

						pstmt_tDBOutput_7.setBigDecimal(18,
								row7.tax_amount_in_transaction_currency);

						if (row7.payment_status == null) {
							pstmt_tDBOutput_7.setNull(19,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_7
									.setString(19, row7.payment_status);
						}

						if (row7.invoice_class == null) {
							pstmt_tDBOutput_7.setNull(20,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_7.setString(20, row7.invoice_class);
						}

						pstmt_tDBOutput_7.setBigDecimal(21,
								row7.organization_uid);

						if (row7.created_datetime != null) {
							pstmt_tDBOutput_7.setTimestamp(22,
									new java.sql.Timestamp(
											row7.created_datetime.getTime()));
						} else {
							pstmt_tDBOutput_7.setNull(22,
									java.sql.Types.TIMESTAMP);
						}

						if (row7.created_by_user == null) {
							pstmt_tDBOutput_7.setNull(23,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_7.setString(23,
									row7.created_by_user);
						}

						if (row7.updated_datetime != null) {
							pstmt_tDBOutput_7.setTimestamp(24,
									new java.sql.Timestamp(
											row7.updated_datetime.getTime()));
						} else {
							pstmt_tDBOutput_7.setNull(24,
									java.sql.Types.TIMESTAMP);
						}

						if (row7.updated_by_user == null) {
							pstmt_tDBOutput_7.setNull(25,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_7.setString(25,
									row7.updated_by_user);
						}

						pstmt_tDBOutput_7.addBatch();
						nb_line_tDBOutput_7++;

						batchSizeCounter_tDBOutput_7++;

						if ((batchSize_tDBOutput_7 > 0)
								&& (batchSize_tDBOutput_7 <= batchSizeCounter_tDBOutput_7)) {
							try {
								int countSum_tDBOutput_7 = 0;

								for (int countEach_tDBOutput_7 : pstmt_tDBOutput_7
										.executeBatch()) {
									countSum_tDBOutput_7 += (countEach_tDBOutput_7 < 0 ? 0
											: countEach_tDBOutput_7);
								}

								insertedCount_tDBOutput_7 += countSum_tDBOutput_7;

								batchSizeCounter_tDBOutput_7 = 0;
							} catch (java.sql.BatchUpdateException e_tDBOutput_7) {
								java.sql.SQLException ne_tDBOutput_7 = e_tDBOutput_7
										.getNextException(), sqle_tDBOutput_7 = null;
								String errormessage_tDBOutput_7;
								if (ne_tDBOutput_7 != null) {
									// build new exception to provide the
									// original cause
									sqle_tDBOutput_7 = new java.sql.SQLException(
											e_tDBOutput_7.getMessage()
													+ "\ncaused by: "
													+ ne_tDBOutput_7
															.getMessage(),
											ne_tDBOutput_7.getSQLState(),
											ne_tDBOutput_7.getErrorCode(),
											ne_tDBOutput_7);
									errormessage_tDBOutput_7 = sqle_tDBOutput_7
											.getMessage();
								} else {
									errormessage_tDBOutput_7 = e_tDBOutput_7
											.getMessage();
								}

								int countSum_tDBOutput_7 = 0;
								for (int countEach_tDBOutput_7 : e_tDBOutput_7
										.getUpdateCounts()) {
									countSum_tDBOutput_7 += (countEach_tDBOutput_7 < 0 ? 0
											: countEach_tDBOutput_7);
								}

								insertedCount_tDBOutput_7 += countSum_tDBOutput_7;

								System.err.println(errormessage_tDBOutput_7);

							}
						}

						commitCounter_tDBOutput_7++;
						if (commitEvery_tDBOutput_7 <= commitCounter_tDBOutput_7) {
							if ((batchSize_tDBOutput_7 > 0)
									&& (batchSizeCounter_tDBOutput_7 > 0)) {
								try {
									int countSum_tDBOutput_7 = 0;

									for (int countEach_tDBOutput_7 : pstmt_tDBOutput_7
											.executeBatch()) {
										countSum_tDBOutput_7 += (countEach_tDBOutput_7 < 0 ? 0
												: countEach_tDBOutput_7);
									}

									insertedCount_tDBOutput_7 += countSum_tDBOutput_7;

									batchSizeCounter_tDBOutput_7 = 0;
								} catch (java.sql.BatchUpdateException e_tDBOutput_7) {
									java.sql.SQLException ne_tDBOutput_7 = e_tDBOutput_7
											.getNextException(), sqle_tDBOutput_7 = null;
									String errormessage_tDBOutput_7;
									if (ne_tDBOutput_7 != null) {
										// build new exception to provide the
										// original cause
										sqle_tDBOutput_7 = new java.sql.SQLException(
												e_tDBOutput_7.getMessage()
														+ "\ncaused by: "
														+ ne_tDBOutput_7
																.getMessage(),
												ne_tDBOutput_7.getSQLState(),
												ne_tDBOutput_7.getErrorCode(),
												ne_tDBOutput_7);
										errormessage_tDBOutput_7 = sqle_tDBOutput_7
												.getMessage();
									} else {
										errormessage_tDBOutput_7 = e_tDBOutput_7
												.getMessage();
									}

									int countSum_tDBOutput_7 = 0;
									for (int countEach_tDBOutput_7 : e_tDBOutput_7
											.getUpdateCounts()) {
										countSum_tDBOutput_7 += (countEach_tDBOutput_7 < 0 ? 0
												: countEach_tDBOutput_7);
									}

									insertedCount_tDBOutput_7 += countSum_tDBOutput_7;

									System.err
											.println(errormessage_tDBOutput_7);

								}
							}
							conn_tDBOutput_7.commit();

							commitCounter_tDBOutput_7 = 0;
						}

						tos_count_tDBOutput_7++;

						/**
						 * [tDBOutput_7 main ] stop
						 */

						/**
						 * [tDBOutput_7 process_data_begin ] start
						 */

						currentComponent = "tDBOutput_7";

						/**
						 * [tDBOutput_7 process_data_begin ] stop
						 */

						/**
						 * [tDBOutput_7 process_data_end ] start
						 */

						currentComponent = "tDBOutput_7";

						/**
						 * [tDBOutput_7 process_data_end ] stop
						 */

						/**
						 * [tDBInput_7 process_data_end ] start
						 */

						currentComponent = "tDBInput_7";

						/**
						 * [tDBInput_7 process_data_end ] stop
						 */

						/**
						 * [tDBInput_7 end ] start
						 */

						currentComponent = "tDBInput_7";

					}
				} finally {
					if (rs_tDBInput_7 != null) {
						rs_tDBInput_7.close();
					}
					if (stmt_tDBInput_7 != null) {
						stmt_tDBInput_7.close();
					}
					if (conn_tDBInput_7 != null && !conn_tDBInput_7.isClosed()) {

						conn_tDBInput_7.commit();

						conn_tDBInput_7.close();

					}

				}
				globalMap.put("tDBInput_7_NB_LINE", nb_line_tDBInput_7);

				ok_Hash.put("tDBInput_7", true);
				end_Hash.put("tDBInput_7", System.currentTimeMillis());

				/**
				 * [tDBInput_7 end ] stop
				 */

				/**
				 * [tDBOutput_7 end ] start
				 */

				currentComponent = "tDBOutput_7";

				try {
					int countSum_tDBOutput_7 = 0;
					if (pstmt_tDBOutput_7 != null
							&& batchSizeCounter_tDBOutput_7 > 0) {

						for (int countEach_tDBOutput_7 : pstmt_tDBOutput_7
								.executeBatch()) {
							countSum_tDBOutput_7 += (countEach_tDBOutput_7 < 0 ? 0
									: countEach_tDBOutput_7);
						}

					}

					insertedCount_tDBOutput_7 += countSum_tDBOutput_7;

				} catch (java.sql.BatchUpdateException e_tDBOutput_7) {
					java.sql.SQLException ne_tDBOutput_7 = e_tDBOutput_7
							.getNextException(), sqle_tDBOutput_7 = null;
					String errormessage_tDBOutput_7;
					if (ne_tDBOutput_7 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_7 = new java.sql.SQLException(
								e_tDBOutput_7.getMessage() + "\ncaused by: "
										+ ne_tDBOutput_7.getMessage(),
								ne_tDBOutput_7.getSQLState(),
								ne_tDBOutput_7.getErrorCode(), ne_tDBOutput_7);
						errormessage_tDBOutput_7 = sqle_tDBOutput_7
								.getMessage();
					} else {
						errormessage_tDBOutput_7 = e_tDBOutput_7.getMessage();
					}

					int countSum_tDBOutput_7 = 0;
					for (int countEach_tDBOutput_7 : e_tDBOutput_7
							.getUpdateCounts()) {
						countSum_tDBOutput_7 += (countEach_tDBOutput_7 < 0 ? 0
								: countEach_tDBOutput_7);
					}

					insertedCount_tDBOutput_7 += countSum_tDBOutput_7;

					System.err.println(errormessage_tDBOutput_7);

				}

				if (pstmt_tDBOutput_7 != null) {

					pstmt_tDBOutput_7.close();
					resourceMap.remove("pstmt_tDBOutput_7");
				}
				resourceMap.put("statementClosed_tDBOutput_7", true);

				conn_tDBOutput_7.commit();

				conn_tDBOutput_7.close();

				resourceMap.put("finish_tDBOutput_7", true);

				nb_line_deleted_tDBOutput_7 = nb_line_deleted_tDBOutput_7
						+ deletedCount_tDBOutput_7;
				nb_line_update_tDBOutput_7 = nb_line_update_tDBOutput_7
						+ updatedCount_tDBOutput_7;
				nb_line_inserted_tDBOutput_7 = nb_line_inserted_tDBOutput_7
						+ insertedCount_tDBOutput_7;
				nb_line_rejected_tDBOutput_7 = nb_line_rejected_tDBOutput_7
						+ rejectedCount_tDBOutput_7;

				globalMap.put("tDBOutput_7_NB_LINE", nb_line_tDBOutput_7);
				globalMap.put("tDBOutput_7_NB_LINE_UPDATED",
						nb_line_update_tDBOutput_7);
				globalMap.put("tDBOutput_7_NB_LINE_INSERTED",
						nb_line_inserted_tDBOutput_7);
				globalMap.put("tDBOutput_7_NB_LINE_DELETED",
						nb_line_deleted_tDBOutput_7);
				globalMap.put("tDBOutput_7_NB_LINE_REJECTED",
						nb_line_rejected_tDBOutput_7);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row7" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tDBOutput_7", true);
				end_Hash.put("tDBOutput_7", System.currentTimeMillis());

				/**
				 * [tDBOutput_7 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_7 finally ] start
				 */

				currentComponent = "tDBInput_7";

				/**
				 * [tDBInput_7 finally ] stop
				 */

				/**
				 * [tDBOutput_7 finally ] start
				 */

				currentComponent = "tDBOutput_7";

				try {
					if (resourceMap.get("statementClosed_tDBOutput_7") == null) {
						java.sql.PreparedStatement pstmtToClose_tDBOutput_7 = null;
						if ((pstmtToClose_tDBOutput_7 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmt_tDBOutput_7")) != null) {
							pstmtToClose_tDBOutput_7.close();
						}
					}
				} finally {
					if (resourceMap.get("finish_tDBOutput_7") == null) {
						java.sql.Connection ctn_tDBOutput_7 = null;
						if ((ctn_tDBOutput_7 = (java.sql.Connection) resourceMap
								.get("conn_tDBOutput_7")) != null) {
							try {
								ctn_tDBOutput_7.close();
							} catch (java.sql.SQLException sqlEx_tDBOutput_7) {
								String errorMessage_tDBOutput_7 = "failed to close the connection in tDBOutput_7 :"
										+ sqlEx_tDBOutput_7.getMessage();
								System.err.println(errorMessage_tDBOutput_7);
							}
						}
					}
				}

				/**
				 * [tDBOutput_7 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_7_SUBPROCESS_STATE", 1);
	}

	public void tDBConnection_4Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDBConnection_4_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tDBConnection_4 begin ] start
				 */

				ok_Hash.put("tDBConnection_4", false);
				start_Hash.put("tDBConnection_4", System.currentTimeMillis());

				currentComponent = "tDBConnection_4";

				int tos_count_tDBConnection_4 = 0;

				String url_tDBConnection_4 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host="
						+ "shnpc1dw1.aws-sh-npc.copyright.com"
						+ ")(port="
						+ "1541"
						+ "))(connect_data=(service_name="
						+ "dwd1.copyright.com" + ")))";
				globalMap.put("connectionType_" + "tDBConnection_4",
						"ORACLE_SERVICE_NAME");
				String dbUser_tDBConnection_4 = "dw_enterprise";

				final String decryptedPassword_tDBConnection_4 = routines.system.PasswordEncryptUtil
						.decryptPassword("317be83bb74b6d037f95c5bcaa9f0447");
				String dbPwd_tDBConnection_4 = decryptedPassword_tDBConnection_4;

				java.sql.Connection conn_tDBConnection_4 = null;

				String driverClass_tDBConnection_4 = "oracle.jdbc.OracleDriver";
				java.lang.Class.forName(driverClass_tDBConnection_4);

				conn_tDBConnection_4 = java.sql.DriverManager.getConnection(
						url_tDBConnection_4, dbUser_tDBConnection_4,
						dbPwd_tDBConnection_4);

				globalMap.put("conn_tDBConnection_4", conn_tDBConnection_4);
				if (null != conn_tDBConnection_4) {

					conn_tDBConnection_4.setAutoCommit(false);
				}
				globalMap.put("host_" + "tDBConnection_4",
						"shnpc1dw1.aws-sh-npc.copyright.com");
				globalMap.put("port_" + "tDBConnection_4", "1541");
				globalMap.put("dbname_" + "tDBConnection_4",
						"dwd1.copyright.com");

				globalMap
						.put("conn_" + "tDBConnection_4", conn_tDBConnection_4);
				globalMap.put("dbschema_" + "tDBConnection_4", "opstage");
				globalMap.put("username_" + "tDBConnection_4", "dw_enterprise");
				globalMap.put("password_" + "tDBConnection_4",
						dbPwd_tDBConnection_4);

				/**
				 * [tDBConnection_4 begin ] stop
				 */

				/**
				 * [tDBConnection_4 main ] start
				 */

				currentComponent = "tDBConnection_4";

				tos_count_tDBConnection_4++;

				/**
				 * [tDBConnection_4 main ] stop
				 */

				/**
				 * [tDBConnection_4 process_data_begin ] start
				 */

				currentComponent = "tDBConnection_4";

				/**
				 * [tDBConnection_4 process_data_begin ] stop
				 */

				/**
				 * [tDBConnection_4 process_data_end ] start
				 */

				currentComponent = "tDBConnection_4";

				/**
				 * [tDBConnection_4 process_data_end ] stop
				 */

				/**
				 * [tDBConnection_4 end ] start
				 */

				currentComponent = "tDBConnection_4";

				ok_Hash.put("tDBConnection_4", true);
				end_Hash.put("tDBConnection_4", System.currentTimeMillis());

				/**
				 * [tDBConnection_4 end ] stop
				 */
			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tDBConnection_4:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk4", 0, "ok");
			}

			tDBInput_4Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBConnection_4 finally ] start
				 */

				currentComponent = "tDBConnection_4";

				/**
				 * [tDBConnection_4 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBConnection_4_SUBPROCESS_STATE", 1);
	}

	public static class row4Struct implements
			routines.system.IPersistableRow<row4Struct> {
		final static byte[] commonByteArrayLock_ORDER_ETL_TF_ETL = new byte[0];
		static byte[] commonByteArray_ORDER_ETL_TF_ETL = new byte[0];

		public String LicenseeName;

		public String getLicenseeName() {
			return this.LicenseeName;
		}

		public String ContactEmail;

		public String getContactEmail() {
			return this.ContactEmail;
		}

		public String LicSubType;

		public String getLicSubType() {
			return this.LicSubType;
		}

		public String ParentOrgUid;

		public String getParentOrgUid() {
			return this.ParentOrgUid;
		}

		public String LicenseePartyNumb;

		public String getLicenseePartyNumb() {
			return this.LicenseePartyNumb;
		}

		public String TaxCountry;

		public String getTaxCountry() {
			return this.TaxCountry;
		}

		public String NotForProfit;

		public String getNotForProfit() {
			return this.NotForProfit;
		}

		public BigDecimal TF_PTY_INST;

		public BigDecimal getTF_PTY_INST() {
			return this.TF_PTY_INST;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ORDER_ETL_TF_ETL.length) {
					if (length < 1024
							&& commonByteArray_ORDER_ETL_TF_ETL.length == 0) {
						commonByteArray_ORDER_ETL_TF_ETL = new byte[1024];
					} else {
						commonByteArray_ORDER_ETL_TF_ETL = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ORDER_ETL_TF_ETL, 0, length);
				strReturn = new String(commonByteArray_ORDER_ETL_TF_ETL, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ORDER_ETL_TF_ETL) {

				try {

					int length = 0;

					this.LicenseeName = readString(dis);

					this.ContactEmail = readString(dis);

					this.LicSubType = readString(dis);

					this.ParentOrgUid = readString(dis);

					this.LicenseePartyNumb = readString(dis);

					this.TaxCountry = readString(dis);

					this.NotForProfit = readString(dis);

					this.TF_PTY_INST = (BigDecimal) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.LicenseeName, dos);

				// String

				writeString(this.ContactEmail, dos);

				// String

				writeString(this.LicSubType, dos);

				// String

				writeString(this.ParentOrgUid, dos);

				// String

				writeString(this.LicenseePartyNumb, dos);

				// String

				writeString(this.TaxCountry, dos);

				// String

				writeString(this.NotForProfit, dos);

				// BigDecimal

				dos.writeObject(this.TF_PTY_INST);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("LicenseeName=" + LicenseeName);
			sb.append(",ContactEmail=" + ContactEmail);
			sb.append(",LicSubType=" + LicSubType);
			sb.append(",ParentOrgUid=" + ParentOrgUid);
			sb.append(",LicenseePartyNumb=" + LicenseePartyNumb);
			sb.append(",TaxCountry=" + TaxCountry);
			sb.append(",NotForProfit=" + NotForProfit);
			sb.append(",TF_PTY_INST=" + String.valueOf(TF_PTY_INST));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row4Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_4Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDBInput_4_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row4Struct row4 = new row4Struct();

				/**
				 * [tDBOutput_4 begin ] start
				 */

				ok_Hash.put("tDBOutput_4", false);
				start_Hash.put("tDBOutput_4", System.currentTimeMillis());

				currentComponent = "tDBOutput_4";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row4" + iterateId, 0, 0);

					}
				}

				int tos_count_tDBOutput_4 = 0;

				String dbschema_tDBOutput_4 = null;
				dbschema_tDBOutput_4 = "staging";

				String tableName_tDBOutput_4 = null;
				if (dbschema_tDBOutput_4 == null
						|| dbschema_tDBOutput_4.trim().length() == 0) {
					tableName_tDBOutput_4 = "stg_tf_rup_tflicensees";
				} else {
					tableName_tDBOutput_4 = dbschema_tDBOutput_4 + "\".\""
							+ "stg_tf_rup_tflicensees";
				}

				int nb_line_tDBOutput_4 = 0;
				int nb_line_update_tDBOutput_4 = 0;
				int nb_line_inserted_tDBOutput_4 = 0;
				int nb_line_deleted_tDBOutput_4 = 0;
				int nb_line_rejected_tDBOutput_4 = 0;

				int deletedCount_tDBOutput_4 = 0;
				int updatedCount_tDBOutput_4 = 0;
				int insertedCount_tDBOutput_4 = 0;
				int rejectedCount_tDBOutput_4 = 0;

				boolean whetherReject_tDBOutput_4 = false;

				java.sql.Connection conn_tDBOutput_4 = null;
				String dbUser_tDBOutput_4 = null;

				java.lang.Class.forName("org.postgresql.Driver");
				String url_tDBOutput_4 = "jdbc:postgresql://" + "localhost"
						+ ":" + "5432" + "/" + "rup";
				dbUser_tDBOutput_4 = "rup";

				final String decryptedPassword_tDBOutput_4 = routines.system.PasswordEncryptUtil
						.decryptPassword("544d653f2c2bdc61");

				String dbPwd_tDBOutput_4 = decryptedPassword_tDBOutput_4;

				conn_tDBOutput_4 = java.sql.DriverManager.getConnection(
						url_tDBOutput_4, dbUser_tDBOutput_4, dbPwd_tDBOutput_4);

				resourceMap.put("conn_tDBOutput_4", conn_tDBOutput_4);
				conn_tDBOutput_4.setAutoCommit(false);
				int commitEvery_tDBOutput_4 = 10000;
				int commitCounter_tDBOutput_4 = 0;

				int batchSize_tDBOutput_4 = 10000;
				int batchSizeCounter_tDBOutput_4 = 0;

				int count_tDBOutput_4 = 0;
				String insert_tDBOutput_4 = "INSERT INTO \""
						+ tableName_tDBOutput_4
						+ "\" (\"licenseename\",\"contactemail\",\"licsubtype\",\"parentorguid\",\"licenseepartynumb\",\"taxcountry\",\"notforprofit\",\"tf_pty_inst\") VALUES (?,?,?,?,?,?,?,?)";

				java.sql.PreparedStatement pstmt_tDBOutput_4 = conn_tDBOutput_4
						.prepareStatement(insert_tDBOutput_4);
				resourceMap.put("pstmt_tDBOutput_4", pstmt_tDBOutput_4);

				/**
				 * [tDBOutput_4 begin ] stop
				 */

				/**
				 * [tDBInput_4 begin ] start
				 */

				ok_Hash.put("tDBInput_4", false);
				start_Hash.put("tDBInput_4", System.currentTimeMillis());

				currentComponent = "tDBInput_4";

				int tos_count_tDBInput_4 = 0;

				int nb_line_tDBInput_4 = 0;
				java.sql.Connection conn_tDBInput_4 = null;
				conn_tDBInput_4 = (java.sql.Connection) globalMap
						.get("conn_tDBConnection_4");
				boolean isTimeZoneNull_tDBInput_4 = false;
				boolean isConnectionWrapped_tDBInput_4 = !(conn_tDBInput_4 instanceof oracle.jdbc.OracleConnection)
						&& conn_tDBInput_4
								.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tDBInput_4 = null;
				if (isConnectionWrapped_tDBInput_4) {
					unwrappedOraConn_tDBInput_4 = conn_tDBInput_4
							.unwrap(oracle.jdbc.OracleConnection.class);
					if (unwrappedOraConn_tDBInput_4 != null) {
						isTimeZoneNull_tDBInput_4 = (unwrappedOraConn_tDBInput_4
								.getSessionTimeZone() == null);
					}
				} else {
					isTimeZoneNull_tDBInput_4 = (((oracle.jdbc.OracleConnection) conn_tDBInput_4)
							.getSessionTimeZone() == null);
				}

				if (isTimeZoneNull_tDBInput_4) {
					java.sql.Statement stmtGetTZ_tDBInput_4 = conn_tDBInput_4
							.createStatement();
					java.sql.ResultSet rsGetTZ_tDBInput_4 = stmtGetTZ_tDBInput_4
							.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tDBInput_4 = java.util.TimeZone
							.getDefault().getID();
					while (rsGetTZ_tDBInput_4.next()) {
						sessionTimezone_tDBInput_4 = rsGetTZ_tDBInput_4
								.getString(1);
					}
					if (isConnectionWrapped_tDBInput_4
							&& unwrappedOraConn_tDBInput_4 != null) {
						unwrappedOraConn_tDBInput_4
								.setSessionTimeZone(sessionTimezone_tDBInput_4);
					} else {
						((oracle.jdbc.OracleConnection) conn_tDBInput_4)
								.setSessionTimeZone(sessionTimezone_tDBInput_4);
					}
				}

				java.sql.Statement stmt_tDBInput_4 = conn_tDBInput_4
						.createStatement();

				String dbquery_tDBInput_4 = "select * from op_stage.RUP_TFLICENSEES_V";

				globalMap.put("tDBInput_4_QUERY", dbquery_tDBInput_4);
				java.sql.ResultSet rs_tDBInput_4 = null;

				try {
					rs_tDBInput_4 = stmt_tDBInput_4
							.executeQuery(dbquery_tDBInput_4);
					java.sql.ResultSetMetaData rsmd_tDBInput_4 = rs_tDBInput_4
							.getMetaData();
					int colQtyInRs_tDBInput_4 = rsmd_tDBInput_4
							.getColumnCount();

					String tmpContent_tDBInput_4 = null;

					while (rs_tDBInput_4.next()) {
						nb_line_tDBInput_4++;

						if (colQtyInRs_tDBInput_4 < 1) {
							row4.LicenseeName = null;
						} else {

							row4.LicenseeName = routines.system.JDBCUtil
									.getString(rs_tDBInput_4, 1, false);
						}
						if (colQtyInRs_tDBInput_4 < 2) {
							row4.ContactEmail = null;
						} else {

							row4.ContactEmail = routines.system.JDBCUtil
									.getString(rs_tDBInput_4, 2, false);
						}
						if (colQtyInRs_tDBInput_4 < 3) {
							row4.LicSubType = null;
						} else {

							row4.LicSubType = routines.system.JDBCUtil
									.getString(rs_tDBInput_4, 3, false);
						}
						if (colQtyInRs_tDBInput_4 < 4) {
							row4.ParentOrgUid = null;
						} else {

							row4.ParentOrgUid = routines.system.JDBCUtil
									.getString(rs_tDBInput_4, 4, false);
						}
						if (colQtyInRs_tDBInput_4 < 5) {
							row4.LicenseePartyNumb = null;
						} else {

							row4.LicenseePartyNumb = routines.system.JDBCUtil
									.getString(rs_tDBInput_4, 5, false);
						}
						if (colQtyInRs_tDBInput_4 < 6) {
							row4.TaxCountry = null;
						} else {

							row4.TaxCountry = routines.system.JDBCUtil
									.getString(rs_tDBInput_4, 6, false);
						}
						if (colQtyInRs_tDBInput_4 < 7) {
							row4.NotForProfit = null;
						} else {

							row4.NotForProfit = routines.system.JDBCUtil
									.getString(rs_tDBInput_4, 7, false);
						}
						if (colQtyInRs_tDBInput_4 < 8) {
							row4.TF_PTY_INST = null;
						} else {

							if (rs_tDBInput_4.getObject(8) != null) {
								row4.TF_PTY_INST = rs_tDBInput_4
										.getBigDecimal(8);
							} else {

								row4.TF_PTY_INST = null;
							}
						}

						/**
						 * [tDBInput_4 begin ] stop
						 */

						/**
						 * [tDBInput_4 main ] start
						 */

						currentComponent = "tDBInput_4";

						tos_count_tDBInput_4++;

						/**
						 * [tDBInput_4 main ] stop
						 */

						/**
						 * [tDBInput_4 process_data_begin ] start
						 */

						currentComponent = "tDBInput_4";

						/**
						 * [tDBInput_4 process_data_begin ] stop
						 */

						/**
						 * [tDBOutput_4 main ] start
						 */

						currentComponent = "tDBOutput_4";

						// row4
						// row4

						if (execStat) {
							runStat.updateStatOnConnection("row4" + iterateId,
									1, 1);
						}

						whetherReject_tDBOutput_4 = false;
						if (row4.LicenseeName == null) {
							pstmt_tDBOutput_4
									.setNull(1, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_4.setString(1, row4.LicenseeName);
						}

						if (row4.ContactEmail == null) {
							pstmt_tDBOutput_4
									.setNull(2, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_4.setString(2, row4.ContactEmail);
						}

						if (row4.LicSubType == null) {
							pstmt_tDBOutput_4
									.setNull(3, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_4.setString(3, row4.LicSubType);
						}

						if (row4.ParentOrgUid == null) {
							pstmt_tDBOutput_4
									.setNull(4, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_4.setString(4, row4.ParentOrgUid);
						}

						if (row4.LicenseePartyNumb == null) {
							pstmt_tDBOutput_4
									.setNull(5, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_4.setString(5,
									row4.LicenseePartyNumb);
						}

						if (row4.TaxCountry == null) {
							pstmt_tDBOutput_4
									.setNull(6, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_4.setString(6, row4.TaxCountry);
						}

						if (row4.NotForProfit == null) {
							pstmt_tDBOutput_4
									.setNull(7, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_4.setString(7, row4.NotForProfit);
						}

						pstmt_tDBOutput_4.setBigDecimal(8, row4.TF_PTY_INST);

						pstmt_tDBOutput_4.addBatch();
						nb_line_tDBOutput_4++;

						batchSizeCounter_tDBOutput_4++;

						if (!whetherReject_tDBOutput_4) {
						}
						if ((batchSize_tDBOutput_4 > 0)
								&& (batchSize_tDBOutput_4 <= batchSizeCounter_tDBOutput_4)) {
							try {
								int countSum_tDBOutput_4 = 0;

								for (int countEach_tDBOutput_4 : pstmt_tDBOutput_4
										.executeBatch()) {
									countSum_tDBOutput_4 += (countEach_tDBOutput_4 < 0 ? 0
											: countEach_tDBOutput_4);
								}

								insertedCount_tDBOutput_4 += countSum_tDBOutput_4;

								batchSizeCounter_tDBOutput_4 = 0;
							} catch (java.sql.BatchUpdateException e_tDBOutput_4) {
								java.sql.SQLException ne_tDBOutput_4 = e_tDBOutput_4
										.getNextException(), sqle_tDBOutput_4 = null;
								String errormessage_tDBOutput_4;
								if (ne_tDBOutput_4 != null) {
									// build new exception to provide the
									// original cause
									sqle_tDBOutput_4 = new java.sql.SQLException(
											e_tDBOutput_4.getMessage()
													+ "\ncaused by: "
													+ ne_tDBOutput_4
															.getMessage(),
											ne_tDBOutput_4.getSQLState(),
											ne_tDBOutput_4.getErrorCode(),
											ne_tDBOutput_4);
									errormessage_tDBOutput_4 = sqle_tDBOutput_4
											.getMessage();
								} else {
									errormessage_tDBOutput_4 = e_tDBOutput_4
											.getMessage();
								}

								int countSum_tDBOutput_4 = 0;
								for (int countEach_tDBOutput_4 : e_tDBOutput_4
										.getUpdateCounts()) {
									countSum_tDBOutput_4 += (countEach_tDBOutput_4 < 0 ? 0
											: countEach_tDBOutput_4);
								}

								insertedCount_tDBOutput_4 += countSum_tDBOutput_4;

								System.err.println(errormessage_tDBOutput_4);

							}
						}

						commitCounter_tDBOutput_4++;
						if (commitEvery_tDBOutput_4 <= commitCounter_tDBOutput_4) {
							if ((batchSize_tDBOutput_4 > 0)
									&& (batchSizeCounter_tDBOutput_4 > 0)) {
								try {
									int countSum_tDBOutput_4 = 0;

									for (int countEach_tDBOutput_4 : pstmt_tDBOutput_4
											.executeBatch()) {
										countSum_tDBOutput_4 += (countEach_tDBOutput_4 < 0 ? 0
												: countEach_tDBOutput_4);
									}

									insertedCount_tDBOutput_4 += countSum_tDBOutput_4;

									batchSizeCounter_tDBOutput_4 = 0;
								} catch (java.sql.BatchUpdateException e_tDBOutput_4) {
									java.sql.SQLException ne_tDBOutput_4 = e_tDBOutput_4
											.getNextException(), sqle_tDBOutput_4 = null;
									String errormessage_tDBOutput_4;
									if (ne_tDBOutput_4 != null) {
										// build new exception to provide the
										// original cause
										sqle_tDBOutput_4 = new java.sql.SQLException(
												e_tDBOutput_4.getMessage()
														+ "\ncaused by: "
														+ ne_tDBOutput_4
																.getMessage(),
												ne_tDBOutput_4.getSQLState(),
												ne_tDBOutput_4.getErrorCode(),
												ne_tDBOutput_4);
										errormessage_tDBOutput_4 = sqle_tDBOutput_4
												.getMessage();
									} else {
										errormessage_tDBOutput_4 = e_tDBOutput_4
												.getMessage();
									}

									int countSum_tDBOutput_4 = 0;
									for (int countEach_tDBOutput_4 : e_tDBOutput_4
											.getUpdateCounts()) {
										countSum_tDBOutput_4 += (countEach_tDBOutput_4 < 0 ? 0
												: countEach_tDBOutput_4);
									}

									insertedCount_tDBOutput_4 += countSum_tDBOutput_4;

									System.err
											.println(errormessage_tDBOutput_4);

								}
							}
							conn_tDBOutput_4.commit();

							commitCounter_tDBOutput_4 = 0;
						}

						tos_count_tDBOutput_4++;

						/**
						 * [tDBOutput_4 main ] stop
						 */

						/**
						 * [tDBOutput_4 process_data_begin ] start
						 */

						currentComponent = "tDBOutput_4";

						/**
						 * [tDBOutput_4 process_data_begin ] stop
						 */

						/**
						 * [tDBOutput_4 process_data_end ] start
						 */

						currentComponent = "tDBOutput_4";

						/**
						 * [tDBOutput_4 process_data_end ] stop
						 */

						/**
						 * [tDBInput_4 process_data_end ] start
						 */

						currentComponent = "tDBInput_4";

						/**
						 * [tDBInput_4 process_data_end ] stop
						 */

						/**
						 * [tDBInput_4 end ] start
						 */

						currentComponent = "tDBInput_4";

					}
				} finally {
					if (rs_tDBInput_4 != null) {
						rs_tDBInput_4.close();
					}
					if (stmt_tDBInput_4 != null) {
						stmt_tDBInput_4.close();
					}
				}

				globalMap.put("tDBInput_4_NB_LINE", nb_line_tDBInput_4);

				ok_Hash.put("tDBInput_4", true);
				end_Hash.put("tDBInput_4", System.currentTimeMillis());

				/**
				 * [tDBInput_4 end ] stop
				 */

				/**
				 * [tDBOutput_4 end ] start
				 */

				currentComponent = "tDBOutput_4";

				try {
					int countSum_tDBOutput_4 = 0;
					if (pstmt_tDBOutput_4 != null
							&& batchSizeCounter_tDBOutput_4 > 0) {

						for (int countEach_tDBOutput_4 : pstmt_tDBOutput_4
								.executeBatch()) {
							countSum_tDBOutput_4 += (countEach_tDBOutput_4 < 0 ? 0
									: countEach_tDBOutput_4);
						}

					}

					insertedCount_tDBOutput_4 += countSum_tDBOutput_4;

				} catch (java.sql.BatchUpdateException e_tDBOutput_4) {
					java.sql.SQLException ne_tDBOutput_4 = e_tDBOutput_4
							.getNextException(), sqle_tDBOutput_4 = null;
					String errormessage_tDBOutput_4;
					if (ne_tDBOutput_4 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_4 = new java.sql.SQLException(
								e_tDBOutput_4.getMessage() + "\ncaused by: "
										+ ne_tDBOutput_4.getMessage(),
								ne_tDBOutput_4.getSQLState(),
								ne_tDBOutput_4.getErrorCode(), ne_tDBOutput_4);
						errormessage_tDBOutput_4 = sqle_tDBOutput_4
								.getMessage();
					} else {
						errormessage_tDBOutput_4 = e_tDBOutput_4.getMessage();
					}

					int countSum_tDBOutput_4 = 0;
					for (int countEach_tDBOutput_4 : e_tDBOutput_4
							.getUpdateCounts()) {
						countSum_tDBOutput_4 += (countEach_tDBOutput_4 < 0 ? 0
								: countEach_tDBOutput_4);
					}

					insertedCount_tDBOutput_4 += countSum_tDBOutput_4;

					System.err.println(errormessage_tDBOutput_4);

				}

				if (pstmt_tDBOutput_4 != null) {

					pstmt_tDBOutput_4.close();
					resourceMap.remove("pstmt_tDBOutput_4");
				}
				resourceMap.put("statementClosed_tDBOutput_4", true);

				conn_tDBOutput_4.commit();

				conn_tDBOutput_4.close();

				resourceMap.put("finish_tDBOutput_4", true);

				nb_line_deleted_tDBOutput_4 = nb_line_deleted_tDBOutput_4
						+ deletedCount_tDBOutput_4;
				nb_line_update_tDBOutput_4 = nb_line_update_tDBOutput_4
						+ updatedCount_tDBOutput_4;
				nb_line_inserted_tDBOutput_4 = nb_line_inserted_tDBOutput_4
						+ insertedCount_tDBOutput_4;
				nb_line_rejected_tDBOutput_4 = nb_line_rejected_tDBOutput_4
						+ rejectedCount_tDBOutput_4;

				globalMap.put("tDBOutput_4_NB_LINE", nb_line_tDBOutput_4);
				globalMap.put("tDBOutput_4_NB_LINE_UPDATED",
						nb_line_update_tDBOutput_4);
				globalMap.put("tDBOutput_4_NB_LINE_INSERTED",
						nb_line_inserted_tDBOutput_4);
				globalMap.put("tDBOutput_4_NB_LINE_DELETED",
						nb_line_deleted_tDBOutput_4);
				globalMap.put("tDBOutput_4_NB_LINE_REJECTED",
						nb_line_rejected_tDBOutput_4);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row4" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tDBOutput_4", true);
				end_Hash.put("tDBOutput_4", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk4", 0, "ok");
				}
				tDBInput_8Process(globalMap);

				/**
				 * [tDBOutput_4 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_4 finally ] start
				 */

				currentComponent = "tDBInput_4";

				/**
				 * [tDBInput_4 finally ] stop
				 */

				/**
				 * [tDBOutput_4 finally ] start
				 */

				currentComponent = "tDBOutput_4";

				try {
					if (resourceMap.get("statementClosed_tDBOutput_4") == null) {
						java.sql.PreparedStatement pstmtToClose_tDBOutput_4 = null;
						if ((pstmtToClose_tDBOutput_4 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmt_tDBOutput_4")) != null) {
							pstmtToClose_tDBOutput_4.close();
						}
					}
				} finally {
					if (resourceMap.get("finish_tDBOutput_4") == null) {
						java.sql.Connection ctn_tDBOutput_4 = null;
						if ((ctn_tDBOutput_4 = (java.sql.Connection) resourceMap
								.get("conn_tDBOutput_4")) != null) {
							try {
								ctn_tDBOutput_4.close();
							} catch (java.sql.SQLException sqlEx_tDBOutput_4) {
								String errorMessage_tDBOutput_4 = "failed to close the connection in tDBOutput_4 :"
										+ sqlEx_tDBOutput_4.getMessage();
								System.err.println(errorMessage_tDBOutput_4);
							}
						}
					}
				}

				/**
				 * [tDBOutput_4 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_4_SUBPROCESS_STATE", 1);
	}

	public static class row8Struct implements
			routines.system.IPersistableRow<row8Struct> {
		final static byte[] commonByteArrayLock_ORDER_ETL_TF_ETL = new byte[0];
		static byte[] commonByteArray_ORDER_ETL_TF_ETL = new byte[0];

		public Long licensee_dimension_uid;

		public Long getLicensee_dimension_uid() {
			return this.licensee_dimension_uid;
		}

		public String source_system_licensee_uid;

		public String getSource_system_licensee_uid() {
			return this.source_system_licensee_uid;
		}

		public String licensee_name;

		public String getLicensee_name() {
			return this.licensee_name;
		}

		public String licensee_contact_email;

		public String getLicensee_contact_email() {
			return this.licensee_contact_email;
		}

		public String licensee_sub_type;

		public String getLicensee_sub_type() {
			return this.licensee_sub_type;
		}

		public String parent_organization_uid;

		public String getParent_organization_uid() {
			return this.parent_organization_uid;
		}

		public String licensee_oracle_party_number;

		public String getLicensee_oracle_party_number() {
			return this.licensee_oracle_party_number;
		}

		public String licensee_tax_country;

		public String getLicensee_tax_country() {
			return this.licensee_tax_country;
		}

		public Boolean not_for_profit_flag;

		public Boolean getNot_for_profit_flag() {
			return this.not_for_profit_flag;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ORDER_ETL_TF_ETL.length) {
					if (length < 1024
							&& commonByteArray_ORDER_ETL_TF_ETL.length == 0) {
						commonByteArray_ORDER_ETL_TF_ETL = new byte[1024];
					} else {
						commonByteArray_ORDER_ETL_TF_ETL = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ORDER_ETL_TF_ETL, 0, length);
				strReturn = new String(commonByteArray_ORDER_ETL_TF_ETL, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ORDER_ETL_TF_ETL) {

				try {

					int length = 0;

					length = dis.readByte();
					if (length == -1) {
						this.licensee_dimension_uid = null;
					} else {
						this.licensee_dimension_uid = dis.readLong();
					}

					this.source_system_licensee_uid = readString(dis);

					this.licensee_name = readString(dis);

					this.licensee_contact_email = readString(dis);

					this.licensee_sub_type = readString(dis);

					this.parent_organization_uid = readString(dis);

					this.licensee_oracle_party_number = readString(dis);

					this.licensee_tax_country = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.not_for_profit_flag = null;
					} else {
						this.not_for_profit_flag = dis.readBoolean();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Long

				if (this.licensee_dimension_uid == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.licensee_dimension_uid);
				}

				// String

				writeString(this.source_system_licensee_uid, dos);

				// String

				writeString(this.licensee_name, dos);

				// String

				writeString(this.licensee_contact_email, dos);

				// String

				writeString(this.licensee_sub_type, dos);

				// String

				writeString(this.parent_organization_uid, dos);

				// String

				writeString(this.licensee_oracle_party_number, dos);

				// String

				writeString(this.licensee_tax_country, dos);

				// Boolean

				if (this.not_for_profit_flag == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.not_for_profit_flag);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("licensee_dimension_uid="
					+ String.valueOf(licensee_dimension_uid));
			sb.append(",source_system_licensee_uid="
					+ source_system_licensee_uid);
			sb.append(",licensee_name=" + licensee_name);
			sb.append(",licensee_contact_email=" + licensee_contact_email);
			sb.append(",licensee_sub_type=" + licensee_sub_type);
			sb.append(",parent_organization_uid=" + parent_organization_uid);
			sb.append(",licensee_oracle_party_number="
					+ licensee_oracle_party_number);
			sb.append(",licensee_tax_country=" + licensee_tax_country);
			sb.append(",not_for_profit_flag="
					+ String.valueOf(not_for_profit_flag));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row8Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_8Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDBInput_8_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row8Struct row8 = new row8Struct();

				/**
				 * [tDBOutput_8 begin ] start
				 */

				ok_Hash.put("tDBOutput_8", false);
				start_Hash.put("tDBOutput_8", System.currentTimeMillis());

				currentComponent = "tDBOutput_8";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row8" + iterateId, 0, 0);

					}
				}

				int tos_count_tDBOutput_8 = 0;

				String dbschema_tDBOutput_8 = null;
				dbschema_tDBOutput_8 = "staging";

				String tableName_tDBOutput_8 = null;
				if (dbschema_tDBOutput_8 == null
						|| dbschema_tDBOutput_8.trim().length() == 0) {
					tableName_tDBOutput_8 = "stg_licensee_dimension";
				} else {
					tableName_tDBOutput_8 = dbschema_tDBOutput_8 + "\".\""
							+ "stg_licensee_dimension";
				}

				int nb_line_tDBOutput_8 = 0;
				int nb_line_update_tDBOutput_8 = 0;
				int nb_line_inserted_tDBOutput_8 = 0;
				int nb_line_deleted_tDBOutput_8 = 0;
				int nb_line_rejected_tDBOutput_8 = 0;

				int deletedCount_tDBOutput_8 = 0;
				int updatedCount_tDBOutput_8 = 0;
				int insertedCount_tDBOutput_8 = 0;
				int rejectedCount_tDBOutput_8 = 0;

				boolean whetherReject_tDBOutput_8 = false;

				java.sql.Connection conn_tDBOutput_8 = null;
				String dbUser_tDBOutput_8 = null;

				java.lang.Class.forName("org.postgresql.Driver");
				String url_tDBOutput_8 = "jdbc:postgresql://" + "localhost"
						+ ":" + "5432" + "/" + "rup";
				dbUser_tDBOutput_8 = "rup";

				final String decryptedPassword_tDBOutput_8 = routines.system.PasswordEncryptUtil
						.decryptPassword("544d653f2c2bdc61");

				String dbPwd_tDBOutput_8 = decryptedPassword_tDBOutput_8;

				conn_tDBOutput_8 = java.sql.DriverManager.getConnection(
						url_tDBOutput_8, dbUser_tDBOutput_8, dbPwd_tDBOutput_8);

				resourceMap.put("conn_tDBOutput_8", conn_tDBOutput_8);
				conn_tDBOutput_8.setAutoCommit(false);
				int commitEvery_tDBOutput_8 = 10000;
				int commitCounter_tDBOutput_8 = 0;

				int batchSize_tDBOutput_8 = 10000;
				int batchSizeCounter_tDBOutput_8 = 0;

				int count_tDBOutput_8 = 0;
				String insert_tDBOutput_8 = "INSERT INTO \""
						+ tableName_tDBOutput_8
						+ "\" (\"licensee_dimension_uid\",\"source_system_licensee_uid\",\"licensee_name\",\"licensee_contact_email\",\"licensee_sub_type\",\"parent_organization_uid\",\"licensee_oracle_party_number\",\"licensee_tax_country\",\"not_for_profit_flag\") VALUES (?,?,?,?,?,?,?,?,?)";

				java.sql.PreparedStatement pstmt_tDBOutput_8 = conn_tDBOutput_8
						.prepareStatement(insert_tDBOutput_8);
				resourceMap.put("pstmt_tDBOutput_8", pstmt_tDBOutput_8);

				/**
				 * [tDBOutput_8 begin ] stop
				 */

				/**
				 * [tDBInput_8 begin ] start
				 */

				ok_Hash.put("tDBInput_8", false);
				start_Hash.put("tDBInput_8", System.currentTimeMillis());

				currentComponent = "tDBInput_8";

				int tos_count_tDBInput_8 = 0;

				int nb_line_tDBInput_8 = 0;
				java.sql.Connection conn_tDBInput_8 = null;
				String driverClass_tDBInput_8 = "org.postgresql.Driver";
				java.lang.Class.forName(driverClass_tDBInput_8);
				String dbUser_tDBInput_8 = "rup";

				final String decryptedPassword_tDBInput_8 = routines.system.PasswordEncryptUtil
						.decryptPassword("544d653f2c2bdc61");

				String dbPwd_tDBInput_8 = decryptedPassword_tDBInput_8;

				String url_tDBInput_8 = "jdbc:postgresql://" + "localhost"
						+ ":" + "5432" + "/" + "rup";

				conn_tDBInput_8 = java.sql.DriverManager.getConnection(
						url_tDBInput_8, dbUser_tDBInput_8, dbPwd_tDBInput_8);

				conn_tDBInput_8.setAutoCommit(false);

				java.sql.Statement stmt_tDBInput_8 = conn_tDBInput_8
						.createStatement();

				String dbquery_tDBInput_8 = "SELECT nextval('staging.licensee_dimension_seq') as licensee_dimension_uid,\n       licenseename as source_system_licens"
						+ "ee_uid,\n       licenseename as licensee_name,\n       contactemail as licensee_contact_email,\n       licsubtype as licens"
						+ "ee_sub_type,\n       parentorguid as parent_organization_uid,\n       licenseepartynumb as licensee_oracle_party_number,\n "
						+ "      taxcountry as licensee_tax_country,\n       notforprofit::boolean as not_for_profit_flag\nFROM staging.stg_tf_rup_tf"
						+ "licensees";

				globalMap.put("tDBInput_8_QUERY", dbquery_tDBInput_8);
				java.sql.ResultSet rs_tDBInput_8 = null;

				try {
					rs_tDBInput_8 = stmt_tDBInput_8
							.executeQuery(dbquery_tDBInput_8);
					java.sql.ResultSetMetaData rsmd_tDBInput_8 = rs_tDBInput_8
							.getMetaData();
					int colQtyInRs_tDBInput_8 = rsmd_tDBInput_8
							.getColumnCount();

					String tmpContent_tDBInput_8 = null;

					while (rs_tDBInput_8.next()) {
						nb_line_tDBInput_8++;

						if (colQtyInRs_tDBInput_8 < 1) {
							row8.licensee_dimension_uid = null;
						} else {

							if (rs_tDBInput_8.getObject(1) != null) {
								row8.licensee_dimension_uid = rs_tDBInput_8
										.getLong(1);
							} else {
								row8.licensee_dimension_uid = null;
							}
						}
						if (colQtyInRs_tDBInput_8 < 2) {
							row8.source_system_licensee_uid = null;
						} else {

							row8.source_system_licensee_uid = routines.system.JDBCUtil
									.getString(rs_tDBInput_8, 2, false);
						}
						if (colQtyInRs_tDBInput_8 < 3) {
							row8.licensee_name = null;
						} else {

							row8.licensee_name = routines.system.JDBCUtil
									.getString(rs_tDBInput_8, 3, false);
						}
						if (colQtyInRs_tDBInput_8 < 4) {
							row8.licensee_contact_email = null;
						} else {

							row8.licensee_contact_email = routines.system.JDBCUtil
									.getString(rs_tDBInput_8, 4, false);
						}
						if (colQtyInRs_tDBInput_8 < 5) {
							row8.licensee_sub_type = null;
						} else {

							row8.licensee_sub_type = routines.system.JDBCUtil
									.getString(rs_tDBInput_8, 5, false);
						}
						if (colQtyInRs_tDBInput_8 < 6) {
							row8.parent_organization_uid = null;
						} else {

							row8.parent_organization_uid = routines.system.JDBCUtil
									.getString(rs_tDBInput_8, 6, false);
						}
						if (colQtyInRs_tDBInput_8 < 7) {
							row8.licensee_oracle_party_number = null;
						} else {

							row8.licensee_oracle_party_number = routines.system.JDBCUtil
									.getString(rs_tDBInput_8, 7, false);
						}
						if (colQtyInRs_tDBInput_8 < 8) {
							row8.licensee_tax_country = null;
						} else {

							row8.licensee_tax_country = routines.system.JDBCUtil
									.getString(rs_tDBInput_8, 8, false);
						}
						if (colQtyInRs_tDBInput_8 < 9) {
							row8.not_for_profit_flag = null;
						} else {

							if (rs_tDBInput_8.getObject(9) != null) {
								row8.not_for_profit_flag = rs_tDBInput_8
										.getBoolean(9);
							} else {
								row8.not_for_profit_flag = null;
							}
						}

						/**
						 * [tDBInput_8 begin ] stop
						 */

						/**
						 * [tDBInput_8 main ] start
						 */

						currentComponent = "tDBInput_8";

						tos_count_tDBInput_8++;

						/**
						 * [tDBInput_8 main ] stop
						 */

						/**
						 * [tDBInput_8 process_data_begin ] start
						 */

						currentComponent = "tDBInput_8";

						/**
						 * [tDBInput_8 process_data_begin ] stop
						 */

						/**
						 * [tDBOutput_8 main ] start
						 */

						currentComponent = "tDBOutput_8";

						// row8
						// row8

						if (execStat) {
							runStat.updateStatOnConnection("row8" + iterateId,
									1, 1);
						}

						whetherReject_tDBOutput_8 = false;
						if (row8.licensee_dimension_uid == null) {
							pstmt_tDBOutput_8
									.setNull(1, java.sql.Types.INTEGER);
						} else {
							pstmt_tDBOutput_8.setLong(1,
									row8.licensee_dimension_uid);
						}

						if (row8.source_system_licensee_uid == null) {
							pstmt_tDBOutput_8
									.setNull(2, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_8.setString(2,
									row8.source_system_licensee_uid);
						}

						if (row8.licensee_name == null) {
							pstmt_tDBOutput_8
									.setNull(3, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_8.setString(3, row8.licensee_name);
						}

						if (row8.licensee_contact_email == null) {
							pstmt_tDBOutput_8
									.setNull(4, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_8.setString(4,
									row8.licensee_contact_email);
						}

						if (row8.licensee_sub_type == null) {
							pstmt_tDBOutput_8
									.setNull(5, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_8.setString(5,
									row8.licensee_sub_type);
						}

						if (row8.parent_organization_uid == null) {
							pstmt_tDBOutput_8
									.setNull(6, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_8.setString(6,
									row8.parent_organization_uid);
						}

						if (row8.licensee_oracle_party_number == null) {
							pstmt_tDBOutput_8
									.setNull(7, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_8.setString(7,
									row8.licensee_oracle_party_number);
						}

						if (row8.licensee_tax_country == null) {
							pstmt_tDBOutput_8
									.setNull(8, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_8.setString(8,
									row8.licensee_tax_country);
						}

						if (row8.not_for_profit_flag == null) {
							pstmt_tDBOutput_8
									.setNull(9, java.sql.Types.BOOLEAN);
						} else {
							pstmt_tDBOutput_8.setBoolean(9,
									row8.not_for_profit_flag);
						}

						pstmt_tDBOutput_8.addBatch();
						nb_line_tDBOutput_8++;

						batchSizeCounter_tDBOutput_8++;

						if ((batchSize_tDBOutput_8 > 0)
								&& (batchSize_tDBOutput_8 <= batchSizeCounter_tDBOutput_8)) {
							try {
								int countSum_tDBOutput_8 = 0;

								for (int countEach_tDBOutput_8 : pstmt_tDBOutput_8
										.executeBatch()) {
									countSum_tDBOutput_8 += (countEach_tDBOutput_8 < 0 ? 0
											: countEach_tDBOutput_8);
								}

								insertedCount_tDBOutput_8 += countSum_tDBOutput_8;

								batchSizeCounter_tDBOutput_8 = 0;
							} catch (java.sql.BatchUpdateException e_tDBOutput_8) {
								java.sql.SQLException ne_tDBOutput_8 = e_tDBOutput_8
										.getNextException(), sqle_tDBOutput_8 = null;
								String errormessage_tDBOutput_8;
								if (ne_tDBOutput_8 != null) {
									// build new exception to provide the
									// original cause
									sqle_tDBOutput_8 = new java.sql.SQLException(
											e_tDBOutput_8.getMessage()
													+ "\ncaused by: "
													+ ne_tDBOutput_8
															.getMessage(),
											ne_tDBOutput_8.getSQLState(),
											ne_tDBOutput_8.getErrorCode(),
											ne_tDBOutput_8);
									errormessage_tDBOutput_8 = sqle_tDBOutput_8
											.getMessage();
								} else {
									errormessage_tDBOutput_8 = e_tDBOutput_8
											.getMessage();
								}

								int countSum_tDBOutput_8 = 0;
								for (int countEach_tDBOutput_8 : e_tDBOutput_8
										.getUpdateCounts()) {
									countSum_tDBOutput_8 += (countEach_tDBOutput_8 < 0 ? 0
											: countEach_tDBOutput_8);
								}

								insertedCount_tDBOutput_8 += countSum_tDBOutput_8;

								System.err.println(errormessage_tDBOutput_8);

							}
						}

						commitCounter_tDBOutput_8++;
						if (commitEvery_tDBOutput_8 <= commitCounter_tDBOutput_8) {
							if ((batchSize_tDBOutput_8 > 0)
									&& (batchSizeCounter_tDBOutput_8 > 0)) {
								try {
									int countSum_tDBOutput_8 = 0;

									for (int countEach_tDBOutput_8 : pstmt_tDBOutput_8
											.executeBatch()) {
										countSum_tDBOutput_8 += (countEach_tDBOutput_8 < 0 ? 0
												: countEach_tDBOutput_8);
									}

									insertedCount_tDBOutput_8 += countSum_tDBOutput_8;

									batchSizeCounter_tDBOutput_8 = 0;
								} catch (java.sql.BatchUpdateException e_tDBOutput_8) {
									java.sql.SQLException ne_tDBOutput_8 = e_tDBOutput_8
											.getNextException(), sqle_tDBOutput_8 = null;
									String errormessage_tDBOutput_8;
									if (ne_tDBOutput_8 != null) {
										// build new exception to provide the
										// original cause
										sqle_tDBOutput_8 = new java.sql.SQLException(
												e_tDBOutput_8.getMessage()
														+ "\ncaused by: "
														+ ne_tDBOutput_8
																.getMessage(),
												ne_tDBOutput_8.getSQLState(),
												ne_tDBOutput_8.getErrorCode(),
												ne_tDBOutput_8);
										errormessage_tDBOutput_8 = sqle_tDBOutput_8
												.getMessage();
									} else {
										errormessage_tDBOutput_8 = e_tDBOutput_8
												.getMessage();
									}

									int countSum_tDBOutput_8 = 0;
									for (int countEach_tDBOutput_8 : e_tDBOutput_8
											.getUpdateCounts()) {
										countSum_tDBOutput_8 += (countEach_tDBOutput_8 < 0 ? 0
												: countEach_tDBOutput_8);
									}

									insertedCount_tDBOutput_8 += countSum_tDBOutput_8;

									System.err
											.println(errormessage_tDBOutput_8);

								}
							}
							conn_tDBOutput_8.commit();

							commitCounter_tDBOutput_8 = 0;
						}

						tos_count_tDBOutput_8++;

						/**
						 * [tDBOutput_8 main ] stop
						 */

						/**
						 * [tDBOutput_8 process_data_begin ] start
						 */

						currentComponent = "tDBOutput_8";

						/**
						 * [tDBOutput_8 process_data_begin ] stop
						 */

						/**
						 * [tDBOutput_8 process_data_end ] start
						 */

						currentComponent = "tDBOutput_8";

						/**
						 * [tDBOutput_8 process_data_end ] stop
						 */

						/**
						 * [tDBInput_8 process_data_end ] start
						 */

						currentComponent = "tDBInput_8";

						/**
						 * [tDBInput_8 process_data_end ] stop
						 */

						/**
						 * [tDBInput_8 end ] start
						 */

						currentComponent = "tDBInput_8";

					}
				} finally {
					if (rs_tDBInput_8 != null) {
						rs_tDBInput_8.close();
					}
					if (stmt_tDBInput_8 != null) {
						stmt_tDBInput_8.close();
					}
					if (conn_tDBInput_8 != null && !conn_tDBInput_8.isClosed()) {

						conn_tDBInput_8.commit();

						conn_tDBInput_8.close();

					}

				}
				globalMap.put("tDBInput_8_NB_LINE", nb_line_tDBInput_8);

				ok_Hash.put("tDBInput_8", true);
				end_Hash.put("tDBInput_8", System.currentTimeMillis());

				/**
				 * [tDBInput_8 end ] stop
				 */

				/**
				 * [tDBOutput_8 end ] start
				 */

				currentComponent = "tDBOutput_8";

				try {
					int countSum_tDBOutput_8 = 0;
					if (pstmt_tDBOutput_8 != null
							&& batchSizeCounter_tDBOutput_8 > 0) {

						for (int countEach_tDBOutput_8 : pstmt_tDBOutput_8
								.executeBatch()) {
							countSum_tDBOutput_8 += (countEach_tDBOutput_8 < 0 ? 0
									: countEach_tDBOutput_8);
						}

					}

					insertedCount_tDBOutput_8 += countSum_tDBOutput_8;

				} catch (java.sql.BatchUpdateException e_tDBOutput_8) {
					java.sql.SQLException ne_tDBOutput_8 = e_tDBOutput_8
							.getNextException(), sqle_tDBOutput_8 = null;
					String errormessage_tDBOutput_8;
					if (ne_tDBOutput_8 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_8 = new java.sql.SQLException(
								e_tDBOutput_8.getMessage() + "\ncaused by: "
										+ ne_tDBOutput_8.getMessage(),
								ne_tDBOutput_8.getSQLState(),
								ne_tDBOutput_8.getErrorCode(), ne_tDBOutput_8);
						errormessage_tDBOutput_8 = sqle_tDBOutput_8
								.getMessage();
					} else {
						errormessage_tDBOutput_8 = e_tDBOutput_8.getMessage();
					}

					int countSum_tDBOutput_8 = 0;
					for (int countEach_tDBOutput_8 : e_tDBOutput_8
							.getUpdateCounts()) {
						countSum_tDBOutput_8 += (countEach_tDBOutput_8 < 0 ? 0
								: countEach_tDBOutput_8);
					}

					insertedCount_tDBOutput_8 += countSum_tDBOutput_8;

					System.err.println(errormessage_tDBOutput_8);

				}

				if (pstmt_tDBOutput_8 != null) {

					pstmt_tDBOutput_8.close();
					resourceMap.remove("pstmt_tDBOutput_8");
				}
				resourceMap.put("statementClosed_tDBOutput_8", true);

				conn_tDBOutput_8.commit();

				conn_tDBOutput_8.close();

				resourceMap.put("finish_tDBOutput_8", true);

				nb_line_deleted_tDBOutput_8 = nb_line_deleted_tDBOutput_8
						+ deletedCount_tDBOutput_8;
				nb_line_update_tDBOutput_8 = nb_line_update_tDBOutput_8
						+ updatedCount_tDBOutput_8;
				nb_line_inserted_tDBOutput_8 = nb_line_inserted_tDBOutput_8
						+ insertedCount_tDBOutput_8;
				nb_line_rejected_tDBOutput_8 = nb_line_rejected_tDBOutput_8
						+ rejectedCount_tDBOutput_8;

				globalMap.put("tDBOutput_8_NB_LINE", nb_line_tDBOutput_8);
				globalMap.put("tDBOutput_8_NB_LINE_UPDATED",
						nb_line_update_tDBOutput_8);
				globalMap.put("tDBOutput_8_NB_LINE_INSERTED",
						nb_line_inserted_tDBOutput_8);
				globalMap.put("tDBOutput_8_NB_LINE_DELETED",
						nb_line_deleted_tDBOutput_8);
				globalMap.put("tDBOutput_8_NB_LINE_REJECTED",
						nb_line_rejected_tDBOutput_8);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row8" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tDBOutput_8", true);
				end_Hash.put("tDBOutput_8", System.currentTimeMillis());

				/**
				 * [tDBOutput_8 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_8 finally ] start
				 */

				currentComponent = "tDBInput_8";

				/**
				 * [tDBInput_8 finally ] stop
				 */

				/**
				 * [tDBOutput_8 finally ] start
				 */

				currentComponent = "tDBOutput_8";

				try {
					if (resourceMap.get("statementClosed_tDBOutput_8") == null) {
						java.sql.PreparedStatement pstmtToClose_tDBOutput_8 = null;
						if ((pstmtToClose_tDBOutput_8 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmt_tDBOutput_8")) != null) {
							pstmtToClose_tDBOutput_8.close();
						}
					}
				} finally {
					if (resourceMap.get("finish_tDBOutput_8") == null) {
						java.sql.Connection ctn_tDBOutput_8 = null;
						if ((ctn_tDBOutput_8 = (java.sql.Connection) resourceMap
								.get("conn_tDBOutput_8")) != null) {
							try {
								ctn_tDBOutput_8.close();
							} catch (java.sql.SQLException sqlEx_tDBOutput_8) {
								String errorMessage_tDBOutput_8 = "failed to close the connection in tDBOutput_8 :"
										+ sqlEx_tDBOutput_8.getMessage();
								System.err.println(errorMessage_tDBOutput_8);
							}
						}
					}
				}

				/**
				 * [tDBOutput_8 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_8_SUBPROCESS_STATE", 1);
	}

	public void tDBConnection_5Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDBConnection_5_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tDBConnection_5 begin ] start
				 */

				ok_Hash.put("tDBConnection_5", false);
				start_Hash.put("tDBConnection_5", System.currentTimeMillis());

				currentComponent = "tDBConnection_5";

				int tos_count_tDBConnection_5 = 0;

				String url_tDBConnection_5 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host="
						+ "shnpc1oradb1.aws-sh-npc.copyright.com"
						+ ")(port="
						+ "1541"
						+ "))(connect_data=(service_name="
						+ "cccd1.copyright.com" + ")))";
				globalMap.put("connectionType_" + "tDBConnection_5",
						"ORACLE_SERVICE_NAME");
				String dbUser_tDBConnection_5 = "ccctf";

				final String decryptedPassword_tDBConnection_5 = routines.system.PasswordEncryptUtil
						.decryptPassword("cb0c39b527c3706c");
				String dbPwd_tDBConnection_5 = decryptedPassword_tDBConnection_5;

				java.sql.Connection conn_tDBConnection_5 = null;

				String driverClass_tDBConnection_5 = "oracle.jdbc.OracleDriver";
				java.lang.Class.forName(driverClass_tDBConnection_5);

				conn_tDBConnection_5 = java.sql.DriverManager.getConnection(
						url_tDBConnection_5, dbUser_tDBConnection_5,
						dbPwd_tDBConnection_5);

				globalMap.put("conn_tDBConnection_5", conn_tDBConnection_5);
				if (null != conn_tDBConnection_5) {

					conn_tDBConnection_5.setAutoCommit(false);
				}
				globalMap.put("host_" + "tDBConnection_5",
						"shnpc1oradb1.aws-sh-npc.copyright.com");
				globalMap.put("port_" + "tDBConnection_5", "1541");
				globalMap.put("dbname_" + "tDBConnection_5",
						"cccd1.copyright.com");

				globalMap
						.put("conn_" + "tDBConnection_5", conn_tDBConnection_5);
				globalMap.put("dbschema_" + "tDBConnection_5", "CCCTF");
				globalMap.put("username_" + "tDBConnection_5", "ccctf");
				globalMap.put("password_" + "tDBConnection_5",
						dbPwd_tDBConnection_5);

				/**
				 * [tDBConnection_5 begin ] stop
				 */

				/**
				 * [tDBConnection_5 main ] start
				 */

				currentComponent = "tDBConnection_5";

				tos_count_tDBConnection_5++;

				/**
				 * [tDBConnection_5 main ] stop
				 */

				/**
				 * [tDBConnection_5 process_data_begin ] start
				 */

				currentComponent = "tDBConnection_5";

				/**
				 * [tDBConnection_5 process_data_begin ] stop
				 */

				/**
				 * [tDBConnection_5 process_data_end ] start
				 */

				currentComponent = "tDBConnection_5";

				/**
				 * [tDBConnection_5 process_data_end ] stop
				 */

				/**
				 * [tDBConnection_5 end ] start
				 */

				currentComponent = "tDBConnection_5";

				ok_Hash.put("tDBConnection_5", true);
				end_Hash.put("tDBConnection_5", System.currentTimeMillis());

				/**
				 * [tDBConnection_5 end ] stop
				 */
			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tDBConnection_5:OnSubjobOk1",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk1", 0, "ok");
			}

			tDBInput_1Process(globalMap);

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tDBConnection_5:OnSubjobOk2",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk2", 0, "ok");
			}

			tDBInput_2Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBConnection_5 finally ] start
				 */

				currentComponent = "tDBConnection_5";

				/**
				 * [tDBConnection_5 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBConnection_5_SUBPROCESS_STATE", 1);
	}

	public static class row1Struct implements
			routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_ORDER_ETL_TF_ETL = new byte[0];
		static byte[] commonByteArray_ORDER_ETL_TF_ETL = new byte[0];

		public BigDecimal OrderNumber;

		public BigDecimal getOrderNumber() {
			return this.OrderNumber;
		}

		public BigDecimal OrderDetailID;

		public BigDecimal getOrderDetailID() {
			return this.OrderDetailID;
		}

		public BigDecimal RGHOnRecordAccountNumber;

		public BigDecimal getRGHOnRecordAccountNumber() {
			return this.RGHOnRecordAccountNumber;
		}

		public String RGHOnRecordName;

		public String getRGHOnRecordName() {
			return this.RGHOnRecordName;
		}

		public String ProductName;

		public String getProductName() {
			return this.ProductName;
		}

		public String ProductCode;

		public String getProductCode() {
			return this.ProductCode;
		}

		public String ProductFamily;

		public String getProductFamily() {
			return this.ProductFamily;
		}

		public String NumberUnits;

		public String getNumberUnits() {
			return this.NumberUnits;
		}

		public String UnitType;

		public String getUnitType() {
			return this.UnitType;
		}

		public String PublicationTitle;

		public String getPublicationTitle() {
			return this.PublicationTitle;
		}

		public String OrderStatus;

		public String getOrderStatus() {
			return this.OrderStatus;
		}

		public String DistributionFlag;

		public String getDistributionFlag() {
			return this.DistributionFlag;
		}

		public String TaxPassThruFlag;

		public String getTaxPassThruFlag() {
			return this.TaxPassThruFlag;
		}

		public String PublicationWorkID;

		public String getPublicationWorkID() {
			return this.PublicationWorkID;
		}

		public String OrderSource;

		public String getOrderSource() {
			return this.OrderSource;
		}

		public java.util.Date CreatedDatetime;

		public java.util.Date getCreatedDatetime() {
			return this.CreatedDatetime;
		}

		public String CreatedUser;

		public String getCreatedUser() {
			return this.CreatedUser;
		}

		public java.util.Date UpdatedDatetime;

		public java.util.Date getUpdatedDatetime() {
			return this.UpdatedDatetime;
		}

		public String UpdatedUser;

		public String getUpdatedUser() {
			return this.UpdatedUser;
		}

		public String InvoiceNum;

		public String getInvoiceNum() {
			return this.InvoiceNum;
		}

		public BigDecimal AmountTax;

		public BigDecimal getAmountTax() {
			return this.AmountTax;
		}

		public BigDecimal RGHPayableAmt;

		public BigDecimal getRGHPayableAmt() {
			return this.RGHPayableAmt;
		}

		public BigDecimal RGHPayDiscAmt;

		public BigDecimal getRGHPayDiscAmt() {
			return this.RGHPayDiscAmt;
		}

		public BigDecimal CCCRevAmt;

		public BigDecimal getCCCRevAmt() {
			return this.CCCRevAmt;
		}

		public BigDecimal CCCRevDiscAmt;

		public BigDecimal getCCCRevDiscAmt() {
			return this.CCCRevDiscAmt;
		}

		public BigDecimal TxnFeeAmt;

		public BigDecimal getTxnFeeAmt() {
			return this.TxnFeeAmt;
		}

		public BigDecimal TxnDiscountAmt;

		public BigDecimal getTxnDiscountAmt() {
			return this.TxnDiscountAmt;
		}

		public BigDecimal ShippingAmt;

		public BigDecimal getShippingAmt() {
			return this.ShippingAmt;
		}

		public BigDecimal TotalAmt;

		public BigDecimal getTotalAmt() {
			return this.TotalAmt;
		}

		public String TypeUse;

		public String getTypeUse() {
			return this.TypeUse;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ORDER_ETL_TF_ETL.length) {
					if (length < 1024
							&& commonByteArray_ORDER_ETL_TF_ETL.length == 0) {
						commonByteArray_ORDER_ETL_TF_ETL = new byte[1024];
					} else {
						commonByteArray_ORDER_ETL_TF_ETL = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ORDER_ETL_TF_ETL, 0, length);
				strReturn = new String(commonByteArray_ORDER_ETL_TF_ETL, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ORDER_ETL_TF_ETL) {

				try {

					int length = 0;

					this.OrderNumber = (BigDecimal) dis.readObject();

					this.OrderDetailID = (BigDecimal) dis.readObject();

					this.RGHOnRecordAccountNumber = (BigDecimal) dis
							.readObject();

					this.RGHOnRecordName = readString(dis);

					this.ProductName = readString(dis);

					this.ProductCode = readString(dis);

					this.ProductFamily = readString(dis);

					this.NumberUnits = readString(dis);

					this.UnitType = readString(dis);

					this.PublicationTitle = readString(dis);

					this.OrderStatus = readString(dis);

					this.DistributionFlag = readString(dis);

					this.TaxPassThruFlag = readString(dis);

					this.PublicationWorkID = readString(dis);

					this.OrderSource = readString(dis);

					this.CreatedDatetime = readDate(dis);

					this.CreatedUser = readString(dis);

					this.UpdatedDatetime = readDate(dis);

					this.UpdatedUser = readString(dis);

					this.InvoiceNum = readString(dis);

					this.AmountTax = (BigDecimal) dis.readObject();

					this.RGHPayableAmt = (BigDecimal) dis.readObject();

					this.RGHPayDiscAmt = (BigDecimal) dis.readObject();

					this.CCCRevAmt = (BigDecimal) dis.readObject();

					this.CCCRevDiscAmt = (BigDecimal) dis.readObject();

					this.TxnFeeAmt = (BigDecimal) dis.readObject();

					this.TxnDiscountAmt = (BigDecimal) dis.readObject();

					this.ShippingAmt = (BigDecimal) dis.readObject();

					this.TotalAmt = (BigDecimal) dis.readObject();

					this.TypeUse = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// BigDecimal

				dos.writeObject(this.OrderNumber);

				// BigDecimal

				dos.writeObject(this.OrderDetailID);

				// BigDecimal

				dos.writeObject(this.RGHOnRecordAccountNumber);

				// String

				writeString(this.RGHOnRecordName, dos);

				// String

				writeString(this.ProductName, dos);

				// String

				writeString(this.ProductCode, dos);

				// String

				writeString(this.ProductFamily, dos);

				// String

				writeString(this.NumberUnits, dos);

				// String

				writeString(this.UnitType, dos);

				// String

				writeString(this.PublicationTitle, dos);

				// String

				writeString(this.OrderStatus, dos);

				// String

				writeString(this.DistributionFlag, dos);

				// String

				writeString(this.TaxPassThruFlag, dos);

				// String

				writeString(this.PublicationWorkID, dos);

				// String

				writeString(this.OrderSource, dos);

				// java.util.Date

				writeDate(this.CreatedDatetime, dos);

				// String

				writeString(this.CreatedUser, dos);

				// java.util.Date

				writeDate(this.UpdatedDatetime, dos);

				// String

				writeString(this.UpdatedUser, dos);

				// String

				writeString(this.InvoiceNum, dos);

				// BigDecimal

				dos.writeObject(this.AmountTax);

				// BigDecimal

				dos.writeObject(this.RGHPayableAmt);

				// BigDecimal

				dos.writeObject(this.RGHPayDiscAmt);

				// BigDecimal

				dos.writeObject(this.CCCRevAmt);

				// BigDecimal

				dos.writeObject(this.CCCRevDiscAmt);

				// BigDecimal

				dos.writeObject(this.TxnFeeAmt);

				// BigDecimal

				dos.writeObject(this.TxnDiscountAmt);

				// BigDecimal

				dos.writeObject(this.ShippingAmt);

				// BigDecimal

				dos.writeObject(this.TotalAmt);

				// String

				writeString(this.TypeUse, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("OrderNumber=" + String.valueOf(OrderNumber));
			sb.append(",OrderDetailID=" + String.valueOf(OrderDetailID));
			sb.append(",RGHOnRecordAccountNumber="
					+ String.valueOf(RGHOnRecordAccountNumber));
			sb.append(",RGHOnRecordName=" + RGHOnRecordName);
			sb.append(",ProductName=" + ProductName);
			sb.append(",ProductCode=" + ProductCode);
			sb.append(",ProductFamily=" + ProductFamily);
			sb.append(",NumberUnits=" + NumberUnits);
			sb.append(",UnitType=" + UnitType);
			sb.append(",PublicationTitle=" + PublicationTitle);
			sb.append(",OrderStatus=" + OrderStatus);
			sb.append(",DistributionFlag=" + DistributionFlag);
			sb.append(",TaxPassThruFlag=" + TaxPassThruFlag);
			sb.append(",PublicationWorkID=" + PublicationWorkID);
			sb.append(",OrderSource=" + OrderSource);
			sb.append(",CreatedDatetime=" + String.valueOf(CreatedDatetime));
			sb.append(",CreatedUser=" + CreatedUser);
			sb.append(",UpdatedDatetime=" + String.valueOf(UpdatedDatetime));
			sb.append(",UpdatedUser=" + UpdatedUser);
			sb.append(",InvoiceNum=" + InvoiceNum);
			sb.append(",AmountTax=" + String.valueOf(AmountTax));
			sb.append(",RGHPayableAmt=" + String.valueOf(RGHPayableAmt));
			sb.append(",RGHPayDiscAmt=" + String.valueOf(RGHPayDiscAmt));
			sb.append(",CCCRevAmt=" + String.valueOf(CCCRevAmt));
			sb.append(",CCCRevDiscAmt=" + String.valueOf(CCCRevDiscAmt));
			sb.append(",TxnFeeAmt=" + String.valueOf(TxnFeeAmt));
			sb.append(",TxnDiscountAmt=" + String.valueOf(TxnDiscountAmt));
			sb.append(",ShippingAmt=" + String.valueOf(ShippingAmt));
			sb.append(",TotalAmt=" + String.valueOf(TotalAmt));
			sb.append(",TypeUse=" + TypeUse);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row1Struct row1 = new row1Struct();

				/**
				 * [tDBOutput_1 begin ] start
				 */

				ok_Hash.put("tDBOutput_1", false);
				start_Hash.put("tDBOutput_1", System.currentTimeMillis());

				currentComponent = "tDBOutput_1";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row1" + iterateId, 0, 0);

					}
				}

				int tos_count_tDBOutput_1 = 0;

				String dbschema_tDBOutput_1 = null;
				dbschema_tDBOutput_1 = "staging";

				String tableName_tDBOutput_1 = null;
				if (dbschema_tDBOutput_1 == null
						|| dbschema_tDBOutput_1.trim().length() == 0) {
					tableName_tDBOutput_1 = "stg_tf_rupodm_tforderdetail";
				} else {
					tableName_tDBOutput_1 = dbschema_tDBOutput_1 + "\".\""
							+ "stg_tf_rupodm_tforderdetail";
				}

				int nb_line_tDBOutput_1 = 0;
				int nb_line_update_tDBOutput_1 = 0;
				int nb_line_inserted_tDBOutput_1 = 0;
				int nb_line_deleted_tDBOutput_1 = 0;
				int nb_line_rejected_tDBOutput_1 = 0;

				int deletedCount_tDBOutput_1 = 0;
				int updatedCount_tDBOutput_1 = 0;
				int insertedCount_tDBOutput_1 = 0;
				int rejectedCount_tDBOutput_1 = 0;

				boolean whetherReject_tDBOutput_1 = false;

				java.sql.Connection conn_tDBOutput_1 = null;
				String dbUser_tDBOutput_1 = null;

				java.lang.Class.forName("org.postgresql.Driver");
				String url_tDBOutput_1 = "jdbc:postgresql://" + "localhost"
						+ ":" + "5432" + "/" + "rup";
				dbUser_tDBOutput_1 = "rup";

				final String decryptedPassword_tDBOutput_1 = routines.system.PasswordEncryptUtil
						.decryptPassword("544d653f2c2bdc61");

				String dbPwd_tDBOutput_1 = decryptedPassword_tDBOutput_1;

				conn_tDBOutput_1 = java.sql.DriverManager.getConnection(
						url_tDBOutput_1, dbUser_tDBOutput_1, dbPwd_tDBOutput_1);

				resourceMap.put("conn_tDBOutput_1", conn_tDBOutput_1);
				conn_tDBOutput_1.setAutoCommit(false);
				int commitEvery_tDBOutput_1 = 10000;
				int commitCounter_tDBOutput_1 = 0;

				int batchSize_tDBOutput_1 = 10000;
				int batchSizeCounter_tDBOutput_1 = 0;

				int count_tDBOutput_1 = 0;
				String insert_tDBOutput_1 = "INSERT INTO \""
						+ tableName_tDBOutput_1
						+ "\" (\"ordernumber\",\"orderdetailid\",\"rghonrecordaccountnumber\",\"rghonrecordname\",\"productname\",\"productcode\",\"productfamily\",\"numberunits\",\"unittype\",\"publicationtitle\",\"orderstatus\",\"distributionflag\",\"taxpassthruflag\",\"publicationworkid\",\"ordersource\",\"createddatetime\",\"createduser\",\"updateddatetime\",\"updateduser\",\"invoicenum\",\"amounttax\",\"rghpayableamt\",\"rghpaydiscamt\",\"cccrevamt\",\"cccrevdiscamt\",\"txnfeeamt\",\"txndiscountamt\",\"shippingamt\",\"totalamt\",\"typeuse\") VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

				java.sql.PreparedStatement pstmt_tDBOutput_1 = conn_tDBOutput_1
						.prepareStatement(insert_tDBOutput_1);
				resourceMap.put("pstmt_tDBOutput_1", pstmt_tDBOutput_1);

				/**
				 * [tDBOutput_1 begin ] stop
				 */

				/**
				 * [tDBInput_1 begin ] start
				 */

				ok_Hash.put("tDBInput_1", false);
				start_Hash.put("tDBInput_1", System.currentTimeMillis());

				currentComponent = "tDBInput_1";

				int tos_count_tDBInput_1 = 0;

				int nb_line_tDBInput_1 = 0;
				java.sql.Connection conn_tDBInput_1 = null;
				conn_tDBInput_1 = (java.sql.Connection) globalMap
						.get("conn_tDBConnection_5");
				boolean isTimeZoneNull_tDBInput_1 = false;
				boolean isConnectionWrapped_tDBInput_1 = !(conn_tDBInput_1 instanceof oracle.jdbc.OracleConnection)
						&& conn_tDBInput_1
								.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tDBInput_1 = null;
				if (isConnectionWrapped_tDBInput_1) {
					unwrappedOraConn_tDBInput_1 = conn_tDBInput_1
							.unwrap(oracle.jdbc.OracleConnection.class);
					if (unwrappedOraConn_tDBInput_1 != null) {
						isTimeZoneNull_tDBInput_1 = (unwrappedOraConn_tDBInput_1
								.getSessionTimeZone() == null);
					}
				} else {
					isTimeZoneNull_tDBInput_1 = (((oracle.jdbc.OracleConnection) conn_tDBInput_1)
							.getSessionTimeZone() == null);
				}

				if (isTimeZoneNull_tDBInput_1) {
					java.sql.Statement stmtGetTZ_tDBInput_1 = conn_tDBInput_1
							.createStatement();
					java.sql.ResultSet rsGetTZ_tDBInput_1 = stmtGetTZ_tDBInput_1
							.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tDBInput_1 = java.util.TimeZone
							.getDefault().getID();
					while (rsGetTZ_tDBInput_1.next()) {
						sessionTimezone_tDBInput_1 = rsGetTZ_tDBInput_1
								.getString(1);
					}
					if (isConnectionWrapped_tDBInput_1
							&& unwrappedOraConn_tDBInput_1 != null) {
						unwrappedOraConn_tDBInput_1
								.setSessionTimeZone(sessionTimezone_tDBInput_1);
					} else {
						((oracle.jdbc.OracleConnection) conn_tDBInput_1)
								.setSessionTimeZone(sessionTimezone_tDBInput_1);
					}
				}

				java.sql.Statement stmt_tDBInput_1 = conn_tDBInput_1
						.createStatement();

				String dbquery_tDBInput_1 = "select * from ccctf.RUPODM_TFORDERDETAIL_V\nWHERE to_char(\"CreatedDatetime\",'YYYY-MM-DD') >= '2016-01-01'";

				globalMap.put("tDBInput_1_QUERY", dbquery_tDBInput_1);
				java.sql.ResultSet rs_tDBInput_1 = null;

				try {
					rs_tDBInput_1 = stmt_tDBInput_1
							.executeQuery(dbquery_tDBInput_1);
					java.sql.ResultSetMetaData rsmd_tDBInput_1 = rs_tDBInput_1
							.getMetaData();
					int colQtyInRs_tDBInput_1 = rsmd_tDBInput_1
							.getColumnCount();

					String tmpContent_tDBInput_1 = null;

					while (rs_tDBInput_1.next()) {
						nb_line_tDBInput_1++;

						if (colQtyInRs_tDBInput_1 < 1) {
							row1.OrderNumber = null;
						} else {

							if (rs_tDBInput_1.getObject(1) != null) {
								row1.OrderNumber = rs_tDBInput_1
										.getBigDecimal(1);
							} else {

								row1.OrderNumber = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 2) {
							row1.OrderDetailID = null;
						} else {

							if (rs_tDBInput_1.getObject(2) != null) {
								row1.OrderDetailID = rs_tDBInput_1
										.getBigDecimal(2);
							} else {

								row1.OrderDetailID = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 3) {
							row1.RGHOnRecordAccountNumber = null;
						} else {

							if (rs_tDBInput_1.getObject(3) != null) {
								row1.RGHOnRecordAccountNumber = rs_tDBInput_1
										.getBigDecimal(3);
							} else {

								row1.RGHOnRecordAccountNumber = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 4) {
							row1.RGHOnRecordName = null;
						} else {

							row1.RGHOnRecordName = routines.system.JDBCUtil
									.getString(rs_tDBInput_1, 4, false);
						}
						if (colQtyInRs_tDBInput_1 < 5) {
							row1.ProductName = null;
						} else {

							row1.ProductName = routines.system.JDBCUtil
									.getString(rs_tDBInput_1, 5, false);
						}
						if (colQtyInRs_tDBInput_1 < 6) {
							row1.ProductCode = null;
						} else {

							row1.ProductCode = routines.system.JDBCUtil
									.getString(rs_tDBInput_1, 6, false);
						}
						if (colQtyInRs_tDBInput_1 < 7) {
							row1.ProductFamily = null;
						} else {

							row1.ProductFamily = routines.system.JDBCUtil
									.getString(rs_tDBInput_1, 7, false);
						}
						if (colQtyInRs_tDBInput_1 < 8) {
							row1.NumberUnits = null;
						} else {

							row1.NumberUnits = routines.system.JDBCUtil
									.getString(rs_tDBInput_1, 8, false);
						}
						if (colQtyInRs_tDBInput_1 < 9) {
							row1.UnitType = null;
						} else {

							row1.UnitType = routines.system.JDBCUtil.getString(
									rs_tDBInput_1, 9, false);
						}
						if (colQtyInRs_tDBInput_1 < 10) {
							row1.PublicationTitle = null;
						} else {

							row1.PublicationTitle = routines.system.JDBCUtil
									.getString(rs_tDBInput_1, 10, false);
						}
						if (colQtyInRs_tDBInput_1 < 11) {
							row1.OrderStatus = null;
						} else {

							row1.OrderStatus = routines.system.JDBCUtil
									.getString(rs_tDBInput_1, 11, false);
						}
						if (colQtyInRs_tDBInput_1 < 12) {
							row1.DistributionFlag = null;
						} else {

							row1.DistributionFlag = routines.system.JDBCUtil
									.getString(rs_tDBInput_1, 12, false);
						}
						if (colQtyInRs_tDBInput_1 < 13) {
							row1.TaxPassThruFlag = null;
						} else {

							row1.TaxPassThruFlag = routines.system.JDBCUtil
									.getString(rs_tDBInput_1, 13, false);
						}
						if (colQtyInRs_tDBInput_1 < 14) {
							row1.PublicationWorkID = null;
						} else {

							row1.PublicationWorkID = routines.system.JDBCUtil
									.getString(rs_tDBInput_1, 14, false);
						}
						if (colQtyInRs_tDBInput_1 < 15) {
							row1.OrderSource = null;
						} else {

							row1.OrderSource = routines.system.JDBCUtil
									.getString(rs_tDBInput_1, 15, false);
						}
						if (colQtyInRs_tDBInput_1 < 16) {
							row1.CreatedDatetime = null;
						} else {

							row1.CreatedDatetime = routines.system.JDBCUtil
									.getDate(rs_tDBInput_1, 16);
						}
						if (colQtyInRs_tDBInput_1 < 17) {
							row1.CreatedUser = null;
						} else {

							row1.CreatedUser = routines.system.JDBCUtil
									.getString(rs_tDBInput_1, 17, false);
						}
						if (colQtyInRs_tDBInput_1 < 18) {
							row1.UpdatedDatetime = null;
						} else {

							row1.UpdatedDatetime = routines.system.JDBCUtil
									.getDate(rs_tDBInput_1, 18);
						}
						if (colQtyInRs_tDBInput_1 < 19) {
							row1.UpdatedUser = null;
						} else {

							row1.UpdatedUser = routines.system.JDBCUtil
									.getString(rs_tDBInput_1, 19, false);
						}
						if (colQtyInRs_tDBInput_1 < 20) {
							row1.InvoiceNum = null;
						} else {

							row1.InvoiceNum = routines.system.JDBCUtil
									.getString(rs_tDBInput_1, 20, false);
						}
						if (colQtyInRs_tDBInput_1 < 21) {
							row1.AmountTax = null;
						} else {

							if (rs_tDBInput_1.getObject(21) != null) {
								row1.AmountTax = rs_tDBInput_1
										.getBigDecimal(21);
							} else {

								row1.AmountTax = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 22) {
							row1.RGHPayableAmt = null;
						} else {

							if (rs_tDBInput_1.getObject(22) != null) {
								row1.RGHPayableAmt = rs_tDBInput_1
										.getBigDecimal(22);
							} else {

								row1.RGHPayableAmt = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 23) {
							row1.RGHPayDiscAmt = null;
						} else {

							if (rs_tDBInput_1.getObject(23) != null) {
								row1.RGHPayDiscAmt = rs_tDBInput_1
										.getBigDecimal(23);
							} else {

								row1.RGHPayDiscAmt = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 24) {
							row1.CCCRevAmt = null;
						} else {

							if (rs_tDBInput_1.getObject(24) != null) {
								row1.CCCRevAmt = rs_tDBInput_1
										.getBigDecimal(24);
							} else {

								row1.CCCRevAmt = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 25) {
							row1.CCCRevDiscAmt = null;
						} else {

							if (rs_tDBInput_1.getObject(25) != null) {
								row1.CCCRevDiscAmt = rs_tDBInput_1
										.getBigDecimal(25);
							} else {

								row1.CCCRevDiscAmt = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 26) {
							row1.TxnFeeAmt = null;
						} else {

							if (rs_tDBInput_1.getObject(26) != null) {
								row1.TxnFeeAmt = rs_tDBInput_1
										.getBigDecimal(26);
							} else {

								row1.TxnFeeAmt = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 27) {
							row1.TxnDiscountAmt = null;
						} else {

							if (rs_tDBInput_1.getObject(27) != null) {
								row1.TxnDiscountAmt = rs_tDBInput_1
										.getBigDecimal(27);
							} else {

								row1.TxnDiscountAmt = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 28) {
							row1.ShippingAmt = null;
						} else {

							if (rs_tDBInput_1.getObject(28) != null) {
								row1.ShippingAmt = rs_tDBInput_1
										.getBigDecimal(28);
							} else {

								row1.ShippingAmt = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 29) {
							row1.TotalAmt = null;
						} else {

							if (rs_tDBInput_1.getObject(29) != null) {
								row1.TotalAmt = rs_tDBInput_1.getBigDecimal(29);
							} else {

								row1.TotalAmt = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 30) {
							row1.TypeUse = null;
						} else {

							row1.TypeUse = routines.system.JDBCUtil.getString(
									rs_tDBInput_1, 30, false);
						}

						/**
						 * [tDBInput_1 begin ] stop
						 */

						/**
						 * [tDBInput_1 main ] start
						 */

						currentComponent = "tDBInput_1";

						tos_count_tDBInput_1++;

						/**
						 * [tDBInput_1 main ] stop
						 */

						/**
						 * [tDBInput_1 process_data_begin ] start
						 */

						currentComponent = "tDBInput_1";

						/**
						 * [tDBInput_1 process_data_begin ] stop
						 */

						/**
						 * [tDBOutput_1 main ] start
						 */

						currentComponent = "tDBOutput_1";

						// row1
						// row1

						if (execStat) {
							runStat.updateStatOnConnection("row1" + iterateId,
									1, 1);
						}

						whetherReject_tDBOutput_1 = false;
						pstmt_tDBOutput_1.setBigDecimal(1, row1.OrderNumber);

						pstmt_tDBOutput_1.setBigDecimal(2, row1.OrderDetailID);

						pstmt_tDBOutput_1.setBigDecimal(3,
								row1.RGHOnRecordAccountNumber);

						if (row1.RGHOnRecordName == null) {
							pstmt_tDBOutput_1
									.setNull(4, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1
									.setString(4, row1.RGHOnRecordName);
						}

						if (row1.ProductName == null) {
							pstmt_tDBOutput_1
									.setNull(5, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(5, row1.ProductName);
						}

						if (row1.ProductCode == null) {
							pstmt_tDBOutput_1
									.setNull(6, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(6, row1.ProductCode);
						}

						if (row1.ProductFamily == null) {
							pstmt_tDBOutput_1
									.setNull(7, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(7, row1.ProductFamily);
						}

						if (row1.NumberUnits == null) {
							pstmt_tDBOutput_1
									.setNull(8, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(8, row1.NumberUnits);
						}

						if (row1.UnitType == null) {
							pstmt_tDBOutput_1
									.setNull(9, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(9, row1.UnitType);
						}

						if (row1.PublicationTitle == null) {
							pstmt_tDBOutput_1.setNull(10,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(10,
									row1.PublicationTitle);
						}

						if (row1.OrderStatus == null) {
							pstmt_tDBOutput_1.setNull(11,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(11, row1.OrderStatus);
						}

						if (row1.DistributionFlag == null) {
							pstmt_tDBOutput_1.setNull(12,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(12,
									row1.DistributionFlag);
						}

						if (row1.TaxPassThruFlag == null) {
							pstmt_tDBOutput_1.setNull(13,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(13,
									row1.TaxPassThruFlag);
						}

						if (row1.PublicationWorkID == null) {
							pstmt_tDBOutput_1.setNull(14,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(14,
									row1.PublicationWorkID);
						}

						if (row1.OrderSource == null) {
							pstmt_tDBOutput_1.setNull(15,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(15, row1.OrderSource);
						}

						if (row1.CreatedDatetime != null) {
							pstmt_tDBOutput_1.setTimestamp(
									16,
									new java.sql.Timestamp(row1.CreatedDatetime
											.getTime()));
						} else {
							pstmt_tDBOutput_1.setNull(16,
									java.sql.Types.TIMESTAMP);
						}

						if (row1.CreatedUser == null) {
							pstmt_tDBOutput_1.setNull(17,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(17, row1.CreatedUser);
						}

						if (row1.UpdatedDatetime != null) {
							pstmt_tDBOutput_1.setTimestamp(
									18,
									new java.sql.Timestamp(row1.UpdatedDatetime
											.getTime()));
						} else {
							pstmt_tDBOutput_1.setNull(18,
									java.sql.Types.TIMESTAMP);
						}

						if (row1.UpdatedUser == null) {
							pstmt_tDBOutput_1.setNull(19,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(19, row1.UpdatedUser);
						}

						if (row1.InvoiceNum == null) {
							pstmt_tDBOutput_1.setNull(20,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(20, row1.InvoiceNum);
						}

						pstmt_tDBOutput_1.setBigDecimal(21, row1.AmountTax);

						pstmt_tDBOutput_1.setBigDecimal(22, row1.RGHPayableAmt);

						pstmt_tDBOutput_1.setBigDecimal(23, row1.RGHPayDiscAmt);

						pstmt_tDBOutput_1.setBigDecimal(24, row1.CCCRevAmt);

						pstmt_tDBOutput_1.setBigDecimal(25, row1.CCCRevDiscAmt);

						pstmt_tDBOutput_1.setBigDecimal(26, row1.TxnFeeAmt);

						pstmt_tDBOutput_1
								.setBigDecimal(27, row1.TxnDiscountAmt);

						pstmt_tDBOutput_1.setBigDecimal(28, row1.ShippingAmt);

						pstmt_tDBOutput_1.setBigDecimal(29, row1.TotalAmt);

						if (row1.TypeUse == null) {
							pstmt_tDBOutput_1.setNull(30,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(30, row1.TypeUse);
						}

						pstmt_tDBOutput_1.addBatch();
						nb_line_tDBOutput_1++;

						batchSizeCounter_tDBOutput_1++;

						if (!whetherReject_tDBOutput_1) {
						}
						if ((batchSize_tDBOutput_1 > 0)
								&& (batchSize_tDBOutput_1 <= batchSizeCounter_tDBOutput_1)) {
							try {
								int countSum_tDBOutput_1 = 0;

								for (int countEach_tDBOutput_1 : pstmt_tDBOutput_1
										.executeBatch()) {
									countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0
											: countEach_tDBOutput_1);
								}

								insertedCount_tDBOutput_1 += countSum_tDBOutput_1;

								batchSizeCounter_tDBOutput_1 = 0;
							} catch (java.sql.BatchUpdateException e_tDBOutput_1) {
								java.sql.SQLException ne_tDBOutput_1 = e_tDBOutput_1
										.getNextException(), sqle_tDBOutput_1 = null;
								String errormessage_tDBOutput_1;
								if (ne_tDBOutput_1 != null) {
									// build new exception to provide the
									// original cause
									sqle_tDBOutput_1 = new java.sql.SQLException(
											e_tDBOutput_1.getMessage()
													+ "\ncaused by: "
													+ ne_tDBOutput_1
															.getMessage(),
											ne_tDBOutput_1.getSQLState(),
											ne_tDBOutput_1.getErrorCode(),
											ne_tDBOutput_1);
									errormessage_tDBOutput_1 = sqle_tDBOutput_1
											.getMessage();
								} else {
									errormessage_tDBOutput_1 = e_tDBOutput_1
											.getMessage();
								}

								int countSum_tDBOutput_1 = 0;
								for (int countEach_tDBOutput_1 : e_tDBOutput_1
										.getUpdateCounts()) {
									countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0
											: countEach_tDBOutput_1);
								}

								insertedCount_tDBOutput_1 += countSum_tDBOutput_1;

								System.err.println(errormessage_tDBOutput_1);

							}
						}

						commitCounter_tDBOutput_1++;
						if (commitEvery_tDBOutput_1 <= commitCounter_tDBOutput_1) {
							if ((batchSize_tDBOutput_1 > 0)
									&& (batchSizeCounter_tDBOutput_1 > 0)) {
								try {
									int countSum_tDBOutput_1 = 0;

									for (int countEach_tDBOutput_1 : pstmt_tDBOutput_1
											.executeBatch()) {
										countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0
												: countEach_tDBOutput_1);
									}

									insertedCount_tDBOutput_1 += countSum_tDBOutput_1;

									batchSizeCounter_tDBOutput_1 = 0;
								} catch (java.sql.BatchUpdateException e_tDBOutput_1) {
									java.sql.SQLException ne_tDBOutput_1 = e_tDBOutput_1
											.getNextException(), sqle_tDBOutput_1 = null;
									String errormessage_tDBOutput_1;
									if (ne_tDBOutput_1 != null) {
										// build new exception to provide the
										// original cause
										sqle_tDBOutput_1 = new java.sql.SQLException(
												e_tDBOutput_1.getMessage()
														+ "\ncaused by: "
														+ ne_tDBOutput_1
																.getMessage(),
												ne_tDBOutput_1.getSQLState(),
												ne_tDBOutput_1.getErrorCode(),
												ne_tDBOutput_1);
										errormessage_tDBOutput_1 = sqle_tDBOutput_1
												.getMessage();
									} else {
										errormessage_tDBOutput_1 = e_tDBOutput_1
												.getMessage();
									}

									int countSum_tDBOutput_1 = 0;
									for (int countEach_tDBOutput_1 : e_tDBOutput_1
											.getUpdateCounts()) {
										countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0
												: countEach_tDBOutput_1);
									}

									insertedCount_tDBOutput_1 += countSum_tDBOutput_1;

									System.err
											.println(errormessage_tDBOutput_1);

								}
							}
							conn_tDBOutput_1.commit();

							commitCounter_tDBOutput_1 = 0;
						}

						tos_count_tDBOutput_1++;

						/**
						 * [tDBOutput_1 main ] stop
						 */

						/**
						 * [tDBOutput_1 process_data_begin ] start
						 */

						currentComponent = "tDBOutput_1";

						/**
						 * [tDBOutput_1 process_data_begin ] stop
						 */

						/**
						 * [tDBOutput_1 process_data_end ] start
						 */

						currentComponent = "tDBOutput_1";

						/**
						 * [tDBOutput_1 process_data_end ] stop
						 */

						/**
						 * [tDBInput_1 process_data_end ] start
						 */

						currentComponent = "tDBInput_1";

						/**
						 * [tDBInput_1 process_data_end ] stop
						 */

						/**
						 * [tDBInput_1 end ] start
						 */

						currentComponent = "tDBInput_1";

					}
				} finally {
					if (rs_tDBInput_1 != null) {
						rs_tDBInput_1.close();
					}
					if (stmt_tDBInput_1 != null) {
						stmt_tDBInput_1.close();
					}
				}

				globalMap.put("tDBInput_1_NB_LINE", nb_line_tDBInput_1);

				ok_Hash.put("tDBInput_1", true);
				end_Hash.put("tDBInput_1", System.currentTimeMillis());

				/**
				 * [tDBInput_1 end ] stop
				 */

				/**
				 * [tDBOutput_1 end ] start
				 */

				currentComponent = "tDBOutput_1";

				try {
					int countSum_tDBOutput_1 = 0;
					if (pstmt_tDBOutput_1 != null
							&& batchSizeCounter_tDBOutput_1 > 0) {

						for (int countEach_tDBOutput_1 : pstmt_tDBOutput_1
								.executeBatch()) {
							countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0
									: countEach_tDBOutput_1);
						}

					}

					insertedCount_tDBOutput_1 += countSum_tDBOutput_1;

				} catch (java.sql.BatchUpdateException e_tDBOutput_1) {
					java.sql.SQLException ne_tDBOutput_1 = e_tDBOutput_1
							.getNextException(), sqle_tDBOutput_1 = null;
					String errormessage_tDBOutput_1;
					if (ne_tDBOutput_1 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_1 = new java.sql.SQLException(
								e_tDBOutput_1.getMessage() + "\ncaused by: "
										+ ne_tDBOutput_1.getMessage(),
								ne_tDBOutput_1.getSQLState(),
								ne_tDBOutput_1.getErrorCode(), ne_tDBOutput_1);
						errormessage_tDBOutput_1 = sqle_tDBOutput_1
								.getMessage();
					} else {
						errormessage_tDBOutput_1 = e_tDBOutput_1.getMessage();
					}

					int countSum_tDBOutput_1 = 0;
					for (int countEach_tDBOutput_1 : e_tDBOutput_1
							.getUpdateCounts()) {
						countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0
								: countEach_tDBOutput_1);
					}

					insertedCount_tDBOutput_1 += countSum_tDBOutput_1;

					System.err.println(errormessage_tDBOutput_1);

				}

				if (pstmt_tDBOutput_1 != null) {

					pstmt_tDBOutput_1.close();
					resourceMap.remove("pstmt_tDBOutput_1");
				}
				resourceMap.put("statementClosed_tDBOutput_1", true);

				conn_tDBOutput_1.commit();

				conn_tDBOutput_1.close();

				resourceMap.put("finish_tDBOutput_1", true);

				nb_line_deleted_tDBOutput_1 = nb_line_deleted_tDBOutput_1
						+ deletedCount_tDBOutput_1;
				nb_line_update_tDBOutput_1 = nb_line_update_tDBOutput_1
						+ updatedCount_tDBOutput_1;
				nb_line_inserted_tDBOutput_1 = nb_line_inserted_tDBOutput_1
						+ insertedCount_tDBOutput_1;
				nb_line_rejected_tDBOutput_1 = nb_line_rejected_tDBOutput_1
						+ rejectedCount_tDBOutput_1;

				globalMap.put("tDBOutput_1_NB_LINE", nb_line_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_UPDATED",
						nb_line_update_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_INSERTED",
						nb_line_inserted_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_DELETED",
						nb_line_deleted_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_REJECTED",
						nb_line_rejected_tDBOutput_1);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row1" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tDBOutput_1", true);
				end_Hash.put("tDBOutput_1", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tDBInput_5Process(globalMap);

				/**
				 * [tDBOutput_1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_1 finally ] start
				 */

				currentComponent = "tDBInput_1";

				/**
				 * [tDBInput_1 finally ] stop
				 */

				/**
				 * [tDBOutput_1 finally ] start
				 */

				currentComponent = "tDBOutput_1";

				try {
					if (resourceMap.get("statementClosed_tDBOutput_1") == null) {
						java.sql.PreparedStatement pstmtToClose_tDBOutput_1 = null;
						if ((pstmtToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmt_tDBOutput_1")) != null) {
							pstmtToClose_tDBOutput_1.close();
						}
					}
				} finally {
					if (resourceMap.get("finish_tDBOutput_1") == null) {
						java.sql.Connection ctn_tDBOutput_1 = null;
						if ((ctn_tDBOutput_1 = (java.sql.Connection) resourceMap
								.get("conn_tDBOutput_1")) != null) {
							try {
								ctn_tDBOutput_1.close();
							} catch (java.sql.SQLException sqlEx_tDBOutput_1) {
								String errorMessage_tDBOutput_1 = "failed to close the connection in tDBOutput_1 :"
										+ sqlEx_tDBOutput_1.getMessage();
								System.err.println(errorMessage_tDBOutput_1);
							}
						}
					}
				}

				/**
				 * [tDBOutput_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 1);
	}

	public static class row5Struct implements
			routines.system.IPersistableRow<row5Struct> {
		final static byte[] commonByteArrayLock_ORDER_ETL_TF_ETL = new byte[0];
		static byte[] commonByteArray_ORDER_ETL_TF_ETL = new byte[0];

		public Long order_detail_dimension_uid;

		public Long getOrder_detail_dimension_uid() {
			return this.order_detail_dimension_uid;
		}

		public BigDecimal source_system_order_detail_uid;

		public BigDecimal getSource_system_order_detail_uid() {
			return this.source_system_order_detail_uid;
		}

		public BigDecimal order_header_dimension_uid;

		public BigDecimal getOrder_header_dimension_uid() {
			return this.order_header_dimension_uid;
		}

		public BigDecimal rightsholder_on_record_account_number;

		public BigDecimal getRightsholder_on_record_account_number() {
			return this.rightsholder_on_record_account_number;
		}

		public String rightsholder_on_record_name;

		public String getRightsholder_on_record_name() {
			return this.rightsholder_on_record_name;
		}

		public String product_name;

		public String getProduct_name() {
			return this.product_name;
		}

		public String product_code;

		public String getProduct_code() {
			return this.product_code;
		}

		public String product_family;

		public String getProduct_family() {
			return this.product_family;
		}

		public BigDecimal number_of_units;

		public BigDecimal getNumber_of_units() {
			return this.number_of_units;
		}

		public String unit_type;

		public String getUnit_type() {
			return this.unit_type;
		}

		public String publication_title;

		public String getPublication_title() {
			return this.publication_title;
		}

		public String item_status_code;

		public String getItem_status_code() {
			return this.item_status_code;
		}

		public Boolean distribution_event_id;

		public Boolean getDistribution_event_id() {
			return this.distribution_event_id;
		}

		public String source_of_content;

		public String getSource_of_content() {
			return this.source_of_content;
		}

		public Boolean tax_pass_through_flag;

		public Boolean getTax_pass_through_flag() {
			return this.tax_pass_through_flag;
		}

		public String publication_work_identifier;

		public String getPublication_work_identifier() {
			return this.publication_work_identifier;
		}

		public java.util.Date created_datetime;

		public java.util.Date getCreated_datetime() {
			return this.created_datetime;
		}

		public String created_by_user;

		public String getCreated_by_user() {
			return this.created_by_user;
		}

		public java.util.Date updated_datetime;

		public java.util.Date getUpdated_datetime() {
			return this.updated_datetime;
		}

		public String updated_by_user;

		public String getUpdated_by_user() {
			return this.updated_by_user;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ORDER_ETL_TF_ETL.length) {
					if (length < 1024
							&& commonByteArray_ORDER_ETL_TF_ETL.length == 0) {
						commonByteArray_ORDER_ETL_TF_ETL = new byte[1024];
					} else {
						commonByteArray_ORDER_ETL_TF_ETL = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ORDER_ETL_TF_ETL, 0, length);
				strReturn = new String(commonByteArray_ORDER_ETL_TF_ETL, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ORDER_ETL_TF_ETL) {

				try {

					int length = 0;

					length = dis.readByte();
					if (length == -1) {
						this.order_detail_dimension_uid = null;
					} else {
						this.order_detail_dimension_uid = dis.readLong();
					}

					this.source_system_order_detail_uid = (BigDecimal) dis
							.readObject();

					this.order_header_dimension_uid = (BigDecimal) dis
							.readObject();

					this.rightsholder_on_record_account_number = (BigDecimal) dis
							.readObject();

					this.rightsholder_on_record_name = readString(dis);

					this.product_name = readString(dis);

					this.product_code = readString(dis);

					this.product_family = readString(dis);

					this.number_of_units = (BigDecimal) dis.readObject();

					this.unit_type = readString(dis);

					this.publication_title = readString(dis);

					this.item_status_code = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.distribution_event_id = null;
					} else {
						this.distribution_event_id = dis.readBoolean();
					}

					this.source_of_content = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.tax_pass_through_flag = null;
					} else {
						this.tax_pass_through_flag = dis.readBoolean();
					}

					this.publication_work_identifier = readString(dis);

					this.created_datetime = readDate(dis);

					this.created_by_user = readString(dis);

					this.updated_datetime = readDate(dis);

					this.updated_by_user = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Long

				if (this.order_detail_dimension_uid == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.order_detail_dimension_uid);
				}

				// BigDecimal

				dos.writeObject(this.source_system_order_detail_uid);

				// BigDecimal

				dos.writeObject(this.order_header_dimension_uid);

				// BigDecimal

				dos.writeObject(this.rightsholder_on_record_account_number);

				// String

				writeString(this.rightsholder_on_record_name, dos);

				// String

				writeString(this.product_name, dos);

				// String

				writeString(this.product_code, dos);

				// String

				writeString(this.product_family, dos);

				// BigDecimal

				dos.writeObject(this.number_of_units);

				// String

				writeString(this.unit_type, dos);

				// String

				writeString(this.publication_title, dos);

				// String

				writeString(this.item_status_code, dos);

				// Boolean

				if (this.distribution_event_id == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.distribution_event_id);
				}

				// String

				writeString(this.source_of_content, dos);

				// Boolean

				if (this.tax_pass_through_flag == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.tax_pass_through_flag);
				}

				// String

				writeString(this.publication_work_identifier, dos);

				// java.util.Date

				writeDate(this.created_datetime, dos);

				// String

				writeString(this.created_by_user, dos);

				// java.util.Date

				writeDate(this.updated_datetime, dos);

				// String

				writeString(this.updated_by_user, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("order_detail_dimension_uid="
					+ String.valueOf(order_detail_dimension_uid));
			sb.append(",source_system_order_detail_uid="
					+ String.valueOf(source_system_order_detail_uid));
			sb.append(",order_header_dimension_uid="
					+ String.valueOf(order_header_dimension_uid));
			sb.append(",rightsholder_on_record_account_number="
					+ String.valueOf(rightsholder_on_record_account_number));
			sb.append(",rightsholder_on_record_name="
					+ rightsholder_on_record_name);
			sb.append(",product_name=" + product_name);
			sb.append(",product_code=" + product_code);
			sb.append(",product_family=" + product_family);
			sb.append(",number_of_units=" + String.valueOf(number_of_units));
			sb.append(",unit_type=" + unit_type);
			sb.append(",publication_title=" + publication_title);
			sb.append(",item_status_code=" + item_status_code);
			sb.append(",distribution_event_id="
					+ String.valueOf(distribution_event_id));
			sb.append(",source_of_content=" + source_of_content);
			sb.append(",tax_pass_through_flag="
					+ String.valueOf(tax_pass_through_flag));
			sb.append(",publication_work_identifier="
					+ publication_work_identifier);
			sb.append(",created_datetime=" + String.valueOf(created_datetime));
			sb.append(",created_by_user=" + created_by_user);
			sb.append(",updated_datetime=" + String.valueOf(updated_datetime));
			sb.append(",updated_by_user=" + updated_by_user);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row5Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_5Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDBInput_5_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row5Struct row5 = new row5Struct();

				/**
				 * [tDBOutput_5 begin ] start
				 */

				ok_Hash.put("tDBOutput_5", false);
				start_Hash.put("tDBOutput_5", System.currentTimeMillis());

				currentComponent = "tDBOutput_5";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row5" + iterateId, 0, 0);

					}
				}

				int tos_count_tDBOutput_5 = 0;

				String dbschema_tDBOutput_5 = null;
				dbschema_tDBOutput_5 = "staging";

				String tableName_tDBOutput_5 = null;
				if (dbschema_tDBOutput_5 == null
						|| dbschema_tDBOutput_5.trim().length() == 0) {
					tableName_tDBOutput_5 = "stg_order_detail_dimension";
				} else {
					tableName_tDBOutput_5 = dbschema_tDBOutput_5 + "\".\""
							+ "stg_order_detail_dimension";
				}

				int nb_line_tDBOutput_5 = 0;
				int nb_line_update_tDBOutput_5 = 0;
				int nb_line_inserted_tDBOutput_5 = 0;
				int nb_line_deleted_tDBOutput_5 = 0;
				int nb_line_rejected_tDBOutput_5 = 0;

				int deletedCount_tDBOutput_5 = 0;
				int updatedCount_tDBOutput_5 = 0;
				int insertedCount_tDBOutput_5 = 0;
				int rejectedCount_tDBOutput_5 = 0;

				boolean whetherReject_tDBOutput_5 = false;

				java.sql.Connection conn_tDBOutput_5 = null;
				String dbUser_tDBOutput_5 = null;

				java.lang.Class.forName("org.postgresql.Driver");
				String url_tDBOutput_5 = "jdbc:postgresql://" + "localhost"
						+ ":" + "5432" + "/" + "rup";
				dbUser_tDBOutput_5 = "rup";

				final String decryptedPassword_tDBOutput_5 = routines.system.PasswordEncryptUtil
						.decryptPassword("544d653f2c2bdc61");

				String dbPwd_tDBOutput_5 = decryptedPassword_tDBOutput_5;

				conn_tDBOutput_5 = java.sql.DriverManager.getConnection(
						url_tDBOutput_5, dbUser_tDBOutput_5, dbPwd_tDBOutput_5);

				resourceMap.put("conn_tDBOutput_5", conn_tDBOutput_5);
				conn_tDBOutput_5.setAutoCommit(false);
				int commitEvery_tDBOutput_5 = 10000;
				int commitCounter_tDBOutput_5 = 0;

				int batchSize_tDBOutput_5 = 10000;
				int batchSizeCounter_tDBOutput_5 = 0;

				int count_tDBOutput_5 = 0;
				String insert_tDBOutput_5 = "INSERT INTO \""
						+ tableName_tDBOutput_5
						+ "\" (\"order_detail_dimension_uid\",\"source_system_order_detail_uid\",\"order_header_dimension_uid\",\"rightsholder_on_record_account_number\",\"rightsholder_on_record_name\",\"product_name\",\"product_code\",\"product_family\",\"number_of_units\",\"unit_type\",\"publication_title\",\"item_status_code\",\"distribution_event_id\",\"source_of_content\",\"tax_pass_through_flag\",\"publication_work_identifier\",\"created_datetime\",\"created_by_user\",\"updated_datetime\",\"updated_by_user\") VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

				java.sql.PreparedStatement pstmt_tDBOutput_5 = conn_tDBOutput_5
						.prepareStatement(insert_tDBOutput_5);
				resourceMap.put("pstmt_tDBOutput_5", pstmt_tDBOutput_5);

				/**
				 * [tDBOutput_5 begin ] stop
				 */

				/**
				 * [tDBInput_5 begin ] start
				 */

				ok_Hash.put("tDBInput_5", false);
				start_Hash.put("tDBInput_5", System.currentTimeMillis());

				currentComponent = "tDBInput_5";

				int tos_count_tDBInput_5 = 0;

				int nb_line_tDBInput_5 = 0;
				java.sql.Connection conn_tDBInput_5 = null;
				String driverClass_tDBInput_5 = "org.postgresql.Driver";
				java.lang.Class.forName(driverClass_tDBInput_5);
				String dbUser_tDBInput_5 = "rup";

				final String decryptedPassword_tDBInput_5 = routines.system.PasswordEncryptUtil
						.decryptPassword("544d653f2c2bdc61");

				String dbPwd_tDBInput_5 = decryptedPassword_tDBInput_5;

				String url_tDBInput_5 = "jdbc:postgresql://" + "localhost"
						+ ":" + "5432" + "/" + "rup";

				conn_tDBInput_5 = java.sql.DriverManager.getConnection(
						url_tDBInput_5, dbUser_tDBInput_5, dbPwd_tDBInput_5);

				conn_tDBInput_5.setAutoCommit(false);

				java.sql.Statement stmt_tDBInput_5 = conn_tDBInput_5
						.createStatement();

				String dbquery_tDBInput_5 = "SELECT nextval('staging.order_detail_dimension_seq') as order_detail_dimension_uid,\n       orderdetailid as source_syst"
						+ "em_order_detail_uid,\n       ordernumber as order_header_dimension_uid,\n       rghonrecordaccountnumber as rightsholder_o"
						+ "n_record_account_number,\n       rghonrecordname as rightsholder_on_record_name,\n       productname as product_name,\n    "
						+ "   productcode as product_code,\n       productfamily as product_family,\n       numberunits::numeric as number_of_units,\n"
						+ "       unittype as unit_type,\n       publicationtitle as publication_title,\n       orderstatus as item_status_code,\n    "
						+ "   distributionflag::boolean as distribution_event_id,\n       ordersource as source_of_content,\n       taxpassthruflag::"
						+ "boolean as tax_pass_through_flag,\n       publicationworkid as publication_work_identifier,\n       createddatetime as cre"
						+ "ated_datetime,\n       createduser as created_by_user,\n       updateddatetime as updated_datetime,\n       updateduser as "
						+ "updated_by_user\nFROM staging.stg_tf_rupodm_tforderdetail";

				globalMap.put("tDBInput_5_QUERY", dbquery_tDBInput_5);
				java.sql.ResultSet rs_tDBInput_5 = null;

				try {
					rs_tDBInput_5 = stmt_tDBInput_5
							.executeQuery(dbquery_tDBInput_5);
					java.sql.ResultSetMetaData rsmd_tDBInput_5 = rs_tDBInput_5
							.getMetaData();
					int colQtyInRs_tDBInput_5 = rsmd_tDBInput_5
							.getColumnCount();

					String tmpContent_tDBInput_5 = null;

					while (rs_tDBInput_5.next()) {
						nb_line_tDBInput_5++;

						if (colQtyInRs_tDBInput_5 < 1) {
							row5.order_detail_dimension_uid = null;
						} else {

							if (rs_tDBInput_5.getObject(1) != null) {
								row5.order_detail_dimension_uid = rs_tDBInput_5
										.getLong(1);
							} else {
								row5.order_detail_dimension_uid = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 2) {
							row5.source_system_order_detail_uid = null;
						} else {

							if (rs_tDBInput_5.getObject(2) != null) {
								row5.source_system_order_detail_uid = rs_tDBInput_5
										.getBigDecimal(2);
							} else {
								row5.source_system_order_detail_uid = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 3) {
							row5.order_header_dimension_uid = null;
						} else {

							if (rs_tDBInput_5.getObject(3) != null) {
								row5.order_header_dimension_uid = rs_tDBInput_5
										.getBigDecimal(3);
							} else {
								row5.order_header_dimension_uid = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 4) {
							row5.rightsholder_on_record_account_number = null;
						} else {

							if (rs_tDBInput_5.getObject(4) != null) {
								row5.rightsholder_on_record_account_number = rs_tDBInput_5
										.getBigDecimal(4);
							} else {
								row5.rightsholder_on_record_account_number = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 5) {
							row5.rightsholder_on_record_name = null;
						} else {

							row5.rightsholder_on_record_name = routines.system.JDBCUtil
									.getString(rs_tDBInput_5, 5, false);
						}
						if (colQtyInRs_tDBInput_5 < 6) {
							row5.product_name = null;
						} else {

							row5.product_name = routines.system.JDBCUtil
									.getString(rs_tDBInput_5, 6, false);
						}
						if (colQtyInRs_tDBInput_5 < 7) {
							row5.product_code = null;
						} else {

							row5.product_code = routines.system.JDBCUtil
									.getString(rs_tDBInput_5, 7, false);
						}
						if (colQtyInRs_tDBInput_5 < 8) {
							row5.product_family = null;
						} else {

							row5.product_family = routines.system.JDBCUtil
									.getString(rs_tDBInput_5, 8, false);
						}
						if (colQtyInRs_tDBInput_5 < 9) {
							row5.number_of_units = null;
						} else {

							if (rs_tDBInput_5.getObject(9) != null) {
								row5.number_of_units = rs_tDBInput_5
										.getBigDecimal(9);
							} else {
								row5.number_of_units = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 10) {
							row5.unit_type = null;
						} else {

							row5.unit_type = routines.system.JDBCUtil
									.getString(rs_tDBInput_5, 10, false);
						}
						if (colQtyInRs_tDBInput_5 < 11) {
							row5.publication_title = null;
						} else {

							row5.publication_title = routines.system.JDBCUtil
									.getString(rs_tDBInput_5, 11, false);
						}
						if (colQtyInRs_tDBInput_5 < 12) {
							row5.item_status_code = null;
						} else {

							row5.item_status_code = routines.system.JDBCUtil
									.getString(rs_tDBInput_5, 12, false);
						}
						if (colQtyInRs_tDBInput_5 < 13) {
							row5.distribution_event_id = null;
						} else {

							if (rs_tDBInput_5.getObject(13) != null) {
								row5.distribution_event_id = rs_tDBInput_5
										.getBoolean(13);
							} else {
								row5.distribution_event_id = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 14) {
							row5.source_of_content = null;
						} else {

							row5.source_of_content = routines.system.JDBCUtil
									.getString(rs_tDBInput_5, 14, false);
						}
						if (colQtyInRs_tDBInput_5 < 15) {
							row5.tax_pass_through_flag = null;
						} else {

							if (rs_tDBInput_5.getObject(15) != null) {
								row5.tax_pass_through_flag = rs_tDBInput_5
										.getBoolean(15);
							} else {
								row5.tax_pass_through_flag = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 16) {
							row5.publication_work_identifier = null;
						} else {

							row5.publication_work_identifier = routines.system.JDBCUtil
									.getString(rs_tDBInput_5, 16, false);
						}
						if (colQtyInRs_tDBInput_5 < 17) {
							row5.created_datetime = null;
						} else {

							row5.created_datetime = routines.system.JDBCUtil
									.getDate(rs_tDBInput_5, 17);
						}
						if (colQtyInRs_tDBInput_5 < 18) {
							row5.created_by_user = null;
						} else {

							row5.created_by_user = routines.system.JDBCUtil
									.getString(rs_tDBInput_5, 18, false);
						}
						if (colQtyInRs_tDBInput_5 < 19) {
							row5.updated_datetime = null;
						} else {

							row5.updated_datetime = routines.system.JDBCUtil
									.getDate(rs_tDBInput_5, 19);
						}
						if (colQtyInRs_tDBInput_5 < 20) {
							row5.updated_by_user = null;
						} else {

							row5.updated_by_user = routines.system.JDBCUtil
									.getString(rs_tDBInput_5, 20, false);
						}

						/**
						 * [tDBInput_5 begin ] stop
						 */

						/**
						 * [tDBInput_5 main ] start
						 */

						currentComponent = "tDBInput_5";

						tos_count_tDBInput_5++;

						/**
						 * [tDBInput_5 main ] stop
						 */

						/**
						 * [tDBInput_5 process_data_begin ] start
						 */

						currentComponent = "tDBInput_5";

						/**
						 * [tDBInput_5 process_data_begin ] stop
						 */

						/**
						 * [tDBOutput_5 main ] start
						 */

						currentComponent = "tDBOutput_5";

						// row5
						// row5

						if (execStat) {
							runStat.updateStatOnConnection("row5" + iterateId,
									1, 1);
						}

						whetherReject_tDBOutput_5 = false;
						if (row5.order_detail_dimension_uid == null) {
							pstmt_tDBOutput_5
									.setNull(1, java.sql.Types.INTEGER);
						} else {
							pstmt_tDBOutput_5.setLong(1,
									row5.order_detail_dimension_uid);
						}

						pstmt_tDBOutput_5.setBigDecimal(2,
								row5.source_system_order_detail_uid);

						pstmt_tDBOutput_5.setBigDecimal(3,
								row5.order_header_dimension_uid);

						pstmt_tDBOutput_5.setBigDecimal(4,
								row5.rightsholder_on_record_account_number);

						if (row5.rightsholder_on_record_name == null) {
							pstmt_tDBOutput_5
									.setNull(5, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_5.setString(5,
									row5.rightsholder_on_record_name);
						}

						if (row5.product_name == null) {
							pstmt_tDBOutput_5
									.setNull(6, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_5.setString(6, row5.product_name);
						}

						if (row5.product_code == null) {
							pstmt_tDBOutput_5
									.setNull(7, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_5.setString(7, row5.product_code);
						}

						if (row5.product_family == null) {
							pstmt_tDBOutput_5
									.setNull(8, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_5.setString(8, row5.product_family);
						}

						pstmt_tDBOutput_5
								.setBigDecimal(9, row5.number_of_units);

						if (row5.unit_type == null) {
							pstmt_tDBOutput_5.setNull(10,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_5.setString(10, row5.unit_type);
						}

						if (row5.publication_title == null) {
							pstmt_tDBOutput_5.setNull(11,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_5.setString(11,
									row5.publication_title);
						}

						if (row5.item_status_code == null) {
							pstmt_tDBOutput_5.setNull(12,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_5.setString(12,
									row5.item_status_code);
						}

						if (row5.distribution_event_id == null) {
							pstmt_tDBOutput_5.setNull(13,
									java.sql.Types.BOOLEAN);
						} else {
							pstmt_tDBOutput_5.setBoolean(13,
									row5.distribution_event_id);
						}

						if (row5.source_of_content == null) {
							pstmt_tDBOutput_5.setNull(14,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_5.setString(14,
									row5.source_of_content);
						}

						if (row5.tax_pass_through_flag == null) {
							pstmt_tDBOutput_5.setNull(15,
									java.sql.Types.BOOLEAN);
						} else {
							pstmt_tDBOutput_5.setBoolean(15,
									row5.tax_pass_through_flag);
						}

						if (row5.publication_work_identifier == null) {
							pstmt_tDBOutput_5.setNull(16,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_5.setString(16,
									row5.publication_work_identifier);
						}

						if (row5.created_datetime != null) {
							pstmt_tDBOutput_5.setTimestamp(17,
									new java.sql.Timestamp(
											row5.created_datetime.getTime()));
						} else {
							pstmt_tDBOutput_5.setNull(17,
									java.sql.Types.TIMESTAMP);
						}

						if (row5.created_by_user == null) {
							pstmt_tDBOutput_5.setNull(18,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_5.setString(18,
									row5.created_by_user);
						}

						if (row5.updated_datetime != null) {
							pstmt_tDBOutput_5.setTimestamp(19,
									new java.sql.Timestamp(
											row5.updated_datetime.getTime()));
						} else {
							pstmt_tDBOutput_5.setNull(19,
									java.sql.Types.TIMESTAMP);
						}

						if (row5.updated_by_user == null) {
							pstmt_tDBOutput_5.setNull(20,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_5.setString(20,
									row5.updated_by_user);
						}

						pstmt_tDBOutput_5.addBatch();
						nb_line_tDBOutput_5++;

						batchSizeCounter_tDBOutput_5++;

						if ((batchSize_tDBOutput_5 > 0)
								&& (batchSize_tDBOutput_5 <= batchSizeCounter_tDBOutput_5)) {
							try {
								int countSum_tDBOutput_5 = 0;

								for (int countEach_tDBOutput_5 : pstmt_tDBOutput_5
										.executeBatch()) {
									countSum_tDBOutput_5 += (countEach_tDBOutput_5 < 0 ? 0
											: countEach_tDBOutput_5);
								}

								insertedCount_tDBOutput_5 += countSum_tDBOutput_5;

								batchSizeCounter_tDBOutput_5 = 0;
							} catch (java.sql.BatchUpdateException e_tDBOutput_5) {
								java.sql.SQLException ne_tDBOutput_5 = e_tDBOutput_5
										.getNextException(), sqle_tDBOutput_5 = null;
								String errormessage_tDBOutput_5;
								if (ne_tDBOutput_5 != null) {
									// build new exception to provide the
									// original cause
									sqle_tDBOutput_5 = new java.sql.SQLException(
											e_tDBOutput_5.getMessage()
													+ "\ncaused by: "
													+ ne_tDBOutput_5
															.getMessage(),
											ne_tDBOutput_5.getSQLState(),
											ne_tDBOutput_5.getErrorCode(),
											ne_tDBOutput_5);
									errormessage_tDBOutput_5 = sqle_tDBOutput_5
											.getMessage();
								} else {
									errormessage_tDBOutput_5 = e_tDBOutput_5
											.getMessage();
								}

								int countSum_tDBOutput_5 = 0;
								for (int countEach_tDBOutput_5 : e_tDBOutput_5
										.getUpdateCounts()) {
									countSum_tDBOutput_5 += (countEach_tDBOutput_5 < 0 ? 0
											: countEach_tDBOutput_5);
								}

								insertedCount_tDBOutput_5 += countSum_tDBOutput_5;

								System.err.println(errormessage_tDBOutput_5);

							}
						}

						commitCounter_tDBOutput_5++;
						if (commitEvery_tDBOutput_5 <= commitCounter_tDBOutput_5) {
							if ((batchSize_tDBOutput_5 > 0)
									&& (batchSizeCounter_tDBOutput_5 > 0)) {
								try {
									int countSum_tDBOutput_5 = 0;

									for (int countEach_tDBOutput_5 : pstmt_tDBOutput_5
											.executeBatch()) {
										countSum_tDBOutput_5 += (countEach_tDBOutput_5 < 0 ? 0
												: countEach_tDBOutput_5);
									}

									insertedCount_tDBOutput_5 += countSum_tDBOutput_5;

									batchSizeCounter_tDBOutput_5 = 0;
								} catch (java.sql.BatchUpdateException e_tDBOutput_5) {
									java.sql.SQLException ne_tDBOutput_5 = e_tDBOutput_5
											.getNextException(), sqle_tDBOutput_5 = null;
									String errormessage_tDBOutput_5;
									if (ne_tDBOutput_5 != null) {
										// build new exception to provide the
										// original cause
										sqle_tDBOutput_5 = new java.sql.SQLException(
												e_tDBOutput_5.getMessage()
														+ "\ncaused by: "
														+ ne_tDBOutput_5
																.getMessage(),
												ne_tDBOutput_5.getSQLState(),
												ne_tDBOutput_5.getErrorCode(),
												ne_tDBOutput_5);
										errormessage_tDBOutput_5 = sqle_tDBOutput_5
												.getMessage();
									} else {
										errormessage_tDBOutput_5 = e_tDBOutput_5
												.getMessage();
									}

									int countSum_tDBOutput_5 = 0;
									for (int countEach_tDBOutput_5 : e_tDBOutput_5
											.getUpdateCounts()) {
										countSum_tDBOutput_5 += (countEach_tDBOutput_5 < 0 ? 0
												: countEach_tDBOutput_5);
									}

									insertedCount_tDBOutput_5 += countSum_tDBOutput_5;

									System.err
											.println(errormessage_tDBOutput_5);

								}
							}
							conn_tDBOutput_5.commit();

							commitCounter_tDBOutput_5 = 0;
						}

						tos_count_tDBOutput_5++;

						/**
						 * [tDBOutput_5 main ] stop
						 */

						/**
						 * [tDBOutput_5 process_data_begin ] start
						 */

						currentComponent = "tDBOutput_5";

						/**
						 * [tDBOutput_5 process_data_begin ] stop
						 */

						/**
						 * [tDBOutput_5 process_data_end ] start
						 */

						currentComponent = "tDBOutput_5";

						/**
						 * [tDBOutput_5 process_data_end ] stop
						 */

						/**
						 * [tDBInput_5 process_data_end ] start
						 */

						currentComponent = "tDBInput_5";

						/**
						 * [tDBInput_5 process_data_end ] stop
						 */

						/**
						 * [tDBInput_5 end ] start
						 */

						currentComponent = "tDBInput_5";

					}
				} finally {
					if (rs_tDBInput_5 != null) {
						rs_tDBInput_5.close();
					}
					if (stmt_tDBInput_5 != null) {
						stmt_tDBInput_5.close();
					}
					if (conn_tDBInput_5 != null && !conn_tDBInput_5.isClosed()) {

						conn_tDBInput_5.commit();

						conn_tDBInput_5.close();

					}

				}
				globalMap.put("tDBInput_5_NB_LINE", nb_line_tDBInput_5);

				ok_Hash.put("tDBInput_5", true);
				end_Hash.put("tDBInput_5", System.currentTimeMillis());

				/**
				 * [tDBInput_5 end ] stop
				 */

				/**
				 * [tDBOutput_5 end ] start
				 */

				currentComponent = "tDBOutput_5";

				try {
					int countSum_tDBOutput_5 = 0;
					if (pstmt_tDBOutput_5 != null
							&& batchSizeCounter_tDBOutput_5 > 0) {

						for (int countEach_tDBOutput_5 : pstmt_tDBOutput_5
								.executeBatch()) {
							countSum_tDBOutput_5 += (countEach_tDBOutput_5 < 0 ? 0
									: countEach_tDBOutput_5);
						}

					}

					insertedCount_tDBOutput_5 += countSum_tDBOutput_5;

				} catch (java.sql.BatchUpdateException e_tDBOutput_5) {
					java.sql.SQLException ne_tDBOutput_5 = e_tDBOutput_5
							.getNextException(), sqle_tDBOutput_5 = null;
					String errormessage_tDBOutput_5;
					if (ne_tDBOutput_5 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_5 = new java.sql.SQLException(
								e_tDBOutput_5.getMessage() + "\ncaused by: "
										+ ne_tDBOutput_5.getMessage(),
								ne_tDBOutput_5.getSQLState(),
								ne_tDBOutput_5.getErrorCode(), ne_tDBOutput_5);
						errormessage_tDBOutput_5 = sqle_tDBOutput_5
								.getMessage();
					} else {
						errormessage_tDBOutput_5 = e_tDBOutput_5.getMessage();
					}

					int countSum_tDBOutput_5 = 0;
					for (int countEach_tDBOutput_5 : e_tDBOutput_5
							.getUpdateCounts()) {
						countSum_tDBOutput_5 += (countEach_tDBOutput_5 < 0 ? 0
								: countEach_tDBOutput_5);
					}

					insertedCount_tDBOutput_5 += countSum_tDBOutput_5;

					System.err.println(errormessage_tDBOutput_5);

				}

				if (pstmt_tDBOutput_5 != null) {

					pstmt_tDBOutput_5.close();
					resourceMap.remove("pstmt_tDBOutput_5");
				}
				resourceMap.put("statementClosed_tDBOutput_5", true);

				conn_tDBOutput_5.commit();

				conn_tDBOutput_5.close();

				resourceMap.put("finish_tDBOutput_5", true);

				nb_line_deleted_tDBOutput_5 = nb_line_deleted_tDBOutput_5
						+ deletedCount_tDBOutput_5;
				nb_line_update_tDBOutput_5 = nb_line_update_tDBOutput_5
						+ updatedCount_tDBOutput_5;
				nb_line_inserted_tDBOutput_5 = nb_line_inserted_tDBOutput_5
						+ insertedCount_tDBOutput_5;
				nb_line_rejected_tDBOutput_5 = nb_line_rejected_tDBOutput_5
						+ rejectedCount_tDBOutput_5;

				globalMap.put("tDBOutput_5_NB_LINE", nb_line_tDBOutput_5);
				globalMap.put("tDBOutput_5_NB_LINE_UPDATED",
						nb_line_update_tDBOutput_5);
				globalMap.put("tDBOutput_5_NB_LINE_INSERTED",
						nb_line_inserted_tDBOutput_5);
				globalMap.put("tDBOutput_5_NB_LINE_DELETED",
						nb_line_deleted_tDBOutput_5);
				globalMap.put("tDBOutput_5_NB_LINE_REJECTED",
						nb_line_rejected_tDBOutput_5);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row5" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tDBOutput_5", true);
				end_Hash.put("tDBOutput_5", System.currentTimeMillis());

				/**
				 * [tDBOutput_5 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_5 finally ] start
				 */

				currentComponent = "tDBInput_5";

				/**
				 * [tDBInput_5 finally ] stop
				 */

				/**
				 * [tDBOutput_5 finally ] start
				 */

				currentComponent = "tDBOutput_5";

				try {
					if (resourceMap.get("statementClosed_tDBOutput_5") == null) {
						java.sql.PreparedStatement pstmtToClose_tDBOutput_5 = null;
						if ((pstmtToClose_tDBOutput_5 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmt_tDBOutput_5")) != null) {
							pstmtToClose_tDBOutput_5.close();
						}
					}
				} finally {
					if (resourceMap.get("finish_tDBOutput_5") == null) {
						java.sql.Connection ctn_tDBOutput_5 = null;
						if ((ctn_tDBOutput_5 = (java.sql.Connection) resourceMap
								.get("conn_tDBOutput_5")) != null) {
							try {
								ctn_tDBOutput_5.close();
							} catch (java.sql.SQLException sqlEx_tDBOutput_5) {
								String errorMessage_tDBOutput_5 = "failed to close the connection in tDBOutput_5 :"
										+ sqlEx_tDBOutput_5.getMessage();
								System.err.println(errorMessage_tDBOutput_5);
							}
						}
					}
				}

				/**
				 * [tDBOutput_5 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_5_SUBPROCESS_STATE", 1);
	}

	public static class row2Struct implements
			routines.system.IPersistableRow<row2Struct> {
		final static byte[] commonByteArrayLock_ORDER_ETL_TF_ETL = new byte[0];
		static byte[] commonByteArray_ORDER_ETL_TF_ETL = new byte[0];

		public BigDecimal OrderNumber;

		public BigDecimal getOrderNumber() {
			return this.OrderNumber;
		}

		public BigDecimal LicenseePartyNumber;

		public BigDecimal getLicenseePartyNumber() {
			return this.LicenseePartyNumber;
		}

		public java.util.Date OrderDate;

		public java.util.Date getOrderDate() {
			return this.OrderDate;
		}

		public String OrderChannel;

		public String getOrderChannel() {
			return this.OrderChannel;
		}

		public String OrganizationName;

		public String getOrganizationName() {
			return this.OrganizationName;
		}

		public String OrgLocationCountryCode;

		public String getOrgLocationCountryCode() {
			return this.OrgLocationCountryCode;
		}

		public String OrgLocationName;

		public String getOrgLocationName() {
			return this.OrgLocationName;
		}

		public String TaxableCity;

		public String getTaxableCity() {
			return this.TaxableCity;
		}

		public String TaxableRegion;

		public String getTaxableRegion() {
			return this.TaxableRegion;
		}

		public String TaxablePostalCode;

		public String getTaxablePostalCode() {
			return this.TaxablePostalCode;
		}

		public String TaxableCountry;

		public String getTaxableCountry() {
			return this.TaxableCountry;
		}

		public String OrderInvoiceUid;

		public String getOrderInvoiceUid() {
			return this.OrderInvoiceUid;
		}

		public String OrderSource;

		public String getOrderSource() {
			return this.OrderSource;
		}

		public java.util.Date CreatedDatetime;

		public java.util.Date getCreatedDatetime() {
			return this.CreatedDatetime;
		}

		public String CreatedUser;

		public String getCreatedUser() {
			return this.CreatedUser;
		}

		public java.util.Date UpdatedDatetime;

		public java.util.Date getUpdatedDatetime() {
			return this.UpdatedDatetime;
		}

		public String UpdatedUser;

		public String getUpdatedUser() {
			return this.UpdatedUser;
		}

		public BigDecimal TF_PTY_INST;

		public BigDecimal getTF_PTY_INST() {
			return this.TF_PTY_INST;
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ORDER_ETL_TF_ETL.length) {
					if (length < 1024
							&& commonByteArray_ORDER_ETL_TF_ETL.length == 0) {
						commonByteArray_ORDER_ETL_TF_ETL = new byte[1024];
					} else {
						commonByteArray_ORDER_ETL_TF_ETL = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ORDER_ETL_TF_ETL, 0, length);
				strReturn = new String(commonByteArray_ORDER_ETL_TF_ETL, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ORDER_ETL_TF_ETL) {

				try {

					int length = 0;

					this.OrderNumber = (BigDecimal) dis.readObject();

					this.LicenseePartyNumber = (BigDecimal) dis.readObject();

					this.OrderDate = readDate(dis);

					this.OrderChannel = readString(dis);

					this.OrganizationName = readString(dis);

					this.OrgLocationCountryCode = readString(dis);

					this.OrgLocationName = readString(dis);

					this.TaxableCity = readString(dis);

					this.TaxableRegion = readString(dis);

					this.TaxablePostalCode = readString(dis);

					this.TaxableCountry = readString(dis);

					this.OrderInvoiceUid = readString(dis);

					this.OrderSource = readString(dis);

					this.CreatedDatetime = readDate(dis);

					this.CreatedUser = readString(dis);

					this.UpdatedDatetime = readDate(dis);

					this.UpdatedUser = readString(dis);

					this.TF_PTY_INST = (BigDecimal) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// BigDecimal

				dos.writeObject(this.OrderNumber);

				// BigDecimal

				dos.writeObject(this.LicenseePartyNumber);

				// java.util.Date

				writeDate(this.OrderDate, dos);

				// String

				writeString(this.OrderChannel, dos);

				// String

				writeString(this.OrganizationName, dos);

				// String

				writeString(this.OrgLocationCountryCode, dos);

				// String

				writeString(this.OrgLocationName, dos);

				// String

				writeString(this.TaxableCity, dos);

				// String

				writeString(this.TaxableRegion, dos);

				// String

				writeString(this.TaxablePostalCode, dos);

				// String

				writeString(this.TaxableCountry, dos);

				// String

				writeString(this.OrderInvoiceUid, dos);

				// String

				writeString(this.OrderSource, dos);

				// java.util.Date

				writeDate(this.CreatedDatetime, dos);

				// String

				writeString(this.CreatedUser, dos);

				// java.util.Date

				writeDate(this.UpdatedDatetime, dos);

				// String

				writeString(this.UpdatedUser, dos);

				// BigDecimal

				dos.writeObject(this.TF_PTY_INST);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("OrderNumber=" + String.valueOf(OrderNumber));
			sb.append(",LicenseePartyNumber="
					+ String.valueOf(LicenseePartyNumber));
			sb.append(",OrderDate=" + String.valueOf(OrderDate));
			sb.append(",OrderChannel=" + OrderChannel);
			sb.append(",OrganizationName=" + OrganizationName);
			sb.append(",OrgLocationCountryCode=" + OrgLocationCountryCode);
			sb.append(",OrgLocationName=" + OrgLocationName);
			sb.append(",TaxableCity=" + TaxableCity);
			sb.append(",TaxableRegion=" + TaxableRegion);
			sb.append(",TaxablePostalCode=" + TaxablePostalCode);
			sb.append(",TaxableCountry=" + TaxableCountry);
			sb.append(",OrderInvoiceUid=" + OrderInvoiceUid);
			sb.append(",OrderSource=" + OrderSource);
			sb.append(",CreatedDatetime=" + String.valueOf(CreatedDatetime));
			sb.append(",CreatedUser=" + CreatedUser);
			sb.append(",UpdatedDatetime=" + String.valueOf(UpdatedDatetime));
			sb.append(",UpdatedUser=" + UpdatedUser);
			sb.append(",TF_PTY_INST=" + String.valueOf(TF_PTY_INST));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_2Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDBInput_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row2Struct row2 = new row2Struct();

				/**
				 * [tDBOutput_2 begin ] start
				 */

				ok_Hash.put("tDBOutput_2", false);
				start_Hash.put("tDBOutput_2", System.currentTimeMillis());

				currentComponent = "tDBOutput_2";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row2" + iterateId, 0, 0);

					}
				}

				int tos_count_tDBOutput_2 = 0;

				String dbschema_tDBOutput_2 = null;
				dbschema_tDBOutput_2 = "staging";

				String tableName_tDBOutput_2 = null;
				if (dbschema_tDBOutput_2 == null
						|| dbschema_tDBOutput_2.trim().length() == 0) {
					tableName_tDBOutput_2 = "stg_tf_rupodm_tforderheader";
				} else {
					tableName_tDBOutput_2 = dbschema_tDBOutput_2 + "\".\""
							+ "stg_tf_rupodm_tforderheader";
				}

				int nb_line_tDBOutput_2 = 0;
				int nb_line_update_tDBOutput_2 = 0;
				int nb_line_inserted_tDBOutput_2 = 0;
				int nb_line_deleted_tDBOutput_2 = 0;
				int nb_line_rejected_tDBOutput_2 = 0;

				int deletedCount_tDBOutput_2 = 0;
				int updatedCount_tDBOutput_2 = 0;
				int insertedCount_tDBOutput_2 = 0;
				int rejectedCount_tDBOutput_2 = 0;

				boolean whetherReject_tDBOutput_2 = false;

				java.sql.Connection conn_tDBOutput_2 = null;
				String dbUser_tDBOutput_2 = null;

				java.lang.Class.forName("org.postgresql.Driver");
				String url_tDBOutput_2 = "jdbc:postgresql://" + "localhost"
						+ ":" + "5432" + "/" + "rup";
				dbUser_tDBOutput_2 = "rup";

				final String decryptedPassword_tDBOutput_2 = routines.system.PasswordEncryptUtil
						.decryptPassword("544d653f2c2bdc61");

				String dbPwd_tDBOutput_2 = decryptedPassword_tDBOutput_2;

				conn_tDBOutput_2 = java.sql.DriverManager.getConnection(
						url_tDBOutput_2, dbUser_tDBOutput_2, dbPwd_tDBOutput_2);

				resourceMap.put("conn_tDBOutput_2", conn_tDBOutput_2);
				conn_tDBOutput_2.setAutoCommit(false);
				int commitEvery_tDBOutput_2 = 10000;
				int commitCounter_tDBOutput_2 = 0;

				int batchSize_tDBOutput_2 = 10000;
				int batchSizeCounter_tDBOutput_2 = 0;

				int count_tDBOutput_2 = 0;
				String insert_tDBOutput_2 = "INSERT INTO \""
						+ tableName_tDBOutput_2
						+ "\" (\"ordernumber\",\"licenseepartynumber\",\"orderdate\",\"orderchannel\",\"organizationname\",\"orglocationcountrycode\",\"orglocationname\",\"taxablecity\",\"taxableregion\",\"taxablepostalcode\",\"taxablecountry\",\"orderinvoiceuid\",\"ordersource\",\"createddatetime\",\"createduser\",\"updateddatetime\",\"updateduser\",\"tf_pty_inst\") VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

				java.sql.PreparedStatement pstmt_tDBOutput_2 = conn_tDBOutput_2
						.prepareStatement(insert_tDBOutput_2);
				resourceMap.put("pstmt_tDBOutput_2", pstmt_tDBOutput_2);

				/**
				 * [tDBOutput_2 begin ] stop
				 */

				/**
				 * [tDBInput_2 begin ] start
				 */

				ok_Hash.put("tDBInput_2", false);
				start_Hash.put("tDBInput_2", System.currentTimeMillis());

				currentComponent = "tDBInput_2";

				int tos_count_tDBInput_2 = 0;

				int nb_line_tDBInput_2 = 0;
				java.sql.Connection conn_tDBInput_2 = null;
				conn_tDBInput_2 = (java.sql.Connection) globalMap
						.get("conn_tDBConnection_5");
				boolean isTimeZoneNull_tDBInput_2 = false;
				boolean isConnectionWrapped_tDBInput_2 = !(conn_tDBInput_2 instanceof oracle.jdbc.OracleConnection)
						&& conn_tDBInput_2
								.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tDBInput_2 = null;
				if (isConnectionWrapped_tDBInput_2) {
					unwrappedOraConn_tDBInput_2 = conn_tDBInput_2
							.unwrap(oracle.jdbc.OracleConnection.class);
					if (unwrappedOraConn_tDBInput_2 != null) {
						isTimeZoneNull_tDBInput_2 = (unwrappedOraConn_tDBInput_2
								.getSessionTimeZone() == null);
					}
				} else {
					isTimeZoneNull_tDBInput_2 = (((oracle.jdbc.OracleConnection) conn_tDBInput_2)
							.getSessionTimeZone() == null);
				}

				if (isTimeZoneNull_tDBInput_2) {
					java.sql.Statement stmtGetTZ_tDBInput_2 = conn_tDBInput_2
							.createStatement();
					java.sql.ResultSet rsGetTZ_tDBInput_2 = stmtGetTZ_tDBInput_2
							.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tDBInput_2 = java.util.TimeZone
							.getDefault().getID();
					while (rsGetTZ_tDBInput_2.next()) {
						sessionTimezone_tDBInput_2 = rsGetTZ_tDBInput_2
								.getString(1);
					}
					if (isConnectionWrapped_tDBInput_2
							&& unwrappedOraConn_tDBInput_2 != null) {
						unwrappedOraConn_tDBInput_2
								.setSessionTimeZone(sessionTimezone_tDBInput_2);
					} else {
						((oracle.jdbc.OracleConnection) conn_tDBInput_2)
								.setSessionTimeZone(sessionTimezone_tDBInput_2);
					}
				}

				java.sql.Statement stmt_tDBInput_2 = conn_tDBInput_2
						.createStatement();

				String dbquery_tDBInput_2 = "select * from ccctf.RUPODM_TFORDERHEADER_V\nWHERE to_char(\"OrderDate\",'YYYY-MM-DD') >= '2016-01-01'";

				globalMap.put("tDBInput_2_QUERY", dbquery_tDBInput_2);
				java.sql.ResultSet rs_tDBInput_2 = null;

				try {
					rs_tDBInput_2 = stmt_tDBInput_2
							.executeQuery(dbquery_tDBInput_2);
					java.sql.ResultSetMetaData rsmd_tDBInput_2 = rs_tDBInput_2
							.getMetaData();
					int colQtyInRs_tDBInput_2 = rsmd_tDBInput_2
							.getColumnCount();

					String tmpContent_tDBInput_2 = null;

					while (rs_tDBInput_2.next()) {
						nb_line_tDBInput_2++;

						if (colQtyInRs_tDBInput_2 < 1) {
							row2.OrderNumber = null;
						} else {

							if (rs_tDBInput_2.getObject(1) != null) {
								row2.OrderNumber = rs_tDBInput_2
										.getBigDecimal(1);
							} else {

								row2.OrderNumber = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 2) {
							row2.LicenseePartyNumber = null;
						} else {

							if (rs_tDBInput_2.getObject(2) != null) {
								row2.LicenseePartyNumber = rs_tDBInput_2
										.getBigDecimal(2);
							} else {

								row2.LicenseePartyNumber = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 3) {
							row2.OrderDate = null;
						} else {

							row2.OrderDate = routines.system.JDBCUtil.getDate(
									rs_tDBInput_2, 3);
						}
						if (colQtyInRs_tDBInput_2 < 4) {
							row2.OrderChannel = null;
						} else {

							row2.OrderChannel = routines.system.JDBCUtil
									.getString(rs_tDBInput_2, 4, false);
						}
						if (colQtyInRs_tDBInput_2 < 5) {
							row2.OrganizationName = null;
						} else {

							row2.OrganizationName = routines.system.JDBCUtil
									.getString(rs_tDBInput_2, 5, false);
						}
						if (colQtyInRs_tDBInput_2 < 6) {
							row2.OrgLocationCountryCode = null;
						} else {

							row2.OrgLocationCountryCode = routines.system.JDBCUtil
									.getString(rs_tDBInput_2, 6, false);
						}
						if (colQtyInRs_tDBInput_2 < 7) {
							row2.OrgLocationName = null;
						} else {

							row2.OrgLocationName = routines.system.JDBCUtil
									.getString(rs_tDBInput_2, 7, false);
						}
						if (colQtyInRs_tDBInput_2 < 8) {
							row2.TaxableCity = null;
						} else {

							row2.TaxableCity = routines.system.JDBCUtil
									.getString(rs_tDBInput_2, 8, false);
						}
						if (colQtyInRs_tDBInput_2 < 9) {
							row2.TaxableRegion = null;
						} else {

							row2.TaxableRegion = routines.system.JDBCUtil
									.getString(rs_tDBInput_2, 9, false);
						}
						if (colQtyInRs_tDBInput_2 < 10) {
							row2.TaxablePostalCode = null;
						} else {

							row2.TaxablePostalCode = routines.system.JDBCUtil
									.getString(rs_tDBInput_2, 10, false);
						}
						if (colQtyInRs_tDBInput_2 < 11) {
							row2.TaxableCountry = null;
						} else {

							row2.TaxableCountry = routines.system.JDBCUtil
									.getString(rs_tDBInput_2, 11, false);
						}
						if (colQtyInRs_tDBInput_2 < 12) {
							row2.OrderInvoiceUid = null;
						} else {

							row2.OrderInvoiceUid = routines.system.JDBCUtil
									.getString(rs_tDBInput_2, 12, false);
						}
						if (colQtyInRs_tDBInput_2 < 13) {
							row2.OrderSource = null;
						} else {

							row2.OrderSource = routines.system.JDBCUtil
									.getString(rs_tDBInput_2, 13, false);
						}
						if (colQtyInRs_tDBInput_2 < 14) {
							row2.CreatedDatetime = null;
						} else {

							row2.CreatedDatetime = routines.system.JDBCUtil
									.getDate(rs_tDBInput_2, 14);
						}
						if (colQtyInRs_tDBInput_2 < 15) {
							row2.CreatedUser = null;
						} else {

							row2.CreatedUser = routines.system.JDBCUtil
									.getString(rs_tDBInput_2, 15, false);
						}
						if (colQtyInRs_tDBInput_2 < 16) {
							row2.UpdatedDatetime = null;
						} else {

							row2.UpdatedDatetime = routines.system.JDBCUtil
									.getDate(rs_tDBInput_2, 16);
						}
						if (colQtyInRs_tDBInput_2 < 17) {
							row2.UpdatedUser = null;
						} else {

							row2.UpdatedUser = routines.system.JDBCUtil
									.getString(rs_tDBInput_2, 17, false);
						}
						if (colQtyInRs_tDBInput_2 < 18) {
							row2.TF_PTY_INST = null;
						} else {

							if (rs_tDBInput_2.getObject(18) != null) {
								row2.TF_PTY_INST = rs_tDBInput_2
										.getBigDecimal(18);
							} else {

								row2.TF_PTY_INST = null;
							}
						}

						/**
						 * [tDBInput_2 begin ] stop
						 */

						/**
						 * [tDBInput_2 main ] start
						 */

						currentComponent = "tDBInput_2";

						tos_count_tDBInput_2++;

						/**
						 * [tDBInput_2 main ] stop
						 */

						/**
						 * [tDBInput_2 process_data_begin ] start
						 */

						currentComponent = "tDBInput_2";

						/**
						 * [tDBInput_2 process_data_begin ] stop
						 */

						/**
						 * [tDBOutput_2 main ] start
						 */

						currentComponent = "tDBOutput_2";

						// row2
						// row2

						if (execStat) {
							runStat.updateStatOnConnection("row2" + iterateId,
									1, 1);
						}

						whetherReject_tDBOutput_2 = false;
						pstmt_tDBOutput_2.setBigDecimal(1, row2.OrderNumber);

						pstmt_tDBOutput_2.setBigDecimal(2,
								row2.LicenseePartyNumber);

						if (row2.OrderDate != null) {
							pstmt_tDBOutput_2.setTimestamp(
									3,
									new java.sql.Timestamp(row2.OrderDate
											.getTime()));
						} else {
							pstmt_tDBOutput_2.setNull(3,
									java.sql.Types.TIMESTAMP);
						}

						if (row2.OrderChannel == null) {
							pstmt_tDBOutput_2
									.setNull(4, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(4, row2.OrderChannel);
						}

						if (row2.OrganizationName == null) {
							pstmt_tDBOutput_2
									.setNull(5, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(5,
									row2.OrganizationName);
						}

						if (row2.OrgLocationCountryCode == null) {
							pstmt_tDBOutput_2
									.setNull(6, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(6,
									row2.OrgLocationCountryCode);
						}

						if (row2.OrgLocationName == null) {
							pstmt_tDBOutput_2
									.setNull(7, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2
									.setString(7, row2.OrgLocationName);
						}

						if (row2.TaxableCity == null) {
							pstmt_tDBOutput_2
									.setNull(8, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(8, row2.TaxableCity);
						}

						if (row2.TaxableRegion == null) {
							pstmt_tDBOutput_2
									.setNull(9, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(9, row2.TaxableRegion);
						}

						if (row2.TaxablePostalCode == null) {
							pstmt_tDBOutput_2.setNull(10,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(10,
									row2.TaxablePostalCode);
						}

						if (row2.TaxableCountry == null) {
							pstmt_tDBOutput_2.setNull(11,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2
									.setString(11, row2.TaxableCountry);
						}

						if (row2.OrderInvoiceUid == null) {
							pstmt_tDBOutput_2.setNull(12,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(12,
									row2.OrderInvoiceUid);
						}

						if (row2.OrderSource == null) {
							pstmt_tDBOutput_2.setNull(13,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(13, row2.OrderSource);
						}

						if (row2.CreatedDatetime != null) {
							pstmt_tDBOutput_2.setTimestamp(
									14,
									new java.sql.Timestamp(row2.CreatedDatetime
											.getTime()));
						} else {
							pstmt_tDBOutput_2.setNull(14,
									java.sql.Types.TIMESTAMP);
						}

						if (row2.CreatedUser == null) {
							pstmt_tDBOutput_2.setNull(15,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(15, row2.CreatedUser);
						}

						if (row2.UpdatedDatetime != null) {
							pstmt_tDBOutput_2.setTimestamp(
									16,
									new java.sql.Timestamp(row2.UpdatedDatetime
											.getTime()));
						} else {
							pstmt_tDBOutput_2.setNull(16,
									java.sql.Types.TIMESTAMP);
						}

						if (row2.UpdatedUser == null) {
							pstmt_tDBOutput_2.setNull(17,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(17, row2.UpdatedUser);
						}

						pstmt_tDBOutput_2.setBigDecimal(18, row2.TF_PTY_INST);

						pstmt_tDBOutput_2.addBatch();
						nb_line_tDBOutput_2++;

						batchSizeCounter_tDBOutput_2++;

						if (!whetherReject_tDBOutput_2) {
						}
						if ((batchSize_tDBOutput_2 > 0)
								&& (batchSize_tDBOutput_2 <= batchSizeCounter_tDBOutput_2)) {
							try {
								int countSum_tDBOutput_2 = 0;

								for (int countEach_tDBOutput_2 : pstmt_tDBOutput_2
										.executeBatch()) {
									countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0
											: countEach_tDBOutput_2);
								}

								insertedCount_tDBOutput_2 += countSum_tDBOutput_2;

								batchSizeCounter_tDBOutput_2 = 0;
							} catch (java.sql.BatchUpdateException e_tDBOutput_2) {
								java.sql.SQLException ne_tDBOutput_2 = e_tDBOutput_2
										.getNextException(), sqle_tDBOutput_2 = null;
								String errormessage_tDBOutput_2;
								if (ne_tDBOutput_2 != null) {
									// build new exception to provide the
									// original cause
									sqle_tDBOutput_2 = new java.sql.SQLException(
											e_tDBOutput_2.getMessage()
													+ "\ncaused by: "
													+ ne_tDBOutput_2
															.getMessage(),
											ne_tDBOutput_2.getSQLState(),
											ne_tDBOutput_2.getErrorCode(),
											ne_tDBOutput_2);
									errormessage_tDBOutput_2 = sqle_tDBOutput_2
											.getMessage();
								} else {
									errormessage_tDBOutput_2 = e_tDBOutput_2
											.getMessage();
								}

								int countSum_tDBOutput_2 = 0;
								for (int countEach_tDBOutput_2 : e_tDBOutput_2
										.getUpdateCounts()) {
									countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0
											: countEach_tDBOutput_2);
								}

								insertedCount_tDBOutput_2 += countSum_tDBOutput_2;

								System.err.println(errormessage_tDBOutput_2);

							}
						}

						commitCounter_tDBOutput_2++;
						if (commitEvery_tDBOutput_2 <= commitCounter_tDBOutput_2) {
							if ((batchSize_tDBOutput_2 > 0)
									&& (batchSizeCounter_tDBOutput_2 > 0)) {
								try {
									int countSum_tDBOutput_2 = 0;

									for (int countEach_tDBOutput_2 : pstmt_tDBOutput_2
											.executeBatch()) {
										countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0
												: countEach_tDBOutput_2);
									}

									insertedCount_tDBOutput_2 += countSum_tDBOutput_2;

									batchSizeCounter_tDBOutput_2 = 0;
								} catch (java.sql.BatchUpdateException e_tDBOutput_2) {
									java.sql.SQLException ne_tDBOutput_2 = e_tDBOutput_2
											.getNextException(), sqle_tDBOutput_2 = null;
									String errormessage_tDBOutput_2;
									if (ne_tDBOutput_2 != null) {
										// build new exception to provide the
										// original cause
										sqle_tDBOutput_2 = new java.sql.SQLException(
												e_tDBOutput_2.getMessage()
														+ "\ncaused by: "
														+ ne_tDBOutput_2
																.getMessage(),
												ne_tDBOutput_2.getSQLState(),
												ne_tDBOutput_2.getErrorCode(),
												ne_tDBOutput_2);
										errormessage_tDBOutput_2 = sqle_tDBOutput_2
												.getMessage();
									} else {
										errormessage_tDBOutput_2 = e_tDBOutput_2
												.getMessage();
									}

									int countSum_tDBOutput_2 = 0;
									for (int countEach_tDBOutput_2 : e_tDBOutput_2
											.getUpdateCounts()) {
										countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0
												: countEach_tDBOutput_2);
									}

									insertedCount_tDBOutput_2 += countSum_tDBOutput_2;

									System.err
											.println(errormessage_tDBOutput_2);

								}
							}
							conn_tDBOutput_2.commit();

							commitCounter_tDBOutput_2 = 0;
						}

						tos_count_tDBOutput_2++;

						/**
						 * [tDBOutput_2 main ] stop
						 */

						/**
						 * [tDBOutput_2 process_data_begin ] start
						 */

						currentComponent = "tDBOutput_2";

						/**
						 * [tDBOutput_2 process_data_begin ] stop
						 */

						/**
						 * [tDBOutput_2 process_data_end ] start
						 */

						currentComponent = "tDBOutput_2";

						/**
						 * [tDBOutput_2 process_data_end ] stop
						 */

						/**
						 * [tDBInput_2 process_data_end ] start
						 */

						currentComponent = "tDBInput_2";

						/**
						 * [tDBInput_2 process_data_end ] stop
						 */

						/**
						 * [tDBInput_2 end ] start
						 */

						currentComponent = "tDBInput_2";

					}
				} finally {
					if (rs_tDBInput_2 != null) {
						rs_tDBInput_2.close();
					}
					if (stmt_tDBInput_2 != null) {
						stmt_tDBInput_2.close();
					}
				}

				globalMap.put("tDBInput_2_NB_LINE", nb_line_tDBInput_2);

				ok_Hash.put("tDBInput_2", true);
				end_Hash.put("tDBInput_2", System.currentTimeMillis());

				/**
				 * [tDBInput_2 end ] stop
				 */

				/**
				 * [tDBOutput_2 end ] start
				 */

				currentComponent = "tDBOutput_2";

				try {
					int countSum_tDBOutput_2 = 0;
					if (pstmt_tDBOutput_2 != null
							&& batchSizeCounter_tDBOutput_2 > 0) {

						for (int countEach_tDBOutput_2 : pstmt_tDBOutput_2
								.executeBatch()) {
							countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0
									: countEach_tDBOutput_2);
						}

					}

					insertedCount_tDBOutput_2 += countSum_tDBOutput_2;

				} catch (java.sql.BatchUpdateException e_tDBOutput_2) {
					java.sql.SQLException ne_tDBOutput_2 = e_tDBOutput_2
							.getNextException(), sqle_tDBOutput_2 = null;
					String errormessage_tDBOutput_2;
					if (ne_tDBOutput_2 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_2 = new java.sql.SQLException(
								e_tDBOutput_2.getMessage() + "\ncaused by: "
										+ ne_tDBOutput_2.getMessage(),
								ne_tDBOutput_2.getSQLState(),
								ne_tDBOutput_2.getErrorCode(), ne_tDBOutput_2);
						errormessage_tDBOutput_2 = sqle_tDBOutput_2
								.getMessage();
					} else {
						errormessage_tDBOutput_2 = e_tDBOutput_2.getMessage();
					}

					int countSum_tDBOutput_2 = 0;
					for (int countEach_tDBOutput_2 : e_tDBOutput_2
							.getUpdateCounts()) {
						countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0
								: countEach_tDBOutput_2);
					}

					insertedCount_tDBOutput_2 += countSum_tDBOutput_2;

					System.err.println(errormessage_tDBOutput_2);

				}

				if (pstmt_tDBOutput_2 != null) {

					pstmt_tDBOutput_2.close();
					resourceMap.remove("pstmt_tDBOutput_2");
				}
				resourceMap.put("statementClosed_tDBOutput_2", true);

				conn_tDBOutput_2.commit();

				conn_tDBOutput_2.close();

				resourceMap.put("finish_tDBOutput_2", true);

				nb_line_deleted_tDBOutput_2 = nb_line_deleted_tDBOutput_2
						+ deletedCount_tDBOutput_2;
				nb_line_update_tDBOutput_2 = nb_line_update_tDBOutput_2
						+ updatedCount_tDBOutput_2;
				nb_line_inserted_tDBOutput_2 = nb_line_inserted_tDBOutput_2
						+ insertedCount_tDBOutput_2;
				nb_line_rejected_tDBOutput_2 = nb_line_rejected_tDBOutput_2
						+ rejectedCount_tDBOutput_2;

				globalMap.put("tDBOutput_2_NB_LINE", nb_line_tDBOutput_2);
				globalMap.put("tDBOutput_2_NB_LINE_UPDATED",
						nb_line_update_tDBOutput_2);
				globalMap.put("tDBOutput_2_NB_LINE_INSERTED",
						nb_line_inserted_tDBOutput_2);
				globalMap.put("tDBOutput_2_NB_LINE_DELETED",
						nb_line_deleted_tDBOutput_2);
				globalMap.put("tDBOutput_2_NB_LINE_REJECTED",
						nb_line_rejected_tDBOutput_2);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row2" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tDBOutput_2", true);
				end_Hash.put("tDBOutput_2", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk2", 0, "ok");
				}
				tDBInput_6Process(globalMap);

				/**
				 * [tDBOutput_2 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_2 finally ] start
				 */

				currentComponent = "tDBInput_2";

				/**
				 * [tDBInput_2 finally ] stop
				 */

				/**
				 * [tDBOutput_2 finally ] start
				 */

				currentComponent = "tDBOutput_2";

				try {
					if (resourceMap.get("statementClosed_tDBOutput_2") == null) {
						java.sql.PreparedStatement pstmtToClose_tDBOutput_2 = null;
						if ((pstmtToClose_tDBOutput_2 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmt_tDBOutput_2")) != null) {
							pstmtToClose_tDBOutput_2.close();
						}
					}
				} finally {
					if (resourceMap.get("finish_tDBOutput_2") == null) {
						java.sql.Connection ctn_tDBOutput_2 = null;
						if ((ctn_tDBOutput_2 = (java.sql.Connection) resourceMap
								.get("conn_tDBOutput_2")) != null) {
							try {
								ctn_tDBOutput_2.close();
							} catch (java.sql.SQLException sqlEx_tDBOutput_2) {
								String errorMessage_tDBOutput_2 = "failed to close the connection in tDBOutput_2 :"
										+ sqlEx_tDBOutput_2.getMessage();
								System.err.println(errorMessage_tDBOutput_2);
							}
						}
					}
				}

				/**
				 * [tDBOutput_2 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_2_SUBPROCESS_STATE", 1);
	}

	public static class row6Struct implements
			routines.system.IPersistableRow<row6Struct> {
		final static byte[] commonByteArrayLock_ORDER_ETL_TF_ETL = new byte[0];
		static byte[] commonByteArray_ORDER_ETL_TF_ETL = new byte[0];

		public Long order_header_dimension_uid;

		public Long getOrder_header_dimension_uid() {
			return this.order_header_dimension_uid;
		}

		public BigDecimal source_system_order_header_uid;

		public BigDecimal getSource_system_order_header_uid() {
			return this.source_system_order_header_uid;
		}

		public BigDecimal order_number;

		public BigDecimal getOrder_number() {
			return this.order_number;
		}

		public BigDecimal licensee_oracle_party_number;

		public BigDecimal getLicensee_oracle_party_number() {
			return this.licensee_oracle_party_number;
		}

		public java.util.Date order_date;

		public java.util.Date getOrder_date() {
			return this.order_date;
		}

		public String order_channel;

		public String getOrder_channel() {
			return this.order_channel;
		}

		public String organization_name;

		public String getOrganization_name() {
			return this.organization_name;
		}

		public String organization_location_country_code;

		public String getOrganization_location_country_code() {
			return this.organization_location_country_code;
		}

		public String organization_location_name;

		public String getOrganization_location_name() {
			return this.organization_location_name;
		}

		public String taxable_city;

		public String getTaxable_city() {
			return this.taxable_city;
		}

		public String taxable_region;

		public String getTaxable_region() {
			return this.taxable_region;
		}

		public String taxable_postal_code;

		public String getTaxable_postal_code() {
			return this.taxable_postal_code;
		}

		public String taxable_country;

		public String getTaxable_country() {
			return this.taxable_country;
		}

		public String order_invoice_uid;

		public String getOrder_invoice_uid() {
			return this.order_invoice_uid;
		}

		public String order_source;

		public String getOrder_source() {
			return this.order_source;
		}

		public java.util.Date created_datetime;

		public java.util.Date getCreated_datetime() {
			return this.created_datetime;
		}

		public String created_by_user;

		public String getCreated_by_user() {
			return this.created_by_user;
		}

		public java.util.Date updated_datetime;

		public java.util.Date getUpdated_datetime() {
			return this.updated_datetime;
		}

		public String updated_by_user;

		public String getUpdated_by_user() {
			return this.updated_by_user;
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ORDER_ETL_TF_ETL.length) {
					if (length < 1024
							&& commonByteArray_ORDER_ETL_TF_ETL.length == 0) {
						commonByteArray_ORDER_ETL_TF_ETL = new byte[1024];
					} else {
						commonByteArray_ORDER_ETL_TF_ETL = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ORDER_ETL_TF_ETL, 0, length);
				strReturn = new String(commonByteArray_ORDER_ETL_TF_ETL, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ORDER_ETL_TF_ETL) {

				try {

					int length = 0;

					length = dis.readByte();
					if (length == -1) {
						this.order_header_dimension_uid = null;
					} else {
						this.order_header_dimension_uid = dis.readLong();
					}

					this.source_system_order_header_uid = (BigDecimal) dis
							.readObject();

					this.order_number = (BigDecimal) dis.readObject();

					this.licensee_oracle_party_number = (BigDecimal) dis
							.readObject();

					this.order_date = readDate(dis);

					this.order_channel = readString(dis);

					this.organization_name = readString(dis);

					this.organization_location_country_code = readString(dis);

					this.organization_location_name = readString(dis);

					this.taxable_city = readString(dis);

					this.taxable_region = readString(dis);

					this.taxable_postal_code = readString(dis);

					this.taxable_country = readString(dis);

					this.order_invoice_uid = readString(dis);

					this.order_source = readString(dis);

					this.created_datetime = readDate(dis);

					this.created_by_user = readString(dis);

					this.updated_datetime = readDate(dis);

					this.updated_by_user = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Long

				if (this.order_header_dimension_uid == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.order_header_dimension_uid);
				}

				// BigDecimal

				dos.writeObject(this.source_system_order_header_uid);

				// BigDecimal

				dos.writeObject(this.order_number);

				// BigDecimal

				dos.writeObject(this.licensee_oracle_party_number);

				// java.util.Date

				writeDate(this.order_date, dos);

				// String

				writeString(this.order_channel, dos);

				// String

				writeString(this.organization_name, dos);

				// String

				writeString(this.organization_location_country_code, dos);

				// String

				writeString(this.organization_location_name, dos);

				// String

				writeString(this.taxable_city, dos);

				// String

				writeString(this.taxable_region, dos);

				// String

				writeString(this.taxable_postal_code, dos);

				// String

				writeString(this.taxable_country, dos);

				// String

				writeString(this.order_invoice_uid, dos);

				// String

				writeString(this.order_source, dos);

				// java.util.Date

				writeDate(this.created_datetime, dos);

				// String

				writeString(this.created_by_user, dos);

				// java.util.Date

				writeDate(this.updated_datetime, dos);

				// String

				writeString(this.updated_by_user, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("order_header_dimension_uid="
					+ String.valueOf(order_header_dimension_uid));
			sb.append(",source_system_order_header_uid="
					+ String.valueOf(source_system_order_header_uid));
			sb.append(",order_number=" + String.valueOf(order_number));
			sb.append(",licensee_oracle_party_number="
					+ String.valueOf(licensee_oracle_party_number));
			sb.append(",order_date=" + String.valueOf(order_date));
			sb.append(",order_channel=" + order_channel);
			sb.append(",organization_name=" + organization_name);
			sb.append(",organization_location_country_code="
					+ organization_location_country_code);
			sb.append(",organization_location_name="
					+ organization_location_name);
			sb.append(",taxable_city=" + taxable_city);
			sb.append(",taxable_region=" + taxable_region);
			sb.append(",taxable_postal_code=" + taxable_postal_code);
			sb.append(",taxable_country=" + taxable_country);
			sb.append(",order_invoice_uid=" + order_invoice_uid);
			sb.append(",order_source=" + order_source);
			sb.append(",created_datetime=" + String.valueOf(created_datetime));
			sb.append(",created_by_user=" + created_by_user);
			sb.append(",updated_datetime=" + String.valueOf(updated_datetime));
			sb.append(",updated_by_user=" + updated_by_user);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row6Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_6Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDBInput_6_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row6Struct row6 = new row6Struct();

				/**
				 * [tDBOutput_6 begin ] start
				 */

				ok_Hash.put("tDBOutput_6", false);
				start_Hash.put("tDBOutput_6", System.currentTimeMillis());

				currentComponent = "tDBOutput_6";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row6" + iterateId, 0, 0);

					}
				}

				int tos_count_tDBOutput_6 = 0;

				String dbschema_tDBOutput_6 = null;
				dbschema_tDBOutput_6 = "staging";

				String tableName_tDBOutput_6 = null;
				if (dbschema_tDBOutput_6 == null
						|| dbschema_tDBOutput_6.trim().length() == 0) {
					tableName_tDBOutput_6 = "stg_order_header_dimension";
				} else {
					tableName_tDBOutput_6 = dbschema_tDBOutput_6 + "\".\""
							+ "stg_order_header_dimension";
				}

				int nb_line_tDBOutput_6 = 0;
				int nb_line_update_tDBOutput_6 = 0;
				int nb_line_inserted_tDBOutput_6 = 0;
				int nb_line_deleted_tDBOutput_6 = 0;
				int nb_line_rejected_tDBOutput_6 = 0;

				int deletedCount_tDBOutput_6 = 0;
				int updatedCount_tDBOutput_6 = 0;
				int insertedCount_tDBOutput_6 = 0;
				int rejectedCount_tDBOutput_6 = 0;

				boolean whetherReject_tDBOutput_6 = false;

				java.sql.Connection conn_tDBOutput_6 = null;
				String dbUser_tDBOutput_6 = null;

				java.lang.Class.forName("org.postgresql.Driver");
				String url_tDBOutput_6 = "jdbc:postgresql://" + "localhost"
						+ ":" + "5432" + "/" + "rup";
				dbUser_tDBOutput_6 = "rup";

				final String decryptedPassword_tDBOutput_6 = routines.system.PasswordEncryptUtil
						.decryptPassword("544d653f2c2bdc61");

				String dbPwd_tDBOutput_6 = decryptedPassword_tDBOutput_6;

				conn_tDBOutput_6 = java.sql.DriverManager.getConnection(
						url_tDBOutput_6, dbUser_tDBOutput_6, dbPwd_tDBOutput_6);

				resourceMap.put("conn_tDBOutput_6", conn_tDBOutput_6);
				conn_tDBOutput_6.setAutoCommit(false);
				int commitEvery_tDBOutput_6 = 10000;
				int commitCounter_tDBOutput_6 = 0;

				int batchSize_tDBOutput_6 = 10000;
				int batchSizeCounter_tDBOutput_6 = 0;

				int count_tDBOutput_6 = 0;
				String insert_tDBOutput_6 = "INSERT INTO \""
						+ tableName_tDBOutput_6
						+ "\" (\"order_header_dimension_uid\",\"source_system_order_header_uid\",\"order_number\",\"licensee_oracle_party_number\",\"order_date\",\"order_channel\",\"organization_name\",\"organization_location_country_code\",\"organization_location_name\",\"taxable_city\",\"taxable_region\",\"taxable_postal_code\",\"taxable_country\",\"order_invoice_uid\",\"order_source\",\"created_datetime\",\"created_by_user\",\"updated_datetime\",\"updated_by_user\") VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

				java.sql.PreparedStatement pstmt_tDBOutput_6 = conn_tDBOutput_6
						.prepareStatement(insert_tDBOutput_6);
				resourceMap.put("pstmt_tDBOutput_6", pstmt_tDBOutput_6);

				/**
				 * [tDBOutput_6 begin ] stop
				 */

				/**
				 * [tDBInput_6 begin ] start
				 */

				ok_Hash.put("tDBInput_6", false);
				start_Hash.put("tDBInput_6", System.currentTimeMillis());

				currentComponent = "tDBInput_6";

				int tos_count_tDBInput_6 = 0;

				int nb_line_tDBInput_6 = 0;
				java.sql.Connection conn_tDBInput_6 = null;
				String driverClass_tDBInput_6 = "org.postgresql.Driver";
				java.lang.Class.forName(driverClass_tDBInput_6);
				String dbUser_tDBInput_6 = "rup";

				final String decryptedPassword_tDBInput_6 = routines.system.PasswordEncryptUtil
						.decryptPassword("544d653f2c2bdc61");

				String dbPwd_tDBInput_6 = decryptedPassword_tDBInput_6;

				String url_tDBInput_6 = "jdbc:postgresql://" + "localhost"
						+ ":" + "5432" + "/" + "rup";

				conn_tDBInput_6 = java.sql.DriverManager.getConnection(
						url_tDBInput_6, dbUser_tDBInput_6, dbPwd_tDBInput_6);

				conn_tDBInput_6.setAutoCommit(false);

				java.sql.Statement stmt_tDBInput_6 = conn_tDBInput_6
						.createStatement();

				String dbquery_tDBInput_6 = "SELECT nextval('staging.order_header_dimension_seq') as order_header_dimension_uid,\n       ordernumber as source_system"
						+ "_order_header_uid,\n       ordernumber as order_number,\n       licenseepartynumber as licensee_oracle_party_number,\n     "
						+ "  orderdate as order_date,\n       orderchannel as order_channel,\n       organizationname as organization_name,\n       or"
						+ "glocationcountrycode as organization_location_country_code,\n       orglocationname as organization_location_name,\n      "
						+ " taxablecity as taxable_city,\n       taxableregion as taxable_region,\n       taxablepostalcode as taxable_postal_code,\n "
						+ "      taxablecountry as taxable_country,\n       orderinvoiceuid as order_invoice_uid,\n       ordersource as order_source"
						+ ",\n       createddatetime as created_datetime,\n       createduser as created_by_user,\n       updateddatetime as updated_d"
						+ "atetime,\n       updateduser as updated_by_user\nFROM staging.stg_tf_rupodm_tforderheader";

				globalMap.put("tDBInput_6_QUERY", dbquery_tDBInput_6);
				java.sql.ResultSet rs_tDBInput_6 = null;

				try {
					rs_tDBInput_6 = stmt_tDBInput_6
							.executeQuery(dbquery_tDBInput_6);
					java.sql.ResultSetMetaData rsmd_tDBInput_6 = rs_tDBInput_6
							.getMetaData();
					int colQtyInRs_tDBInput_6 = rsmd_tDBInput_6
							.getColumnCount();

					String tmpContent_tDBInput_6 = null;

					while (rs_tDBInput_6.next()) {
						nb_line_tDBInput_6++;

						if (colQtyInRs_tDBInput_6 < 1) {
							row6.order_header_dimension_uid = null;
						} else {

							if (rs_tDBInput_6.getObject(1) != null) {
								row6.order_header_dimension_uid = rs_tDBInput_6
										.getLong(1);
							} else {
								row6.order_header_dimension_uid = null;
							}
						}
						if (colQtyInRs_tDBInput_6 < 2) {
							row6.source_system_order_header_uid = null;
						} else {

							if (rs_tDBInput_6.getObject(2) != null) {
								row6.source_system_order_header_uid = rs_tDBInput_6
										.getBigDecimal(2);
							} else {
								row6.source_system_order_header_uid = null;
							}
						}
						if (colQtyInRs_tDBInput_6 < 3) {
							row6.order_number = null;
						} else {

							if (rs_tDBInput_6.getObject(3) != null) {
								row6.order_number = rs_tDBInput_6
										.getBigDecimal(3);
							} else {
								row6.order_number = null;
							}
						}
						if (colQtyInRs_tDBInput_6 < 4) {
							row6.licensee_oracle_party_number = null;
						} else {

							if (rs_tDBInput_6.getObject(4) != null) {
								row6.licensee_oracle_party_number = rs_tDBInput_6
										.getBigDecimal(4);
							} else {
								row6.licensee_oracle_party_number = null;
							}
						}
						if (colQtyInRs_tDBInput_6 < 5) {
							row6.order_date = null;
						} else {

							row6.order_date = routines.system.JDBCUtil.getDate(
									rs_tDBInput_6, 5);
						}
						if (colQtyInRs_tDBInput_6 < 6) {
							row6.order_channel = null;
						} else {

							row6.order_channel = routines.system.JDBCUtil
									.getString(rs_tDBInput_6, 6, false);
						}
						if (colQtyInRs_tDBInput_6 < 7) {
							row6.organization_name = null;
						} else {

							row6.organization_name = routines.system.JDBCUtil
									.getString(rs_tDBInput_6, 7, false);
						}
						if (colQtyInRs_tDBInput_6 < 8) {
							row6.organization_location_country_code = null;
						} else {

							row6.organization_location_country_code = routines.system.JDBCUtil
									.getString(rs_tDBInput_6, 8, false);
						}
						if (colQtyInRs_tDBInput_6 < 9) {
							row6.organization_location_name = null;
						} else {

							row6.organization_location_name = routines.system.JDBCUtil
									.getString(rs_tDBInput_6, 9, false);
						}
						if (colQtyInRs_tDBInput_6 < 10) {
							row6.taxable_city = null;
						} else {

							row6.taxable_city = routines.system.JDBCUtil
									.getString(rs_tDBInput_6, 10, false);
						}
						if (colQtyInRs_tDBInput_6 < 11) {
							row6.taxable_region = null;
						} else {

							row6.taxable_region = routines.system.JDBCUtil
									.getString(rs_tDBInput_6, 11, false);
						}
						if (colQtyInRs_tDBInput_6 < 12) {
							row6.taxable_postal_code = null;
						} else {

							row6.taxable_postal_code = routines.system.JDBCUtil
									.getString(rs_tDBInput_6, 12, false);
						}
						if (colQtyInRs_tDBInput_6 < 13) {
							row6.taxable_country = null;
						} else {

							row6.taxable_country = routines.system.JDBCUtil
									.getString(rs_tDBInput_6, 13, false);
						}
						if (colQtyInRs_tDBInput_6 < 14) {
							row6.order_invoice_uid = null;
						} else {

							row6.order_invoice_uid = routines.system.JDBCUtil
									.getString(rs_tDBInput_6, 14, false);
						}
						if (colQtyInRs_tDBInput_6 < 15) {
							row6.order_source = null;
						} else {

							row6.order_source = routines.system.JDBCUtil
									.getString(rs_tDBInput_6, 15, false);
						}
						if (colQtyInRs_tDBInput_6 < 16) {
							row6.created_datetime = null;
						} else {

							row6.created_datetime = routines.system.JDBCUtil
									.getDate(rs_tDBInput_6, 16);
						}
						if (colQtyInRs_tDBInput_6 < 17) {
							row6.created_by_user = null;
						} else {

							row6.created_by_user = routines.system.JDBCUtil
									.getString(rs_tDBInput_6, 17, false);
						}
						if (colQtyInRs_tDBInput_6 < 18) {
							row6.updated_datetime = null;
						} else {

							row6.updated_datetime = routines.system.JDBCUtil
									.getDate(rs_tDBInput_6, 18);
						}
						if (colQtyInRs_tDBInput_6 < 19) {
							row6.updated_by_user = null;
						} else {

							row6.updated_by_user = routines.system.JDBCUtil
									.getString(rs_tDBInput_6, 19, false);
						}

						/**
						 * [tDBInput_6 begin ] stop
						 */

						/**
						 * [tDBInput_6 main ] start
						 */

						currentComponent = "tDBInput_6";

						tos_count_tDBInput_6++;

						/**
						 * [tDBInput_6 main ] stop
						 */

						/**
						 * [tDBInput_6 process_data_begin ] start
						 */

						currentComponent = "tDBInput_6";

						/**
						 * [tDBInput_6 process_data_begin ] stop
						 */

						/**
						 * [tDBOutput_6 main ] start
						 */

						currentComponent = "tDBOutput_6";

						// row6
						// row6

						if (execStat) {
							runStat.updateStatOnConnection("row6" + iterateId,
									1, 1);
						}

						whetherReject_tDBOutput_6 = false;
						if (row6.order_header_dimension_uid == null) {
							pstmt_tDBOutput_6
									.setNull(1, java.sql.Types.INTEGER);
						} else {
							pstmt_tDBOutput_6.setLong(1,
									row6.order_header_dimension_uid);
						}

						pstmt_tDBOutput_6.setBigDecimal(2,
								row6.source_system_order_header_uid);

						pstmt_tDBOutput_6.setBigDecimal(3, row6.order_number);

						pstmt_tDBOutput_6.setBigDecimal(4,
								row6.licensee_oracle_party_number);

						if (row6.order_date != null) {
							pstmt_tDBOutput_6.setTimestamp(
									5,
									new java.sql.Timestamp(row6.order_date
											.getTime()));
						} else {
							pstmt_tDBOutput_6.setNull(5,
									java.sql.Types.TIMESTAMP);
						}

						if (row6.order_channel == null) {
							pstmt_tDBOutput_6
									.setNull(6, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_6.setString(6, row6.order_channel);
						}

						if (row6.organization_name == null) {
							pstmt_tDBOutput_6
									.setNull(7, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_6.setString(7,
									row6.organization_name);
						}

						if (row6.organization_location_country_code == null) {
							pstmt_tDBOutput_6
									.setNull(8, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_6.setString(8,
									row6.organization_location_country_code);
						}

						if (row6.organization_location_name == null) {
							pstmt_tDBOutput_6
									.setNull(9, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_6.setString(9,
									row6.organization_location_name);
						}

						if (row6.taxable_city == null) {
							pstmt_tDBOutput_6.setNull(10,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_6.setString(10, row6.taxable_city);
						}

						if (row6.taxable_region == null) {
							pstmt_tDBOutput_6.setNull(11,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_6
									.setString(11, row6.taxable_region);
						}

						if (row6.taxable_postal_code == null) {
							pstmt_tDBOutput_6.setNull(12,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_6.setString(12,
									row6.taxable_postal_code);
						}

						if (row6.taxable_country == null) {
							pstmt_tDBOutput_6.setNull(13,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_6.setString(13,
									row6.taxable_country);
						}

						if (row6.order_invoice_uid == null) {
							pstmt_tDBOutput_6.setNull(14,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_6.setString(14,
									row6.order_invoice_uid);
						}

						if (row6.order_source == null) {
							pstmt_tDBOutput_6.setNull(15,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_6.setString(15, row6.order_source);
						}

						if (row6.created_datetime != null) {
							pstmt_tDBOutput_6.setTimestamp(16,
									new java.sql.Timestamp(
											row6.created_datetime.getTime()));
						} else {
							pstmt_tDBOutput_6.setNull(16,
									java.sql.Types.TIMESTAMP);
						}

						if (row6.created_by_user == null) {
							pstmt_tDBOutput_6.setNull(17,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_6.setString(17,
									row6.created_by_user);
						}

						if (row6.updated_datetime != null) {
							pstmt_tDBOutput_6.setTimestamp(18,
									new java.sql.Timestamp(
											row6.updated_datetime.getTime()));
						} else {
							pstmt_tDBOutput_6.setNull(18,
									java.sql.Types.TIMESTAMP);
						}

						if (row6.updated_by_user == null) {
							pstmt_tDBOutput_6.setNull(19,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_6.setString(19,
									row6.updated_by_user);
						}

						pstmt_tDBOutput_6.addBatch();
						nb_line_tDBOutput_6++;

						batchSizeCounter_tDBOutput_6++;

						if ((batchSize_tDBOutput_6 > 0)
								&& (batchSize_tDBOutput_6 <= batchSizeCounter_tDBOutput_6)) {
							try {
								int countSum_tDBOutput_6 = 0;

								for (int countEach_tDBOutput_6 : pstmt_tDBOutput_6
										.executeBatch()) {
									countSum_tDBOutput_6 += (countEach_tDBOutput_6 < 0 ? 0
											: countEach_tDBOutput_6);
								}

								insertedCount_tDBOutput_6 += countSum_tDBOutput_6;

								batchSizeCounter_tDBOutput_6 = 0;
							} catch (java.sql.BatchUpdateException e_tDBOutput_6) {
								java.sql.SQLException ne_tDBOutput_6 = e_tDBOutput_6
										.getNextException(), sqle_tDBOutput_6 = null;
								String errormessage_tDBOutput_6;
								if (ne_tDBOutput_6 != null) {
									// build new exception to provide the
									// original cause
									sqle_tDBOutput_6 = new java.sql.SQLException(
											e_tDBOutput_6.getMessage()
													+ "\ncaused by: "
													+ ne_tDBOutput_6
															.getMessage(),
											ne_tDBOutput_6.getSQLState(),
											ne_tDBOutput_6.getErrorCode(),
											ne_tDBOutput_6);
									errormessage_tDBOutput_6 = sqle_tDBOutput_6
											.getMessage();
								} else {
									errormessage_tDBOutput_6 = e_tDBOutput_6
											.getMessage();
								}

								int countSum_tDBOutput_6 = 0;
								for (int countEach_tDBOutput_6 : e_tDBOutput_6
										.getUpdateCounts()) {
									countSum_tDBOutput_6 += (countEach_tDBOutput_6 < 0 ? 0
											: countEach_tDBOutput_6);
								}

								insertedCount_tDBOutput_6 += countSum_tDBOutput_6;

								System.err.println(errormessage_tDBOutput_6);

							}
						}

						commitCounter_tDBOutput_6++;
						if (commitEvery_tDBOutput_6 <= commitCounter_tDBOutput_6) {
							if ((batchSize_tDBOutput_6 > 0)
									&& (batchSizeCounter_tDBOutput_6 > 0)) {
								try {
									int countSum_tDBOutput_6 = 0;

									for (int countEach_tDBOutput_6 : pstmt_tDBOutput_6
											.executeBatch()) {
										countSum_tDBOutput_6 += (countEach_tDBOutput_6 < 0 ? 0
												: countEach_tDBOutput_6);
									}

									insertedCount_tDBOutput_6 += countSum_tDBOutput_6;

									batchSizeCounter_tDBOutput_6 = 0;
								} catch (java.sql.BatchUpdateException e_tDBOutput_6) {
									java.sql.SQLException ne_tDBOutput_6 = e_tDBOutput_6
											.getNextException(), sqle_tDBOutput_6 = null;
									String errormessage_tDBOutput_6;
									if (ne_tDBOutput_6 != null) {
										// build new exception to provide the
										// original cause
										sqle_tDBOutput_6 = new java.sql.SQLException(
												e_tDBOutput_6.getMessage()
														+ "\ncaused by: "
														+ ne_tDBOutput_6
																.getMessage(),
												ne_tDBOutput_6.getSQLState(),
												ne_tDBOutput_6.getErrorCode(),
												ne_tDBOutput_6);
										errormessage_tDBOutput_6 = sqle_tDBOutput_6
												.getMessage();
									} else {
										errormessage_tDBOutput_6 = e_tDBOutput_6
												.getMessage();
									}

									int countSum_tDBOutput_6 = 0;
									for (int countEach_tDBOutput_6 : e_tDBOutput_6
											.getUpdateCounts()) {
										countSum_tDBOutput_6 += (countEach_tDBOutput_6 < 0 ? 0
												: countEach_tDBOutput_6);
									}

									insertedCount_tDBOutput_6 += countSum_tDBOutput_6;

									System.err
											.println(errormessage_tDBOutput_6);

								}
							}
							conn_tDBOutput_6.commit();

							commitCounter_tDBOutput_6 = 0;
						}

						tos_count_tDBOutput_6++;

						/**
						 * [tDBOutput_6 main ] stop
						 */

						/**
						 * [tDBOutput_6 process_data_begin ] start
						 */

						currentComponent = "tDBOutput_6";

						/**
						 * [tDBOutput_6 process_data_begin ] stop
						 */

						/**
						 * [tDBOutput_6 process_data_end ] start
						 */

						currentComponent = "tDBOutput_6";

						/**
						 * [tDBOutput_6 process_data_end ] stop
						 */

						/**
						 * [tDBInput_6 process_data_end ] start
						 */

						currentComponent = "tDBInput_6";

						/**
						 * [tDBInput_6 process_data_end ] stop
						 */

						/**
						 * [tDBInput_6 end ] start
						 */

						currentComponent = "tDBInput_6";

					}
				} finally {
					if (rs_tDBInput_6 != null) {
						rs_tDBInput_6.close();
					}
					if (stmt_tDBInput_6 != null) {
						stmt_tDBInput_6.close();
					}
					if (conn_tDBInput_6 != null && !conn_tDBInput_6.isClosed()) {

						conn_tDBInput_6.commit();

						conn_tDBInput_6.close();

					}

				}
				globalMap.put("tDBInput_6_NB_LINE", nb_line_tDBInput_6);

				ok_Hash.put("tDBInput_6", true);
				end_Hash.put("tDBInput_6", System.currentTimeMillis());

				/**
				 * [tDBInput_6 end ] stop
				 */

				/**
				 * [tDBOutput_6 end ] start
				 */

				currentComponent = "tDBOutput_6";

				try {
					int countSum_tDBOutput_6 = 0;
					if (pstmt_tDBOutput_6 != null
							&& batchSizeCounter_tDBOutput_6 > 0) {

						for (int countEach_tDBOutput_6 : pstmt_tDBOutput_6
								.executeBatch()) {
							countSum_tDBOutput_6 += (countEach_tDBOutput_6 < 0 ? 0
									: countEach_tDBOutput_6);
						}

					}

					insertedCount_tDBOutput_6 += countSum_tDBOutput_6;

				} catch (java.sql.BatchUpdateException e_tDBOutput_6) {
					java.sql.SQLException ne_tDBOutput_6 = e_tDBOutput_6
							.getNextException(), sqle_tDBOutput_6 = null;
					String errormessage_tDBOutput_6;
					if (ne_tDBOutput_6 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_6 = new java.sql.SQLException(
								e_tDBOutput_6.getMessage() + "\ncaused by: "
										+ ne_tDBOutput_6.getMessage(),
								ne_tDBOutput_6.getSQLState(),
								ne_tDBOutput_6.getErrorCode(), ne_tDBOutput_6);
						errormessage_tDBOutput_6 = sqle_tDBOutput_6
								.getMessage();
					} else {
						errormessage_tDBOutput_6 = e_tDBOutput_6.getMessage();
					}

					int countSum_tDBOutput_6 = 0;
					for (int countEach_tDBOutput_6 : e_tDBOutput_6
							.getUpdateCounts()) {
						countSum_tDBOutput_6 += (countEach_tDBOutput_6 < 0 ? 0
								: countEach_tDBOutput_6);
					}

					insertedCount_tDBOutput_6 += countSum_tDBOutput_6;

					System.err.println(errormessage_tDBOutput_6);

				}

				if (pstmt_tDBOutput_6 != null) {

					pstmt_tDBOutput_6.close();
					resourceMap.remove("pstmt_tDBOutput_6");
				}
				resourceMap.put("statementClosed_tDBOutput_6", true);

				conn_tDBOutput_6.commit();

				conn_tDBOutput_6.close();

				resourceMap.put("finish_tDBOutput_6", true);

				nb_line_deleted_tDBOutput_6 = nb_line_deleted_tDBOutput_6
						+ deletedCount_tDBOutput_6;
				nb_line_update_tDBOutput_6 = nb_line_update_tDBOutput_6
						+ updatedCount_tDBOutput_6;
				nb_line_inserted_tDBOutput_6 = nb_line_inserted_tDBOutput_6
						+ insertedCount_tDBOutput_6;
				nb_line_rejected_tDBOutput_6 = nb_line_rejected_tDBOutput_6
						+ rejectedCount_tDBOutput_6;

				globalMap.put("tDBOutput_6_NB_LINE", nb_line_tDBOutput_6);
				globalMap.put("tDBOutput_6_NB_LINE_UPDATED",
						nb_line_update_tDBOutput_6);
				globalMap.put("tDBOutput_6_NB_LINE_INSERTED",
						nb_line_inserted_tDBOutput_6);
				globalMap.put("tDBOutput_6_NB_LINE_DELETED",
						nb_line_deleted_tDBOutput_6);
				globalMap.put("tDBOutput_6_NB_LINE_REJECTED",
						nb_line_rejected_tDBOutput_6);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row6" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tDBOutput_6", true);
				end_Hash.put("tDBOutput_6", System.currentTimeMillis());

				/**
				 * [tDBOutput_6 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_6 finally ] start
				 */

				currentComponent = "tDBInput_6";

				/**
				 * [tDBInput_6 finally ] stop
				 */

				/**
				 * [tDBOutput_6 finally ] start
				 */

				currentComponent = "tDBOutput_6";

				try {
					if (resourceMap.get("statementClosed_tDBOutput_6") == null) {
						java.sql.PreparedStatement pstmtToClose_tDBOutput_6 = null;
						if ((pstmtToClose_tDBOutput_6 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmt_tDBOutput_6")) != null) {
							pstmtToClose_tDBOutput_6.close();
						}
					}
				} finally {
					if (resourceMap.get("finish_tDBOutput_6") == null) {
						java.sql.Connection ctn_tDBOutput_6 = null;
						if ((ctn_tDBOutput_6 = (java.sql.Connection) resourceMap
								.get("conn_tDBOutput_6")) != null) {
							try {
								ctn_tDBOutput_6.close();
							} catch (java.sql.SQLException sqlEx_tDBOutput_6) {
								String errorMessage_tDBOutput_6 = "failed to close the connection in tDBOutput_6 :"
										+ sqlEx_tDBOutput_6.getMessage();
								System.err.println(errorMessage_tDBOutput_6);
							}
						}
					}
				}

				/**
				 * [tDBOutput_6 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_6_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private SyncInt runningThreadCount = new SyncInt();

	private class SyncInt {
		private int count = 0;

		public synchronized void add(int i) {
			count += i;
		}

		public synchronized int getCount() {
			return count;
		}
	}

	private PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final TF_ETL TF_ETLClass = new TF_ETL();

		int exitCode = TF_ETLClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket
				// can't open
				System.err.println("The statistics socket port " + portStats
						+ " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}

		try {
			// call job/subjob with an existing context, like:
			// --context=production. if without this parameter, there will use
			// the default context instead.
			java.io.InputStream inContext = TF_ETL.class.getClassLoader()
					.getResourceAsStream(
							"order_etl/tf_etl_0_1/contexts/" + contextStr
									+ ".properties");
			if (inContext == null) {
				inContext = TF_ETL.class.getClassLoader().getResourceAsStream(
						"config/contexts/" + contextStr + ".properties");
			}
			if (inContext != null) {
				// defaultProps is in order to keep the original context value
				defaultProps.load(inContext);
				inContext.close();
				context = new ContextProperties(defaultProps);
			} else if (!isDefaultContext) {
				// print info and job continue to run, for case: context_param
				// is not empty.
				System.err.println("Could not find the context " + contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param
							.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil
				.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName,
				jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName,
				parent_part_launcher, Thread.currentThread().getId() + "", "",
				"", "", "",
				resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs
		final Thread launchingThread = Thread.currentThread();
		runningThreadCount.add(1);
		new Thread() {
			public void run() {
				java.util.Map threadRunResultMap = new java.util.HashMap();
				threadRunResultMap.put("errorCode", null);
				threadRunResultMap.put("status", "");
				threadLocal.set(threadRunResultMap);

				try {
					((java.util.Map) threadLocal.get()).put("errorCode", null);
					tDBConnection_3Process(globalMap);
					if (!"failure".equals(((java.util.Map) threadLocal.get())
							.get("status"))) {
						((java.util.Map) threadLocal.get())
								.put("status", "end");
					}
				} catch (TalendException e_tDBConnection_3) {
					globalMap.put("tDBConnection_3_SUBPROCESS_STATE", -1);

					e_tDBConnection_3.printStackTrace();

				} catch (java.lang.Error e_tDBConnection_3) {
					globalMap.put("tDBConnection_3_SUBPROCESS_STATE", -1);
					((java.util.Map) threadLocal.get())
							.put("status", "failure");
					throw e_tDBConnection_3;

				} finally {
					Integer localErrorCode = (Integer) (((java.util.Map) threadLocal
							.get()).get("errorCode"));
					String localStatus = (String) (((java.util.Map) threadLocal
							.get()).get("status"));
					if (localErrorCode != null) {
						if (errorCode == null
								|| localErrorCode.compareTo(errorCode) > 0) {
							errorCode = localErrorCode;
						}
					}
					if (!status.equals("failure")) {
						status = localStatus;
					}

					if ("true".equals(((java.util.Map) threadLocal.get())
							.get("JobInterrupted"))) {
						launchingThread.interrupt();
					}

					runningThreadCount.add(-1);
				}
			}
		}.start();

		runningThreadCount.add(1);
		new Thread() {
			public void run() {
				java.util.Map threadRunResultMap = new java.util.HashMap();
				threadRunResultMap.put("errorCode", null);
				threadRunResultMap.put("status", "");
				threadLocal.set(threadRunResultMap);

				try {
					((java.util.Map) threadLocal.get()).put("errorCode", null);
					tDBConnection_4Process(globalMap);
					if (!"failure".equals(((java.util.Map) threadLocal.get())
							.get("status"))) {
						((java.util.Map) threadLocal.get())
								.put("status", "end");
					}
				} catch (TalendException e_tDBConnection_4) {
					globalMap.put("tDBConnection_4_SUBPROCESS_STATE", -1);

					e_tDBConnection_4.printStackTrace();

				} catch (java.lang.Error e_tDBConnection_4) {
					globalMap.put("tDBConnection_4_SUBPROCESS_STATE", -1);
					((java.util.Map) threadLocal.get())
							.put("status", "failure");
					throw e_tDBConnection_4;

				} finally {
					Integer localErrorCode = (Integer) (((java.util.Map) threadLocal
							.get()).get("errorCode"));
					String localStatus = (String) (((java.util.Map) threadLocal
							.get()).get("status"));
					if (localErrorCode != null) {
						if (errorCode == null
								|| localErrorCode.compareTo(errorCode) > 0) {
							errorCode = localErrorCode;
						}
					}
					if (!status.equals("failure")) {
						status = localStatus;
					}

					if ("true".equals(((java.util.Map) threadLocal.get())
							.get("JobInterrupted"))) {
						launchingThread.interrupt();
					}

					runningThreadCount.add(-1);
				}
			}
		}.start();

		runningThreadCount.add(1);
		new Thread() {
			public void run() {
				java.util.Map threadRunResultMap = new java.util.HashMap();
				threadRunResultMap.put("errorCode", null);
				threadRunResultMap.put("status", "");
				threadLocal.set(threadRunResultMap);

				try {
					((java.util.Map) threadLocal.get()).put("errorCode", null);
					tDBConnection_5Process(globalMap);
					if (!"failure".equals(((java.util.Map) threadLocal.get())
							.get("status"))) {
						((java.util.Map) threadLocal.get())
								.put("status", "end");
					}
				} catch (TalendException e_tDBConnection_5) {
					globalMap.put("tDBConnection_5_SUBPROCESS_STATE", -1);

					e_tDBConnection_5.printStackTrace();

				} catch (java.lang.Error e_tDBConnection_5) {
					globalMap.put("tDBConnection_5_SUBPROCESS_STATE", -1);
					((java.util.Map) threadLocal.get())
							.put("status", "failure");
					throw e_tDBConnection_5;

				} finally {
					Integer localErrorCode = (Integer) (((java.util.Map) threadLocal
							.get()).get("errorCode"));
					String localStatus = (String) (((java.util.Map) threadLocal
							.get()).get("status"));
					if (localErrorCode != null) {
						if (errorCode == null
								|| localErrorCode.compareTo(errorCode) > 0) {
							errorCode = localErrorCode;
						}
					}
					if (!status.equals("failure")) {
						status = localStatus;
					}

					if ("true".equals(((java.util.Map) threadLocal.get())
							.get("JobInterrupted"))) {
						launchingThread.interrupt();
					}

					runningThreadCount.add(-1);
				}
			}
		}.start();

		boolean interrupted = false;
		while (runningThreadCount.getCount() > 0) {
			try {
				Thread.sleep(10);
			} catch (java.lang.InterruptedException e) {
				interrupted = true;
			} catch (java.lang.Exception e) {
				e.printStackTrace();
			}
		}

		if (interrupted) {
			Thread.currentThread().interrupt();
		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println((endUsedMemory - startUsedMemory)
					+ " bytes memory increase when running : TF_ETL");
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher,
				Thread.currentThread().getId() + "", "", "" + returnCode, "",
				"", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {
		closeSqlDbConnections();

	}

	private void closeSqlDbConnections() {
		try {
			Object obj_conn;
			obj_conn = globalMap.remove("conn_tDBConnection_3");
			if (null != obj_conn) {
				((java.sql.Connection) obj_conn).close();
			}
			obj_conn = globalMap.remove("conn_tDBConnection_4");
			if (null != obj_conn) {
				((java.sql.Connection) obj_conn).close();
			}
			obj_conn = globalMap.remove("conn_tDBConnection_5");
			if (null != obj_conn) {
				((java.sql.Connection) obj_conn).close();
			}
		} catch (java.lang.Exception e) {
		}
	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
		connections.put("conn_tDBConnection_3",
				globalMap.get("conn_tDBConnection_3"));
		connections.put("conn_tDBConnection_4",
				globalMap.get("conn_tDBConnection_4"));
		connections.put("conn_tDBConnection_5",
				globalMap.get("conn_tDBConnection_5"));

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		}

	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" },
			{ "\\'", "\'" }, { "\\r", "\r" }, { "\\f", "\f" }, { "\\b", "\b" },
			{ "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex,
							index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left
			// into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 318193 characters generated by Talend Open Studio for Data Integration on the
 * March 20, 2019 11:07:16 AM EDT
 ************************************************************************************************/
